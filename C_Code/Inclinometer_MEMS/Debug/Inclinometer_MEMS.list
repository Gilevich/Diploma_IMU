
Inclinometer_MEMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c4f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  0801c6c8  0801c6c8  0002c6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d208  0801d208  00031428  2**0
                  CONTENTS
  4 .ARM          00000008  0801d208  0801d208  0002d208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d210  0801d210  00031428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d210  0801d210  0002d210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d214  0801d214  0002d214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001428  20000000  0801d218  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001618  20001428  0801e640  00031428  2**3
                  ALLOC
 10 ._user_heap_stack 00008200  20002a40  0801e640  00032a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031428  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d320  00000000  00000000  00031458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e33  00000000  00000000  0006e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002610  00000000  00000000  000735b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002440  00000000  00000000  00075bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c27e  00000000  00000000  00078000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026083  00000000  00000000  000a427e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109144  00000000  00000000  000ca301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d3445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be5c  00000000  00000000  001d3498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001428 	.word	0x20001428
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801c6b0 	.word	0x0801c6b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000142c 	.word	0x2000142c
 800020c:	0801c6b0 	.word	0x0801c6b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9ef 	b.w	80012e4 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a4 	b.w	80012e4 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	4604      	mov	r4, r0
 8001028:	468c      	mov	ip, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 8083 	bne.w	8001136 <__udivmoddi4+0x116>
 8001030:	428a      	cmp	r2, r1
 8001032:	4617      	mov	r7, r2
 8001034:	d947      	bls.n	80010c6 <__udivmoddi4+0xa6>
 8001036:	fab2 f282 	clz	r2, r2
 800103a:	b142      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103c:	f1c2 0020 	rsb	r0, r2, #32
 8001040:	fa24 f000 	lsr.w	r0, r4, r0
 8001044:	4091      	lsls	r1, r2
 8001046:	4097      	lsls	r7, r2
 8001048:	ea40 0c01 	orr.w	ip, r0, r1
 800104c:	4094      	lsls	r4, r2
 800104e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001052:	0c23      	lsrs	r3, r4, #16
 8001054:	fbbc f6f8 	udiv	r6, ip, r8
 8001058:	fa1f fe87 	uxth.w	lr, r7
 800105c:	fb08 c116 	mls	r1, r8, r6, ip
 8001060:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001064:	fb06 f10e 	mul.w	r1, r6, lr
 8001068:	4299      	cmp	r1, r3
 800106a:	d909      	bls.n	8001080 <__udivmoddi4+0x60>
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	f106 30ff 	add.w	r0, r6, #4294967295
 8001072:	f080 8119 	bcs.w	80012a8 <__udivmoddi4+0x288>
 8001076:	4299      	cmp	r1, r3
 8001078:	f240 8116 	bls.w	80012a8 <__udivmoddi4+0x288>
 800107c:	3e02      	subs	r6, #2
 800107e:	443b      	add	r3, r7
 8001080:	1a5b      	subs	r3, r3, r1
 8001082:	b2a4      	uxth	r4, r4
 8001084:	fbb3 f0f8 	udiv	r0, r3, r8
 8001088:	fb08 3310 	mls	r3, r8, r0, r3
 800108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001090:	fb00 fe0e 	mul.w	lr, r0, lr
 8001094:	45a6      	cmp	lr, r4
 8001096:	d909      	bls.n	80010ac <__udivmoddi4+0x8c>
 8001098:	193c      	adds	r4, r7, r4
 800109a:	f100 33ff 	add.w	r3, r0, #4294967295
 800109e:	f080 8105 	bcs.w	80012ac <__udivmoddi4+0x28c>
 80010a2:	45a6      	cmp	lr, r4
 80010a4:	f240 8102 	bls.w	80012ac <__udivmoddi4+0x28c>
 80010a8:	3802      	subs	r0, #2
 80010aa:	443c      	add	r4, r7
 80010ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80010b0:	eba4 040e 	sub.w	r4, r4, lr
 80010b4:	2600      	movs	r6, #0
 80010b6:	b11d      	cbz	r5, 80010c0 <__udivmoddi4+0xa0>
 80010b8:	40d4      	lsrs	r4, r2
 80010ba:	2300      	movs	r3, #0
 80010bc:	e9c5 4300 	strd	r4, r3, [r5]
 80010c0:	4631      	mov	r1, r6
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	b902      	cbnz	r2, 80010ca <__udivmoddi4+0xaa>
 80010c8:	deff      	udf	#255	; 0xff
 80010ca:	fab2 f282 	clz	r2, r2
 80010ce:	2a00      	cmp	r2, #0
 80010d0:	d150      	bne.n	8001174 <__udivmoddi4+0x154>
 80010d2:	1bcb      	subs	r3, r1, r7
 80010d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010d8:	fa1f f887 	uxth.w	r8, r7
 80010dc:	2601      	movs	r6, #1
 80010de:	fbb3 fcfe 	udiv	ip, r3, lr
 80010e2:	0c21      	lsrs	r1, r4, #16
 80010e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80010e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010ec:	fb08 f30c 	mul.w	r3, r8, ip
 80010f0:	428b      	cmp	r3, r1
 80010f2:	d907      	bls.n	8001104 <__udivmoddi4+0xe4>
 80010f4:	1879      	adds	r1, r7, r1
 80010f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80010fa:	d202      	bcs.n	8001102 <__udivmoddi4+0xe2>
 80010fc:	428b      	cmp	r3, r1
 80010fe:	f200 80e9 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 8001102:	4684      	mov	ip, r0
 8001104:	1ac9      	subs	r1, r1, r3
 8001106:	b2a3      	uxth	r3, r4
 8001108:	fbb1 f0fe 	udiv	r0, r1, lr
 800110c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001110:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8001114:	fb08 f800 	mul.w	r8, r8, r0
 8001118:	45a0      	cmp	r8, r4
 800111a:	d907      	bls.n	800112c <__udivmoddi4+0x10c>
 800111c:	193c      	adds	r4, r7, r4
 800111e:	f100 33ff 	add.w	r3, r0, #4294967295
 8001122:	d202      	bcs.n	800112a <__udivmoddi4+0x10a>
 8001124:	45a0      	cmp	r8, r4
 8001126:	f200 80d9 	bhi.w	80012dc <__udivmoddi4+0x2bc>
 800112a:	4618      	mov	r0, r3
 800112c:	eba4 0408 	sub.w	r4, r4, r8
 8001130:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001134:	e7bf      	b.n	80010b6 <__udivmoddi4+0x96>
 8001136:	428b      	cmp	r3, r1
 8001138:	d909      	bls.n	800114e <__udivmoddi4+0x12e>
 800113a:	2d00      	cmp	r5, #0
 800113c:	f000 80b1 	beq.w	80012a2 <__udivmoddi4+0x282>
 8001140:	2600      	movs	r6, #0
 8001142:	e9c5 0100 	strd	r0, r1, [r5]
 8001146:	4630      	mov	r0, r6
 8001148:	4631      	mov	r1, r6
 800114a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800114e:	fab3 f683 	clz	r6, r3
 8001152:	2e00      	cmp	r6, #0
 8001154:	d14a      	bne.n	80011ec <__udivmoddi4+0x1cc>
 8001156:	428b      	cmp	r3, r1
 8001158:	d302      	bcc.n	8001160 <__udivmoddi4+0x140>
 800115a:	4282      	cmp	r2, r0
 800115c:	f200 80b8 	bhi.w	80012d0 <__udivmoddi4+0x2b0>
 8001160:	1a84      	subs	r4, r0, r2
 8001162:	eb61 0103 	sbc.w	r1, r1, r3
 8001166:	2001      	movs	r0, #1
 8001168:	468c      	mov	ip, r1
 800116a:	2d00      	cmp	r5, #0
 800116c:	d0a8      	beq.n	80010c0 <__udivmoddi4+0xa0>
 800116e:	e9c5 4c00 	strd	r4, ip, [r5]
 8001172:	e7a5      	b.n	80010c0 <__udivmoddi4+0xa0>
 8001174:	f1c2 0320 	rsb	r3, r2, #32
 8001178:	fa20 f603 	lsr.w	r6, r0, r3
 800117c:	4097      	lsls	r7, r2
 800117e:	fa01 f002 	lsl.w	r0, r1, r2
 8001182:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001186:	40d9      	lsrs	r1, r3
 8001188:	4330      	orrs	r0, r6
 800118a:	0c03      	lsrs	r3, r0, #16
 800118c:	fbb1 f6fe 	udiv	r6, r1, lr
 8001190:	fa1f f887 	uxth.w	r8, r7
 8001194:	fb0e 1116 	mls	r1, lr, r6, r1
 8001198:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800119c:	fb06 f108 	mul.w	r1, r6, r8
 80011a0:	4299      	cmp	r1, r3
 80011a2:	fa04 f402 	lsl.w	r4, r4, r2
 80011a6:	d909      	bls.n	80011bc <__udivmoddi4+0x19c>
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80011ae:	f080 808d 	bcs.w	80012cc <__udivmoddi4+0x2ac>
 80011b2:	4299      	cmp	r1, r3
 80011b4:	f240 808a 	bls.w	80012cc <__udivmoddi4+0x2ac>
 80011b8:	3e02      	subs	r6, #2
 80011ba:	443b      	add	r3, r7
 80011bc:	1a5b      	subs	r3, r3, r1
 80011be:	b281      	uxth	r1, r0
 80011c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80011c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80011c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011cc:	fb00 f308 	mul.w	r3, r0, r8
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d907      	bls.n	80011e4 <__udivmoddi4+0x1c4>
 80011d4:	1879      	adds	r1, r7, r1
 80011d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80011da:	d273      	bcs.n	80012c4 <__udivmoddi4+0x2a4>
 80011dc:	428b      	cmp	r3, r1
 80011de:	d971      	bls.n	80012c4 <__udivmoddi4+0x2a4>
 80011e0:	3802      	subs	r0, #2
 80011e2:	4439      	add	r1, r7
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80011ea:	e778      	b.n	80010de <__udivmoddi4+0xbe>
 80011ec:	f1c6 0c20 	rsb	ip, r6, #32
 80011f0:	fa03 f406 	lsl.w	r4, r3, r6
 80011f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80011f8:	431c      	orrs	r4, r3
 80011fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80011fe:	fa01 f306 	lsl.w	r3, r1, r6
 8001202:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8001206:	fa21 f10c 	lsr.w	r1, r1, ip
 800120a:	431f      	orrs	r7, r3
 800120c:	0c3b      	lsrs	r3, r7, #16
 800120e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001212:	fa1f f884 	uxth.w	r8, r4
 8001216:	fb0e 1119 	mls	r1, lr, r9, r1
 800121a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800121e:	fb09 fa08 	mul.w	sl, r9, r8
 8001222:	458a      	cmp	sl, r1
 8001224:	fa02 f206 	lsl.w	r2, r2, r6
 8001228:	fa00 f306 	lsl.w	r3, r0, r6
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x220>
 800122e:	1861      	adds	r1, r4, r1
 8001230:	f109 30ff 	add.w	r0, r9, #4294967295
 8001234:	d248      	bcs.n	80012c8 <__udivmoddi4+0x2a8>
 8001236:	458a      	cmp	sl, r1
 8001238:	d946      	bls.n	80012c8 <__udivmoddi4+0x2a8>
 800123a:	f1a9 0902 	sub.w	r9, r9, #2
 800123e:	4421      	add	r1, r4
 8001240:	eba1 010a 	sub.w	r1, r1, sl
 8001244:	b2bf      	uxth	r7, r7
 8001246:	fbb1 f0fe 	udiv	r0, r1, lr
 800124a:	fb0e 1110 	mls	r1, lr, r0, r1
 800124e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001252:	fb00 f808 	mul.w	r8, r0, r8
 8001256:	45b8      	cmp	r8, r7
 8001258:	d907      	bls.n	800126a <__udivmoddi4+0x24a>
 800125a:	19e7      	adds	r7, r4, r7
 800125c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001260:	d22e      	bcs.n	80012c0 <__udivmoddi4+0x2a0>
 8001262:	45b8      	cmp	r8, r7
 8001264:	d92c      	bls.n	80012c0 <__udivmoddi4+0x2a0>
 8001266:	3802      	subs	r0, #2
 8001268:	4427      	add	r7, r4
 800126a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800126e:	eba7 0708 	sub.w	r7, r7, r8
 8001272:	fba0 8902 	umull	r8, r9, r0, r2
 8001276:	454f      	cmp	r7, r9
 8001278:	46c6      	mov	lr, r8
 800127a:	4649      	mov	r1, r9
 800127c:	d31a      	bcc.n	80012b4 <__udivmoddi4+0x294>
 800127e:	d017      	beq.n	80012b0 <__udivmoddi4+0x290>
 8001280:	b15d      	cbz	r5, 800129a <__udivmoddi4+0x27a>
 8001282:	ebb3 020e 	subs.w	r2, r3, lr
 8001286:	eb67 0701 	sbc.w	r7, r7, r1
 800128a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800128e:	40f2      	lsrs	r2, r6
 8001290:	ea4c 0202 	orr.w	r2, ip, r2
 8001294:	40f7      	lsrs	r7, r6
 8001296:	e9c5 2700 	strd	r2, r7, [r5]
 800129a:	2600      	movs	r6, #0
 800129c:	4631      	mov	r1, r6
 800129e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a2:	462e      	mov	r6, r5
 80012a4:	4628      	mov	r0, r5
 80012a6:	e70b      	b.n	80010c0 <__udivmoddi4+0xa0>
 80012a8:	4606      	mov	r6, r0
 80012aa:	e6e9      	b.n	8001080 <__udivmoddi4+0x60>
 80012ac:	4618      	mov	r0, r3
 80012ae:	e6fd      	b.n	80010ac <__udivmoddi4+0x8c>
 80012b0:	4543      	cmp	r3, r8
 80012b2:	d2e5      	bcs.n	8001280 <__udivmoddi4+0x260>
 80012b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80012b8:	eb69 0104 	sbc.w	r1, r9, r4
 80012bc:	3801      	subs	r0, #1
 80012be:	e7df      	b.n	8001280 <__udivmoddi4+0x260>
 80012c0:	4608      	mov	r0, r1
 80012c2:	e7d2      	b.n	800126a <__udivmoddi4+0x24a>
 80012c4:	4660      	mov	r0, ip
 80012c6:	e78d      	b.n	80011e4 <__udivmoddi4+0x1c4>
 80012c8:	4681      	mov	r9, r0
 80012ca:	e7b9      	b.n	8001240 <__udivmoddi4+0x220>
 80012cc:	4666      	mov	r6, ip
 80012ce:	e775      	b.n	80011bc <__udivmoddi4+0x19c>
 80012d0:	4630      	mov	r0, r6
 80012d2:	e74a      	b.n	800116a <__udivmoddi4+0x14a>
 80012d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80012d8:	4439      	add	r1, r7
 80012da:	e713      	b.n	8001104 <__udivmoddi4+0xe4>
 80012dc:	3802      	subs	r0, #2
 80012de:	443c      	add	r4, r7
 80012e0:	e724      	b.n	800112c <__udivmoddi4+0x10c>
 80012e2:	bf00      	nop

080012e4 <__aeabi_idiv0>:
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <BSP_I2C1_Init+0x70>)
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <BSP_I2C1_Init+0x74>)
 80012f6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <BSP_I2C1_Init+0x78>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	4918      	ldr	r1, [pc, #96]	; (8001360 <BSP_I2C1_Init+0x78>)
 8001300:	600a      	str	r2, [r1, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d122      	bne.n	800134c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <BSP_I2C1_Init+0x70>)
 8001308:	f004 fc14 	bl	8005b34 <HAL_I2C_GetState>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d11c      	bne.n	800134c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <BSP_I2C1_Init+0x70>)
 8001314:	f000 f8fe 	bl	8001514 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800131e:	480e      	ldr	r0, [pc, #56]	; (8001358 <BSP_I2C1_Init+0x70>)
 8001320:	f000 f8b4 	bl	800148c <MX_I2C1_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800132a:	f06f 0307 	mvn.w	r3, #7
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	e00c      	b.n	800134c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001332:	2100      	movs	r1, #0
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <BSP_I2C1_Init+0x70>)
 8001336:	f004 fe33 	bl	8005fa0 <HAL_I2CEx_ConfigAnalogFilter>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001340:	f06f 0307 	mvn.w	r3, #7
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	e001      	b.n	800134c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800134c:	687b      	ldr	r3, [r7, #4]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20002028 	.word	0x20002028
 800135c:	40005400 	.word	0x40005400
 8001360:	20001b38 	.word	0x20001b38

08001364 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <BSP_I2C1_DeInit+0x48>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d014      	beq.n	80013a0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <BSP_I2C1_DeInit+0x48>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3b01      	subs	r3, #1
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <BSP_I2C1_DeInit+0x48>)
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <BSP_I2C1_DeInit+0x48>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10b      	bne.n	80013a0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <BSP_I2C1_DeInit+0x4c>)
 800138a:	f000 f909 	bl	80015a0 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <BSP_I2C1_DeInit+0x4c>)
 8001390:	f004 f95e 	bl	8005650 <HAL_I2C_DeInit>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800139a:	f06f 0307 	mvn.w	r3, #7
 800139e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20001b38 	.word	0x20001b38
 80013b0:	20002028 	.word	0x20002028

080013b4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af04      	add	r7, sp, #16
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	461a      	mov	r2, r3
 80013be:	4603      	mov	r3, r0
 80013c0:	81fb      	strh	r3, [r7, #14]
 80013c2:	460b      	mov	r3, r1
 80013c4:	81bb      	strh	r3, [r7, #12]
 80013c6:	4613      	mov	r3, r2
 80013c8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80013ce:	89ba      	ldrh	r2, [r7, #12]
 80013d0:	89f9      	ldrh	r1, [r7, #14]
 80013d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	480c      	ldr	r0, [pc, #48]	; (8001414 <BSP_I2C1_WriteReg+0x60>)
 80013e4:	f004 f978 	bl	80056d8 <HAL_I2C_Mem_Write>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80013ee:	4809      	ldr	r0, [pc, #36]	; (8001414 <BSP_I2C1_WriteReg+0x60>)
 80013f0:	f004 fbae 	bl	8005b50 <HAL_I2C_GetError>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d103      	bne.n	8001402 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013fa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e002      	b.n	8001408 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001402:	f06f 0303 	mvn.w	r3, #3
 8001406:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001408:	697b      	ldr	r3, [r7, #20]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20002028 	.word	0x20002028

08001418 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af04      	add	r7, sp, #16
 800141e:	60ba      	str	r2, [r7, #8]
 8001420:	461a      	mov	r2, r3
 8001422:	4603      	mov	r3, r0
 8001424:	81fb      	strh	r3, [r7, #14]
 8001426:	460b      	mov	r3, r1
 8001428:	81bb      	strh	r3, [r7, #12]
 800142a:	4613      	mov	r3, r2
 800142c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001432:	89ba      	ldrh	r2, [r7, #12]
 8001434:	89f9      	ldrh	r1, [r7, #14]
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	480c      	ldr	r0, [pc, #48]	; (8001478 <BSP_I2C1_ReadReg+0x60>)
 8001448:	f004 fa5a 	bl	8005900 <HAL_I2C_Mem_Read>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00c      	beq.n	800146c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <BSP_I2C1_ReadReg+0x60>)
 8001454:	f004 fb7c 	bl	8005b50 <HAL_I2C_GetError>
 8001458:	4603      	mov	r3, r0
 800145a:	2b04      	cmp	r3, #4
 800145c:	d103      	bne.n	8001466 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800145e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e002      	b.n	800146c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001466:	f06f 0303 	mvn.w	r3, #3
 800146a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800146c:	697b      	ldr	r3, [r7, #20]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20002028 	.word	0x20002028

0800147c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001480:	f002 ffbc 	bl	80043fc <HAL_GetTick>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a1c      	ldr	r2, [pc, #112]	; (800150c <MX_I2C1_Init+0x80>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x2010091A;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <MX_I2C1_Init+0x84>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f004 f82e 	bl	8005530 <HAL_I2C_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f004 fd5d 	bl	8005fa0 <HAL_I2CEx_ConfigAnalogFilter>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f004 fd9f 	bl	8006036 <HAL_I2CEx_ConfigDigitalFilter>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40005400 	.word	0x40005400
 8001510:	2010091a 	.word	0x2010091a

08001514 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <I2C1_MspInit+0x84>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <I2C1_MspInit+0x84>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	6313      	str	r3, [r2, #48]	; 0x30
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <I2C1_MspInit+0x84>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001546:	2304      	movs	r3, #4
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <I2C1_MspInit+0x88>)
 8001552:	f003 fcf7 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155c:	2312      	movs	r3, #18
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001568:	2304      	movs	r3, #4
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	480a      	ldr	r0, [pc, #40]	; (800159c <I2C1_MspInit+0x88>)
 8001574:	f003 fce6 	bl	8004f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <I2C1_MspInit+0x84>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a06      	ldr	r2, [pc, #24]	; (8001598 <I2C1_MspInit+0x84>)
 800157e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <I2C1_MspInit+0x84>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40020400 	.word	0x40020400

080015a0 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <I2C1_MspDeInit+0x30>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <I2C1_MspDeInit+0x30>)
 80015ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80015b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b8:	4806      	ldr	r0, [pc, #24]	; (80015d4 <I2C1_MspDeInit+0x34>)
 80015ba:	f003 fe6f 	bl	800529c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80015be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <I2C1_MspDeInit+0x34>)
 80015c4:	f003 fe6a 	bl	800529c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020400 	.word	0x40020400

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015dc:	f002 febc 	bl	8004358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e0:	f000 f812 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e4:	f000 f992 	bl	800190c <MX_GPIO_Init>
  MX_DMA_Init();
 80015e8:	f000 f972 	bl	80018d0 <MX_DMA_Init>
  MX_RTC_Init();
 80015ec:	f000 f8c6 	bl	800177c <MX_RTC_Init>
  MX_CRC_Init();
 80015f0:	f000 f8a2 	bl	8001738 <MX_CRC_Init>
  MX_MEMS_Init();
 80015f4:	f007 fcd4 	bl	8008fa0 <MX_MEMS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim3);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <main+0x2c>)
 80015fa:	f006 f9dd 	bl	80079b8 <HAL_TIM_Base_Start_IT>
  {
	  //HAL_UART_Transmit(&huart3, data, size, 500);
	  //HAL_Delay(500);
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 80015fe:	f007 fcd5 	bl	8008fac <MX_MEMS_Process>
 8001602:	e7fc      	b.n	80015fe <main+0x26>
 8001604:	20002098 	.word	0x20002098

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0b4      	sub	sp, #208	; 0xd0
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001612:	2230      	movs	r2, #48	; 0x30
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f014 fc0c 	bl	8015e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2284      	movs	r2, #132	; 0x84
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f014 fbfd 	bl	8015e34 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b3d      	ldr	r3, [pc, #244]	; (8001730 <SystemClock_Config+0x128>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a3c      	ldr	r2, [pc, #240]	; (8001730 <SystemClock_Config+0x128>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <SystemClock_Config+0x128>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <SystemClock_Config+0x12c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a37      	ldr	r2, [pc, #220]	; (8001734 <SystemClock_Config+0x12c>)
 8001658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b35      	ldr	r3, [pc, #212]	; (8001734 <SystemClock_Config+0x12c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800166a:	2309      	movs	r3, #9
 800166c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001678:	2301      	movs	r3, #1
 800167a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167e:	2302      	movs	r3, #2
 8001680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001684:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800168c:	2304      	movs	r3, #4
 800168e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001698:	2302      	movs	r3, #2
 800169a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800169e:	2303      	movs	r3, #3
 80016a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 fd61 	bl	8006170 <HAL_RCC_OscConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80016b4:	f000 f990 	bl	80019d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016b8:	f004 fd0a 	bl	80060d0 <HAL_PWREx_EnableOverDrive>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80016c2:	f000 f989 	bl	80019d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c6:	230f      	movs	r3, #15
 80016c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016ec:	2106      	movs	r1, #6
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 ffe2 	bl	80066b8 <HAL_RCC_ClockConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80016fa:	f000 f96d 	bl	80019d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80016fe:	f244 1320 	movw	r3, #16672	; 0x4120
 8001702:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800170a:	2310      	movs	r3, #16
 800170c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800170e:	2300      	movs	r3, #0
 8001710:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4618      	mov	r0, r3
 8001718:	f005 f9d0 	bl	8006abc <HAL_RCCEx_PeriphCLKConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001722:	f000 f959 	bl	80019d8 <Error_Handler>
  }
}
 8001726:	bf00      	nop
 8001728:	37d0      	adds	r7, #208	; 0xd0
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40007000 	.word	0x40007000

08001738 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <MX_CRC_Init+0x3c>)
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <MX_CRC_Init+0x40>)
 8001740:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_CRC_Init+0x3c>)
 8001744:	2200      	movs	r2, #0
 8001746:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <MX_CRC_Init+0x3c>)
 800174a:	2200      	movs	r2, #0
 800174c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_CRC_Init+0x3c>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <MX_CRC_Init+0x3c>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_CRC_Init+0x3c>)
 800175c:	2201      	movs	r2, #1
 800175e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <MX_CRC_Init+0x3c>)
 8001762:	f002 ff8d 	bl	8004680 <HAL_CRC_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800176c:	f000 f934 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20002074 	.word	0x20002074
 8001778:	40023000 	.word	0x40023000

0800177c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]
 8001792:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <MX_RTC_Init+0xb0>)
 800179a:	4a25      	ldr	r2, [pc, #148]	; (8001830 <MX_RTC_Init+0xb4>)
 800179c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <MX_RTC_Init+0xb0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <MX_RTC_Init+0xb0>)
 80017a6:	227f      	movs	r2, #127	; 0x7f
 80017a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <MX_RTC_Init+0xb0>)
 80017ac:	22ff      	movs	r2, #255	; 0xff
 80017ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_RTC_Init+0xb0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <MX_RTC_Init+0xb0>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <MX_RTC_Init+0xb0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017c2:	481a      	ldr	r0, [pc, #104]	; (800182c <MX_RTC_Init+0xb0>)
 80017c4:	f005 fd6a 	bl	800729c <HAL_RTC_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80017ce:	f000 f903 	bl	80019d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80017da:	2300      	movs	r3, #0
 80017dc:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2201      	movs	r2, #1
 80017ec:	4619      	mov	r1, r3
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <MX_RTC_Init+0xb0>)
 80017f0:	f005 fde6 	bl	80073c0 <HAL_RTC_SetTime>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80017fa:	f000 f8ed 	bl	80019d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017fe:	2301      	movs	r3, #1
 8001800:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001802:	2301      	movs	r3, #1
 8001804:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001806:	2301      	movs	r3, #1
 8001808:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800180a:	2300      	movs	r3, #0
 800180c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2201      	movs	r2, #1
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_RTC_Init+0xb0>)
 8001816:	f005 feef 	bl	80075f8 <HAL_RTC_SetDate>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001820:	f000 f8da 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200020e4 	.word	0x200020e4
 8001830:	40002800 	.word	0x40002800

08001834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_TIM3_Init+0x94>)
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <MX_TIM3_Init+0x98>)
 8001856:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216-1;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_TIM3_Init+0x94>)
 800185a:	22d7      	movs	r2, #215	; 0xd7
 800185c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_TIM3_Init+0x94>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_TIM3_Init+0x94>)
 8001866:	f242 720f 	movw	r2, #9999	; 0x270f
 800186a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_TIM3_Init+0x94>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_TIM3_Init+0x94>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001878:	4813      	ldr	r0, [pc, #76]	; (80018c8 <MX_TIM3_Init+0x94>)
 800187a:	f006 f845 	bl	8007908 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001884:	f000 f8a8 	bl	80019d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <MX_TIM3_Init+0x94>)
 8001896:	f006 fa55 	bl	8007d44 <HAL_TIM_ConfigClockSource>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018a0:	f000 f89a 	bl	80019d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_TIM3_Init+0x94>)
 80018b2:	f006 fc6f 	bl	8008194 <HAL_TIMEx_MasterConfigSynchronization>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018bc:	f000 f88c 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20002098 	.word	0x20002098
 80018cc:	40000400 	.word	0x40000400

080018d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_DMA_Init+0x38>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <MX_DMA_Init+0x38>)
 80018dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_DMA_Init+0x38>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	200c      	movs	r0, #12
 80018f4:	f002 fe8d 	bl	8004612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80018f8:	200c      	movs	r0, #12
 80018fa:	f002 fea6 	bl	800464a <HAL_NVIC_EnableIRQ>

}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a29      	ldr	r2, [pc, #164]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b27      	ldr	r3, [pc, #156]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <MX_GPIO_Init+0xc0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_GPIO_Init+0xc0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_GPIO_Init+0xc0>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_GPIO_Init+0xc4>)
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	480f      	ldr	r0, [pc, #60]	; (80019d4 <MX_GPIO_Init+0xc8>)
 8001998:	f003 fad4 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	4809      	ldr	r0, [pc, #36]	; (80019d4 <MX_GPIO_Init+0xc8>)
 80019b0:	f003 fac8 	bl	8004f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	2028      	movs	r0, #40	; 0x28
 80019ba:	f002 fe2a 	bl	8004612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019be:	2028      	movs	r0, #40	; 0x28
 80019c0:	f002 fe43 	bl	800464a <HAL_NVIC_EnableIRQ>

}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	; 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	10110000 	.word	0x10110000
 80019d4:	40020800 	.word	0x40020800

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <Error_Handler+0x8>
	...

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_MspInit+0x44>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_MspInit+0x44>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_MspInit+0x44>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_MspInit+0x44>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_MspInit+0x44>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_MspInit+0x44>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_CRC_MspInit+0x38>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10b      	bne.n	8001a56 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_CRC_MspInit+0x3c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_CRC_MspInit+0x3c>)
 8001a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_CRC_MspInit+0x3c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023000 	.word	0x40023000
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_RTC_MspInit+0x2c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d105      	bne.n	8001a8a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_RTC_MspInit+0x30>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <HAL_RTC_MspInit+0x30>)
 8001a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a88:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40002800 	.word	0x40002800
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_TIM_Base_MspInit+0x44>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d113      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_TIM_Base_MspInit+0x48>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_TIM_Base_MspInit+0x48>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_TIM_Base_MspInit+0x48>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	201d      	movs	r0, #29
 8001ad0:	f002 fd9f 	bl	8004612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ad4:	201d      	movs	r0, #29
 8001ad6:	f002 fdb8 	bl	800464a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40023800 	.word	0x40023800

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f002 fc4c 	bl	80043d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA1_Stream1_IRQHandler+0x10>)
 8001b46:	f002 ff93 	bl	8004a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20002104 	.word	0x20002104

08001b54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM3_IRQHandler+0x10>)
 8001b5a:	f005 ffd4 	bl	8007b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20002098 	.word	0x20002098

08001b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b70:	f003 fcba 	bl	80054e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
	return 1;
 8001b7c:	2301      	movs	r3, #1
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_kill>:

int _kill(int pid, int sig)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b92:	f014 f917 	bl	8015dc4 <__errno>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2216      	movs	r2, #22
 8001b9a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_exit>:

void _exit (int status)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ffe7 	bl	8001b88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bba:	e7fe      	b.n	8001bba <_exit+0x12>

08001bbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e00a      	b.n	8001be4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bce:	f3af 8000 	nop.w
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	60ba      	str	r2, [r7, #8]
 8001bda:	b2ca      	uxtb	r2, r1
 8001bdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbf0      	blt.n	8001bce <_read+0x12>
	}

return len;
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e009      	b.n	8001c1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	60ba      	str	r2, [r7, #8]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fb0b 	bl	800422c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbf1      	blt.n	8001c08 <_write+0x12>
	}
	return len;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_close>:

int _close(int file)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	return -1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c56:	605a      	str	r2, [r3, #4]
	return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_isatty>:

int _isatty(int file)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <_sbrk+0x5c>)
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <_sbrk+0x60>)
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <_sbrk+0x64>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <_sbrk+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d207      	bcs.n	8001cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc8:	f014 f87c 	bl	8015dc4 <__errno>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	220c      	movs	r2, #12
 8001cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	e009      	b.n	8001cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <_sbrk+0x64>)
 8001ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cea:	68fb      	ldr	r3, [r7, #12]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20050000 	.word	0x20050000
 8001cf8:	00008000 	.word	0x00008000
 8001cfc:	20001b3c 	.word	0x20001b3c
 8001d00:	20002a40 	.word	0x20002a40

08001d04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <SystemInit+0x20>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <SystemInit+0x20>)
 8001d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2e:	490e      	ldr	r1, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d44:	4c0b      	ldr	r4, [pc, #44]	; (8001d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d52:	f7ff ffd7 	bl	8001d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f014 f83b 	bl	8015dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7ff fc3d 	bl	80015d8 <main>
  bx  lr    
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	20001428 	.word	0x20001428
  ldr r2, =_sidata
 8001d6c:	0801d218 	.word	0x0801d218
  ldr r2, =_sbss
 8001d70:	20001428 	.word	0x20001428
  ldr r4, =_ebss
 8001d74:	20002a40 	.word	0x20002a40

08001d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC_IRQHandler>
	...

08001d7c <LSM6DSOX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_RegisterBusIO(LSM6DSOX_Object_t *pObj, LSM6DSOX_IO_t *pIO)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d103      	bne.n	8001d98 <LSM6DSOX_RegisterBusIO+0x1c>
  {
    ret = LSM6DSOX_ERROR;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	e04d      	b.n	8001e34 <LSM6DSOX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	7b1a      	ldrb	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <LSM6DSOX_RegisterBusIO+0xc4>)
 8001dd4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <LSM6DSOX_RegisterBusIO+0xc8>)
 8001dda:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <LSM6DSOX_RegisterBusIO+0x76>
    {
      ret = LSM6DSOX_ERROR;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e020      	b.n	8001e34 <LSM6DSOX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSOX_OK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4798      	blx	r3
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <LSM6DSOX_RegisterBusIO+0x8a>
    {
      ret = LSM6DSOX_ERROR;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	e016      	b.n	8001e34 <LSM6DSOX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSOX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d112      	bne.n	8001e34 <LSM6DSOX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10d      	bne.n	8001e34 <LSM6DSOX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001e18:	230c      	movs	r3, #12
 8001e1a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSOX_Write_Reg(pObj, LSM6DSOX_CTRL3_C, data) != LSM6DSOX_OK)
 8001e1c:	7afb      	ldrb	r3, [r7, #11]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2112      	movs	r1, #18
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 ff4b 	bl	8002cbe <LSM6DSOX_Write_Reg>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <LSM6DSOX_RegisterBusIO+0xb8>
          {
            ret = LSM6DSOX_ERROR;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	08003161 	.word	0x08003161
 8001e44:	08003197 	.word	0x08003197

08001e48 <LSM6DSOX_Init>:
 * @brief  Initialize the LSM6DSOX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_Init(LSM6DSOX_Object_t *pObj)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dsox_i3c_disable_set(&(pObj->Ctx), LSM6DSOX_I3C_DISABLE) != LSM6DSOX_OK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	331c      	adds	r3, #28
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 ff79 	bl	8003d4e <lsm6dsox_i3c_disable_set>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <LSM6DSOX_Init+0x20>
  {
    return LSM6DSOX_ERROR;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	e060      	b.n	8001f2a <LSM6DSOX_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsox_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	331c      	adds	r3, #28
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 ff47 	bl	8003d02 <lsm6dsox_auto_increment_set>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <LSM6DSOX_Init+0x38>
  {
    return LSM6DSOX_ERROR;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e054      	b.n	8001f2a <LSM6DSOX_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dsox_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSOX_OK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	331c      	adds	r3, #28
 8001e84:	2101      	movs	r1, #1
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 fe48 	bl	8003b1c <lsm6dsox_block_data_update_set>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <LSM6DSOX_Init+0x50>
  {
    return LSM6DSOX_ERROR;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	e048      	b.n	8001f2a <LSM6DSOX_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dsox_fifo_mode_set(&(pObj->Ctx), LSM6DSOX_BYPASS_MODE) != LSM6DSOX_OK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	331c      	adds	r3, #28
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 ff9b 	bl	8003dda <lsm6dsox_fifo_mode_set>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <LSM6DSOX_Init+0x68>
  {
    return LSM6DSOX_ERROR;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e03c      	b.n	8001f2a <LSM6DSOX_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSOX_XL_ODR_104Hz;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	331c      	adds	r3, #28
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 fa12 	bl	80032e8 <lsm6dsox_xl_data_rate_set>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <LSM6DSOX_Init+0x88>
  {
    return LSM6DSOX_ERROR;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e02c      	b.n	8001f2a <LSM6DSOX_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), LSM6DSOX_2g) != LSM6DSOX_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	331c      	adds	r3, #28
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f001 f9a8 	bl	800322c <lsm6dsox_xl_full_scale_set>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <LSM6DSOX_Init+0xa0>
  {
    return LSM6DSOX_ERROR;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	e020      	b.n	8001f2a <LSM6DSOX_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSOX_GY_ODR_104Hz;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2204      	movs	r2, #4
 8001eec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	331c      	adds	r3, #28
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fc3a 	bl	8003770 <lsm6dsox_gy_data_rate_set>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <LSM6DSOX_Init+0xc0>
  {
    return LSM6DSOX_ERROR;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e010      	b.n	8001f2a <LSM6DSOX_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), LSM6DSOX_2000dps) != LSM6DSOX_OK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	331c      	adds	r3, #28
 8001f0c:	2106      	movs	r1, #6
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 fbc6 	bl	80036a0 <lsm6dsox_gy_full_scale_set>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <LSM6DSOX_Init+0xd8>
  {
    return LSM6DSOX_ERROR;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	e004      	b.n	8001f2a <LSM6DSOX_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSOX_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <LSM6DSOX_DeInit>:
 * @brief  Deinitialize the LSM6DSOX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_DeInit(LSM6DSOX_Object_t *pObj)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSOX_ACC_Disable(pObj) != LSM6DSOX_OK)
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f888 	bl	8002050 <LSM6DSOX_ACC_Disable>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <LSM6DSOX_DeInit+0x1a>
  {
    return LSM6DSOX_ERROR;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e015      	b.n	8001f78 <LSM6DSOX_DeInit+0x46>
  }

  if (LSM6DSOX_GYRO_Disable(pObj) != LSM6DSOX_OK)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fc28 	bl	80027a2 <LSM6DSOX_GYRO_Disable>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <LSM6DSOX_DeInit+0x2c>
  {
    return LSM6DSOX_ERROR;
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	e00c      	b.n	8001f78 <LSM6DSOX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSOX_XL_ODR_OFF;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSOX_GY_ODR_OFF;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSOX_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <LSM6DSOX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ReadID(LSM6DSOX_Object_t *pObj, uint8_t *Id)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  if (lsm6dsox_device_id_get(&(pObj->Ctx), Id) != LSM6DSOX_OK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	331c      	adds	r3, #28
 8001f8e:	6839      	ldr	r1, [r7, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f001 fea5 	bl	8003ce0 <lsm6dsox_device_id_get>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <LSM6DSOX_ReadID+0x22>
  {
    return LSM6DSOX_ERROR;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa0:	e000      	b.n	8001fa4 <LSM6DSOX_ReadID+0x24>
  }

  return LSM6DSOX_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <LSM6DSOX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSOX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GetCapabilities(LSM6DSOX_Object_t *pObj, LSM6DSOX_Capabilities_t *Capabilities)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fd4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2210      	movs	r2, #16
 8001fda:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <LSM6DSOX_GetCapabilities+0x58>)
 8001fe6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4a06      	ldr	r2, [pc, #24]	; (8002004 <LSM6DSOX_GetCapabilities+0x58>)
 8001fec:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  return LSM6DSOX_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	45d02000 	.word	0x45d02000

08002008 <LSM6DSOX_ACC_Enable>:
 * @brief  Enable the LSM6DSOX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_Enable(LSM6DSOX_Object_t *pObj)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <LSM6DSOX_ACC_Enable+0x16>
  {
    return LSM6DSOX_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e014      	b.n	8002048 <LSM6DSOX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSOX_OK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f103 021c 	add.w	r2, r3, #28
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800202a:	4619      	mov	r1, r3
 800202c:	4610      	mov	r0, r2
 800202e:	f001 f95b 	bl	80032e8 <lsm6dsox_xl_data_rate_set>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <LSM6DSOX_ACC_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	e004      	b.n	8002048 <LSM6DSOX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSOX_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <LSM6DSOX_ACC_Disable>:
 * @brief  Disable the LSM6DSOX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_Disable(LSM6DSOX_Object_t *pObj)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <LSM6DSOX_ACC_Disable+0x16>
  {
    return LSM6DSOX_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e01f      	b.n	80020a6 <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSOX_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f103 021c 	add.w	r2, r3, #28
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	332b      	adds	r3, #43	; 0x2b
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f001 faac 	bl	80035d0 <lsm6dsox_xl_data_rate_get>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <LSM6DSOX_ACC_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	e010      	b.n	80020a6 <LSM6DSOX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	331c      	adds	r3, #28
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f001 f92c 	bl	80032e8 <lsm6dsox_xl_data_rate_set>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <LSM6DSOX_ACC_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	e004      	b.n	80020a6 <LSM6DSOX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSOX_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <LSM6DSOX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	331c      	adds	r3, #28
 80020c2:	f107 020b 	add.w	r2, r7, #11
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 f8d5 	bl	8003278 <lsm6dsox_xl_full_scale_get>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <LSM6DSOX_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
 80020d8:	e023      	b.n	8002122 <LSM6DSOX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d81b      	bhi.n	8002118 <LSM6DSOX_ACC_GetSensitivity+0x68>
 80020e0:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <LSM6DSOX_ACC_GetSensitivity+0x38>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	08002111 	.word	0x08002111
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002109 	.word	0x08002109
  {
    case LSM6DSOX_2g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_2G;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4a0c      	ldr	r2, [pc, #48]	; (800212c <LSM6DSOX_ACC_GetSensitivity+0x7c>)
 80020fc:	601a      	str	r2, [r3, #0]
      break;
 80020fe:	e00f      	b.n	8002120 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_4g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_4G;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <LSM6DSOX_ACC_GetSensitivity+0x80>)
 8002104:	601a      	str	r2, [r3, #0]
      break;
 8002106:	e00b      	b.n	8002120 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_8g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_8G;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <LSM6DSOX_ACC_GetSensitivity+0x84>)
 800210c:	601a      	str	r2, [r3, #0]
      break;
 800210e:	e007      	b.n	8002120 <LSM6DSOX_ACC_GetSensitivity+0x70>

    case LSM6DSOX_16g:
      *Sensitivity = LSM6DSOX_ACC_SENSITIVITY_FS_16G;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <LSM6DSOX_ACC_GetSensitivity+0x88>)
 8002114:	601a      	str	r2, [r3, #0]
      break;
 8002116:	e003      	b.n	8002120 <LSM6DSOX_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSOX_ERROR;
 8002118:	f04f 33ff 	mov.w	r3, #4294967295
 800211c:	60fb      	str	r3, [r7, #12]
      break;
 800211e:	bf00      	nop
  }

  return ret;
 8002120:	68fb      	ldr	r3, [r7, #12]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	3d79db23 	.word	0x3d79db23
 8002130:	3df9db23 	.word	0x3df9db23
 8002134:	3e79db23 	.word	0x3e79db23
 8002138:	3ef9db23 	.word	0x3ef9db23

0800213c <LSM6DSOX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_GetOutputDataRate(LSM6DSOX_Object_t *pObj, float *Odr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
  lsm6dsox_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsox_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	331c      	adds	r3, #28
 800214e:	f107 020b 	add.w	r2, r7, #11
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f001 fa3b 	bl	80035d0 <lsm6dsox_xl_data_rate_get>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <LSM6DSOX_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSOX_ERROR;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	e054      	b.n	8002210 <LSM6DSOX_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8002166:	7afb      	ldrb	r3, [r7, #11]
 8002168:	2b0b      	cmp	r3, #11
 800216a:	d84c      	bhi.n	8002206 <LSM6DSOX_ACC_GetOutputDataRate+0xca>
 800216c:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <LSM6DSOX_ACC_GetOutputDataRate+0x38>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	080021a5 	.word	0x080021a5
 8002178:	080021b7 	.word	0x080021b7
 800217c:	080021bf 	.word	0x080021bf
 8002180:	080021c7 	.word	0x080021c7
 8002184:	080021cf 	.word	0x080021cf
 8002188:	080021d7 	.word	0x080021d7
 800218c:	080021df 	.word	0x080021df
 8002190:	080021e7 	.word	0x080021e7
 8002194:	080021ef 	.word	0x080021ef
 8002198:	080021f7 	.word	0x080021f7
 800219c:	080021ff 	.word	0x080021ff
 80021a0:	080021af 	.word	0x080021af
  {
    case LSM6DSOX_XL_ODR_OFF:
      *Odr = 0.0f;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
      break;
 80021ac:	e02f      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	4a19      	ldr	r2, [pc, #100]	; (8002218 <LSM6DSOX_ACC_GetOutputDataRate+0xdc>)
 80021b2:	601a      	str	r2, [r3, #0]
      break;
 80021b4:	e02b      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	4a18      	ldr	r2, [pc, #96]	; (800221c <LSM6DSOX_ACC_GetOutputDataRate+0xe0>)
 80021ba:	601a      	str	r2, [r3, #0]
      break;
 80021bc:	e027      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_26Hz:
      *Odr = 26.0f;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <LSM6DSOX_ACC_GetOutputDataRate+0xe4>)
 80021c2:	601a      	str	r2, [r3, #0]
      break;
 80021c4:	e023      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_52Hz:
      *Odr = 52.0f;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	4a16      	ldr	r2, [pc, #88]	; (8002224 <LSM6DSOX_ACC_GetOutputDataRate+0xe8>)
 80021ca:	601a      	str	r2, [r3, #0]
      break;
 80021cc:	e01f      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_104Hz:
      *Odr = 104.0f;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <LSM6DSOX_ACC_GetOutputDataRate+0xec>)
 80021d2:	601a      	str	r2, [r3, #0]
      break;
 80021d4:	e01b      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_208Hz:
      *Odr = 208.0f;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <LSM6DSOX_ACC_GetOutputDataRate+0xf0>)
 80021da:	601a      	str	r2, [r3, #0]
      break;
 80021dc:	e017      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_417Hz:
      *Odr = 417.0f;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	4a13      	ldr	r2, [pc, #76]	; (8002230 <LSM6DSOX_ACC_GetOutputDataRate+0xf4>)
 80021e2:	601a      	str	r2, [r3, #0]
      break;
 80021e4:	e013      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_833Hz:
      *Odr = 833.0f;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <LSM6DSOX_ACC_GetOutputDataRate+0xf8>)
 80021ea:	601a      	str	r2, [r3, #0]
      break;
 80021ec:	e00f      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <LSM6DSOX_ACC_GetOutputDataRate+0xfc>)
 80021f2:	601a      	str	r2, [r3, #0]
      break;
 80021f4:	e00b      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	4a10      	ldr	r2, [pc, #64]	; (800223c <LSM6DSOX_ACC_GetOutputDataRate+0x100>)
 80021fa:	601a      	str	r2, [r3, #0]
      break;
 80021fc:	e007      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    case LSM6DSOX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <LSM6DSOX_ACC_GetOutputDataRate+0x104>)
 8002202:	601a      	str	r2, [r3, #0]
      break;
 8002204:	e003      	b.n	800220e <LSM6DSOX_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSOX_ERROR;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	60fb      	str	r3, [r7, #12]
      break;
 800220c:	bf00      	nop
  }

  return ret;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	3fcccccd 	.word	0x3fcccccd
 800221c:	41480000 	.word	0x41480000
 8002220:	41d00000 	.word	0x41d00000
 8002224:	42500000 	.word	0x42500000
 8002228:	42d00000 	.word	0x42d00000
 800222c:	43500000 	.word	0x43500000
 8002230:	43d08000 	.word	0x43d08000
 8002234:	44504000 	.word	0x44504000
 8002238:	44d06000 	.word	0x44d06000
 800223c:	45505000 	.word	0x45505000
 8002240:	45d05800 	.word	0x45d05800

08002244 <LSM6DSOX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_SetOutputDataRate(LSM6DSOX_Object_t *pObj, float Odr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSOX_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_ACC_HIGH_PERFORMANCE_MODE);
 8002250:	2100      	movs	r1, #0
 8002252:	ed97 0a00 	vldr	s0, [r7]
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f806 	bl	8002268 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>
 800225c:	4603      	mov	r3, r0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_SetOutputDataRate_With_Mode(LSM6DSOX_Object_t *pObj, float Odr, LSM6DSOX_ACC_Operating_Mode_t Mode)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	ed87 0a02 	vstr	s0, [r7, #8]
 8002274:	460b      	mov	r3, r1
 8002276:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSOX_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c

  switch (Mode)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2b02      	cmp	r3, #2
 8002280:	f000 80ed 	beq.w	800245e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1f6>
 8002284:	2b02      	cmp	r3, #2
 8002286:	f300 8166 	bgt.w	8002556 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ee>
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2c>
 800228e:	2b01      	cmp	r3, #1
 8002290:	d074      	beq.n	800237c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x114>
 8002292:	e160      	b.n	8002556 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ee>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f103 001c 	add.w	r0, r3, #28
 800229a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800229e:	2301      	movs	r3, #1
 80022a0:	2114      	movs	r1, #20
 80022a2:	f000 ff93 	bl	80031cc <lsm6dsox_read_reg>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x4a>
      {
        return LSM6DSOX_ERROR;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
 80022b0:	e168      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val1.xl_ulp_en)
 80022b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d025      	beq.n	800230c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa4>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d10b      	bne.n	80022e2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x7a>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	331c      	adds	r3, #28
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 f809 	bl	80032e8 <lsm6dsox_xl_data_rate_set>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x7a>
          {
            return LSM6DSOX_ERROR;
 80022dc:	f04f 33ff 	mov.w	r3, #4294967295
 80022e0:	e150      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
          }
        }

        val1.xl_ulp_en = 0;
 80022e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022e6:	f36f 13c7 	bfc	r3, #7, #1
 80022ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f103 001c 	add.w	r0, r3, #28
 80022f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022f8:	2301      	movs	r3, #1
 80022fa:	2114      	movs	r1, #20
 80022fc:	f000 ff7e 	bl	80031fc <lsm6dsox_write_reg>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xa4>
        {
          return LSM6DSOX_ERROR;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	e13b      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f103 001c 	add.w	r0, r3, #28
 8002312:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002316:	2301      	movs	r3, #1
 8002318:	2115      	movs	r1, #21
 800231a:	f000 ff57 	bl	80031cc <lsm6dsox_read_reg>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xc2>
      {
        return LSM6DSOX_ERROR;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
 8002328:	e12c      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val2.xl_hm_mode)
 800232a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d014      	beq.n	8002362 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xfa>
      {
        val2.xl_hm_mode = 0;
 8002338:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800233c:	f36f 1304 	bfc	r3, #4, #1
 8002340:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f103 001c 	add.w	r0, r3, #28
 800234a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800234e:	2301      	movs	r3, #1
 8002350:	2115      	movs	r1, #21
 8002352:	f000 ff53 	bl	80031fc <lsm6dsox_write_reg>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0xfa>
        {
          return LSM6DSOX_ERROR;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
 8002360:	e110      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (Odr < 12.5f)
 8002362:	edd7 7a02 	vldr	s15, [r7, #8]
 8002366:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800236a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	d400      	bmi.n	8002376 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x10e>
      {
        Odr = 12.5f;
      }
      break;
 8002374:	e0f3      	b.n	800255e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
        Odr = 12.5f;
 8002376:	4b85      	ldr	r3, [pc, #532]	; (800258c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x324>)
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	e0f0      	b.n	800255e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f103 001c 	add.w	r0, r3, #28
 8002382:	f107 0220 	add.w	r2, r7, #32
 8002386:	2301      	movs	r3, #1
 8002388:	2114      	movs	r1, #20
 800238a:	f000 ff1f 	bl	80031cc <lsm6dsox_read_reg>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x132>
      {
        return LSM6DSOX_ERROR;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	e0f4      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val1.xl_ulp_en)
 800239a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800239e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d025      	beq.n	80023f4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x18c>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d10b      	bne.n	80023ca <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x162>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	331c      	adds	r3, #28
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 ff95 	bl	80032e8 <lsm6dsox_xl_data_rate_set>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x162>
          {
            return LSM6DSOX_ERROR;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	e0dc      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
          }
        }

        val1.xl_ulp_en = 0;
 80023ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023ce:	f36f 13c7 	bfc	r3, #7, #1
 80023d2:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f103 001c 	add.w	r0, r3, #28
 80023dc:	f107 0220 	add.w	r2, r7, #32
 80023e0:	2301      	movs	r3, #1
 80023e2:	2114      	movs	r1, #20
 80023e4:	f000 ff0a 	bl	80031fc <lsm6dsox_write_reg>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x18c>
        {
          return LSM6DSOX_ERROR;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e0c7      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f103 001c 	add.w	r0, r3, #28
 80023fa:	f107 021c 	add.w	r2, r7, #28
 80023fe:	2301      	movs	r3, #1
 8002400:	2115      	movs	r1, #21
 8002402:	f000 fee3 	bl	80031cc <lsm6dsox_read_reg>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1aa>
      {
        return LSM6DSOX_ERROR;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
 8002410:	e0b8      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (!val2.xl_hm_mode)
 8002412:	7f3b      	ldrb	r3, [r7, #28]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d112      	bne.n	8002444 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1dc>
      {
        val2.xl_hm_mode = 1U;
 800241e:	7f3b      	ldrb	r3, [r7, #28]
 8002420:	f043 0310 	orr.w	r3, r3, #16
 8002424:	773b      	strb	r3, [r7, #28]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f103 001c 	add.w	r0, r3, #28
 800242c:	f107 021c 	add.w	r2, r7, #28
 8002430:	2301      	movs	r3, #1
 8002432:	2115      	movs	r1, #21
 8002434:	f000 fee2 	bl	80031fc <lsm6dsox_write_reg>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1dc>
        {
          return LSM6DSOX_ERROR;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e09f      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 8002444:	edd7 7a02 	vldr	s15, [r7, #8]
 8002448:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002590 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x328>
 800244c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	dc00      	bgt.n	8002458 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x1f0>
      {
        Odr = 208.0f;
      }
      break;
 8002456:	e082      	b.n	800255e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
        Odr = 208.0f;
 8002458:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x32c>)
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	e07f      	b.n	800255e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dsox_ctrl5_c_t val1;
      lsm6dsox_ctrl6_c_t val2;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f103 001c 	add.w	r0, r3, #28
 8002464:	f107 0214 	add.w	r2, r7, #20
 8002468:	2301      	movs	r3, #1
 800246a:	2115      	movs	r1, #21
 800246c:	f000 feae 	bl	80031cc <lsm6dsox_read_reg>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x214>
      {
        return LSM6DSOX_ERROR;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	e083      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (val2.xl_hm_mode)
 800247c:	7d3b      	ldrb	r3, [r7, #20]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d012      	beq.n	80024ae <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x246>
      {
        val2.xl_hm_mode = 0;
 8002488:	7d3b      	ldrb	r3, [r7, #20]
 800248a:	f36f 1304 	bfc	r3, #4, #1
 800248e:	753b      	strb	r3, [r7, #20]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSOX_OK)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f103 001c 	add.w	r0, r3, #28
 8002496:	f107 0214 	add.w	r2, r7, #20
 800249a:	2301      	movs	r3, #1
 800249c:	2115      	movs	r1, #21
 800249e:	f000 fead 	bl	80031fc <lsm6dsox_write_reg>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x246>
        {
          return LSM6DSOX_ERROR;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	e06a      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d108      	bne.n	80024ca <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x262>
      {
        if (LSM6DSOX_GYRO_Disable(pObj) != LSM6DSOX_OK)
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f972 	bl	80027a2 <LSM6DSOX_GYRO_Disable>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x262>
        {
          return LSM6DSOX_ERROR;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	e05c      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f103 001c 	add.w	r0, r3, #28
 80024d0:	f107 0218 	add.w	r2, r7, #24
 80024d4:	2301      	movs	r3, #1
 80024d6:	2114      	movs	r1, #20
 80024d8:	f000 fe78 	bl	80031cc <lsm6dsox_read_reg>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x280>
      {
        return LSM6DSOX_ERROR;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e04d      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
      }

      if (!val1.xl_ulp_en)
 80024e8:	7e3b      	ldrb	r3, [r7, #24]
 80024ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d123      	bne.n	800253c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2d4>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10b      	bne.n	8002516 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ae>
        {
          if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), LSM6DSOX_XL_ODR_OFF) != LSM6DSOX_OK)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	331c      	adds	r3, #28
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f000 feef 	bl	80032e8 <lsm6dsox_xl_data_rate_set>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2ae>
          {
            return LSM6DSOX_ERROR;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 8002514:	e036      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
          }
        }

        val1.xl_ulp_en = 1U;
 8002516:	7e3b      	ldrb	r3, [r7, #24]
 8002518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251c:	763b      	strb	r3, [r7, #24]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f103 001c 	add.w	r0, r3, #28
 8002524:	f107 0218 	add.w	r2, r7, #24
 8002528:	2301      	movs	r3, #1
 800252a:	2114      	movs	r1, #20
 800252c:	f000 fe66 	bl	80031fc <lsm6dsox_write_reg>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2d4>
        {
          return LSM6DSOX_ERROR;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	e023      	b.n	8002584 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 800253c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002540:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002590 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x328>
 8002544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	dc00      	bgt.n	8002550 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2e8>
      {
        Odr = 208.0f;
      }
      break;
 800254e:	e006      	b.n	800255e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
        Odr = 208.0f;
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x32c>)
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	e003      	b.n	800255e <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x2f6>
    }
    default:
      ret = LSM6DSOX_ERROR;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800255c:	bf00      	nop
  }

  if (pObj->acc_is_enabled == 1U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002564:	2b01      	cmp	r3, #1
 8002566:	d106      	bne.n	8002576 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x30e>
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002568:	ed97 0a02 	vldr	s0, [r7, #8]
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fbc1 	bl	8002cf4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>
 8002572:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002574:	e005      	b.n	8002582 <LSM6DSOX_ACC_SetOutputDataRate_With_Mode+0x31a>
  }
  else
  {
    ret = LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002576:	ed97 0a02 	vldr	s0, [r7, #8]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fc52 	bl	8002e24 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>
 8002580:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002584:	4618      	mov	r0, r3
 8002586:	3730      	adds	r7, #48	; 0x30
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	41480000 	.word	0x41480000
 8002590:	43500000 	.word	0x43500000
 8002594:	43500000 	.word	0x43500000

08002598 <LSM6DSOX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_GetFullScale(LSM6DSOX_Object_t *pObj, int32_t *FullScale)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	331c      	adds	r3, #28
 80025aa:	f107 020b 	add.w	r2, r7, #11
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fe61 	bl	8003278 <lsm6dsox_xl_full_scale_get>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <LSM6DSOX_ACC_GetFullScale+0x2a>
  {
    return LSM6DSOX_ERROR;
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295
 80025c0:	e023      	b.n	800260a <LSM6DSOX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80025c2:	7afb      	ldrb	r3, [r7, #11]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d81b      	bhi.n	8002600 <LSM6DSOX_ACC_GetFullScale+0x68>
 80025c8:	a201      	add	r2, pc, #4	; (adr r2, 80025d0 <LSM6DSOX_ACC_GetFullScale+0x38>)
 80025ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ce:	bf00      	nop
 80025d0:	080025e1 	.word	0x080025e1
 80025d4:	080025f9 	.word	0x080025f9
 80025d8:	080025e9 	.word	0x080025e9
 80025dc:	080025f1 	.word	0x080025f1
  {
    case LSM6DSOX_2g:
      *FullScale =  2;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2202      	movs	r2, #2
 80025e4:	601a      	str	r2, [r3, #0]
      break;
 80025e6:	e00f      	b.n	8002608 <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_4g:
      *FullScale =  4;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2204      	movs	r2, #4
 80025ec:	601a      	str	r2, [r3, #0]
      break;
 80025ee:	e00b      	b.n	8002608 <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_8g:
      *FullScale =  8;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2208      	movs	r2, #8
 80025f4:	601a      	str	r2, [r3, #0]
      break;
 80025f6:	e007      	b.n	8002608 <LSM6DSOX_ACC_GetFullScale+0x70>

    case LSM6DSOX_16g:
      *FullScale = 16;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2210      	movs	r2, #16
 80025fc:	601a      	str	r2, [r3, #0]
      break;
 80025fe:	e003      	b.n	8002608 <LSM6DSOX_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSOX_ERROR;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	60fb      	str	r3, [r7, #12]
      break;
 8002606:	bf00      	nop
  }

  return ret;
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop

08002614 <LSM6DSOX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
           : (FullScale <= 4) ? LSM6DSOX_4g
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b02      	cmp	r3, #2
 8002622:	dd0b      	ble.n	800263c <LSM6DSOX_ACC_SetFullScale+0x28>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b04      	cmp	r3, #4
 8002628:	dd06      	ble.n	8002638 <LSM6DSOX_ACC_SetFullScale+0x24>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b08      	cmp	r3, #8
 800262e:	dc01      	bgt.n	8002634 <LSM6DSOX_ACC_SetFullScale+0x20>
 8002630:	2303      	movs	r3, #3
 8002632:	e004      	b.n	800263e <LSM6DSOX_ACC_SetFullScale+0x2a>
 8002634:	2301      	movs	r3, #1
 8002636:	e002      	b.n	800263e <LSM6DSOX_ACC_SetFullScale+0x2a>
 8002638:	2302      	movs	r3, #2
 800263a:	e000      	b.n	800263e <LSM6DSOX_ACC_SetFullScale+0x2a>
 800263c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSOX_2g
 800263e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSOX_8g
           :                    LSM6DSOX_16g;

  if (lsm6dsox_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	331c      	adds	r3, #28
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fdef 	bl	800322c <lsm6dsox_xl_full_scale_set>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <LSM6DSOX_ACC_SetFullScale+0x46>
  {
    return LSM6DSOX_ERROR;
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
 8002658:	e000      	b.n	800265c <LSM6DSOX_ACC_SetFullScale+0x48>
  }

  return LSM6DSOX_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <LSM6DSOX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_GetAxesRaw(LSM6DSOX_Object_t *pObj, LSM6DSOX_AxesRaw_t *Value)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	331c      	adds	r3, #28
 8002672:	f107 0208 	add.w	r2, r7, #8
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fac0 	bl	8003bfe <lsm6dsox_acceleration_raw_get>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <LSM6DSOX_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSOX_ERROR;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	e00c      	b.n	80026a4 <LSM6DSOX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800268a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002692:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800269a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	809a      	strh	r2, [r3, #4]

  return LSM6DSOX_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <LSM6DSOX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_ACC_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *Acceleration)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsox_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	331c      	adds	r3, #28
 80026c0:	f107 0210 	add.w	r2, r7, #16
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 fa99 	bl	8003bfe <lsm6dsox_acceleration_raw_get>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <LSM6DSOX_ACC_GetAxes+0x2c>
  {
    return LSM6DSOX_ERROR;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e03c      	b.n	8002752 <LSM6DSOX_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fce6 	bl	80020b0 <LSM6DSOX_ACC_GetSensitivity>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <LSM6DSOX_ACC_GetAxes+0x44>
  {
    return LSM6DSOX_ERROR;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e030      	b.n	8002752 <LSM6DSOX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80026f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80026f4:	ee07 3a90 	vmov	s15, r3
 80026f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002708:	ee17 2a90 	vmov	r2, s15
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002710:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002714:	ee07 3a90 	vmov	s15, r3
 8002718:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002728:	ee17 2a90 	vmov	r2, s15
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002730:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800273c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002748:	ee17 2a90 	vmov	r2, s15
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <LSM6DSOX_GYRO_Enable>:
 * @brief  Enable the LSM6DSOX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_Enable(LSM6DSOX_Object_t *pObj)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <LSM6DSOX_GYRO_Enable+0x16>
  {
    return LSM6DSOX_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e014      	b.n	800279a <LSM6DSOX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSOX_OK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f103 021c 	add.w	r2, r3, #28
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 fff6 	bl	8003770 <lsm6dsox_gy_data_rate_set>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <LSM6DSOX_GYRO_Enable+0x36>
  {
    return LSM6DSOX_ERROR;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e004      	b.n	800279a <LSM6DSOX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSOX_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <LSM6DSOX_GYRO_Disable>:
 * @brief  Disable the LSM6DSOX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_Disable(LSM6DSOX_Object_t *pObj)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <LSM6DSOX_GYRO_Disable+0x16>
  {
    return LSM6DSOX_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e01f      	b.n	80027f8 <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSOX_OK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f103 021c 	add.w	r2, r3, #28
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	332c      	adds	r3, #44	; 0x2c
 80027c2:	4619      	mov	r1, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f001 f947 	bl	8003a58 <lsm6dsox_gy_data_rate_get>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <LSM6DSOX_GYRO_Disable+0x34>
  {
    return LSM6DSOX_ERROR;
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295
 80027d4:	e010      	b.n	80027f8 <LSM6DSOX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), LSM6DSOX_GY_ODR_OFF) != LSM6DSOX_OK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	331c      	adds	r3, #28
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 ffc7 	bl	8003770 <lsm6dsox_gy_data_rate_set>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <LSM6DSOX_GYRO_Disable+0x4c>
  {
    return LSM6DSOX_ERROR;
 80027e8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ec:	e004      	b.n	80027f8 <LSM6DSOX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSOX_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <LSM6DSOX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_GetSensitivity(LSM6DSOX_Object_t *pObj, float *Sensitivity)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSOX_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	331c      	adds	r3, #28
 8002812:	f107 020b 	add.w	r2, r7, #11
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f000 ff67 	bl	80036ec <lsm6dsox_gy_full_scale_get>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <LSM6DSOX_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSOX_ERROR;
 8002824:	f04f 33ff 	mov.w	r3, #4294967295
 8002828:	e02d      	b.n	8002886 <LSM6DSOX_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800282a:	7afb      	ldrb	r3, [r7, #11]
 800282c:	2b06      	cmp	r3, #6
 800282e:	d825      	bhi.n	800287c <LSM6DSOX_GYRO_GetSensitivity+0x7c>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <LSM6DSOX_GYRO_GetSensitivity+0x38>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	0800285d 	.word	0x0800285d
 800283c:	08002855 	.word	0x08002855
 8002840:	08002865 	.word	0x08002865
 8002844:	0800287d 	.word	0x0800287d
 8002848:	0800286d 	.word	0x0800286d
 800284c:	0800287d 	.word	0x0800287d
 8002850:	08002875 	.word	0x08002875
  {
    case LSM6DSOX_125dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_125DPS;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <LSM6DSOX_GYRO_GetSensitivity+0x90>)
 8002858:	601a      	str	r2, [r3, #0]
      break;
 800285a:	e013      	b.n	8002884 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_250dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_250DPS;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <LSM6DSOX_GYRO_GetSensitivity+0x94>)
 8002860:	601a      	str	r2, [r3, #0]
      break;
 8002862:	e00f      	b.n	8002884 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_500dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_500DPS;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <LSM6DSOX_GYRO_GetSensitivity+0x98>)
 8002868:	601a      	str	r2, [r3, #0]
      break;
 800286a:	e00b      	b.n	8002884 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_1000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_1000DPS;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <LSM6DSOX_GYRO_GetSensitivity+0x9c>)
 8002870:	601a      	str	r2, [r3, #0]
      break;
 8002872:	e007      	b.n	8002884 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    case LSM6DSOX_2000dps:
      *Sensitivity = LSM6DSOX_GYRO_SENSITIVITY_FS_2000DPS;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <LSM6DSOX_GYRO_GetSensitivity+0xa0>)
 8002878:	601a      	str	r2, [r3, #0]
      break;
 800287a:	e003      	b.n	8002884 <LSM6DSOX_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSOX_ERROR;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295
 8002880:	60fb      	str	r3, [r7, #12]
      break;
 8002882:	bf00      	nop
  }

  return ret;
 8002884:	68fb      	ldr	r3, [r7, #12]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	408c0000 	.word	0x408c0000
 8002894:	410c0000 	.word	0x410c0000
 8002898:	418c0000 	.word	0x418c0000
 800289c:	420c0000 	.word	0x420c0000
 80028a0:	428c0000 	.word	0x428c0000

080028a4 <LSM6DSOX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_GetOutputDataRate(LSM6DSOX_Object_t *pObj, float *Odr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  lsm6dsox_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsox_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSOX_OK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	331c      	adds	r3, #28
 80028b6:	f107 020b 	add.w	r2, r7, #11
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 f8cb 	bl	8003a58 <lsm6dsox_gy_data_rate_get>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <LSM6DSOX_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSOX_ERROR;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	e04e      	b.n	800296c <LSM6DSOX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	2b0a      	cmp	r3, #10
 80028d2:	d846      	bhi.n	8002962 <LSM6DSOX_GYRO_GetOutputDataRate+0xbe>
 80028d4:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <LSM6DSOX_GYRO_GetOutputDataRate+0x38>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	08002909 	.word	0x08002909
 80028e0:	08002913 	.word	0x08002913
 80028e4:	0800291b 	.word	0x0800291b
 80028e8:	08002923 	.word	0x08002923
 80028ec:	0800292b 	.word	0x0800292b
 80028f0:	08002933 	.word	0x08002933
 80028f4:	0800293b 	.word	0x0800293b
 80028f8:	08002943 	.word	0x08002943
 80028fc:	0800294b 	.word	0x0800294b
 8002900:	08002953 	.word	0x08002953
 8002904:	0800295b 	.word	0x0800295b
  {
    case LSM6DSOX_GY_ODR_OFF:
      *Odr = 0.0f;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
      break;
 8002910:	e02b      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	4a17      	ldr	r2, [pc, #92]	; (8002974 <LSM6DSOX_GYRO_GetOutputDataRate+0xd0>)
 8002916:	601a      	str	r2, [r3, #0]
      break;
 8002918:	e027      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_26Hz:
      *Odr = 26.0f;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	4a16      	ldr	r2, [pc, #88]	; (8002978 <LSM6DSOX_GYRO_GetOutputDataRate+0xd4>)
 800291e:	601a      	str	r2, [r3, #0]
      break;
 8002920:	e023      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	4a15      	ldr	r2, [pc, #84]	; (800297c <LSM6DSOX_GYRO_GetOutputDataRate+0xd8>)
 8002926:	601a      	str	r2, [r3, #0]
      break;
 8002928:	e01f      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_104Hz:
      *Odr = 104.0f;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <LSM6DSOX_GYRO_GetOutputDataRate+0xdc>)
 800292e:	601a      	str	r2, [r3, #0]
      break;
 8002930:	e01b      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <LSM6DSOX_GYRO_GetOutputDataRate+0xe0>)
 8002936:	601a      	str	r2, [r3, #0]
      break;
 8002938:	e017      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_417Hz:
      *Odr = 417.0f;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	4a12      	ldr	r2, [pc, #72]	; (8002988 <LSM6DSOX_GYRO_GetOutputDataRate+0xe4>)
 800293e:	601a      	str	r2, [r3, #0]
      break;
 8002940:	e013      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	4a11      	ldr	r2, [pc, #68]	; (800298c <LSM6DSOX_GYRO_GetOutputDataRate+0xe8>)
 8002946:	601a      	str	r2, [r3, #0]
      break;
 8002948:	e00f      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	4a10      	ldr	r2, [pc, #64]	; (8002990 <LSM6DSOX_GYRO_GetOutputDataRate+0xec>)
 800294e:	601a      	str	r2, [r3, #0]
      break;
 8002950:	e00b      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <LSM6DSOX_GYRO_GetOutputDataRate+0xf0>)
 8002956:	601a      	str	r2, [r3, #0]
      break;
 8002958:	e007      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSOX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <LSM6DSOX_GYRO_GetOutputDataRate+0xf4>)
 800295e:	601a      	str	r2, [r3, #0]
      break;
 8002960:	e003      	b.n	800296a <LSM6DSOX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSOX_ERROR;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	60fb      	str	r3, [r7, #12]
      break;
 8002968:	bf00      	nop
  }

  return ret;
 800296a:	68fb      	ldr	r3, [r7, #12]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	41480000 	.word	0x41480000
 8002978:	41d00000 	.word	0x41d00000
 800297c:	42500000 	.word	0x42500000
 8002980:	42d00000 	.word	0x42d00000
 8002984:	43500000 	.word	0x43500000
 8002988:	43d08000 	.word	0x43d08000
 800298c:	44504000 	.word	0x44504000
 8002990:	44d06000 	.word	0x44d06000
 8002994:	45505000 	.word	0x45505000
 8002998:	45d05800 	.word	0x45d05800

0800299c <LSM6DSOX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_SetOutputDataRate(LSM6DSOX_Object_t *pObj, float Odr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSOX_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSOX_GYRO_HIGH_PERFORMANCE_MODE);
 80029a8:	2100      	movs	r1, #0
 80029aa:	ed97 0a00 	vldr	s0, [r7]
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f806 	bl	80029c0 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_SetOutputDataRate_With_Mode(LSM6DSOX_Object_t *pObj, float Odr, LSM6DSOX_GYRO_Operating_Mode_t Mode)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80029cc:	460b      	mov	r3, r1
 80029ce:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSOX_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]

  switch (Mode)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x20>
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d028      	beq.n	8002a30 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x70>
 80029de:	e05c      	b.n	8002a9a <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xda>
    case LSM6DSOX_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dsox_ctrl7_g_t val1;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f103 001c 	add.w	r0, r3, #28
 80029e6:	f107 0218 	add.w	r2, r7, #24
 80029ea:	2301      	movs	r3, #1
 80029ec:	2116      	movs	r1, #22
 80029ee:	f000 fbed 	bl	80031cc <lsm6dsox_read_reg>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x3e>
      {
        return LSM6DSOX_ERROR;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	e065      	b.n	8002aca <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x10a>
      }

      if (val1.g_hm_mode)
 80029fe:	7e3b      	ldrb	r3, [r7, #24]
 8002a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d04b      	beq.n	8002aa2 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe2>
      {
        val1.g_hm_mode = 0;
 8002a0a:	7e3b      	ldrb	r3, [r7, #24]
 8002a0c:	f36f 13c7 	bfc	r3, #7, #1
 8002a10:	763b      	strb	r3, [r7, #24]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f103 001c 	add.w	r0, r3, #28
 8002a18:	f107 0218 	add.w	r2, r7, #24
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	2116      	movs	r1, #22
 8002a20:	f000 fbec 	bl	80031fc <lsm6dsox_write_reg>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d03b      	beq.n	8002aa2 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe2>
        {
          return LSM6DSOX_ERROR;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	e04c      	b.n	8002aca <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x10a>
    case LSM6DSOX_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dsox_ctrl7_g_t val1;

      if (lsm6dsox_read_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f103 001c 	add.w	r0, r3, #28
 8002a36:	f107 0214 	add.w	r2, r7, #20
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	2116      	movs	r1, #22
 8002a3e:	f000 fbc5 	bl	80031cc <lsm6dsox_read_reg>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x8e>
      {
        return LSM6DSOX_ERROR;
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4c:	e03d      	b.n	8002aca <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x10a>
      }

      if (!val1.g_hm_mode)
 8002a4e:	7d3b      	ldrb	r3, [r7, #20]
 8002a50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d112      	bne.n	8002a80 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xc0>
      {
        val1.g_hm_mode = 1U;
 8002a5a:	7d3b      	ldrb	r3, [r7, #20]
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a60:	753b      	strb	r3, [r7, #20]
        if (lsm6dsox_write_reg(&(pObj->Ctx), LSM6DSOX_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSOX_OK)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f103 001c 	add.w	r0, r3, #28
 8002a68:	f107 0214 	add.w	r2, r7, #20
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	2116      	movs	r1, #22
 8002a70:	f000 fbc4 	bl	80031fc <lsm6dsox_write_reg>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xc0>
        {
          return LSM6DSOX_ERROR;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	e024      	b.n	8002aca <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x10a>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (Odr > 208.0f)
 8002a80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a84:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002ad4 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x114>
 8002a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	dc00      	bgt.n	8002a94 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xd4>
      {
        Odr = 208.0f;
      }
      break;
 8002a92:	e007      	b.n	8002aa4 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe4>
        Odr = 208.0f;
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x118>)
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	e004      	b.n	8002aa4 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe4>
    }
    default:
      ret = LSM6DSOX_ERROR;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	61fb      	str	r3, [r7, #28]
      break;
 8002aa0:	e000      	b.n	8002aa4 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xe4>
      break;
 8002aa2:	bf00      	nop
  }

  if (pObj->gyro_is_enabled == 1U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d106      	bne.n	8002abc <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0xfc>
  {
    ret = LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002aae:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa46 	bl	8002f44 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled>
 8002ab8:	61f8      	str	r0, [r7, #28]
 8002aba:	e005      	b.n	8002ac8 <LSM6DSOX_GYRO_SetOutputDataRate_With_Mode+0x108>
  }
  else
  {
    ret = LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002abc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 facb 	bl	800305c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled>
 8002ac6:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	43500000 	.word	0x43500000
 8002ad8:	43500000 	.word	0x43500000

08002adc <LSM6DSOX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_GetFullScale(LSM6DSOX_Object_t *pObj, int32_t  *FullScale)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSOX_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
  lsm6dsox_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsox_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSOX_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	331c      	adds	r3, #28
 8002aee:	f107 020b 	add.w	r2, r7, #11
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fdf9 	bl	80036ec <lsm6dsox_gy_full_scale_get>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <LSM6DSOX_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSOX_ERROR;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
 8002b04:	e030      	b.n	8002b68 <LSM6DSOX_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8002b06:	7afb      	ldrb	r3, [r7, #11]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d828      	bhi.n	8002b5e <LSM6DSOX_GYRO_GetFullScale+0x82>
 8002b0c:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <LSM6DSOX_GYRO_GetFullScale+0x38>)
 8002b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b12:	bf00      	nop
 8002b14:	08002b39 	.word	0x08002b39
 8002b18:	08002b31 	.word	0x08002b31
 8002b1c:	08002b41 	.word	0x08002b41
 8002b20:	08002b5f 	.word	0x08002b5f
 8002b24:	08002b4b 	.word	0x08002b4b
 8002b28:	08002b5f 	.word	0x08002b5f
 8002b2c:	08002b55 	.word	0x08002b55
  {
    case LSM6DSOX_125dps:
      *FullScale =  125;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	227d      	movs	r2, #125	; 0x7d
 8002b34:	601a      	str	r2, [r3, #0]
      break;
 8002b36:	e016      	b.n	8002b66 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_250dps:
      *FullScale =  250;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	22fa      	movs	r2, #250	; 0xfa
 8002b3c:	601a      	str	r2, [r3, #0]
      break;
 8002b3e:	e012      	b.n	8002b66 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_500dps:
      *FullScale =  500;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b46:	601a      	str	r2, [r3, #0]
      break;
 8002b48:	e00d      	b.n	8002b66 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_1000dps:
      *FullScale = 1000;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b50:	601a      	str	r2, [r3, #0]
      break;
 8002b52:	e008      	b.n	8002b66 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    case LSM6DSOX_2000dps:
      *FullScale = 2000;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b5a:	601a      	str	r2, [r3, #0]
      break;
 8002b5c:	e003      	b.n	8002b66 <LSM6DSOX_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSOX_ERROR;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	60fb      	str	r3, [r7, #12]
      break;
 8002b64:	bf00      	nop
  }

  return ret;
 8002b66:	68fb      	ldr	r3, [r7, #12]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <LSM6DSOX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_SetFullScale(LSM6DSOX_Object_t *pObj, int32_t FullScale)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  lsm6dsox_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
           : (FullScale <= 250)  ? LSM6DSOX_250dps
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b7d      	cmp	r3, #125	; 0x7d
 8002b7e:	dd12      	ble.n	8002ba6 <LSM6DSOX_GYRO_SetFullScale+0x36>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2bfa      	cmp	r3, #250	; 0xfa
 8002b84:	dd0d      	ble.n	8002ba2 <LSM6DSOX_GYRO_SetFullScale+0x32>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b8c:	dd07      	ble.n	8002b9e <LSM6DSOX_GYRO_SetFullScale+0x2e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b94:	dc01      	bgt.n	8002b9a <LSM6DSOX_GYRO_SetFullScale+0x2a>
 8002b96:	2304      	movs	r3, #4
 8002b98:	e006      	b.n	8002ba8 <LSM6DSOX_GYRO_SetFullScale+0x38>
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	e004      	b.n	8002ba8 <LSM6DSOX_GYRO_SetFullScale+0x38>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e002      	b.n	8002ba8 <LSM6DSOX_GYRO_SetFullScale+0x38>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <LSM6DSOX_GYRO_SetFullScale+0x38>
 8002ba6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSOX_125dps
 8002ba8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSOX_500dps
           : (FullScale <= 1000) ? LSM6DSOX_1000dps
           :                       LSM6DSOX_2000dps;

  if (lsm6dsox_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSOX_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	331c      	adds	r3, #28
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fd74 	bl	80036a0 <lsm6dsox_gy_full_scale_set>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <LSM6DSOX_GYRO_SetFullScale+0x54>
  {
    return LSM6DSOX_ERROR;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	e000      	b.n	8002bc6 <LSM6DSOX_GYRO_SetFullScale+0x56>
  }

  return LSM6DSOX_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <LSM6DSOX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_GetAxesRaw(LSM6DSOX_Object_t *pObj, LSM6DSOX_AxesRaw_t *Value)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	331c      	adds	r3, #28
 8002bdc:	f107 0208 	add.w	r2, r7, #8
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 ffc0 	bl	8003b68 <lsm6dsox_angular_rate_raw_get>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <LSM6DSOX_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSOX_ERROR;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e00c      	b.n	8002c0e <LSM6DSOX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002bf4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002bfc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002c04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	809a      	strh	r2, [r3, #4]

  return LSM6DSOX_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <LSM6DSOX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_GYRO_GetAxes(LSM6DSOX_Object_t *pObj, LSM6DSOX_Axes_t *AngularRate)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  lsm6dsox_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsox_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSOX_OK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	331c      	adds	r3, #28
 8002c24:	f107 0210 	add.w	r2, r7, #16
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 ff9c 	bl	8003b68 <lsm6dsox_angular_rate_raw_get>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <LSM6DSOX_GYRO_GetAxes+0x26>
  {
    return LSM6DSOX_ERROR;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e03c      	b.n	8002cb6 <LSM6DSOX_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSOX actual sensitivity. */
  if (LSM6DSOX_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSOX_OK)
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fddc 	bl	8002800 <LSM6DSOX_GYRO_GetSensitivity>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <LSM6DSOX_GYRO_GetAxes+0x3e>
  {
    return LSM6DSOX_ERROR;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	e030      	b.n	8002cb6 <LSM6DSOX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c6c:	ee17 2a90 	vmov	r2, s15
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c8c:	ee17 2a90 	vmov	r2, s15
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cac:	ee17 2a90 	vmov	r2, s15
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	609a      	str	r2, [r3, #8]

  return LSM6DSOX_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <LSM6DSOX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSOX_Write_Reg(LSM6DSOX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	70fb      	strb	r3, [r7, #3]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsox_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSOX_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 001c 	add.w	r0, r3, #28
 8002cd4:	1cba      	adds	r2, r7, #2
 8002cd6:	78f9      	ldrb	r1, [r7, #3]
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f000 fa8f 	bl	80031fc <lsm6dsox_write_reg>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <LSM6DSOX_Write_Reg+0x2c>
  {
    return LSM6DSOX_ERROR;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	e000      	b.n	8002cec <LSM6DSOX_Write_Reg+0x2e>
  }

  return LSM6DSOX_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Enabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsox_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8002d00:	edd7 7a00 	vldr	s15, [r7]
 8002d04:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002e04 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8002d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d10:	d801      	bhi.n	8002d16 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002d12:	230b      	movs	r3, #11
 8002d14:	e063      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002d16:	edd7 7a00 	vldr	s15, [r7]
 8002d1a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d26:	d801      	bhi.n	8002d2c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e058      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002d2c:	edd7 7a00 	vldr	s15, [r7]
 8002d30:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3c:	d801      	bhi.n	8002d42 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e04d      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002d42:	edd7 7a00 	vldr	s15, [r7]
 8002d46:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002e08 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8002d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d52:	d801      	bhi.n	8002d58 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e042      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002d58:	edd7 7a00 	vldr	s15, [r7]
 8002d5c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002e0c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x118>
 8002d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d68:	d801      	bhi.n	8002d6e <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	e037      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002d6e:	edd7 7a00 	vldr	s15, [r7]
 8002d72:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002e10 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8002d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	d801      	bhi.n	8002d84 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002d80:	2305      	movs	r3, #5
 8002d82:	e02c      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002d84:	edd7 7a00 	vldr	s15, [r7]
 8002d88:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002e14 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x120>
 8002d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	d801      	bhi.n	8002d9a <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8002d96:	2306      	movs	r3, #6
 8002d98:	e021      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002d9a:	edd7 7a00 	vldr	s15, [r7]
 8002d9e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002e18 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x124>
 8002da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	d801      	bhi.n	8002db0 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002dac:	2307      	movs	r3, #7
 8002dae:	e016      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002db0:	edd7 7a00 	vldr	s15, [r7]
 8002db4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002e1c <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x128>
 8002db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc0:	d801      	bhi.n	8002dc6 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	e00b      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002dc6:	edd7 7a00 	vldr	s15, [r7]
 8002dca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002e20 <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8002dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d801      	bhi.n	8002ddc <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8002dd8:	2309      	movs	r3, #9
 8002dda:	e000      	b.n	8002dde <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0xea>
 8002ddc:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 8002dde:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
          :                    LSM6DSOX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsox_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	331c      	adds	r3, #28
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fa7d 	bl	80032e8 <lsm6dsox_xl_data_rate_set>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSOX_ERROR;
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	e000      	b.n	8002dfc <LSM6DSOX_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSOX_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	3fcccccd 	.word	0x3fcccccd
 8002e08:	42500000 	.word	0x42500000
 8002e0c:	42d00000 	.word	0x42d00000
 8002e10:	43500000 	.word	0x43500000
 8002e14:	43d08000 	.word	0x43d08000
 8002e18:	44504000 	.word	0x44504000
 8002e1c:	44d06000 	.word	0x44d06000
 8002e20:	45505000 	.word	0x45505000

08002e24 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSOX_ACC_SetOutputDataRate_When_Disabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSOX_XL_ODR_12Hz5
 8002e30:	edd7 7a00 	vldr	s15, [r7]
 8002e34:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002f24 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e40:	d801      	bhi.n	8002e46 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002e42:	230b      	movs	r3, #11
 8002e44:	e063      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002e46:	edd7 7a00 	vldr	s15, [r7]
 8002e4a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	d801      	bhi.n	8002e5c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e058      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002e5c:	edd7 7a00 	vldr	s15, [r7]
 8002e60:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	d801      	bhi.n	8002e72 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e04d      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002e72:	edd7 7a00 	vldr	s15, [r7]
 8002e76:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002f28 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x104>
 8002e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	d801      	bhi.n	8002e88 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002e84:	2303      	movs	r3, #3
 8002e86:	e042      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002e88:	edd7 7a00 	vldr	s15, [r7]
 8002e8c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002f2c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x108>
 8002e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e98:	d801      	bhi.n	8002e9e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	e037      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002e9e:	edd7 7a00 	vldr	s15, [r7]
 8002ea2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f30 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8002ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eae:	d801      	bhi.n	8002eb4 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002eb0:	2305      	movs	r3, #5
 8002eb2:	e02c      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002eb4:	edd7 7a00 	vldr	s15, [r7]
 8002eb8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002f34 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	d801      	bhi.n	8002eca <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8002ec6:	2306      	movs	r3, #6
 8002ec8:	e021      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002eca:	edd7 7a00 	vldr	s15, [r7]
 8002ece:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002f38 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x114>
 8002ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eda:	d801      	bhi.n	8002ee0 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8002edc:	2307      	movs	r3, #7
 8002ede:	e016      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002ee0:	edd7 7a00 	vldr	s15, [r7]
 8002ee4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002f3c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	d801      	bhi.n	8002ef6 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	e00b      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002ef6:	edd7 7a00 	vldr	s15, [r7]
 8002efa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002f40 <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8002efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	d801      	bhi.n	8002f0c <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002f08:	2309      	movs	r3, #9
 8002f0a:	e000      	b.n	8002f0e <LSM6DSOX_ACC_SetOutputDataRate_When_Disabled+0xea>
 8002f0c:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSOX_XL_ODR_1Hz6
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSOX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSOX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSOX_XL_ODR_3333Hz
                :                    LSM6DSOX_XL_ODR_6667Hz;

  return LSM6DSOX_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	3fcccccd 	.word	0x3fcccccd
 8002f28:	42500000 	.word	0x42500000
 8002f2c:	42d00000 	.word	0x42d00000
 8002f30:	43500000 	.word	0x43500000
 8002f34:	43d08000 	.word	0x43d08000
 8002f38:	44504000 	.word	0x44504000
 8002f3c:	44d06000 	.word	0x44d06000
 8002f40:	45505000 	.word	0x45505000

08002f44 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsox_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8002f50:	edd7 7a00 	vldr	s15, [r7]
 8002f54:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	d801      	bhi.n	8002f66 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e058      	b.n	8003018 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002f66:	edd7 7a00 	vldr	s15, [r7]
 8002f6a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	d801      	bhi.n	8002f7c <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e04d      	b.n	8003018 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002f7c:	edd7 7a00 	vldr	s15, [r7]
 8002f80:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003040 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8002f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d801      	bhi.n	8002f92 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e042      	b.n	8003018 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002f92:	edd7 7a00 	vldr	s15, [r7]
 8002f96:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003044 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8002f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	d801      	bhi.n	8002fa8 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e037      	b.n	8003018 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002fa8:	edd7 7a00 	vldr	s15, [r7]
 8002fac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003048 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8002fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb8:	d801      	bhi.n	8002fbe <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8002fba:	2305      	movs	r3, #5
 8002fbc:	e02c      	b.n	8003018 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002fbe:	edd7 7a00 	vldr	s15, [r7]
 8002fc2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800304c <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8002fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fce:	d801      	bhi.n	8002fd4 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8002fd0:	2306      	movs	r3, #6
 8002fd2:	e021      	b.n	8003018 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002fd4:	edd7 7a00 	vldr	s15, [r7]
 8002fd8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003050 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8002fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe4:	d801      	bhi.n	8002fea <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	e016      	b.n	8003018 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002fea:	edd7 7a00 	vldr	s15, [r7]
 8002fee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003054 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8002ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	d801      	bhi.n	8003000 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	e00b      	b.n	8003018 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003000:	edd7 7a00 	vldr	s15, [r7]
 8003004:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003058 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	d801      	bhi.n	8003016 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003012:	2309      	movs	r3, #9
 8003014:	e000      	b.n	8003018 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003016:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
 8003018:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSOX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSOX_GY_ODR_3333Hz
          :                    LSM6DSOX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dsox_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSOX_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	331c      	adds	r3, #28
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fba4 	bl	8003770 <lsm6dsox_gy_data_rate_set>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSOX_ERROR;
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	e000      	b.n	8003036 <LSM6DSOX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSOX_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	42500000 	.word	0x42500000
 8003044:	42d00000 	.word	0x42d00000
 8003048:	43500000 	.word	0x43500000
 800304c:	43d08000 	.word	0x43d08000
 8003050:	44504000 	.word	0x44504000
 8003054:	44d06000 	.word	0x44d06000
 8003058:	45505000 	.word	0x45505000

0800305c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled(LSM6DSOX_Object_t *pObj, float Odr)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSOX_GY_ODR_26Hz
 8003068:	edd7 7a00 	vldr	s15, [r7]
 800306c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003078:	d801      	bhi.n	800307e <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800307a:	2301      	movs	r3, #1
 800307c:	e058      	b.n	8003130 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800307e:	edd7 7a00 	vldr	s15, [r7]
 8003082:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308e:	d801      	bhi.n	8003094 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003090:	2302      	movs	r3, #2
 8003092:	e04d      	b.n	8003130 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003094:	edd7 7a00 	vldr	s15, [r7]
 8003098:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003144 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800309c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a4:	d801      	bhi.n	80030aa <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80030a6:	2303      	movs	r3, #3
 80030a8:	e042      	b.n	8003130 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80030aa:	edd7 7a00 	vldr	s15, [r7]
 80030ae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003148 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80030b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ba:	d801      	bhi.n	80030c0 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80030bc:	2304      	movs	r3, #4
 80030be:	e037      	b.n	8003130 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80030c0:	edd7 7a00 	vldr	s15, [r7]
 80030c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800314c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80030c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	d801      	bhi.n	80030d6 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80030d2:	2305      	movs	r3, #5
 80030d4:	e02c      	b.n	8003130 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80030d6:	edd7 7a00 	vldr	s15, [r7]
 80030da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003150 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80030de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e6:	d801      	bhi.n	80030ec <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80030e8:	2306      	movs	r3, #6
 80030ea:	e021      	b.n	8003130 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80030ec:	edd7 7a00 	vldr	s15, [r7]
 80030f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003154 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80030f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fc:	d801      	bhi.n	8003102 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80030fe:	2307      	movs	r3, #7
 8003100:	e016      	b.n	8003130 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003102:	edd7 7a00 	vldr	s15, [r7]
 8003106:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003158 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800310a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	d801      	bhi.n	8003118 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003114:	2308      	movs	r3, #8
 8003116:	e00b      	b.n	8003130 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003118:	edd7 7a00 	vldr	s15, [r7]
 800311c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800315c <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003128:	d801      	bhi.n	800312e <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800312a:	2309      	movs	r3, #9
 800312c:	e000      	b.n	8003130 <LSM6DSOX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800312e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSOX_GY_ODR_12Hz5
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSOX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSOX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSOX_GY_ODR_3333Hz
                 :                    LSM6DSOX_GY_ODR_6667Hz;

  return LSM6DSOX_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	42500000 	.word	0x42500000
 8003148:	42d00000 	.word	0x42d00000
 800314c:	43500000 	.word	0x43500000
 8003150:	43d08000 	.word	0x43d08000
 8003154:	44504000 	.word	0x44504000
 8003158:	44d06000 	.word	0x44d06000
 800315c:	45505000 	.word	0x45505000

08003160 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	460b      	mov	r3, r1
 800316e:	72fb      	strb	r3, [r7, #11]
 8003170:	4613      	mov	r3, r2
 8003172:	813b      	strh	r3, [r7, #8]
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	695c      	ldr	r4, [r3, #20]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	7b1b      	ldrb	r3, [r3, #12]
 8003180:	b298      	uxth	r0, r3
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	b299      	uxth	r1, r3
 8003186:	893b      	ldrh	r3, [r7, #8]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	47a0      	blx	r4
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}

08003196 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003196:	b590      	push	{r4, r7, lr}
 8003198:	b087      	sub	sp, #28
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	461a      	mov	r2, r3
 80031a2:	460b      	mov	r3, r1
 80031a4:	72fb      	strb	r3, [r7, #11]
 80031a6:	4613      	mov	r3, r2
 80031a8:	813b      	strh	r3, [r7, #8]
  LSM6DSOX_Object_t *pObj = (LSM6DSOX_Object_t *)Handle;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	691c      	ldr	r4, [r3, #16]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	7b1b      	ldrb	r3, [r3, #12]
 80031b6:	b298      	uxth	r0, r3
 80031b8:	7afb      	ldrb	r3, [r7, #11]
 80031ba:	b299      	uxth	r1, r3
 80031bc:	893b      	ldrh	r3, [r7, #8]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	47a0      	blx	r4
 80031c2:	4603      	mov	r3, r0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}

080031cc <lsm6dsox_read_reg>:
  *
  */
int32_t lsm6dsox_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	461a      	mov	r2, r3
 80031d8:	460b      	mov	r3, r1
 80031da:	72fb      	strb	r3, [r7, #11]
 80031dc:	4613      	mov	r3, r2
 80031de:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685c      	ldr	r4, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6898      	ldr	r0, [r3, #8]
 80031e8:	893b      	ldrh	r3, [r7, #8]
 80031ea:	7af9      	ldrb	r1, [r7, #11]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	47a0      	blx	r4
 80031f0:	6178      	str	r0, [r7, #20]
  return ret;
 80031f2:	697b      	ldr	r3, [r7, #20]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}

080031fc <lsm6dsox_write_reg>:
  *
  */
int32_t lsm6dsox_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	461a      	mov	r2, r3
 8003208:	460b      	mov	r3, r1
 800320a:	72fb      	strb	r3, [r7, #11]
 800320c:	4613      	mov	r3, r2
 800320e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681c      	ldr	r4, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6898      	ldr	r0, [r3, #8]
 8003218:	893b      	ldrh	r3, [r7, #8]
 800321a:	7af9      	ldrb	r1, [r7, #11]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	47a0      	blx	r4
 8003220:	6178      	str	r0, [r7, #20]
  return ret;
 8003222:	697b      	ldr	r3, [r7, #20]
}
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd90      	pop	{r4, r7, pc}

0800322c <lsm6dsox_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsox_xl_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003238:	f107 0208 	add.w	r2, r7, #8
 800323c:	2301      	movs	r3, #1
 800323e:	2110      	movs	r1, #16
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ffc3 	bl	80031cc <lsm6dsox_read_reg>
 8003246:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <lsm6dsox_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	b2da      	uxtb	r2, r3
 8003256:	7a3b      	ldrb	r3, [r7, #8]
 8003258:	f362 0383 	bfi	r3, r2, #2, #2
 800325c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800325e:	f107 0208 	add.w	r2, r7, #8
 8003262:	2301      	movs	r3, #1
 8003264:	2110      	movs	r1, #16
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffc8 	bl	80031fc <lsm6dsox_write_reg>
 800326c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <lsm6dsox_xl_full_scale_get>:
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsox_xl_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t *val)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8003282:	f107 0208 	add.w	r2, r7, #8
 8003286:	2301      	movs	r3, #1
 8003288:	2110      	movs	r1, #16
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ff9e 	bl	80031cc <lsm6dsox_read_reg>
 8003290:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl) {
 8003292:	7a3b      	ldrb	r3, [r7, #8]
 8003294:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b03      	cmp	r3, #3
 800329c:	d81a      	bhi.n	80032d4 <lsm6dsox_xl_full_scale_get+0x5c>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <lsm6dsox_xl_full_scale_get+0x2c>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032b5 	.word	0x080032b5
 80032a8:	080032bd 	.word	0x080032bd
 80032ac:	080032c5 	.word	0x080032c5
 80032b0:	080032cd 	.word	0x080032cd
    case LSM6DSOX_2g:
      *val = LSM6DSOX_2g;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
      break;
 80032ba:	e00f      	b.n	80032dc <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_16g:
      *val = LSM6DSOX_16g;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
      break;
 80032c2:	e00b      	b.n	80032dc <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_4g:
      *val = LSM6DSOX_4g;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2202      	movs	r2, #2
 80032c8:	701a      	strb	r2, [r3, #0]
      break;
 80032ca:	e007      	b.n	80032dc <lsm6dsox_xl_full_scale_get+0x64>

    case LSM6DSOX_8g:
      *val = LSM6DSOX_8g;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2203      	movs	r2, #3
 80032d0:	701a      	strb	r2, [r3, #0]
      break;
 80032d2:	e003      	b.n	80032dc <lsm6dsox_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSOX_2g;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
      break;
 80032da:	bf00      	nop
  }

  return ret;
 80032dc:	68fb      	ldr	r3, [r7, #12]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop

080032e8 <lsm6dsox_xl_data_rate_set>:
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsox_xl_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_emb_sens_t emb_sens;
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fd91 	bl	8003e26 <lsm6dsox_fsm_enable_get>
 8003304:	61b8      	str	r0, [r7, #24]

  if (ret == 0) {
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 80c4 	bne.w	8003496 <lsm6dsox_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800330e:	7d3b      	ldrb	r3, [r7, #20]
 8003310:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003314:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8003316:	7d3b      	ldrb	r3, [r7, #20]
 8003318:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800331c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800331e:	4313      	orrs	r3, r2
 8003320:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003322:	7d3b      	ldrb	r3, [r7, #20]
 8003324:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003328:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800332a:	4313      	orrs	r3, r2
 800332c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800332e:	7d3b      	ldrb	r3, [r7, #20]
 8003330:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003334:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8003336:	4313      	orrs	r3, r2
 8003338:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800333a:	7d3b      	ldrb	r3, [r7, #20]
 800333c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003340:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8003342:	4313      	orrs	r3, r2
 8003344:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8003346:	7d3b      	ldrb	r3, [r7, #20]
 8003348:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800334c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800334e:	4313      	orrs	r3, r2
 8003350:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003352:	7d3b      	ldrb	r3, [r7, #20]
 8003354:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003358:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800335a:	4313      	orrs	r3, r2
 800335c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800335e:	7d3b      	ldrb	r3, [r7, #20]
 8003360:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003364:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8003366:	4313      	orrs	r3, r2
 8003368:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800336a:	7d7b      	ldrb	r3, [r7, #21]
 800336c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003370:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8003372:	4313      	orrs	r3, r2
 8003374:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003376:	7d7b      	ldrb	r3, [r7, #21]
 8003378:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800337c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800337e:	4313      	orrs	r3, r2
 8003380:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003382:	7d7b      	ldrb	r3, [r7, #21]
 8003384:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003388:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800338a:	4313      	orrs	r3, r2
 800338c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800338e:	7d7b      	ldrb	r3, [r7, #21]
 8003390:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003394:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8003396:	4313      	orrs	r3, r2
 8003398:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800339a:	7d7b      	ldrb	r3, [r7, #21]
 800339c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033a0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80033a2:	4313      	orrs	r3, r2
 80033a4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80033a6:	7d7b      	ldrb	r3, [r7, #21]
 80033a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80033ac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80033ae:	4313      	orrs	r3, r2
 80033b0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80033b2:	7d7b      	ldrb	r3, [r7, #21]
 80033b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80033b8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80033ba:	4313      	orrs	r3, r2
 80033bc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 80033be:	7d7b      	ldrb	r3, [r7, #21]
 80033c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80033c4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80033c6:	4313      	orrs	r3, r2
 80033c8:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d163      	bne.n	8003496 <lsm6dsox_xl_data_rate_set+0x1ae>
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 80033ce:	f107 0313 	add.w	r3, r7, #19
 80033d2:	4619      	mov	r1, r3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fd47 	bl	8003e68 <lsm6dsox_fsm_data_rate_get>
 80033da:	61b8      	str	r0, [r7, #24]

      if (ret == 0) {
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d159      	bne.n	8003496 <lsm6dsox_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80033e2:	7cfb      	ldrb	r3, [r7, #19]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d853      	bhi.n	8003490 <lsm6dsox_xl_data_rate_set+0x1a8>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <lsm6dsox_xl_data_rate_set+0x108>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003413 	.word	0x08003413
 80033f8:	08003431 	.word	0x08003431
 80033fc:	0800345b 	.word	0x0800345b
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF) {
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <lsm6dsox_xl_data_rate_set+0x124>
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 8003406:	2301      	movs	r3, #1
 8003408:	77fb      	strb	r3, [r7, #31]

            else {
              odr_xl = val;
            }

            break;
 800340a:	e045      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	77fb      	strb	r3, [r7, #31]
            break;
 8003410:	e042      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF) {
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d102      	bne.n	800341e <lsm6dsox_xl_data_rate_set+0x136>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003418:	2302      	movs	r3, #2
 800341a:	77fb      	strb	r3, [r7, #31]

            else {
              odr_xl = val;
            }

            break;
 800341c:	e03c      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5) {
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d102      	bne.n	800342a <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003424:	2302      	movs	r3, #2
 8003426:	77fb      	strb	r3, [r7, #31]
            break;
 8003428:	e036      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	77fb      	strb	r3, [r7, #31]
            break;
 800342e:	e033      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF) {
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <lsm6dsox_xl_data_rate_set+0x154>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003436:	2303      	movs	r3, #3
 8003438:	77fb      	strb	r3, [r7, #31]

            else {
              odr_xl = val;
            }

            break;
 800343a:	e02d      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5) {
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003442:	2303      	movs	r3, #3
 8003444:	77fb      	strb	r3, [r7, #31]
            break;
 8003446:	e027      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz) {
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d102      	bne.n	8003454 <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800344e:	2303      	movs	r3, #3
 8003450:	77fb      	strb	r3, [r7, #31]
            break;
 8003452:	e021      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	77fb      	strb	r3, [r7, #31]
            break;
 8003458:	e01e      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF) {
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <lsm6dsox_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003460:	2304      	movs	r3, #4
 8003462:	77fb      	strb	r3, [r7, #31]

            else {
              odr_xl = val;
            }

            break;
 8003464:	e018      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5) {
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800346c:	2304      	movs	r3, #4
 800346e:	77fb      	strb	r3, [r7, #31]
            break;
 8003470:	e012      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz) {
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d102      	bne.n	800347e <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
            break;
 800347c:	e00c      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_52Hz) {
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d102      	bne.n	800348a <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003484:	2304      	movs	r3, #4
 8003486:	77fb      	strb	r3, [r7, #31]
            break;
 8003488:	e006      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	77fb      	strb	r3, [r7, #31]
            break;
 800348e:	e003      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	77fb      	strb	r3, [r7, #31]
            break;
 8003494:	e000      	b.n	8003498 <lsm6dsox_xl_data_rate_set+0x1b0>
        }
      }
 8003496:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8003498:	7c3b      	ldrb	r3, [r7, #16]
 800349a:	f36f 03c3 	bfc	r3, #3, #1
 800349e:	743b      	strb	r3, [r7, #16]

  if (ret == 0) {
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d16f      	bne.n	8003586 <lsm6dsox_xl_data_rate_set+0x29e>
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 80034a6:	f107 0310 	add.w	r3, r7, #16
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fd6b 	bl	8003f88 <lsm6dsox_embedded_sens_get>

    if ( emb_sens.mlc == PROPERTY_ENABLE ) {
 80034b2:	7c3b      	ldrb	r3, [r7, #16]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <lsm6dsox_xl_data_rate_set+0x29e>
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 80034be:	f107 030f 	add.w	r3, r7, #15
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fd17 	bl	8003ef8 <lsm6dsox_mlc_data_rate_get>
 80034ca:	61b8      	str	r0, [r7, #24]

      if (ret == 0) {
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d159      	bne.n	8003586 <lsm6dsox_xl_data_rate_set+0x29e>
        switch (mlc_odr) {
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d853      	bhi.n	8003580 <lsm6dsox_xl_data_rate_set+0x298>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <lsm6dsox_xl_data_rate_set+0x1f8>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003503 	.word	0x08003503
 80034e8:	08003521 	.word	0x08003521
 80034ec:	0800354b 	.word	0x0800354b
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF) {
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <lsm6dsox_xl_data_rate_set+0x214>
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 80034f6:	2301      	movs	r3, #1
 80034f8:	77fb      	strb	r3, [r7, #31]

            else {
              odr_xl = val;
            }

            break;
 80034fa:	e045      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	77fb      	strb	r3, [r7, #31]
            break;
 8003500:	e042      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF) {
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <lsm6dsox_xl_data_rate_set+0x226>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003508:	2302      	movs	r3, #2
 800350a:	77fb      	strb	r3, [r7, #31]

            else {
              odr_xl = val;
            }

            break;
 800350c:	e03c      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5) {
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <lsm6dsox_xl_data_rate_set+0x232>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8003514:	2302      	movs	r3, #2
 8003516:	77fb      	strb	r3, [r7, #31]
            break;
 8003518:	e036      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	77fb      	strb	r3, [r7, #31]
            break;
 800351e:	e033      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF) {
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <lsm6dsox_xl_data_rate_set+0x244>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003526:	2303      	movs	r3, #3
 8003528:	77fb      	strb	r3, [r7, #31]

            else {
              odr_xl = val;
            }

            break;
 800352a:	e02d      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5) {
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d102      	bne.n	8003538 <lsm6dsox_xl_data_rate_set+0x250>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8003532:	2303      	movs	r3, #3
 8003534:	77fb      	strb	r3, [r7, #31]
            break;
 8003536:	e027      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz) {
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d102      	bne.n	8003544 <lsm6dsox_xl_data_rate_set+0x25c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800353e:	2303      	movs	r3, #3
 8003540:	77fb      	strb	r3, [r7, #31]
            break;
 8003542:	e021      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	77fb      	strb	r3, [r7, #31]
            break;
 8003548:	e01e      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF) {
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <lsm6dsox_xl_data_rate_set+0x26e>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003550:	2304      	movs	r3, #4
 8003552:	77fb      	strb	r3, [r7, #31]

            else {
              odr_xl = val;
            }

            break;
 8003554:	e018      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5) {
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d102      	bne.n	8003562 <lsm6dsox_xl_data_rate_set+0x27a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800355c:	2304      	movs	r3, #4
 800355e:	77fb      	strb	r3, [r7, #31]
            break;
 8003560:	e012      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz) {
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d102      	bne.n	800356e <lsm6dsox_xl_data_rate_set+0x286>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003568:	2304      	movs	r3, #4
 800356a:	77fb      	strb	r3, [r7, #31]
            break;
 800356c:	e00c      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_52Hz) {
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d102      	bne.n	800357a <lsm6dsox_xl_data_rate_set+0x292>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8003574:	2304      	movs	r3, #4
 8003576:	77fb      	strb	r3, [r7, #31]
            break;
 8003578:	e006      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	77fb      	strb	r3, [r7, #31]
            break;
 800357e:	e003      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>

          default:
            odr_xl = val;
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	77fb      	strb	r3, [r7, #31]
            break;
 8003584:	e000      	b.n	8003588 <lsm6dsox_xl_data_rate_set+0x2a0>
        }
      }
 8003586:	bf00      	nop
    }
  }

  if (ret == 0) {
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <lsm6dsox_xl_data_rate_set+0x2b6>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 800358e:	f107 020c 	add.w	r2, r7, #12
 8003592:	2301      	movs	r3, #1
 8003594:	2110      	movs	r1, #16
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fe18 	bl	80031cc <lsm6dsox_read_reg>
 800359c:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0) {
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <lsm6dsox_xl_data_rate_set+0x2dc>
    reg.odr_xl = (uint8_t) odr_xl;
 80035a4:	7ffb      	ldrb	r3, [r7, #31]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	7b3b      	ldrb	r3, [r7, #12]
 80035ae:	f362 1307 	bfi	r3, r2, #4, #4
 80035b2:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 80035b4:	f107 020c 	add.w	r2, r7, #12
 80035b8:	2301      	movs	r3, #1
 80035ba:	2110      	movs	r1, #16
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff fe1d 	bl	80031fc <lsm6dsox_write_reg>
 80035c2:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 80035c4:	69bb      	ldr	r3, [r7, #24]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop

080035d0 <lsm6dsox_xl_data_rate_get>:
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dsox_xl_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t *val)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 80035da:	f107 0208 	add.w	r2, r7, #8
 80035de:	2301      	movs	r3, #1
 80035e0:	2110      	movs	r1, #16
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff fdf2 	bl	80031cc <lsm6dsox_read_reg>
 80035e8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 80035ea:	7a3b      	ldrb	r3, [r7, #8]
 80035ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b0b      	cmp	r3, #11
 80035f4:	d84a      	bhi.n	800368c <lsm6dsox_xl_data_rate_get+0xbc>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <lsm6dsox_xl_data_rate_get+0x2c>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	0800362d 	.word	0x0800362d
 8003600:	08003635 	.word	0x08003635
 8003604:	0800363d 	.word	0x0800363d
 8003608:	08003645 	.word	0x08003645
 800360c:	0800364d 	.word	0x0800364d
 8003610:	08003655 	.word	0x08003655
 8003614:	0800365d 	.word	0x0800365d
 8003618:	08003665 	.word	0x08003665
 800361c:	0800366d 	.word	0x0800366d
 8003620:	08003675 	.word	0x08003675
 8003624:	0800367d 	.word	0x0800367d
 8003628:	08003685 	.word	0x08003685
    case LSM6DSOX_XL_ODR_OFF:
      *val = LSM6DSOX_XL_ODR_OFF;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2200      	movs	r2, #0
 8003630:	701a      	strb	r2, [r3, #0]
      break;
 8003632:	e02f      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_12Hz5:
      *val = LSM6DSOX_XL_ODR_12Hz5;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
      break;
 800363a:	e02b      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_26Hz:
      *val = LSM6DSOX_XL_ODR_26Hz;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
      break;
 8003642:	e027      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_52Hz:
      *val = LSM6DSOX_XL_ODR_52Hz;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2203      	movs	r2, #3
 8003648:	701a      	strb	r2, [r3, #0]
      break;
 800364a:	e023      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_104Hz:
      *val = LSM6DSOX_XL_ODR_104Hz;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2204      	movs	r2, #4
 8003650:	701a      	strb	r2, [r3, #0]
      break;
 8003652:	e01f      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_208Hz:
      *val = LSM6DSOX_XL_ODR_208Hz;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2205      	movs	r2, #5
 8003658:	701a      	strb	r2, [r3, #0]
      break;
 800365a:	e01b      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_417Hz:
      *val = LSM6DSOX_XL_ODR_417Hz;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2206      	movs	r2, #6
 8003660:	701a      	strb	r2, [r3, #0]
      break;
 8003662:	e017      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_833Hz:
      *val = LSM6DSOX_XL_ODR_833Hz;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2207      	movs	r2, #7
 8003668:	701a      	strb	r2, [r3, #0]
      break;
 800366a:	e013      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1667Hz:
      *val = LSM6DSOX_XL_ODR_1667Hz;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2208      	movs	r2, #8
 8003670:	701a      	strb	r2, [r3, #0]
      break;
 8003672:	e00f      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_3333Hz:
      *val = LSM6DSOX_XL_ODR_3333Hz;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2209      	movs	r2, #9
 8003678:	701a      	strb	r2, [r3, #0]
      break;
 800367a:	e00b      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_6667Hz:
      *val = LSM6DSOX_XL_ODR_6667Hz;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	220a      	movs	r2, #10
 8003680:	701a      	strb	r2, [r3, #0]
      break;
 8003682:	e007      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    case LSM6DSOX_XL_ODR_1Hz6:
      *val = LSM6DSOX_XL_ODR_1Hz6;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	220b      	movs	r2, #11
 8003688:	701a      	strb	r2, [r3, #0]
      break;
 800368a:	e003      	b.n	8003694 <lsm6dsox_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSOX_XL_ODR_OFF;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
      break;
 8003692:	bf00      	nop
  }

  return ret;
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop

080036a0 <lsm6dsox_gy_full_scale_set>:
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dsox_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80036ac:	f107 0208 	add.w	r2, r7, #8
 80036b0:	2301      	movs	r3, #1
 80036b2:	2111      	movs	r1, #17
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff fd89 	bl	80031cc <lsm6dsox_read_reg>
 80036ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <lsm6dsox_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	7a3b      	ldrb	r3, [r7, #8]
 80036cc:	f362 0343 	bfi	r3, r2, #1, #3
 80036d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80036d2:	f107 0208 	add.w	r2, r7, #8
 80036d6:	2301      	movs	r3, #1
 80036d8:	2111      	movs	r1, #17
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff fd8e 	bl	80031fc <lsm6dsox_write_reg>
 80036e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <lsm6dsox_gy_full_scale_get>:
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dsox_gy_full_scale_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t *val)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80036f6:	f107 0208 	add.w	r2, r7, #8
 80036fa:	2301      	movs	r3, #1
 80036fc:	2111      	movs	r1, #17
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fd64 	bl	80031cc <lsm6dsox_read_reg>
 8003704:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g) {
 8003706:	7a3b      	ldrb	r3, [r7, #8]
 8003708:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b06      	cmp	r3, #6
 8003710:	d824      	bhi.n	800375c <lsm6dsox_gy_full_scale_get+0x70>
 8003712:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <lsm6dsox_gy_full_scale_get+0x2c>)
 8003714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003718:	08003735 	.word	0x08003735
 800371c:	0800373d 	.word	0x0800373d
 8003720:	08003745 	.word	0x08003745
 8003724:	0800375d 	.word	0x0800375d
 8003728:	0800374d 	.word	0x0800374d
 800372c:	0800375d 	.word	0x0800375d
 8003730:	08003755 	.word	0x08003755
    case LSM6DSOX_250dps:
      *val = LSM6DSOX_250dps;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
      break;
 800373a:	e013      	b.n	8003764 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_125dps:
      *val = LSM6DSOX_125dps;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
      break;
 8003742:	e00f      	b.n	8003764 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_500dps:
      *val = LSM6DSOX_500dps;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2202      	movs	r2, #2
 8003748:	701a      	strb	r2, [r3, #0]
      break;
 800374a:	e00b      	b.n	8003764 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_1000dps:
      *val = LSM6DSOX_1000dps;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2204      	movs	r2, #4
 8003750:	701a      	strb	r2, [r3, #0]
      break;
 8003752:	e007      	b.n	8003764 <lsm6dsox_gy_full_scale_get+0x78>

    case LSM6DSOX_2000dps:
      *val = LSM6DSOX_2000dps;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2206      	movs	r2, #6
 8003758:	701a      	strb	r2, [r3, #0]
      break;
 800375a:	e003      	b.n	8003764 <lsm6dsox_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSOX_250dps;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
      break;
 8003762:	bf00      	nop
  }

  return ret;
 8003764:	68fb      	ldr	r3, [r7, #12]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop

08003770 <lsm6dsox_gy_data_rate_set>:
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dsox_gy_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_emb_sens_t emb_sens;
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fb4d 	bl	8003e26 <lsm6dsox_fsm_enable_get>
 800378c:	61b8      	str	r0, [r7, #24]

  if (ret == 0) {
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 80c4 	bne.w	800391e <lsm6dsox_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003796:	7d3b      	ldrb	r3, [r7, #20]
 8003798:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800379c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800379e:	7d3b      	ldrb	r3, [r7, #20]
 80037a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80037a4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80037aa:	7d3b      	ldrb	r3, [r7, #20]
 80037ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80037b0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80037b2:	4313      	orrs	r3, r2
 80037b4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80037b6:	7d3b      	ldrb	r3, [r7, #20]
 80037b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80037bc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80037be:	4313      	orrs	r3, r2
 80037c0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80037c2:	7d3b      	ldrb	r3, [r7, #20]
 80037c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037c8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80037ce:	7d3b      	ldrb	r3, [r7, #20]
 80037d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80037d4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80037d6:	4313      	orrs	r3, r2
 80037d8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80037da:	7d3b      	ldrb	r3, [r7, #20]
 80037dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037e0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80037e2:	4313      	orrs	r3, r2
 80037e4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80037e6:	7d3b      	ldrb	r3, [r7, #20]
 80037e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037ec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80037f2:	7d7b      	ldrb	r3, [r7, #21]
 80037f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80037f8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80037fa:	4313      	orrs	r3, r2
 80037fc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80037fe:	7d7b      	ldrb	r3, [r7, #21]
 8003800:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003804:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8003806:	4313      	orrs	r3, r2
 8003808:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800380a:	7d7b      	ldrb	r3, [r7, #21]
 800380c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003810:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8003812:	4313      	orrs	r3, r2
 8003814:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8003816:	7d7b      	ldrb	r3, [r7, #21]
 8003818:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800381c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800381e:	4313      	orrs	r3, r2
 8003820:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003822:	7d7b      	ldrb	r3, [r7, #21]
 8003824:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003828:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800382a:	4313      	orrs	r3, r2
 800382c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800382e:	7d7b      	ldrb	r3, [r7, #21]
 8003830:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003834:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8003836:	4313      	orrs	r3, r2
 8003838:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800383a:	7d7b      	ldrb	r3, [r7, #21]
 800383c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003840:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8003842:	4313      	orrs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8003846:	7d7b      	ldrb	r3, [r7, #21]
 8003848:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800384c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800384e:	4313      	orrs	r3, r2
 8003850:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8003852:	2b01      	cmp	r3, #1
 8003854:	d163      	bne.n	800391e <lsm6dsox_gy_data_rate_set+0x1ae>
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8003856:	f107 0313 	add.w	r3, r7, #19
 800385a:	4619      	mov	r1, r3
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fb03 	bl	8003e68 <lsm6dsox_fsm_data_rate_get>
 8003862:	61b8      	str	r0, [r7, #24]

      if (ret == 0) {
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d159      	bne.n	800391e <lsm6dsox_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d853      	bhi.n	8003918 <lsm6dsox_gy_data_rate_set+0x1a8>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <lsm6dsox_gy_data_rate_set+0x108>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	08003889 	.word	0x08003889
 800387c:	0800389b 	.word	0x0800389b
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038e3 	.word	0x080038e3
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF) {
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <lsm6dsox_gy_data_rate_set+0x124>
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 800388e:	2301      	movs	r3, #1
 8003890:	77fb      	strb	r3, [r7, #31]

            else {
              odr_gy = val;
            }

            break;
 8003892:	e045      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	77fb      	strb	r3, [r7, #31]
            break;
 8003898:	e042      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF) {
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <lsm6dsox_gy_data_rate_set+0x136>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80038a0:	2302      	movs	r3, #2
 80038a2:	77fb      	strb	r3, [r7, #31]

            else {
              odr_gy = val;
            }

            break;
 80038a4:	e03c      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5) {
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d102      	bne.n	80038b2 <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 80038ac:	2302      	movs	r3, #2
 80038ae:	77fb      	strb	r3, [r7, #31]
            break;
 80038b0:	e036      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	77fb      	strb	r3, [r7, #31]
            break;
 80038b6:	e033      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF) {
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d102      	bne.n	80038c4 <lsm6dsox_gy_data_rate_set+0x154>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80038be:	2303      	movs	r3, #3
 80038c0:	77fb      	strb	r3, [r7, #31]

            else {
              odr_gy = val;
            }

            break;
 80038c2:	e02d      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5) {
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80038ca:	2303      	movs	r3, #3
 80038cc:	77fb      	strb	r3, [r7, #31]
            break;
 80038ce:	e027      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz) {
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d102      	bne.n	80038dc <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80038d6:	2303      	movs	r3, #3
 80038d8:	77fb      	strb	r3, [r7, #31]
            break;
 80038da:	e021      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	77fb      	strb	r3, [r7, #31]
            break;
 80038e0:	e01e      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF) {
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <lsm6dsox_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80038e8:	2304      	movs	r3, #4
 80038ea:	77fb      	strb	r3, [r7, #31]

            else {
              odr_gy = val;
            }

            break;
 80038ec:	e018      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5) {
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80038f4:	2304      	movs	r3, #4
 80038f6:	77fb      	strb	r3, [r7, #31]
            break;
 80038f8:	e012      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz) {
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d102      	bne.n	8003906 <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 8003900:	2304      	movs	r3, #4
 8003902:	77fb      	strb	r3, [r7, #31]
            break;
 8003904:	e00c      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_52Hz) {
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d102      	bne.n	8003912 <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 800390c:	2304      	movs	r3, #4
 800390e:	77fb      	strb	r3, [r7, #31]
            break;
 8003910:	e006      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	77fb      	strb	r3, [r7, #31]
            break;
 8003916:	e003      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	77fb      	strb	r3, [r7, #31]
            break;
 800391c:	e000      	b.n	8003920 <lsm6dsox_gy_data_rate_set+0x1b0>
        }
      }
 800391e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8003920:	7c3b      	ldrb	r3, [r7, #16]
 8003922:	f36f 03c3 	bfc	r3, #3, #1
 8003926:	743b      	strb	r3, [r7, #16]

  if (ret == 0) {
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d16f      	bne.n	8003a0e <lsm6dsox_gy_data_rate_set+0x29e>
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 800392e:	f107 0310 	add.w	r3, r7, #16
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fb27 	bl	8003f88 <lsm6dsox_embedded_sens_get>
 800393a:	61b8      	str	r0, [r7, #24]

    if ( emb_sens.mlc == PROPERTY_ENABLE ) {
 800393c:	7c3b      	ldrb	r3, [r7, #16]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d062      	beq.n	8003a0e <lsm6dsox_gy_data_rate_set+0x29e>
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8003948:	f107 030f 	add.w	r3, r7, #15
 800394c:	4619      	mov	r1, r3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fad2 	bl	8003ef8 <lsm6dsox_mlc_data_rate_get>
 8003954:	61b8      	str	r0, [r7, #24]

      if (ret == 0) {
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d158      	bne.n	8003a0e <lsm6dsox_gy_data_rate_set+0x29e>
        switch (mlc_odr) {
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d852      	bhi.n	8003a08 <lsm6dsox_gy_data_rate_set+0x298>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <lsm6dsox_gy_data_rate_set+0x1f8>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	08003979 	.word	0x08003979
 800396c:	0800398b 	.word	0x0800398b
 8003970:	080039a9 	.word	0x080039a9
 8003974:	080039d3 	.word	0x080039d3
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF) {
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d102      	bne.n	8003984 <lsm6dsox_gy_data_rate_set+0x214>
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 800397e:	2301      	movs	r3, #1
 8003980:	77fb      	strb	r3, [r7, #31]

            else {
              odr_gy = val;
            }

            break;
 8003982:	e045      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	77fb      	strb	r3, [r7, #31]
            break;
 8003988:	e042      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF) {
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <lsm6dsox_gy_data_rate_set+0x226>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8003990:	2302      	movs	r3, #2
 8003992:	77fb      	strb	r3, [r7, #31]

            else {
              odr_gy = val;
            }

            break;
 8003994:	e03c      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5) {
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d102      	bne.n	80039a2 <lsm6dsox_gy_data_rate_set+0x232>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 800399c:	2302      	movs	r3, #2
 800399e:	77fb      	strb	r3, [r7, #31]
            break;
 80039a0:	e036      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	77fb      	strb	r3, [r7, #31]
            break;
 80039a6:	e033      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF) {
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <lsm6dsox_gy_data_rate_set+0x244>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80039ae:	2303      	movs	r3, #3
 80039b0:	77fb      	strb	r3, [r7, #31]

            else {
              odr_gy = val;
            }

            break;
 80039b2:	e02d      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5) {
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d102      	bne.n	80039c0 <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80039ba:	2303      	movs	r3, #3
 80039bc:	77fb      	strb	r3, [r7, #31]
            break;
 80039be:	e027      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz) {
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d102      	bne.n	80039cc <lsm6dsox_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80039c6:	2303      	movs	r3, #3
 80039c8:	77fb      	strb	r3, [r7, #31]
            break;
 80039ca:	e021      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	77fb      	strb	r3, [r7, #31]
            break;
 80039d0:	e01e      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF) {
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <lsm6dsox_gy_data_rate_set+0x26e>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80039d8:	2304      	movs	r3, #4
 80039da:	77fb      	strb	r3, [r7, #31]

            else {
              odr_gy = val;
            }

            break;
 80039dc:	e018      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5) {
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d102      	bne.n	80039ea <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80039e4:	2304      	movs	r3, #4
 80039e6:	77fb      	strb	r3, [r7, #31]
            break;
 80039e8:	e012      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz) {
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d102      	bne.n	80039f6 <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80039f0:	2304      	movs	r3, #4
 80039f2:	77fb      	strb	r3, [r7, #31]
            break;
 80039f4:	e00c      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_52Hz) {
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d102      	bne.n	8003a02 <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80039fc:	2304      	movs	r3, #4
 80039fe:	77fb      	strb	r3, [r7, #31]
            break;
 8003a00:	e006      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	77fb      	strb	r3, [r7, #31]
            break;
 8003a06:	e003      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>

          default:
            odr_gy = val;
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	77fb      	strb	r3, [r7, #31]
            break;
 8003a0c:	e000      	b.n	8003a10 <lsm6dsox_gy_data_rate_set+0x2a0>
        }
      }
 8003a0e:	bf00      	nop
    }
  }

  if (ret == 0) {
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d107      	bne.n	8003a26 <lsm6dsox_gy_data_rate_set+0x2b6>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8003a16:	f107 020c 	add.w	r2, r7, #12
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	2111      	movs	r1, #17
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff fbd4 	bl	80031cc <lsm6dsox_read_reg>
 8003a24:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0) {
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10f      	bne.n	8003a4c <lsm6dsox_gy_data_rate_set+0x2dc>
    reg.odr_g = (uint8_t) odr_gy;
 8003a2c:	7ffb      	ldrb	r3, [r7, #31]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	7b3b      	ldrb	r3, [r7, #12]
 8003a36:	f362 1307 	bfi	r3, r2, #4, #4
 8003a3a:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8003a3c:	f107 020c 	add.w	r2, r7, #12
 8003a40:	2301      	movs	r3, #1
 8003a42:	2111      	movs	r1, #17
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fbd9 	bl	80031fc <lsm6dsox_write_reg>
 8003a4a:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop

08003a58 <lsm6dsox_gy_data_rate_get>:
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dsox_gy_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t *val)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8003a62:	f107 0208 	add.w	r2, r7, #8
 8003a66:	2301      	movs	r3, #1
 8003a68:	2111      	movs	r1, #17
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fbae 	bl	80031cc <lsm6dsox_read_reg>
 8003a70:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g) {
 8003a72:	7a3b      	ldrb	r3, [r7, #8]
 8003a74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b0a      	cmp	r3, #10
 8003a7c:	d844      	bhi.n	8003b08 <lsm6dsox_gy_data_rate_get+0xb0>
 8003a7e:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <lsm6dsox_gy_data_rate_get+0x2c>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003ab1 	.word	0x08003ab1
 8003a88:	08003ab9 	.word	0x08003ab9
 8003a8c:	08003ac1 	.word	0x08003ac1
 8003a90:	08003ac9 	.word	0x08003ac9
 8003a94:	08003ad1 	.word	0x08003ad1
 8003a98:	08003ad9 	.word	0x08003ad9
 8003a9c:	08003ae1 	.word	0x08003ae1
 8003aa0:	08003ae9 	.word	0x08003ae9
 8003aa4:	08003af1 	.word	0x08003af1
 8003aa8:	08003af9 	.word	0x08003af9
 8003aac:	08003b01 	.word	0x08003b01
    case LSM6DSOX_GY_ODR_OFF:
      *val = LSM6DSOX_GY_ODR_OFF;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
      break;
 8003ab6:	e02b      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_12Hz5:
      *val = LSM6DSOX_GY_ODR_12Hz5;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
      break;
 8003abe:	e027      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_26Hz:
      *val = LSM6DSOX_GY_ODR_26Hz;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	701a      	strb	r2, [r3, #0]
      break;
 8003ac6:	e023      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_52Hz:
      *val = LSM6DSOX_GY_ODR_52Hz;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2203      	movs	r2, #3
 8003acc:	701a      	strb	r2, [r3, #0]
      break;
 8003ace:	e01f      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_104Hz:
      *val = LSM6DSOX_GY_ODR_104Hz;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	701a      	strb	r2, [r3, #0]
      break;
 8003ad6:	e01b      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_208Hz:
      *val = LSM6DSOX_GY_ODR_208Hz;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2205      	movs	r2, #5
 8003adc:	701a      	strb	r2, [r3, #0]
      break;
 8003ade:	e017      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_417Hz:
      *val = LSM6DSOX_GY_ODR_417Hz;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2206      	movs	r2, #6
 8003ae4:	701a      	strb	r2, [r3, #0]
      break;
 8003ae6:	e013      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_833Hz:
      *val = LSM6DSOX_GY_ODR_833Hz;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2207      	movs	r2, #7
 8003aec:	701a      	strb	r2, [r3, #0]
      break;
 8003aee:	e00f      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_1667Hz:
      *val = LSM6DSOX_GY_ODR_1667Hz;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2208      	movs	r2, #8
 8003af4:	701a      	strb	r2, [r3, #0]
      break;
 8003af6:	e00b      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_3333Hz:
      *val = LSM6DSOX_GY_ODR_3333Hz;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2209      	movs	r2, #9
 8003afc:	701a      	strb	r2, [r3, #0]
      break;
 8003afe:	e007      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    case LSM6DSOX_GY_ODR_6667Hz:
      *val = LSM6DSOX_GY_ODR_6667Hz;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	220a      	movs	r2, #10
 8003b04:	701a      	strb	r2, [r3, #0]
      break;
 8003b06:	e003      	b.n	8003b10 <lsm6dsox_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSOX_GY_ODR_OFF;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
      break;
 8003b0e:	bf00      	nop
  }

  return ret;
 8003b10:	68fb      	ldr	r3, [r7, #12]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop

08003b1c <lsm6dsox_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dsox_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003b28:	f107 0208 	add.w	r2, r7, #8
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	2112      	movs	r1, #18
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff fb4b 	bl	80031cc <lsm6dsox_read_reg>
 8003b36:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <lsm6dsox_block_data_update_set+0x42>
    reg.bdu = val;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	7a3b      	ldrb	r3, [r7, #8]
 8003b48:	f362 1386 	bfi	r3, r2, #6, #1
 8003b4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003b4e:	f107 0208 	add.w	r2, r7, #8
 8003b52:	2301      	movs	r3, #1
 8003b54:	2112      	movs	r1, #18
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fb50 	bl	80031fc <lsm6dsox_write_reg>
 8003b5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <lsm6dsox_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 8003b72:	f107 020c 	add.w	r2, r7, #12
 8003b76:	2306      	movs	r3, #6
 8003b78:	2122      	movs	r1, #34	; 0x22
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff fb26 	bl	80031cc <lsm6dsox_read_reg>
 8003b80:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003b82:	7b7b      	ldrb	r3, [r7, #13]
 8003b84:	b21a      	sxth	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	7b3b      	ldrb	r3, [r7, #12]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	b21a      	sxth	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	3302      	adds	r3, #2
 8003baa:	b212      	sxth	r2, r2
 8003bac:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	7bbb      	ldrb	r3, [r7, #14]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	b212      	sxth	r2, r2
 8003bca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003bcc:	7c7a      	ldrb	r2, [r7, #17]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	b212      	sxth	r2, r2
 8003bd4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	7c3b      	ldrb	r3, [r7, #16]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	b212      	sxth	r2, r2
 8003bf2:	801a      	strh	r2, [r3, #0]
  return ret;
 8003bf4:	697b      	ldr	r3, [r7, #20]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <lsm6dsox_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dsox_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 8003c08:	f107 020c 	add.w	r2, r7, #12
 8003c0c:	2306      	movs	r3, #6
 8003c0e:	2128      	movs	r1, #40	; 0x28
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fadb 	bl	80031cc <lsm6dsox_read_reg>
 8003c16:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c18:	7b7b      	ldrb	r3, [r7, #13]
 8003c1a:	b21a      	sxth	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	7b3b      	ldrb	r3, [r7, #12]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	b21a      	sxth	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	3302      	adds	r3, #2
 8003c40:	b212      	sxth	r2, r2
 8003c42:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	3302      	adds	r3, #2
 8003c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	7bbb      	ldrb	r3, [r7, #14]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	b212      	sxth	r2, r2
 8003c60:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c62:	7c7a      	ldrb	r2, [r7, #17]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	3304      	adds	r3, #4
 8003c68:	b212      	sxth	r2, r2
 8003c6a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	7c3b      	ldrb	r3, [r7, #16]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	3304      	adds	r3, #4
 8003c86:	b212      	sxth	r2, r2
 8003c88:	801a      	strh	r2, [r3, #0]
  return ret;
 8003c8a:	697b      	ldr	r3, [r7, #20]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <lsm6dsox_mem_bank_set>:
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dsox_mem_bank_set(stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8003ca0:	f107 0208 	add.w	r2, r7, #8
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff fa8f 	bl	80031cc <lsm6dsox_read_reg>
 8003cae:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0) {
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <lsm6dsox_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	7a3b      	ldrb	r3, [r7, #8]
 8003cc0:	f362 1387 	bfi	r3, r2, #6, #2
 8003cc4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8003cc6:	f107 0208 	add.w	r2, r7, #8
 8003cca:	2301      	movs	r3, #1
 8003ccc:	2101      	movs	r1, #1
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff fa94 	bl	80031fc <lsm6dsox_write_reg>
 8003cd4:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <lsm6dsox_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dsox_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8003cea:	2301      	movs	r3, #1
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	210f      	movs	r1, #15
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fa6b 	bl	80031cc <lsm6dsox_read_reg>
 8003cf6:	60f8      	str	r0, [r7, #12]
  return ret;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <lsm6dsox_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dsox_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003d0e:	f107 0208 	add.w	r2, r7, #8
 8003d12:	2301      	movs	r3, #1
 8003d14:	2112      	movs	r1, #18
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fa58 	bl	80031cc <lsm6dsox_read_reg>
 8003d1c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10f      	bne.n	8003d44 <lsm6dsox_auto_increment_set+0x42>
    reg.if_inc = val;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	7a3b      	ldrb	r3, [r7, #8]
 8003d2e:	f362 0382 	bfi	r3, r2, #2, #1
 8003d32:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8003d34:	f107 0208 	add.w	r2, r7, #8
 8003d38:	2301      	movs	r3, #1
 8003d3a:	2112      	movs	r1, #18
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fa5d 	bl	80031fc <lsm6dsox_write_reg>
 8003d42:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d44:	68fb      	ldr	r3, [r7, #12]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <lsm6dsox_i3c_disable_set>:
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dsox_i3c_disable_set(stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b086      	sub	sp, #24
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 8003d5a:	f107 020c 	add.w	r2, r7, #12
 8003d5e:	2301      	movs	r3, #1
 8003d60:	2118      	movs	r1, #24
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fa32 	bl	80031cc <lsm6dsox_read_reg>
 8003d68:	6178      	str	r0, [r7, #20]
                          1);

  if (ret == 0) {
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d111      	bne.n	8003d94 <lsm6dsox_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	09db      	lsrs	r3, r3, #7
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	7b3b      	ldrb	r3, [r7, #12]
 8003d7e:	f362 0341 	bfi	r3, r2, #1, #1
 8003d82:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl,
 8003d84:	f107 020c 	add.w	r2, r7, #12
 8003d88:	2301      	movs	r3, #1
 8003d8a:	2118      	movs	r1, #24
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fa35 	bl	80031fc <lsm6dsox_write_reg>
 8003d92:	6178      	str	r0, [r7, #20]
                             1);
  }

  if (ret == 0) {
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d107      	bne.n	8003daa <lsm6dsox_i3c_disable_set+0x5c>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8003d9a:	f107 0210 	add.w	r2, r7, #16
 8003d9e:	2301      	movs	r3, #1
 8003da0:	2162      	movs	r1, #98	; 0x62
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff fa12 	bl	80031cc <lsm6dsox_read_reg>
 8003da8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0) {
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10f      	bne.n	8003dd0 <lsm6dsox_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	7c3b      	ldrb	r3, [r7, #16]
 8003dba:	f362 03c4 	bfi	r3, r2, #3, #2
 8003dbe:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8003dc0:	f107 0210 	add.w	r2, r7, #16
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	2162      	movs	r1, #98	; 0x62
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fa17 	bl	80031fc <lsm6dsox_write_reg>
 8003dce:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8003dd0:	697b      	ldr	r3, [r7, #20]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <lsm6dsox_fifo_mode_set>:
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dsox_fifo_mode_set(stmdev_ctx_t *ctx,
                               lsm6dsox_fifo_mode_t val)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_fifo_ctrl4_t reg;
  int32_t ret;
  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8003de6:	f107 0208 	add.w	r2, r7, #8
 8003dea:	2301      	movs	r3, #1
 8003dec:	210a      	movs	r1, #10
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff f9ec 	bl	80031cc <lsm6dsox_read_reg>
 8003df4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10f      	bne.n	8003e1c <lsm6dsox_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	7a3b      	ldrb	r3, [r7, #8]
 8003e06:	f362 0302 	bfi	r3, r2, #0, #3
 8003e0a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FIFO_CTRL4, (uint8_t *)&reg,
 8003e0c:	f107 0208 	add.w	r2, r7, #8
 8003e10:	2301      	movs	r3, #1
 8003e12:	210a      	movs	r1, #10
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff f9f1 	bl	80031fc <lsm6dsox_write_reg>
 8003e1a:	60f8      	str	r0, [r7, #12]
                             1);
  }

  return ret;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <lsm6dsox_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dsox_fsm_enable_get(stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003e30:	2102      	movs	r1, #2
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ff2e 	bl	8003c94 <lsm6dsox_mem_bank_set>
 8003e38:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <lsm6dsox_fsm_enable_get+0x28>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 8003e40:	2302      	movs	r3, #2
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	2146      	movs	r1, #70	; 0x46
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff f9c0 	bl	80031cc <lsm6dsox_read_reg>
 8003e4c:	60f8      	str	r0, [r7, #12]
                            2);
  }

  if (ret == 0) {
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <lsm6dsox_fsm_enable_get+0x38>
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003e54:	2100      	movs	r1, #0
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ff1c 	bl	8003c94 <lsm6dsox_mem_bank_set>
 8003e5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <lsm6dsox_fsm_data_rate_get>:
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003e72:	2102      	movs	r1, #2
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff ff0d 	bl	8003c94 <lsm6dsox_mem_bank_set>
 8003e7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <lsm6dsox_fsm_data_rate_get+0x2a>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 8003e82:	f107 0208 	add.w	r2, r7, #8
 8003e86:	2301      	movs	r3, #1
 8003e88:	215f      	movs	r1, #95	; 0x5f
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff f99e 	bl	80031cc <lsm6dsox_read_reg>
 8003e90:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d12a      	bne.n	8003eee <lsm6dsox_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 8003e98:	7a3b      	ldrb	r3, [r7, #8]
 8003e9a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d81b      	bhi.n	8003edc <lsm6dsox_fsm_data_rate_get+0x74>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <lsm6dsox_fsm_data_rate_get+0x44>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ec5 	.word	0x08003ec5
 8003eb4:	08003ecd 	.word	0x08003ecd
 8003eb8:	08003ed5 	.word	0x08003ed5
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
        break;
 8003ec2:	e00f      	b.n	8003ee4 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
        break;
 8003eca:	e00b      	b.n	8003ee4 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
        break;
 8003ed2:	e007      	b.n	8003ee4 <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	701a      	strb	r2, [r3, #0]
        break;
 8003eda:	e003      	b.n	8003ee4 <lsm6dsox_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
        break;
 8003ee2:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fed4 	bl	8003c94 <lsm6dsox_mem_bank_set>
 8003eec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <lsm6dsox_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003f02:	2102      	movs	r1, #2
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fec5 	bl	8003c94 <lsm6dsox_mem_bank_set>
 8003f0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d107      	bne.n	8003f22 <lsm6dsox_mlc_data_rate_get+0x2a>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 8003f12:	f107 0208 	add.w	r2, r7, #8
 8003f16:	2301      	movs	r3, #1
 8003f18:	2160      	movs	r1, #96	; 0x60
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff f956 	bl	80031cc <lsm6dsox_read_reg>
 8003f20:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d12a      	bne.n	8003f7e <lsm6dsox_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8003f28:	7a3b      	ldrb	r3, [r7, #8]
 8003f2a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d81b      	bhi.n	8003f6c <lsm6dsox_mlc_data_rate_get+0x74>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <lsm6dsox_mlc_data_rate_get+0x44>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f55 	.word	0x08003f55
 8003f44:	08003f5d 	.word	0x08003f5d
 8003f48:	08003f65 	.word	0x08003f65
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
        break;
 8003f52:	e00f      	b.n	8003f74 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
        break;
 8003f5a:	e00b      	b.n	8003f74 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
        break;
 8003f62:	e007      	b.n	8003f74 <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2203      	movs	r2, #3
 8003f68:	701a      	strb	r2, [r3, #0]
        break;
 8003f6a:	e003      	b.n	8003f74 <lsm6dsox_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
        break;
 8003f72:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8003f74:	2100      	movs	r1, #0
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fe8c 	bl	8003c94 <lsm6dsox_mem_bank_set>
 8003f7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <lsm6dsox_embedded_sens_get>:
  *                  EMB_FUNC_EN_A e EMB_FUNC_EN_B.
  *
  */
int32_t lsm6dsox_embedded_sens_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;
  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8003f92:	2102      	movs	r1, #2
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fe7d 	bl	8003c94 <lsm6dsox_mem_bank_set>
 8003f9a:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d107      	bne.n	8003fb2 <lsm6dsox_embedded_sens_get+0x2a>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 8003fa2:	f107 0210 	add.w	r2, r7, #16
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	2104      	movs	r1, #4
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff f90e 	bl	80031cc <lsm6dsox_read_reg>
 8003fb0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0) {
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d13d      	bne.n	8004034 <lsm6dsox_embedded_sens_get+0xac>
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8003fb8:	f107 020c 	add.w	r2, r7, #12
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	2105      	movs	r1, #5
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff f903 	bl	80031cc <lsm6dsox_read_reg>
 8003fc6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8003fc8:	7b3b      	ldrb	r3, [r7, #12]
 8003fca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003fce:	b2d9      	uxtb	r1, r3
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	7813      	ldrb	r3, [r2, #0]
 8003fd4:	f361 03c3 	bfi	r3, r1, #3, #1
 8003fd8:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8003fda:	7b3b      	ldrb	r3, [r7, #12]
 8003fdc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003fe0:	b2d9      	uxtb	r1, r3
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	7813      	ldrb	r3, [r2, #0]
 8003fe6:	f361 1304 	bfi	r3, r1, #4, #1
 8003fea:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8003fec:	7c3b      	ldrb	r3, [r7, #16]
 8003fee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ff2:	b2d9      	uxtb	r1, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	7813      	ldrb	r3, [r2, #0]
 8003ff8:	f361 0341 	bfi	r3, r1, #1, #1
 8003ffc:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 8003ffe:	7c3b      	ldrb	r3, [r7, #16]
 8004000:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004004:	b2d9      	uxtb	r1, r3
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	7813      	ldrb	r3, [r2, #0]
 800400a:	f361 0382 	bfi	r3, r1, #2, #1
 800400e:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8004010:	7c3b      	ldrb	r3, [r7, #16]
 8004012:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004016:	b2d9      	uxtb	r1, r3
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	7813      	ldrb	r3, [r2, #0]
 800401c:	f361 0300 	bfi	r3, r1, #0, #1
 8004020:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 8004022:	7b3b      	ldrb	r3, [r7, #12]
 8004024:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004028:	b2d9      	uxtb	r1, r3
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	7813      	ldrb	r3, [r2, #0]
 800402e:	f361 1345 	bfi	r3, r1, #5, #1
 8004032:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0) {
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d104      	bne.n	8004044 <lsm6dsox_embedded_sens_get+0xbc>
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 800403a:	2100      	movs	r1, #0
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fe29 	bl	8003c94 <lsm6dsox_mem_bank_set>
 8004042:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004044:	697b      	ldr	r3, [r7, #20]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <BSP_LED_Init+0x20>)
 800405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004062:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	0801c8c8 	.word	0x0801c8c8

08004074 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	4a06      	ldr	r2, [pc, #24]	; (800409c <BSP_LED_On+0x28>)
 8004082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004086:	2180      	movs	r1, #128	; 0x80
 8004088:	2201      	movs	r2, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f001 fa12 	bl	80054b4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	2000121c 	.word	0x2000121c

080040a0 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	4a06      	ldr	r2, [pc, #24]	; (80040c8 <BSP_LED_Off+0x28>)
 80040ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b2:	2180      	movs	r1, #128	; 0x80
 80040b4:	2200      	movs	r2, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 f9fc 	bl	80054b4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	2000121c 	.word	0x2000121c

080040cc <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d2:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <LED_USER_GPIO_Init+0x74>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <LED_USER_GPIO_Init+0x74>)
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	6313      	str	r3, [r2, #48]	; 0x30
 80040de:	4b18      	ldr	r3, [pc, #96]	; (8004140 <LED_USER_GPIO_Init+0x74>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ea:	f107 030c 	add.w	r3, r7, #12
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	60da      	str	r2, [r3, #12]
 80040f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <LED_USER_GPIO_Init+0x74>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a10      	ldr	r2, [pc, #64]	; (8004140 <LED_USER_GPIO_Init+0x74>)
 8004100:	f043 0302 	orr.w	r3, r3, #2
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <LED_USER_GPIO_Init+0x74>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8004112:	2200      	movs	r2, #0
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	480b      	ldr	r0, [pc, #44]	; (8004144 <LED_USER_GPIO_Init+0x78>)
 8004118:	f001 f9cc 	bl	80054b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004120:	2301      	movs	r3, #1
 8004122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800412c:	f107 030c 	add.w	r3, r7, #12
 8004130:	4619      	mov	r1, r3
 8004132:	4804      	ldr	r0, [pc, #16]	; (8004144 <LED_USER_GPIO_Init+0x78>)
 8004134:	f000 ff06 	bl	8004f44 <HAL_GPIO_Init>

}
 8004138:	bf00      	nop
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40023800 	.word	0x40023800
 8004144:	40020400 	.word	0x40020400

08004148 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d903      	bls.n	8004164 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800415c:	f06f 0301 	mvn.w	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e025      	b.n	80041b0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	79fa      	ldrb	r2, [r7, #7]
 8004168:	4914      	ldr	r1, [pc, #80]	; (80041bc <BSP_COM_Init+0x74>)
 800416a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800416e:	4814      	ldr	r0, [pc, #80]	; (80041c0 <BSP_COM_Init+0x78>)
 8004170:	4613      	mov	r3, r2
 8004172:	015b      	lsls	r3, r3, #5
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4403      	add	r3, r0
 800417a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART3_MspInit(&hcom_uart[COM]);
 800417c:	79fa      	ldrb	r2, [r7, #7]
 800417e:	4613      	mov	r3, r2
 8004180:	015b      	lsls	r3, r3, #5
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <BSP_COM_Init+0x78>)
 8004188:	4413      	add	r3, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f86a 	bl	8004264 <USART3_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART3_UART_Init(&hcom_uart[COM]))
 8004190:	79fa      	ldrb	r2, [r7, #7]
 8004192:	4613      	mov	r3, r2
 8004194:	015b      	lsls	r3, r3, #5
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <BSP_COM_Init+0x78>)
 800419c:	4413      	add	r3, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f810 	bl	80041c4 <MX_USART3_UART_Init>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80041aa:	f06f 0303 	mvn.w	r3, #3
 80041ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80041b0:	68fb      	ldr	r3, [r7, #12]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20001220 	.word	0x20001220
 80041c0:	20002164 	.word	0x20002164

080041c4 <MX_USART3_UART_Init>:
 */

/* USART3 init function */

__weak HAL_StatusTypeDef MX_USART3_UART_Init(UART_HandleTypeDef* huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART3;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a15      	ldr	r2, [pc, #84]	; (8004228 <MX_USART3_UART_Init+0x64>)
 80041d4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80041dc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	220c      	movs	r2, #12
 80041f4:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f004 f86c 	bl	80082ec <HAL_UART_Init>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <MX_USART3_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40004800 	.word	0x40004800

0800422c <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <__io_putchar+0x30>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	4613      	mov	r3, r2
 800423c:	015b      	lsls	r3, r3, #5
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4a07      	ldr	r2, [pc, #28]	; (8004260 <__io_putchar+0x34>)
 8004244:	1898      	adds	r0, r3, r2
 8004246:	1d39      	adds	r1, r7, #4
 8004248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424c:	2201      	movs	r2, #1
 800424e:	f004 f8a5 	bl	800839c <HAL_UART_Transmit>
  return ch;
 8004252:	687b      	ldr	r3, [r7, #4]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20001b40 	.word	0x20001b40
 8004260:	20002164 	.word	0x20002164

08004264 <USART3_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart3_rx;

static void USART3_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART3_CLK_ENABLE();
 800426c:	4b36      	ldr	r3, [pc, #216]	; (8004348 <USART3_MspInit+0xe4>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4a35      	ldr	r2, [pc, #212]	; (8004348 <USART3_MspInit+0xe4>)
 8004272:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004276:	6413      	str	r3, [r2, #64]	; 0x40
 8004278:	4b33      	ldr	r3, [pc, #204]	; (8004348 <USART3_MspInit+0xe4>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004284:	4b30      	ldr	r3, [pc, #192]	; (8004348 <USART3_MspInit+0xe4>)
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	4a2f      	ldr	r2, [pc, #188]	; (8004348 <USART3_MspInit+0xe4>)
 800428a:	f043 0308 	orr.w	r3, r3, #8
 800428e:	6313      	str	r3, [r2, #48]	; 0x30
 8004290:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <USART3_MspInit+0xe4>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = BUS_USART3_TX_GPIO_PIN;
 800429c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a2:	2302      	movs	r3, #2
 80042a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042aa:	2303      	movs	r3, #3
 80042ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART3_TX_GPIO_AF;
 80042ae:	2307      	movs	r3, #7
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART3_TX_GPIO_PORT, &GPIO_InitStruct);
 80042b2:	f107 0314 	add.w	r3, r7, #20
 80042b6:	4619      	mov	r1, r3
 80042b8:	4824      	ldr	r0, [pc, #144]	; (800434c <USART3_MspInit+0xe8>)
 80042ba:	f000 fe43 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART3_RX_GPIO_PIN;
 80042be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c4:	2302      	movs	r3, #2
 80042c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042cc:	2303      	movs	r3, #3
 80042ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART3_RX_GPIO_AF;
 80042d0:	2307      	movs	r3, #7
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART3_RX_GPIO_PORT, &GPIO_InitStruct);
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	4619      	mov	r1, r3
 80042da:	481c      	ldr	r0, [pc, #112]	; (800434c <USART3_MspInit+0xe8>)
 80042dc:	f000 fe32 	bl	8004f44 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart3_rx.Instance = DMA1_Stream1;
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <USART3_MspInit+0xec>)
 80042e2:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <USART3_MspInit+0xf0>)
 80042e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <USART3_MspInit+0xec>)
 80042e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <USART3_MspInit+0xec>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <USART3_MspInit+0xec>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042fa:	4b15      	ldr	r3, [pc, #84]	; (8004350 <USART3_MspInit+0xec>)
 80042fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004300:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <USART3_MspInit+0xec>)
 8004304:	2200      	movs	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <USART3_MspInit+0xec>)
 800430a:	2200      	movs	r2, #0
 800430c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <USART3_MspInit+0xec>)
 8004310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004314:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004316:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <USART3_MspInit+0xec>)
 8004318:	2200      	movs	r2, #0
 800431a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <USART3_MspInit+0xec>)
 800431e:	2200      	movs	r2, #0
 8004320:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004322:	480b      	ldr	r0, [pc, #44]	; (8004350 <USART3_MspInit+0xec>)
 8004324:	f000 fa96 	bl	8004854 <HAL_DMA_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <USART3_MspInit+0xce>
    {
      Error_Handler( );
 800432e:	f7fd fb53 	bl	80019d8 <Error_Handler>
    }

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a06      	ldr	r2, [pc, #24]	; (8004350 <USART3_MspInit+0xec>)
 8004336:	671a      	str	r2, [r3, #112]	; 0x70
 8004338:	4a05      	ldr	r2, [pc, #20]	; (8004350 <USART3_MspInit+0xec>)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
}
 800433e:	bf00      	nop
 8004340:	3728      	adds	r7, #40	; 0x28
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	40020c00 	.word	0x40020c00
 8004350:	20002104 	.word	0x20002104
 8004354:	40026028 	.word	0x40026028

08004358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800435c:	2003      	movs	r0, #3
 800435e:	f000 f94d 	bl	80045fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004362:	200f      	movs	r0, #15
 8004364:	f000 f806 	bl	8004374 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004368:	f7fd fb3c 	bl	80019e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800437c:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_InitTick+0x54>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b12      	ldr	r3, [pc, #72]	; (80043cc <HAL_InitTick+0x58>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	4619      	mov	r1, r3
 8004386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438a:	fbb3 f3f1 	udiv	r3, r3, r1
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f967 	bl	8004666 <HAL_SYSTICK_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e00e      	b.n	80043c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b0f      	cmp	r3, #15
 80043a6:	d80a      	bhi.n	80043be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043a8:	2200      	movs	r2, #0
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	f000 f92f 	bl	8004612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043b4:	4a06      	ldr	r2, [pc, #24]	; (80043d0 <HAL_InitTick+0x5c>)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e000      	b.n	80043c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	200011c0 	.word	0x200011c0
 80043cc:	20001228 	.word	0x20001228
 80043d0:	20001224 	.word	0x20001224

080043d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_IncTick+0x20>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_IncTick+0x24>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4413      	add	r3, r2
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HAL_IncTick+0x24>)
 80043e6:	6013      	str	r3, [r2, #0]
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20001228 	.word	0x20001228
 80043f8:	200021e8 	.word	0x200021e8

080043fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_GetTick+0x14>)
 8004402:	681b      	ldr	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	200021e8 	.word	0x200021e8

08004414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800441c:	f7ff ffee 	bl	80043fc <HAL_GetTick>
 8004420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d005      	beq.n	800443a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <HAL_Delay+0x44>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800443a:	bf00      	nop
 800443c:	f7ff ffde 	bl	80043fc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	429a      	cmp	r2, r3
 800444a:	d8f7      	bhi.n	800443c <HAL_Delay+0x28>
  {
  }
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20001228 	.word	0x20001228

0800445c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <__NVIC_SetPriorityGrouping+0x40>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004478:	4013      	ands	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004486:	4313      	orrs	r3, r2
 8004488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800448a:	4a04      	ldr	r2, [pc, #16]	; (800449c <__NVIC_SetPriorityGrouping+0x40>)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	60d3      	str	r3, [r2, #12]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000ed00 	.word	0xe000ed00
 80044a0:	05fa0000 	.word	0x05fa0000

080044a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <__NVIC_GetPriorityGrouping+0x18>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 0307 	and.w	r3, r3, #7
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db0b      	blt.n	80044ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	f003 021f 	and.w	r2, r3, #31
 80044d8:	4907      	ldr	r1, [pc, #28]	; (80044f8 <__NVIC_EnableIRQ+0x38>)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2001      	movs	r0, #1
 80044e2:	fa00 f202 	lsl.w	r2, r0, r2
 80044e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	e000e100 	.word	0xe000e100

080044fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	6039      	str	r1, [r7, #0]
 8004506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	2b00      	cmp	r3, #0
 800450e:	db0a      	blt.n	8004526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	b2da      	uxtb	r2, r3
 8004514:	490c      	ldr	r1, [pc, #48]	; (8004548 <__NVIC_SetPriority+0x4c>)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	0112      	lsls	r2, r2, #4
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	440b      	add	r3, r1
 8004520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004524:	e00a      	b.n	800453c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	b2da      	uxtb	r2, r3
 800452a:	4908      	ldr	r1, [pc, #32]	; (800454c <__NVIC_SetPriority+0x50>)
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	3b04      	subs	r3, #4
 8004534:	0112      	lsls	r2, r2, #4
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	440b      	add	r3, r1
 800453a:	761a      	strb	r2, [r3, #24]
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000e100 	.word	0xe000e100
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f1c3 0307 	rsb	r3, r3, #7
 800456a:	2b04      	cmp	r3, #4
 800456c:	bf28      	it	cs
 800456e:	2304      	movcs	r3, #4
 8004570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3304      	adds	r3, #4
 8004576:	2b06      	cmp	r3, #6
 8004578:	d902      	bls.n	8004580 <NVIC_EncodePriority+0x30>
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3b03      	subs	r3, #3
 800457e:	e000      	b.n	8004582 <NVIC_EncodePriority+0x32>
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004584:	f04f 32ff 	mov.w	r2, #4294967295
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43da      	mvns	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	401a      	ands	r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004598:	f04f 31ff 	mov.w	r1, #4294967295
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	43d9      	mvns	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a8:	4313      	orrs	r3, r2
         );
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c8:	d301      	bcc.n	80045ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ca:	2301      	movs	r3, #1
 80045cc:	e00f      	b.n	80045ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ce:	4a0a      	ldr	r2, [pc, #40]	; (80045f8 <SysTick_Config+0x40>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045d6:	210f      	movs	r1, #15
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	f7ff ff8e 	bl	80044fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <SysTick_Config+0x40>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045e6:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <SysTick_Config+0x40>)
 80045e8:	2207      	movs	r2, #7
 80045ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	e000e010 	.word	0xe000e010

080045fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff29 	bl	800445c <__NVIC_SetPriorityGrouping>
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004612:	b580      	push	{r7, lr}
 8004614:	b086      	sub	sp, #24
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004624:	f7ff ff3e 	bl	80044a4 <__NVIC_GetPriorityGrouping>
 8004628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	6978      	ldr	r0, [r7, #20]
 8004630:	f7ff ff8e 	bl	8004550 <NVIC_EncodePriority>
 8004634:	4602      	mov	r2, r0
 8004636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff5d 	bl	80044fc <__NVIC_SetPriority>
}
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	4603      	mov	r3, r0
 8004652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff31 	bl	80044c0 <__NVIC_EnableIRQ>
}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff ffa2 	bl	80045b8 <SysTick_Config>
 8004674:	4603      	mov	r3, r0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e054      	b.n	800473c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	7f5b      	ldrb	r3, [r3, #29]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fd f9c2 	bl	8001a2c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	791b      	ldrb	r3, [r3, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10c      	bne.n	80046d0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a22      	ldr	r2, [pc, #136]	; (8004744 <HAL_CRC_Init+0xc4>)
 80046bc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0218 	bic.w	r2, r2, #24
 80046cc:	609a      	str	r2, [r3, #8]
 80046ce:	e00c      	b.n	80046ea <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6899      	ldr	r1, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	461a      	mov	r2, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f834 	bl	8004748 <HAL_CRCEx_Polynomial_Set>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e028      	b.n	800473c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	795b      	ldrb	r3, [r3, #5]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d105      	bne.n	80046fe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295
 80046fa:	611a      	str	r2, [r3, #16]
 80046fc:	e004      	b.n	8004708 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6912      	ldr	r2, [r2, #16]
 8004706:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	04c11db7 	.word	0x04c11db7

08004748 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004758:	231f      	movs	r3, #31
 800475a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800475c:	bf00      	nop
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1e5a      	subs	r2, r3, #1
 8004762:	613a      	str	r2, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_CRCEx_Polynomial_Set+0x34>
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f003 031f 	and.w	r3, r3, #31
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_CRCEx_Polynomial_Set+0x16>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b18      	cmp	r3, #24
 8004780:	d846      	bhi.n	8004810 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	08004817 	.word	0x08004817
 800478c:	08004811 	.word	0x08004811
 8004790:	08004811 	.word	0x08004811
 8004794:	08004811 	.word	0x08004811
 8004798:	08004811 	.word	0x08004811
 800479c:	08004811 	.word	0x08004811
 80047a0:	08004811 	.word	0x08004811
 80047a4:	08004811 	.word	0x08004811
 80047a8:	08004805 	.word	0x08004805
 80047ac:	08004811 	.word	0x08004811
 80047b0:	08004811 	.word	0x08004811
 80047b4:	08004811 	.word	0x08004811
 80047b8:	08004811 	.word	0x08004811
 80047bc:	08004811 	.word	0x08004811
 80047c0:	08004811 	.word	0x08004811
 80047c4:	08004811 	.word	0x08004811
 80047c8:	080047f9 	.word	0x080047f9
 80047cc:	08004811 	.word	0x08004811
 80047d0:	08004811 	.word	0x08004811
 80047d4:	08004811 	.word	0x08004811
 80047d8:	08004811 	.word	0x08004811
 80047dc:	08004811 	.word	0x08004811
 80047e0:	08004811 	.word	0x08004811
 80047e4:	08004811 	.word	0x08004811
 80047e8:	080047ed 	.word	0x080047ed
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b06      	cmp	r3, #6
 80047f0:	d913      	bls.n	800481a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047f6:	e010      	b.n	800481a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b07      	cmp	r3, #7
 80047fc:	d90f      	bls.n	800481e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004802:	e00c      	b.n	800481e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	d90b      	bls.n	8004822 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800480e:	e008      	b.n	8004822 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
      break;
 8004814:	e006      	b.n	8004824 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004816:	bf00      	nop
 8004818:	e004      	b.n	8004824 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004822:	bf00      	nop
  }
  if (status == HAL_OK)
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10d      	bne.n	8004846 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 0118 	bic.w	r1, r3, #24
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004846:	7dfb      	ldrb	r3, [r7, #23]
}
 8004848:	4618      	mov	r0, r3
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004860:	f7ff fdcc 	bl	80043fc <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e099      	b.n	80049a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004890:	e00f      	b.n	80048b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004892:	f7ff fdb3 	bl	80043fc <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b05      	cmp	r3, #5
 800489e:	d908      	bls.n	80048b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2203      	movs	r2, #3
 80048aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e078      	b.n	80049a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e8      	bne.n	8004892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4b38      	ldr	r3, [pc, #224]	; (80049ac <HAL_DMA_Init+0x158>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2b04      	cmp	r3, #4
 800490a:	d107      	bne.n	800491c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	4313      	orrs	r3, r2
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0307 	bic.w	r3, r3, #7
 8004932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b04      	cmp	r3, #4
 8004944:	d117      	bne.n	8004976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa77 	bl	8004e4c <DMA_CheckFifoParam>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2240      	movs	r2, #64	; 0x40
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004972:	2301      	movs	r3, #1
 8004974:	e016      	b.n	80049a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fa2e 	bl	8004de0 <DMA_CalcBaseAndBitshift>
 8004984:	4603      	mov	r3, r0
 8004986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498c:	223f      	movs	r2, #63	; 0x3f
 800498e:	409a      	lsls	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	f010803f 	.word	0xf010803f

080049b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_DMA_Start_IT+0x26>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e048      	b.n	8004a68 <HAL_DMA_Start_IT+0xb8>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d137      	bne.n	8004a5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f9c0 	bl	8004d84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a08:	223f      	movs	r2, #63	; 0x3f
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0216 	orr.w	r2, r2, #22
 8004a1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a2e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0208 	orr.w	r2, r2, #8
 8004a46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e005      	b.n	8004a66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
 8004a64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004a7c:	4b92      	ldr	r3, [pc, #584]	; (8004cc8 <HAL_DMA_IRQHandler+0x258>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a92      	ldr	r2, [pc, #584]	; (8004ccc <HAL_DMA_IRQHandler+0x25c>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	0a9b      	lsrs	r3, r3, #10
 8004a88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01a      	beq.n	8004adc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0204 	bic.w	r2, r2, #4
 8004ac2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac8:	2208      	movs	r2, #8
 8004aca:	409a      	lsls	r2, r3
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad4:	f043 0201 	orr.w	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d012      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00b      	beq.n	8004b12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afe:	2201      	movs	r2, #1
 8004b00:	409a      	lsls	r2, r3
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	f043 0202 	orr.w	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	2204      	movs	r2, #4
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d012      	beq.n	8004b48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	2204      	movs	r2, #4
 8004b36:	409a      	lsls	r2, r3
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	f043 0204 	orr.w	r2, r3, #4
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4c:	2210      	movs	r2, #16
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d043      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d03c      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d018      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d024      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
 8004b9e:	e01f      	b.n	8004be0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
 8004bb0:	e016      	b.n	8004be0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d107      	bne.n	8004bd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0208 	bic.w	r2, r2, #8
 8004bce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be4:	2220      	movs	r2, #32
 8004be6:	409a      	lsls	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 808e 	beq.w	8004d0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8086 	beq.w	8004d0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c06:	2220      	movs	r2, #32
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d136      	bne.n	8004c88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0216 	bic.w	r2, r2, #22
 8004c28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <HAL_DMA_IRQHandler+0x1da>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0208 	bic.w	r2, r2, #8
 8004c58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	223f      	movs	r2, #63	; 0x3f
 8004c60:	409a      	lsls	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d07d      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
        }
        return;
 8004c86:	e078      	b.n	8004d7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01c      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d108      	bne.n	8004cb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d030      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4798      	blx	r3
 8004cb4:	e02b      	b.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d027      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
 8004cc6:	e022      	b.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
 8004cc8:	200011c0 	.word	0x200011c0
 8004ccc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0210 	bic.w	r2, r2, #16
 8004cec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d032      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d022      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2205      	movs	r2, #5
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d307      	bcc.n	8004d56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f2      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x2ca>
 8004d54:	e000      	b.n	8004d58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004d56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
 8004d78:	e000      	b.n	8004d7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004d7a:	bf00      	nop
    }
  }
}
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop

08004d84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004da0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d108      	bne.n	8004dc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dc2:	e007      	b.n	8004dd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	60da      	str	r2, [r3, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	3b10      	subs	r3, #16
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <DMA_CalcBaseAndBitshift+0x60>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dfa:	4a12      	ldr	r2, [pc, #72]	; (8004e44 <DMA_CalcBaseAndBitshift+0x64>)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d908      	bls.n	8004e20 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <DMA_CalcBaseAndBitshift+0x68>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	1d1a      	adds	r2, r3, #4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	659a      	str	r2, [r3, #88]	; 0x58
 8004e1e:	e006      	b.n	8004e2e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <DMA_CalcBaseAndBitshift+0x68>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	aaaaaaab 	.word	0xaaaaaaab
 8004e44:	0801c8cc 	.word	0x0801c8cc
 8004e48:	fffffc00 	.word	0xfffffc00

08004e4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11f      	bne.n	8004ea6 <DMA_CheckFifoParam+0x5a>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d856      	bhi.n	8004f1a <DMA_CheckFifoParam+0xce>
 8004e6c:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <DMA_CheckFifoParam+0x28>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e97 	.word	0x08004e97
 8004e7c:	08004e85 	.word	0x08004e85
 8004e80:	08004f1b 	.word	0x08004f1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d046      	beq.n	8004f1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e94:	e043      	b.n	8004f1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e9e:	d140      	bne.n	8004f22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea4:	e03d      	b.n	8004f22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eae:	d121      	bne.n	8004ef4 <DMA_CheckFifoParam+0xa8>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d837      	bhi.n	8004f26 <DMA_CheckFifoParam+0xda>
 8004eb6:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <DMA_CheckFifoParam+0x70>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004ed3 	.word	0x08004ed3
 8004ec4:	08004ecd 	.word	0x08004ecd
 8004ec8:	08004ee5 	.word	0x08004ee5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed0:	e030      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d025      	beq.n	8004f2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee2:	e022      	b.n	8004f2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eec:	d11f      	bne.n	8004f2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ef2:	e01c      	b.n	8004f2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d903      	bls.n	8004f02 <DMA_CheckFifoParam+0xb6>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d003      	beq.n	8004f08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f00:	e018      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
      break;
 8004f06:	e015      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00e      	beq.n	8004f32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
      break;
 8004f18:	e00b      	b.n	8004f32 <DMA_CheckFifoParam+0xe6>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e00a      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f1e:	bf00      	nop
 8004f20:	e008      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f22:	bf00      	nop
 8004f24:	e006      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f26:	bf00      	nop
 8004f28:	e004      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e002      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f2e:	bf00      	nop
 8004f30:	e000      	b.n	8004f34 <DMA_CheckFifoParam+0xe8>
      break;
 8004f32:	bf00      	nop
    }
  } 
  
  return status; 
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop

08004f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b089      	sub	sp, #36	; 0x24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	e175      	b.n	8005250 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f64:	2201      	movs	r2, #1
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4013      	ands	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	f040 8164 	bne.w	800524a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d00b      	beq.n	8004fa2 <HAL_GPIO_Init+0x5e>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d007      	beq.n	8004fa2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f96:	2b11      	cmp	r3, #17
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b12      	cmp	r3, #18
 8004fa0:	d130      	bne.n	8005004 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	2203      	movs	r2, #3
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fd8:	2201      	movs	r2, #1
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	f003 0201 	and.w	r2, r3, #1
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	2203      	movs	r2, #3
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x100>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b12      	cmp	r3, #18
 8005042:	d123      	bne.n	800508c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	08da      	lsrs	r2, r3, #3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3208      	adds	r2, #8
 800504c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	220f      	movs	r2, #15
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4313      	orrs	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	08da      	lsrs	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3208      	adds	r2, #8
 8005086:	69b9      	ldr	r1, [r7, #24]
 8005088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	2203      	movs	r2, #3
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 0203 	and.w	r2, r3, #3
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80be 	beq.w	800524a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ce:	4b66      	ldr	r3, [pc, #408]	; (8005268 <HAL_GPIO_Init+0x324>)
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	4a65      	ldr	r2, [pc, #404]	; (8005268 <HAL_GPIO_Init+0x324>)
 80050d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050d8:	6453      	str	r3, [r2, #68]	; 0x44
 80050da:	4b63      	ldr	r3, [pc, #396]	; (8005268 <HAL_GPIO_Init+0x324>)
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050e6:	4a61      	ldr	r2, [pc, #388]	; (800526c <HAL_GPIO_Init+0x328>)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	3302      	adds	r3, #2
 80050ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	220f      	movs	r2, #15
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a58      	ldr	r2, [pc, #352]	; (8005270 <HAL_GPIO_Init+0x32c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d037      	beq.n	8005182 <HAL_GPIO_Init+0x23e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a57      	ldr	r2, [pc, #348]	; (8005274 <HAL_GPIO_Init+0x330>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d031      	beq.n	800517e <HAL_GPIO_Init+0x23a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a56      	ldr	r2, [pc, #344]	; (8005278 <HAL_GPIO_Init+0x334>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d02b      	beq.n	800517a <HAL_GPIO_Init+0x236>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a55      	ldr	r2, [pc, #340]	; (800527c <HAL_GPIO_Init+0x338>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d025      	beq.n	8005176 <HAL_GPIO_Init+0x232>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a54      	ldr	r2, [pc, #336]	; (8005280 <HAL_GPIO_Init+0x33c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01f      	beq.n	8005172 <HAL_GPIO_Init+0x22e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a53      	ldr	r2, [pc, #332]	; (8005284 <HAL_GPIO_Init+0x340>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d019      	beq.n	800516e <HAL_GPIO_Init+0x22a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a52      	ldr	r2, [pc, #328]	; (8005288 <HAL_GPIO_Init+0x344>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <HAL_GPIO_Init+0x226>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a51      	ldr	r2, [pc, #324]	; (800528c <HAL_GPIO_Init+0x348>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00d      	beq.n	8005166 <HAL_GPIO_Init+0x222>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a50      	ldr	r2, [pc, #320]	; (8005290 <HAL_GPIO_Init+0x34c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d007      	beq.n	8005162 <HAL_GPIO_Init+0x21e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a4f      	ldr	r2, [pc, #316]	; (8005294 <HAL_GPIO_Init+0x350>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d101      	bne.n	800515e <HAL_GPIO_Init+0x21a>
 800515a:	2309      	movs	r3, #9
 800515c:	e012      	b.n	8005184 <HAL_GPIO_Init+0x240>
 800515e:	230a      	movs	r3, #10
 8005160:	e010      	b.n	8005184 <HAL_GPIO_Init+0x240>
 8005162:	2308      	movs	r3, #8
 8005164:	e00e      	b.n	8005184 <HAL_GPIO_Init+0x240>
 8005166:	2307      	movs	r3, #7
 8005168:	e00c      	b.n	8005184 <HAL_GPIO_Init+0x240>
 800516a:	2306      	movs	r3, #6
 800516c:	e00a      	b.n	8005184 <HAL_GPIO_Init+0x240>
 800516e:	2305      	movs	r3, #5
 8005170:	e008      	b.n	8005184 <HAL_GPIO_Init+0x240>
 8005172:	2304      	movs	r3, #4
 8005174:	e006      	b.n	8005184 <HAL_GPIO_Init+0x240>
 8005176:	2303      	movs	r3, #3
 8005178:	e004      	b.n	8005184 <HAL_GPIO_Init+0x240>
 800517a:	2302      	movs	r3, #2
 800517c:	e002      	b.n	8005184 <HAL_GPIO_Init+0x240>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <HAL_GPIO_Init+0x240>
 8005182:	2300      	movs	r3, #0
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	f002 0203 	and.w	r2, r2, #3
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	4093      	lsls	r3, r2
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4313      	orrs	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005194:	4935      	ldr	r1, [pc, #212]	; (800526c <HAL_GPIO_Init+0x328>)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	089b      	lsrs	r3, r3, #2
 800519a:	3302      	adds	r3, #2
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051a2:	4b3d      	ldr	r3, [pc, #244]	; (8005298 <HAL_GPIO_Init+0x354>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4013      	ands	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051c6:	4a34      	ldr	r2, [pc, #208]	; (8005298 <HAL_GPIO_Init+0x354>)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051cc:	4b32      	ldr	r3, [pc, #200]	; (8005298 <HAL_GPIO_Init+0x354>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	43db      	mvns	r3, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4013      	ands	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051f0:	4a29      	ldr	r2, [pc, #164]	; (8005298 <HAL_GPIO_Init+0x354>)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051f6:	4b28      	ldr	r3, [pc, #160]	; (8005298 <HAL_GPIO_Init+0x354>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800521a:	4a1f      	ldr	r2, [pc, #124]	; (8005298 <HAL_GPIO_Init+0x354>)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005220:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <HAL_GPIO_Init+0x354>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005244:	4a14      	ldr	r2, [pc, #80]	; (8005298 <HAL_GPIO_Init+0x354>)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3301      	adds	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b0f      	cmp	r3, #15
 8005254:	f67f ae86 	bls.w	8004f64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	40013800 	.word	0x40013800
 8005270:	40020000 	.word	0x40020000
 8005274:	40020400 	.word	0x40020400
 8005278:	40020800 	.word	0x40020800
 800527c:	40020c00 	.word	0x40020c00
 8005280:	40021000 	.word	0x40021000
 8005284:	40021400 	.word	0x40021400
 8005288:	40021800 	.word	0x40021800
 800528c:	40021c00 	.word	0x40021c00
 8005290:	40022000 	.word	0x40022000
 8005294:	40022400 	.word	0x40022400
 8005298:	40013c00 	.word	0x40013c00

0800529c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e0d9      	b.n	800546c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052b8:	2201      	movs	r2, #1
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4013      	ands	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	f040 80c9 	bne.w	8005466 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80052d4:	4a6b      	ldr	r2, [pc, #428]	; (8005484 <HAL_GPIO_DeInit+0x1e8>)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	089b      	lsrs	r3, r3, #2
 80052da:	3302      	adds	r3, #2
 80052dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	220f      	movs	r2, #15
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a63      	ldr	r2, [pc, #396]	; (8005488 <HAL_GPIO_DeInit+0x1ec>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d037      	beq.n	800536e <HAL_GPIO_DeInit+0xd2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a62      	ldr	r2, [pc, #392]	; (800548c <HAL_GPIO_DeInit+0x1f0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d031      	beq.n	800536a <HAL_GPIO_DeInit+0xce>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a61      	ldr	r2, [pc, #388]	; (8005490 <HAL_GPIO_DeInit+0x1f4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d02b      	beq.n	8005366 <HAL_GPIO_DeInit+0xca>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a60      	ldr	r2, [pc, #384]	; (8005494 <HAL_GPIO_DeInit+0x1f8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d025      	beq.n	8005362 <HAL_GPIO_DeInit+0xc6>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a5f      	ldr	r2, [pc, #380]	; (8005498 <HAL_GPIO_DeInit+0x1fc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01f      	beq.n	800535e <HAL_GPIO_DeInit+0xc2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a5e      	ldr	r2, [pc, #376]	; (800549c <HAL_GPIO_DeInit+0x200>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d019      	beq.n	800535a <HAL_GPIO_DeInit+0xbe>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a5d      	ldr	r2, [pc, #372]	; (80054a0 <HAL_GPIO_DeInit+0x204>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <HAL_GPIO_DeInit+0xba>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a5c      	ldr	r2, [pc, #368]	; (80054a4 <HAL_GPIO_DeInit+0x208>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00d      	beq.n	8005352 <HAL_GPIO_DeInit+0xb6>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a5b      	ldr	r2, [pc, #364]	; (80054a8 <HAL_GPIO_DeInit+0x20c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <HAL_GPIO_DeInit+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a5a      	ldr	r2, [pc, #360]	; (80054ac <HAL_GPIO_DeInit+0x210>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <HAL_GPIO_DeInit+0xae>
 8005346:	2309      	movs	r3, #9
 8005348:	e012      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 800534a:	230a      	movs	r3, #10
 800534c:	e010      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 800534e:	2308      	movs	r3, #8
 8005350:	e00e      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 8005352:	2307      	movs	r3, #7
 8005354:	e00c      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 8005356:	2306      	movs	r3, #6
 8005358:	e00a      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 800535a:	2305      	movs	r3, #5
 800535c:	e008      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 800535e:	2304      	movs	r3, #4
 8005360:	e006      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 8005362:	2303      	movs	r3, #3
 8005364:	e004      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 8005366:	2302      	movs	r3, #2
 8005368:	e002      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <HAL_GPIO_DeInit+0xd4>
 800536e:	2300      	movs	r3, #0
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	f002 0203 	and.w	r2, r2, #3
 8005376:	0092      	lsls	r2, r2, #2
 8005378:	4093      	lsls	r3, r2
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	429a      	cmp	r2, r3
 800537e:	d132      	bne.n	80053e6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005380:	4b4b      	ldr	r3, [pc, #300]	; (80054b0 <HAL_GPIO_DeInit+0x214>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	43db      	mvns	r3, r3
 8005388:	4949      	ldr	r1, [pc, #292]	; (80054b0 <HAL_GPIO_DeInit+0x214>)
 800538a:	4013      	ands	r3, r2
 800538c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800538e:	4b48      	ldr	r3, [pc, #288]	; (80054b0 <HAL_GPIO_DeInit+0x214>)
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	43db      	mvns	r3, r3
 8005396:	4946      	ldr	r1, [pc, #280]	; (80054b0 <HAL_GPIO_DeInit+0x214>)
 8005398:	4013      	ands	r3, r2
 800539a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800539c:	4b44      	ldr	r3, [pc, #272]	; (80054b0 <HAL_GPIO_DeInit+0x214>)
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	43db      	mvns	r3, r3
 80053a4:	4942      	ldr	r1, [pc, #264]	; (80054b0 <HAL_GPIO_DeInit+0x214>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80053aa:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <HAL_GPIO_DeInit+0x214>)
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	493f      	ldr	r1, [pc, #252]	; (80054b0 <HAL_GPIO_DeInit+0x214>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	220f      	movs	r2, #15
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80053c8:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <HAL_GPIO_DeInit+0x1e8>)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	089b      	lsrs	r3, r3, #2
 80053ce:	3302      	adds	r3, #2
 80053d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	43da      	mvns	r2, r3
 80053d8:	482a      	ldr	r0, [pc, #168]	; (8005484 <HAL_GPIO_DeInit+0x1e8>)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	089b      	lsrs	r3, r3, #2
 80053de:	400a      	ands	r2, r1
 80053e0:	3302      	adds	r3, #2
 80053e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	2103      	movs	r1, #3
 80053f0:	fa01 f303 	lsl.w	r3, r1, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	401a      	ands	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	08da      	lsrs	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3208      	adds	r2, #8
 8005404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	220f      	movs	r2, #15
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	08d2      	lsrs	r2, r2, #3
 800541c:	4019      	ands	r1, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3208      	adds	r2, #8
 8005422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	2103      	movs	r1, #3
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	43db      	mvns	r3, r3
 8005436:	401a      	ands	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	2101      	movs	r1, #1
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	43db      	mvns	r3, r3
 800544a:	401a      	ands	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	2103      	movs	r1, #3
 800545a:	fa01 f303 	lsl.w	r3, r1, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	401a      	ands	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	3301      	adds	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b0f      	cmp	r3, #15
 8005470:	f67f af22 	bls.w	80052b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40013800 	.word	0x40013800
 8005488:	40020000 	.word	0x40020000
 800548c:	40020400 	.word	0x40020400
 8005490:	40020800 	.word	0x40020800
 8005494:	40020c00 	.word	0x40020c00
 8005498:	40021000 	.word	0x40021000
 800549c:	40021400 	.word	0x40021400
 80054a0:	40021800 	.word	0x40021800
 80054a4:	40021c00 	.word	0x40021c00
 80054a8:	40022000 	.word	0x40022000
 80054ac:	40022400 	.word	0x40022400
 80054b0:	40013c00 	.word	0x40013c00

080054b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	807b      	strh	r3, [r7, #2]
 80054c0:	4613      	mov	r3, r2
 80054c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054c4:	787b      	ldrb	r3, [r7, #1]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ca:	887a      	ldrh	r2, [r7, #2]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80054d0:	e003      	b.n	80054da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80054d2:	887b      	ldrh	r3, [r7, #2]
 80054d4:	041a      	lsls	r2, r3, #16
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	619a      	str	r2, [r3, #24]
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054f2:	4b08      	ldr	r3, [pc, #32]	; (8005514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	4013      	ands	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d006      	beq.n	800550c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054fe:	4a05      	ldr	r2, [pc, #20]	; (8005514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f806 	bl	8005518 <HAL_GPIO_EXTI_Callback>
  }
}
 800550c:	bf00      	nop
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40013c00 	.word	0x40013c00

08005518 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	4603      	mov	r3, r0
 8005520:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e07f      	b.n	8005642 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8a9 	bl	80056ae <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2224      	movs	r2, #36	; 0x24
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005580:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005590:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	e006      	b.n	80055b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80055b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d104      	bne.n	80055ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6859      	ldr	r1, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4b1d      	ldr	r3, [pc, #116]	; (800564c <HAL_I2C_Init+0x11c>)
 80055d6:	430b      	orrs	r3, r1
 80055d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	ea42 0103 	orr.w	r1, r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	021a      	lsls	r2, r3, #8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69d9      	ldr	r1, [r3, #28]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1a      	ldr	r2, [r3, #32]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	02008000 	.word	0x02008000

08005650 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e021      	b.n	80056a6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2224      	movs	r2, #36	; 0x24
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f821 	bl	80056c2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	4608      	mov	r0, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	817b      	strh	r3, [r7, #10]
 80056ea:	460b      	mov	r3, r1
 80056ec:	813b      	strh	r3, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	f040 80f9 	bne.w	80058f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_I2C_Mem_Write+0x34>
 8005706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005712:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0ed      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_I2C_Mem_Write+0x4e>
 8005722:	2302      	movs	r3, #2
 8005724:	e0e6      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800572e:	f7fe fe65 	bl	80043fc <HAL_GetTick>
 8005732:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	2319      	movs	r3, #25
 800573a:	2201      	movs	r2, #1
 800573c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fadd 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e0d1      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2221      	movs	r2, #33	; 0x21
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2240      	movs	r2, #64	; 0x40
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a3a      	ldr	r2, [r7, #32]
 800576a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005778:	88f8      	ldrh	r0, [r7, #6]
 800577a:	893a      	ldrh	r2, [r7, #8]
 800577c:	8979      	ldrh	r1, [r7, #10]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	4603      	mov	r3, r0
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f9ed 	bl	8005b68 <I2C_RequestMemoryWrite>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0a9      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2bff      	cmp	r3, #255	; 0xff
 80057a8:	d90e      	bls.n	80057c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	22ff      	movs	r2, #255	; 0xff
 80057ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	8979      	ldrh	r1, [r7, #10]
 80057b8:	2300      	movs	r3, #0
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fbbf 	bl	8005f44 <I2C_TransferConfig>
 80057c6:	e00f      	b.n	80057e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	8979      	ldrh	r1, [r7, #10]
 80057da:	2300      	movs	r3, #0
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fbae 	bl	8005f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fac7 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e07b      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d034      	beq.n	80058a0 <HAL_I2C_Mem_Write+0x1c8>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d130      	bne.n	80058a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	2200      	movs	r2, #0
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fa59 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e04d      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	2bff      	cmp	r3, #255	; 0xff
 8005860:	d90e      	bls.n	8005880 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	22ff      	movs	r2, #255	; 0xff
 8005866:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586c:	b2da      	uxtb	r2, r3
 800586e:	8979      	ldrh	r1, [r7, #10]
 8005870:	2300      	movs	r3, #0
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fb63 	bl	8005f44 <I2C_TransferConfig>
 800587e:	e00f      	b.n	80058a0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588e:	b2da      	uxtb	r2, r3
 8005890:	8979      	ldrh	r1, [r7, #10]
 8005892:	2300      	movs	r3, #0
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fb52 	bl	8005f44 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d19e      	bne.n	80057e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 faa6 	bl	8005e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e01a      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2220      	movs	r2, #32
 80058c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6859      	ldr	r1, [r3, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <HAL_I2C_Mem_Write+0x224>)
 80058d2:	400b      	ands	r3, r1
 80058d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e000      	b.n	80058f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80058f2:	2302      	movs	r3, #2
  }
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	fe00e800 	.word	0xfe00e800

08005900 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	4608      	mov	r0, r1
 800590a:	4611      	mov	r1, r2
 800590c:	461a      	mov	r2, r3
 800590e:	4603      	mov	r3, r0
 8005910:	817b      	strh	r3, [r7, #10]
 8005912:	460b      	mov	r3, r1
 8005914:	813b      	strh	r3, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b20      	cmp	r3, #32
 8005924:	f040 80fd 	bne.w	8005b22 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <HAL_I2C_Mem_Read+0x34>
 800592e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0f1      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_I2C_Mem_Read+0x4e>
 800594a:	2302      	movs	r3, #2
 800594c:	e0ea      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005956:	f7fe fd51 	bl	80043fc <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2319      	movs	r3, #25
 8005962:	2201      	movs	r2, #1
 8005964:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f9c9 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0d5      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2222      	movs	r2, #34	; 0x22
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2240      	movs	r2, #64	; 0x40
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6a3a      	ldr	r2, [r7, #32]
 8005992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059a0:	88f8      	ldrh	r0, [r7, #6]
 80059a2:	893a      	ldrh	r2, [r7, #8]
 80059a4:	8979      	ldrh	r1, [r7, #10]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4603      	mov	r3, r0
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f92d 	bl	8005c10 <I2C_RequestMemoryRead>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0ad      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2bff      	cmp	r3, #255	; 0xff
 80059d0:	d90e      	bls.n	80059f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	8979      	ldrh	r1, [r7, #10]
 80059e0:	4b52      	ldr	r3, [pc, #328]	; (8005b2c <HAL_I2C_Mem_Read+0x22c>)
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 faab 	bl	8005f44 <I2C_TransferConfig>
 80059ee:	e00f      	b.n	8005a10 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	8979      	ldrh	r1, [r7, #10]
 8005a02:	4b4a      	ldr	r3, [pc, #296]	; (8005b2c <HAL_I2C_Mem_Read+0x22c>)
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fa9a 	bl	8005f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	2200      	movs	r2, #0
 8005a18:	2104      	movs	r1, #4
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f970 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e07c      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d034      	beq.n	8005ad0 <HAL_I2C_Mem_Read+0x1d0>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d130      	bne.n	8005ad0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	2200      	movs	r2, #0
 8005a76:	2180      	movs	r1, #128	; 0x80
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f941 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e04d      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2bff      	cmp	r3, #255	; 0xff
 8005a90:	d90e      	bls.n	8005ab0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	8979      	ldrh	r1, [r7, #10]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fa4b 	bl	8005f44 <I2C_TransferConfig>
 8005aae:	e00f      	b.n	8005ad0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	8979      	ldrh	r1, [r7, #10]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa3a 	bl	8005f44 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d19a      	bne.n	8005a10 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f98e 	bl	8005e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e01a      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2220      	movs	r2, #32
 8005af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6859      	ldr	r1, [r3, #4]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <HAL_I2C_Mem_Read+0x230>)
 8005b02:	400b      	ands	r3, r1
 8005b04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e000      	b.n	8005b24 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
  }
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	80002400 	.word	0x80002400
 8005b30:	fe00e800 	.word	0xfe00e800

08005b34 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b42:	b2db      	uxtb	r3, r3
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	4608      	mov	r0, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	817b      	strh	r3, [r7, #10]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	813b      	strh	r3, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	8979      	ldrh	r1, [r7, #10]
 8005b88:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <I2C_RequestMemoryWrite+0xa4>)
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f9d7 	bl	8005f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f8f0 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e02c      	b.n	8005c04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d105      	bne.n	8005bbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb0:	893b      	ldrh	r3, [r7, #8]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
 8005bba:	e015      	b.n	8005be8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bbc:	893b      	ldrh	r3, [r7, #8]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	69b9      	ldr	r1, [r7, #24]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f8d6 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e012      	b.n	8005c04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bde:	893b      	ldrh	r3, [r7, #8]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2180      	movs	r1, #128	; 0x80
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f884 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	80002000 	.word	0x80002000

08005c10 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	4608      	mov	r0, r1
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	817b      	strh	r3, [r7, #10]
 8005c22:	460b      	mov	r3, r1
 8005c24:	813b      	strh	r3, [r7, #8]
 8005c26:	4613      	mov	r3, r2
 8005c28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	8979      	ldrh	r1, [r7, #10]
 8005c30:	4b20      	ldr	r3, [pc, #128]	; (8005cb4 <I2C_RequestMemoryRead+0xa4>)
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	2300      	movs	r3, #0
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f984 	bl	8005f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	69b9      	ldr	r1, [r7, #24]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f89d 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e02c      	b.n	8005caa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d105      	bne.n	8005c62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c56:	893b      	ldrh	r3, [r7, #8]
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c60:	e015      	b.n	8005c8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c62:	893b      	ldrh	r3, [r7, #8]
 8005c64:	0a1b      	lsrs	r3, r3, #8
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	69b9      	ldr	r1, [r7, #24]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f883 	bl	8005d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e012      	b.n	8005caa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c84:	893b      	ldrh	r3, [r7, #8]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2140      	movs	r1, #64	; 0x40
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f831 	bl	8005d00 <I2C_WaitOnFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	80002000 	.word	0x80002000

08005cb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d103      	bne.n	8005cd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d007      	beq.n	8005cf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	619a      	str	r2, [r3, #24]
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d10:	e022      	b.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d01e      	beq.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fe fb6f 	bl	80043fc <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d113      	bne.n	8005d58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e00f      	b.n	8005d78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4013      	ands	r3, r2
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d0cd      	beq.n	8005d12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d8c:	e02c      	b.n	8005de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f870 	bl	8005e78 <I2C_IsAcknowledgeFailed>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e02a      	b.n	8005df8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d01e      	beq.n	8005de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005daa:	f7fe fb27 	bl	80043fc <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d113      	bne.n	8005de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc4:	f043 0220 	orr.w	r2, r3, #32
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e007      	b.n	8005df8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d1cb      	bne.n	8005d8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e0c:	e028      	b.n	8005e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 f830 	bl	8005e78 <I2C_IsAcknowledgeFailed>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e026      	b.n	8005e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e22:	f7fe faeb 	bl	80043fc <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d302      	bcc.n	8005e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d113      	bne.n	8005e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e007      	b.n	8005e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d1cf      	bne.n	8005e0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d151      	bne.n	8005f36 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e92:	e022      	b.n	8005eda <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d01e      	beq.n	8005eda <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9c:	f7fe faae 	bl	80043fc <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d302      	bcc.n	8005eb2 <I2C_IsAcknowledgeFailed+0x3a>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d113      	bne.n	8005eda <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	f043 0220 	orr.w	r2, r3, #32
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e02e      	b.n	8005f38 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d1d5      	bne.n	8005e94 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2210      	movs	r2, #16
 8005eee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff fedd 	bl	8005cb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <I2C_IsAcknowledgeFailed+0xc8>)
 8005f0a:	400b      	ands	r3, r1
 8005f0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	f043 0204 	orr.w	r2, r3, #4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	fe00e800 	.word	0xfe00e800

08005f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	817b      	strh	r3, [r7, #10]
 8005f52:	4613      	mov	r3, r2
 8005f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	0d5b      	lsrs	r3, r3, #21
 8005f60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f64:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <I2C_TransferConfig+0x58>)
 8005f66:	430b      	orrs	r3, r1
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	ea02 0103 	and.w	r1, r2, r3
 8005f6e:	897b      	ldrh	r3, [r7, #10]
 8005f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f74:	7a7b      	ldrb	r3, [r7, #9]
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	431a      	orrs	r2, r3
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	03ff63ff 	.word	0x03ff63ff

08005fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d138      	bne.n	8006028 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e032      	b.n	800602a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2224      	movs	r2, #36	; 0x24
 8005fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ff2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6819      	ldr	r1, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0201 	orr.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	e000      	b.n	800602a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006028:	2302      	movs	r3, #2
  }
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b20      	cmp	r3, #32
 800604a:	d139      	bne.n	80060c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006056:	2302      	movs	r3, #2
 8006058:	e033      	b.n	80060c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2224      	movs	r2, #36	; 0x24
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006088:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	e000      	b.n	80060c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
  }
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80060da:	4b23      	ldr	r3, [pc, #140]	; (8006168 <HAL_PWREx_EnableOverDrive+0x98>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	4a22      	ldr	r2, [pc, #136]	; (8006168 <HAL_PWREx_EnableOverDrive+0x98>)
 80060e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e4:	6413      	str	r3, [r2, #64]	; 0x40
 80060e6:	4b20      	ldr	r3, [pc, #128]	; (8006168 <HAL_PWREx_EnableOverDrive+0x98>)
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80060f2:	4b1e      	ldr	r3, [pc, #120]	; (800616c <HAL_PWREx_EnableOverDrive+0x9c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_PWREx_EnableOverDrive+0x9c>)
 80060f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060fe:	f7fe f97d 	bl	80043fc <HAL_GetTick>
 8006102:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006104:	e009      	b.n	800611a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006106:	f7fe f979 	bl	80043fc <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006114:	d901      	bls.n	800611a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e022      	b.n	8006160 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800611a:	4b14      	ldr	r3, [pc, #80]	; (800616c <HAL_PWREx_EnableOverDrive+0x9c>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006126:	d1ee      	bne.n	8006106 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006128:	4b10      	ldr	r3, [pc, #64]	; (800616c <HAL_PWREx_EnableOverDrive+0x9c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a0f      	ldr	r2, [pc, #60]	; (800616c <HAL_PWREx_EnableOverDrive+0x9c>)
 800612e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006132:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006134:	f7fe f962 	bl	80043fc <HAL_GetTick>
 8006138:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800613a:	e009      	b.n	8006150 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800613c:	f7fe f95e 	bl	80043fc <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800614a:	d901      	bls.n	8006150 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e007      	b.n	8006160 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800615c:	d1ee      	bne.n	800613c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40023800 	.word	0x40023800
 800616c:	40007000 	.word	0x40007000

08006170 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006178:	2300      	movs	r3, #0
 800617a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e291      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8087 	beq.w	80062a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006194:	4b96      	ldr	r3, [pc, #600]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 030c 	and.w	r3, r3, #12
 800619c:	2b04      	cmp	r3, #4
 800619e:	d00c      	beq.n	80061ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061a0:	4b93      	ldr	r3, [pc, #588]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d112      	bne.n	80061d2 <HAL_RCC_OscConfig+0x62>
 80061ac:	4b90      	ldr	r3, [pc, #576]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061b8:	d10b      	bne.n	80061d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ba:	4b8d      	ldr	r3, [pc, #564]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d06c      	beq.n	80062a0 <HAL_RCC_OscConfig+0x130>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d168      	bne.n	80062a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e26b      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061da:	d106      	bne.n	80061ea <HAL_RCC_OscConfig+0x7a>
 80061dc:	4b84      	ldr	r3, [pc, #528]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a83      	ldr	r2, [pc, #524]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80061e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	e02e      	b.n	8006248 <HAL_RCC_OscConfig+0xd8>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10c      	bne.n	800620c <HAL_RCC_OscConfig+0x9c>
 80061f2:	4b7f      	ldr	r3, [pc, #508]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a7e      	ldr	r2, [pc, #504]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80061f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	4b7c      	ldr	r3, [pc, #496]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a7b      	ldr	r2, [pc, #492]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e01d      	b.n	8006248 <HAL_RCC_OscConfig+0xd8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006214:	d10c      	bne.n	8006230 <HAL_RCC_OscConfig+0xc0>
 8006216:	4b76      	ldr	r3, [pc, #472]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a75      	ldr	r2, [pc, #468]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 800621c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	4b73      	ldr	r3, [pc, #460]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a72      	ldr	r2, [pc, #456]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	e00b      	b.n	8006248 <HAL_RCC_OscConfig+0xd8>
 8006230:	4b6f      	ldr	r3, [pc, #444]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a6e      	ldr	r2, [pc, #440]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	4b6c      	ldr	r3, [pc, #432]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a6b      	ldr	r2, [pc, #428]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d013      	beq.n	8006278 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fe f8d4 	bl	80043fc <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006258:	f7fe f8d0 	bl	80043fc <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b64      	cmp	r3, #100	; 0x64
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e21f      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626a:	4b61      	ldr	r3, [pc, #388]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0f0      	beq.n	8006258 <HAL_RCC_OscConfig+0xe8>
 8006276:	e014      	b.n	80062a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fe f8c0 	bl	80043fc <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006280:	f7fe f8bc 	bl	80043fc <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b64      	cmp	r3, #100	; 0x64
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e20b      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006292:	4b57      	ldr	r3, [pc, #348]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f0      	bne.n	8006280 <HAL_RCC_OscConfig+0x110>
 800629e:	e000      	b.n	80062a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d069      	beq.n	8006382 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062ae:	4b50      	ldr	r3, [pc, #320]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 030c 	and.w	r3, r3, #12
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00b      	beq.n	80062d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ba:	4b4d      	ldr	r3, [pc, #308]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 030c 	and.w	r3, r3, #12
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d11c      	bne.n	8006300 <HAL_RCC_OscConfig+0x190>
 80062c6:	4b4a      	ldr	r3, [pc, #296]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d116      	bne.n	8006300 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062d2:	4b47      	ldr	r3, [pc, #284]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_RCC_OscConfig+0x17a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d001      	beq.n	80062ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e1df      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ea:	4b41      	ldr	r3, [pc, #260]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	493d      	ldr	r1, [pc, #244]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062fe:	e040      	b.n	8006382 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d023      	beq.n	8006350 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006308:	4b39      	ldr	r3, [pc, #228]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a38      	ldr	r2, [pc, #224]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006314:	f7fe f872 	bl	80043fc <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800631c:	f7fe f86e 	bl	80043fc <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e1bd      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800632e:	4b30      	ldr	r3, [pc, #192]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0f0      	beq.n	800631c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633a:	4b2d      	ldr	r3, [pc, #180]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	4929      	ldr	r1, [pc, #164]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 800634a:	4313      	orrs	r3, r2
 800634c:	600b      	str	r3, [r1, #0]
 800634e:	e018      	b.n	8006382 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006350:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a26      	ldr	r2, [pc, #152]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635c:	f7fe f84e 	bl	80043fc <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006364:	f7fe f84a 	bl	80043fc <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e199      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006376:	4b1e      	ldr	r3, [pc, #120]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f0      	bne.n	8006364 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d038      	beq.n	8006400 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d019      	beq.n	80063ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006396:	4b16      	ldr	r3, [pc, #88]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 8006398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800639a:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a2:	f7fe f82b 	bl	80043fc <HAL_GetTick>
 80063a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063a8:	e008      	b.n	80063bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063aa:	f7fe f827 	bl	80043fc <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e176      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80063be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0f0      	beq.n	80063aa <HAL_RCC_OscConfig+0x23a>
 80063c8:	e01a      	b.n	8006400 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80063cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ce:	4a08      	ldr	r2, [pc, #32]	; (80063f0 <HAL_RCC_OscConfig+0x280>)
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d6:	f7fe f811 	bl	80043fc <HAL_GetTick>
 80063da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063dc:	e00a      	b.n	80063f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063de:	f7fe f80d 	bl	80043fc <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d903      	bls.n	80063f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e15c      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
 80063f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f4:	4b91      	ldr	r3, [pc, #580]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80063f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1ee      	bne.n	80063de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80a4 	beq.w	8006556 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800640e:	4b8b      	ldr	r3, [pc, #556]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10d      	bne.n	8006436 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800641a:	4b88      	ldr	r3, [pc, #544]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	4a87      	ldr	r2, [pc, #540]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006424:	6413      	str	r3, [r2, #64]	; 0x40
 8006426:	4b85      	ldr	r3, [pc, #532]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006436:	4b82      	ldr	r3, [pc, #520]	; (8006640 <HAL_RCC_OscConfig+0x4d0>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d118      	bne.n	8006474 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006442:	4b7f      	ldr	r3, [pc, #508]	; (8006640 <HAL_RCC_OscConfig+0x4d0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a7e      	ldr	r2, [pc, #504]	; (8006640 <HAL_RCC_OscConfig+0x4d0>)
 8006448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800644e:	f7fd ffd5 	bl	80043fc <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006456:	f7fd ffd1 	bl	80043fc <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b64      	cmp	r3, #100	; 0x64
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e120      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006468:	4b75      	ldr	r3, [pc, #468]	; (8006640 <HAL_RCC_OscConfig+0x4d0>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d106      	bne.n	800648a <HAL_RCC_OscConfig+0x31a>
 800647c:	4b6f      	ldr	r3, [pc, #444]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	4a6e      	ldr	r2, [pc, #440]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	6713      	str	r3, [r2, #112]	; 0x70
 8006488:	e02d      	b.n	80064e6 <HAL_RCC_OscConfig+0x376>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10c      	bne.n	80064ac <HAL_RCC_OscConfig+0x33c>
 8006492:	4b6a      	ldr	r3, [pc, #424]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	4a69      	ldr	r2, [pc, #420]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	6713      	str	r3, [r2, #112]	; 0x70
 800649e:	4b67      	ldr	r3, [pc, #412]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	4a66      	ldr	r2, [pc, #408]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	6713      	str	r3, [r2, #112]	; 0x70
 80064aa:	e01c      	b.n	80064e6 <HAL_RCC_OscConfig+0x376>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b05      	cmp	r3, #5
 80064b2:	d10c      	bne.n	80064ce <HAL_RCC_OscConfig+0x35e>
 80064b4:	4b61      	ldr	r3, [pc, #388]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b8:	4a60      	ldr	r2, [pc, #384]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064ba:	f043 0304 	orr.w	r3, r3, #4
 80064be:	6713      	str	r3, [r2, #112]	; 0x70
 80064c0:	4b5e      	ldr	r3, [pc, #376]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c4:	4a5d      	ldr	r2, [pc, #372]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	6713      	str	r3, [r2, #112]	; 0x70
 80064cc:	e00b      	b.n	80064e6 <HAL_RCC_OscConfig+0x376>
 80064ce:	4b5b      	ldr	r3, [pc, #364]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	4a5a      	ldr	r2, [pc, #360]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	6713      	str	r3, [r2, #112]	; 0x70
 80064da:	4b58      	ldr	r3, [pc, #352]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4a57      	ldr	r2, [pc, #348]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80064e0:	f023 0304 	bic.w	r3, r3, #4
 80064e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d015      	beq.n	800651a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ee:	f7fd ff85 	bl	80043fc <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f4:	e00a      	b.n	800650c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f6:	f7fd ff81 	bl	80043fc <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	f241 3288 	movw	r2, #5000	; 0x1388
 8006504:	4293      	cmp	r3, r2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e0ce      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800650c:	4b4b      	ldr	r3, [pc, #300]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0ee      	beq.n	80064f6 <HAL_RCC_OscConfig+0x386>
 8006518:	e014      	b.n	8006544 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651a:	f7fd ff6f 	bl	80043fc <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006520:	e00a      	b.n	8006538 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006522:	f7fd ff6b 	bl	80043fc <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006530:	4293      	cmp	r3, r2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e0b8      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006538:	4b40      	ldr	r3, [pc, #256]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 800653a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1ee      	bne.n	8006522 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d105      	bne.n	8006556 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800654a:	4b3c      	ldr	r3, [pc, #240]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	4a3b      	ldr	r2, [pc, #236]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80a4 	beq.w	80066a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006560:	4b36      	ldr	r3, [pc, #216]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 030c 	and.w	r3, r3, #12
 8006568:	2b08      	cmp	r3, #8
 800656a:	d06b      	beq.n	8006644 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d149      	bne.n	8006608 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006574:	4b31      	ldr	r3, [pc, #196]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a30      	ldr	r2, [pc, #192]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 800657a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800657e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006580:	f7fd ff3c 	bl	80043fc <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006588:	f7fd ff38 	bl	80043fc <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e087      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659a:	4b28      	ldr	r3, [pc, #160]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f0      	bne.n	8006588 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69da      	ldr	r2, [r3, #28]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	019b      	lsls	r3, r3, #6
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	3b01      	subs	r3, #1
 80065c0:	041b      	lsls	r3, r3, #16
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	4313      	orrs	r3, r2
 80065cc:	4a1b      	ldr	r2, [pc, #108]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80065ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d4:	4b19      	ldr	r3, [pc, #100]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a18      	ldr	r2, [pc, #96]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80065da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e0:	f7fd ff0c 	bl	80043fc <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e8:	f7fd ff08 	bl	80043fc <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e057      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065fa:	4b10      	ldr	r3, [pc, #64]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0x478>
 8006606:	e04f      	b.n	80066a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a0b      	ldr	r2, [pc, #44]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 800660e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fd fef2 	bl	80043fc <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fd feee 	bl	80043fc <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e03d      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662e:	4b03      	ldr	r3, [pc, #12]	; (800663c <HAL_RCC_OscConfig+0x4cc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x4ac>
 800663a:	e035      	b.n	80066a8 <HAL_RCC_OscConfig+0x538>
 800663c:	40023800 	.word	0x40023800
 8006640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006644:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <HAL_RCC_OscConfig+0x544>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d028      	beq.n	80066a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800665c:	429a      	cmp	r2, r3
 800665e:	d121      	bne.n	80066a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800666a:	429a      	cmp	r2, r3
 800666c:	d11a      	bne.n	80066a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006674:	4013      	ands	r3, r2
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800667a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800667c:	4293      	cmp	r3, r2
 800667e:	d111      	bne.n	80066a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	085b      	lsrs	r3, r3, #1
 800668c:	3b01      	subs	r3, #1
 800668e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006690:	429a      	cmp	r2, r3
 8006692:	d107      	bne.n	80066a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40023800 	.word	0x40023800

080066b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0d0      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066d0:	4b6a      	ldr	r3, [pc, #424]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d910      	bls.n	8006700 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b67      	ldr	r3, [pc, #412]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f023 020f 	bic.w	r2, r3, #15
 80066e6:	4965      	ldr	r1, [pc, #404]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	4b63      	ldr	r3, [pc, #396]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d001      	beq.n	8006700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0b8      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d020      	beq.n	800674e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006718:	4b59      	ldr	r3, [pc, #356]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	4a58      	ldr	r2, [pc, #352]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800671e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006722:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006730:	4b53      	ldr	r3, [pc, #332]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	4a52      	ldr	r2, [pc, #328]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 8006736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800673a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673c:	4b50      	ldr	r3, [pc, #320]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	494d      	ldr	r1, [pc, #308]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800674a:	4313      	orrs	r3, r2
 800674c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d040      	beq.n	80067dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d107      	bne.n	8006772 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006762:	4b47      	ldr	r3, [pc, #284]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d115      	bne.n	800679a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e07f      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d107      	bne.n	800678a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677a:	4b41      	ldr	r3, [pc, #260]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e073      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678a:	4b3d      	ldr	r3, [pc, #244]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e06b      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800679a:	4b39      	ldr	r3, [pc, #228]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f023 0203 	bic.w	r2, r3, #3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4936      	ldr	r1, [pc, #216]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ac:	f7fd fe26 	bl	80043fc <HAL_GetTick>
 80067b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b2:	e00a      	b.n	80067ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b4:	f7fd fe22 	bl	80043fc <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e053      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ca:	4b2d      	ldr	r3, [pc, #180]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 020c 	and.w	r2, r3, #12
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	429a      	cmp	r2, r3
 80067da:	d1eb      	bne.n	80067b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067dc:	4b27      	ldr	r3, [pc, #156]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d210      	bcs.n	800680c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ea:	4b24      	ldr	r3, [pc, #144]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f023 020f 	bic.w	r2, r3, #15
 80067f2:	4922      	ldr	r1, [pc, #136]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <HAL_RCC_ClockConfig+0x1c4>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d001      	beq.n	800680c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e032      	b.n	8006872 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006818:	4b19      	ldr	r3, [pc, #100]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	4916      	ldr	r1, [pc, #88]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 8006826:	4313      	orrs	r3, r2
 8006828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006836:	4b12      	ldr	r3, [pc, #72]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	490e      	ldr	r1, [pc, #56]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 8006846:	4313      	orrs	r3, r2
 8006848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800684a:	f000 f821 	bl	8006890 <HAL_RCC_GetSysClockFreq>
 800684e:	4602      	mov	r2, r0
 8006850:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <HAL_RCC_ClockConfig+0x1c8>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	091b      	lsrs	r3, r3, #4
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	490a      	ldr	r1, [pc, #40]	; (8006884 <HAL_RCC_ClockConfig+0x1cc>)
 800685c:	5ccb      	ldrb	r3, [r1, r3]
 800685e:	fa22 f303 	lsr.w	r3, r2, r3
 8006862:	4a09      	ldr	r2, [pc, #36]	; (8006888 <HAL_RCC_ClockConfig+0x1d0>)
 8006864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006866:	4b09      	ldr	r3, [pc, #36]	; (800688c <HAL_RCC_ClockConfig+0x1d4>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f7fd fd82 	bl	8004374 <HAL_InitTick>

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40023c00 	.word	0x40023c00
 8006880:	40023800 	.word	0x40023800
 8006884:	0801c8b0 	.word	0x0801c8b0
 8006888:	200011c0 	.word	0x200011c0
 800688c:	20001224 	.word	0x20001224

08006890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006890:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	607b      	str	r3, [r7, #4]
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	2300      	movs	r3, #0
 80068a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068a8:	4b67      	ldr	r3, [pc, #412]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 030c 	and.w	r3, r3, #12
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d00d      	beq.n	80068d0 <HAL_RCC_GetSysClockFreq+0x40>
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	f200 80bd 	bhi.w	8006a34 <HAL_RCC_GetSysClockFreq+0x1a4>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_RCC_GetSysClockFreq+0x34>
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d003      	beq.n	80068ca <HAL_RCC_GetSysClockFreq+0x3a>
 80068c2:	e0b7      	b.n	8006a34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068c4:	4b61      	ldr	r3, [pc, #388]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068c6:	60bb      	str	r3, [r7, #8]
      break;
 80068c8:	e0b7      	b.n	8006a3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ca:	4b61      	ldr	r3, [pc, #388]	; (8006a50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80068cc:	60bb      	str	r3, [r7, #8]
      break;
 80068ce:	e0b4      	b.n	8006a3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068d0:	4b5d      	ldr	r3, [pc, #372]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80068da:	4b5b      	ldr	r3, [pc, #364]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d04d      	beq.n	8006982 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068e6:	4b58      	ldr	r3, [pc, #352]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	099b      	lsrs	r3, r3, #6
 80068ec:	461a      	mov	r2, r3
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80068f6:	f04f 0100 	mov.w	r1, #0
 80068fa:	ea02 0800 	and.w	r8, r2, r0
 80068fe:	ea03 0901 	and.w	r9, r3, r1
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	014b      	lsls	r3, r1, #5
 8006910:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006914:	0142      	lsls	r2, r0, #5
 8006916:	4610      	mov	r0, r2
 8006918:	4619      	mov	r1, r3
 800691a:	ebb0 0008 	subs.w	r0, r0, r8
 800691e:	eb61 0109 	sbc.w	r1, r1, r9
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	018b      	lsls	r3, r1, #6
 800692c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006930:	0182      	lsls	r2, r0, #6
 8006932:	1a12      	subs	r2, r2, r0
 8006934:	eb63 0301 	sbc.w	r3, r3, r1
 8006938:	f04f 0000 	mov.w	r0, #0
 800693c:	f04f 0100 	mov.w	r1, #0
 8006940:	00d9      	lsls	r1, r3, #3
 8006942:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006946:	00d0      	lsls	r0, r2, #3
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	eb12 0208 	adds.w	r2, r2, r8
 8006950:	eb43 0309 	adc.w	r3, r3, r9
 8006954:	f04f 0000 	mov.w	r0, #0
 8006958:	f04f 0100 	mov.w	r1, #0
 800695c:	0259      	lsls	r1, r3, #9
 800695e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006962:	0250      	lsls	r0, r2, #9
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4610      	mov	r0, r2
 800696a:	4619      	mov	r1, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	461a      	mov	r2, r3
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	f7fa fb06 	bl	8000f84 <__aeabi_uldivmod>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4613      	mov	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	e04a      	b.n	8006a18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006982:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	461a      	mov	r2, r3
 800698a:	f04f 0300 	mov.w	r3, #0
 800698e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006992:	f04f 0100 	mov.w	r1, #0
 8006996:	ea02 0400 	and.w	r4, r2, r0
 800699a:	ea03 0501 	and.w	r5, r3, r1
 800699e:	4620      	mov	r0, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	014b      	lsls	r3, r1, #5
 80069ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069b0:	0142      	lsls	r2, r0, #5
 80069b2:	4610      	mov	r0, r2
 80069b4:	4619      	mov	r1, r3
 80069b6:	1b00      	subs	r0, r0, r4
 80069b8:	eb61 0105 	sbc.w	r1, r1, r5
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	018b      	lsls	r3, r1, #6
 80069c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069ca:	0182      	lsls	r2, r0, #6
 80069cc:	1a12      	subs	r2, r2, r0
 80069ce:	eb63 0301 	sbc.w	r3, r3, r1
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f04f 0100 	mov.w	r1, #0
 80069da:	00d9      	lsls	r1, r3, #3
 80069dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069e0:	00d0      	lsls	r0, r2, #3
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	1912      	adds	r2, r2, r4
 80069e8:	eb45 0303 	adc.w	r3, r5, r3
 80069ec:	f04f 0000 	mov.w	r0, #0
 80069f0:	f04f 0100 	mov.w	r1, #0
 80069f4:	0299      	lsls	r1, r3, #10
 80069f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80069fa:	0290      	lsls	r0, r2, #10
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4610      	mov	r0, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	f7fa faba 	bl	8000f84 <__aeabi_uldivmod>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4613      	mov	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	0c1b      	lsrs	r3, r3, #16
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	3301      	adds	r3, #1
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a30:	60bb      	str	r3, [r7, #8]
      break;
 8006a32:	e002      	b.n	8006a3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a34:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a36:	60bb      	str	r3, [r7, #8]
      break;
 8006a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a46:	bf00      	nop
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	00f42400 	.word	0x00f42400
 8006a50:	007a1200 	.word	0x007a1200

08006a54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a58:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	200011c0 	.word	0x200011c0

08006a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a70:	f7ff fff0 	bl	8006a54 <HAL_RCC_GetHCLKFreq>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	0a9b      	lsrs	r3, r3, #10
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	4903      	ldr	r1, [pc, #12]	; (8006a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a82:	5ccb      	ldrb	r3, [r1, r3]
 8006a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	0801c8c0 	.word	0x0801c8c0

08006a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a98:	f7ff ffdc 	bl	8006a54 <HAL_RCC_GetHCLKFreq>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	0b5b      	lsrs	r3, r3, #13
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	4903      	ldr	r1, [pc, #12]	; (8006ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aaa:	5ccb      	ldrb	r3, [r1, r3]
 8006aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	0801c8c0 	.word	0x0801c8c0

08006abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d012      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ae4:	4b69      	ldr	r3, [pc, #420]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	4a68      	ldr	r2, [pc, #416]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006aee:	6093      	str	r3, [r2, #8]
 8006af0:	4b66      	ldr	r3, [pc, #408]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af8:	4964      	ldr	r1, [pc, #400]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b06:	2301      	movs	r3, #1
 8006b08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d017      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b16:	4b5d      	ldr	r3, [pc, #372]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b24:	4959      	ldr	r1, [pc, #356]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b34:	d101      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006b36:	2301      	movs	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006b42:	2301      	movs	r3, #1
 8006b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d017      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b52:	4b4e      	ldr	r3, [pc, #312]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b60:	494a      	ldr	r1, [pc, #296]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b70:	d101      	bne.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006b72:	2301      	movs	r3, #1
 8006b74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 808b 	beq.w	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ba0:	4b3a      	ldr	r3, [pc, #232]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	4a39      	ldr	r2, [pc, #228]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006baa:	6413      	str	r3, [r2, #64]	; 0x40
 8006bac:	4b37      	ldr	r3, [pc, #220]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006bb8:	4b35      	ldr	r3, [pc, #212]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a34      	ldr	r2, [pc, #208]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc4:	f7fd fc1a 	bl	80043fc <HAL_GetTick>
 8006bc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bcc:	f7fd fc16 	bl	80043fc <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b64      	cmp	r3, #100	; 0x64
 8006bd8:	d901      	bls.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e357      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006bde:	4b2c      	ldr	r3, [pc, #176]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0f0      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bea:	4b28      	ldr	r3, [pc, #160]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d035      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d02e      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c08:	4b20      	ldr	r3, [pc, #128]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c1e:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c22:	4a1a      	ldr	r2, [pc, #104]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006c2a:	4a18      	ldr	r2, [pc, #96]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c30:	4b16      	ldr	r3, [pc, #88]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d114      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fd fbde 	bl	80043fc <HAL_GetTick>
 8006c40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c42:	e00a      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c44:	f7fd fbda 	bl	80043fc <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e319      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c5a:	4b0c      	ldr	r3, [pc, #48]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0ee      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c72:	d111      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006c74:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c82:	400b      	ands	r3, r1
 8006c84:	4901      	ldr	r1, [pc, #4]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	608b      	str	r3, [r1, #8]
 8006c8a:	e00b      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006c8c:	40023800 	.word	0x40023800
 8006c90:	40007000 	.word	0x40007000
 8006c94:	0ffffcff 	.word	0x0ffffcff
 8006c98:	4bb1      	ldr	r3, [pc, #708]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4ab0      	ldr	r2, [pc, #704]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ca2:	6093      	str	r3, [r2, #8]
 8006ca4:	4bae      	ldr	r3, [pc, #696]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cb0:	49ab      	ldr	r1, [pc, #684]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d010      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cc2:	4ba7      	ldr	r3, [pc, #668]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc8:	4aa5      	ldr	r2, [pc, #660]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006cd2:	4ba3      	ldr	r3, [pc, #652]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	49a0      	ldr	r1, [pc, #640]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cf0:	4b9b      	ldr	r3, [pc, #620]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cfe:	4998      	ldr	r1, [pc, #608]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d12:	4b93      	ldr	r3, [pc, #588]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d20:	498f      	ldr	r1, [pc, #572]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d34:	4b8a      	ldr	r3, [pc, #552]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d42:	4987      	ldr	r1, [pc, #540]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d56:	4b82      	ldr	r3, [pc, #520]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	497e      	ldr	r1, [pc, #504]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d78:	4b79      	ldr	r3, [pc, #484]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7e:	f023 0203 	bic.w	r2, r3, #3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	4976      	ldr	r1, [pc, #472]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d9a:	4b71      	ldr	r3, [pc, #452]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da0:	f023 020c 	bic.w	r2, r3, #12
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da8:	496d      	ldr	r1, [pc, #436]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dbc:	4b68      	ldr	r3, [pc, #416]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	4965      	ldr	r1, [pc, #404]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006dde:	4b60      	ldr	r3, [pc, #384]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dec:	495c      	ldr	r1, [pc, #368]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e00:	4b57      	ldr	r3, [pc, #348]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0e:	4954      	ldr	r1, [pc, #336]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e22:	4b4f      	ldr	r3, [pc, #316]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	494b      	ldr	r1, [pc, #300]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006e44:	4b46      	ldr	r3, [pc, #280]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e52:	4943      	ldr	r1, [pc, #268]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006e66:	4b3e      	ldr	r3, [pc, #248]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e74:	493a      	ldr	r1, [pc, #232]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e88:	4b35      	ldr	r3, [pc, #212]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e96:	4932      	ldr	r1, [pc, #200]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d011      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006eaa:	4b2d      	ldr	r3, [pc, #180]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb8:	4929      	ldr	r1, [pc, #164]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ec8:	d101      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0308 	and.w	r3, r3, #8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006eda:	2301      	movs	r3, #1
 8006edc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eea:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef8:	4919      	ldr	r1, [pc, #100]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f0c:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f1c:	4910      	ldr	r1, [pc, #64]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d006      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 80d9 	beq.w	80070ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f38:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a08      	ldr	r2, [pc, #32]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f44:	f7fd fa5a 	bl	80043fc <HAL_GetTick>
 8006f48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f4a:	e00b      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f4c:	f7fd fa56 	bl	80043fc <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b64      	cmp	r3, #100	; 0x64
 8006f58:	d904      	bls.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e197      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006f5e:	bf00      	nop
 8006f60:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f64:	4b6c      	ldr	r3, [pc, #432]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1ed      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d021      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d11d      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f84:	4b64      	ldr	r3, [pc, #400]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8a:	0c1b      	lsrs	r3, r3, #16
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f92:	4b61      	ldr	r3, [pc, #388]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f98:	0e1b      	lsrs	r3, r3, #24
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	019a      	lsls	r2, r3, #6
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	041b      	lsls	r3, r3, #16
 8006faa:	431a      	orrs	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	061b      	lsls	r3, r3, #24
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	071b      	lsls	r3, r3, #28
 8006fb8:	4957      	ldr	r1, [pc, #348]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d02e      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fea:	d129      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006fec:	4b4a      	ldr	r3, [pc, #296]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff2:	0c1b      	lsrs	r3, r3, #16
 8006ff4:	f003 0303 	and.w	r3, r3, #3
 8006ff8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ffa:	4b47      	ldr	r3, [pc, #284]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007000:	0f1b      	lsrs	r3, r3, #28
 8007002:	f003 0307 	and.w	r3, r3, #7
 8007006:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	019a      	lsls	r2, r3, #6
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	041b      	lsls	r3, r3, #16
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	061b      	lsls	r3, r3, #24
 800701a:	431a      	orrs	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	071b      	lsls	r3, r3, #28
 8007020:	493d      	ldr	r1, [pc, #244]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007028:	4b3b      	ldr	r3, [pc, #236]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800702a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800702e:	f023 021f 	bic.w	r2, r3, #31
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	3b01      	subs	r3, #1
 8007038:	4937      	ldr	r1, [pc, #220]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01d      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800704c:	4b32      	ldr	r3, [pc, #200]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800704e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007052:	0e1b      	lsrs	r3, r3, #24
 8007054:	f003 030f 	and.w	r3, r3, #15
 8007058:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800705a:	4b2f      	ldr	r3, [pc, #188]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800705c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007060:	0f1b      	lsrs	r3, r3, #28
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	019a      	lsls	r2, r3, #6
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	431a      	orrs	r2, r3
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	061b      	lsls	r3, r3, #24
 800707a:	431a      	orrs	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	071b      	lsls	r3, r3, #28
 8007080:	4925      	ldr	r1, [pc, #148]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007082:	4313      	orrs	r3, r2
 8007084:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d011      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	019a      	lsls	r2, r3, #6
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	041b      	lsls	r3, r3, #16
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	061b      	lsls	r3, r3, #24
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	071b      	lsls	r3, r3, #28
 80070b0:	4919      	ldr	r1, [pc, #100]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070b8:	4b17      	ldr	r3, [pc, #92]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a16      	ldr	r2, [pc, #88]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c4:	f7fd f99a 	bl	80043fc <HAL_GetTick>
 80070c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070ca:	e008      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070cc:	f7fd f996 	bl	80043fc <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b64      	cmp	r3, #100	; 0x64
 80070d8:	d901      	bls.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e0d7      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070de:	4b0e      	ldr	r3, [pc, #56]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	f040 80cd 	bne.w	800728c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a08      	ldr	r2, [pc, #32]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070fe:	f7fd f97d 	bl	80043fc <HAL_GetTick>
 8007102:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007104:	e00a      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007106:	f7fd f979 	bl	80043fc <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b64      	cmp	r3, #100	; 0x64
 8007112:	d903      	bls.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e0ba      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007118:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800711c:	4b5e      	ldr	r3, [pc, #376]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007128:	d0ed      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007146:	2b00      	cmp	r3, #0
 8007148:	d02e      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	2b00      	cmp	r3, #0
 8007150:	d12a      	bne.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007152:	4b51      	ldr	r3, [pc, #324]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007158:	0c1b      	lsrs	r3, r3, #16
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007160:	4b4d      	ldr	r3, [pc, #308]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007166:	0f1b      	lsrs	r3, r3, #28
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	019a      	lsls	r2, r3, #6
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	041b      	lsls	r3, r3, #16
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	061b      	lsls	r3, r3, #24
 8007180:	431a      	orrs	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	071b      	lsls	r3, r3, #28
 8007186:	4944      	ldr	r1, [pc, #272]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800718e:	4b42      	ldr	r3, [pc, #264]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007194:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719c:	3b01      	subs	r3, #1
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	493d      	ldr	r1, [pc, #244]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d022      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071bc:	d11d      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071be:	4b36      	ldr	r3, [pc, #216]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c4:	0e1b      	lsrs	r3, r3, #24
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071cc:	4b32      	ldr	r3, [pc, #200]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d2:	0f1b      	lsrs	r3, r3, #28
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	019a      	lsls	r2, r3, #6
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	041b      	lsls	r3, r3, #16
 80071e6:	431a      	orrs	r2, r3
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	061b      	lsls	r3, r3, #24
 80071ec:	431a      	orrs	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	071b      	lsls	r3, r3, #28
 80071f2:	4929      	ldr	r1, [pc, #164]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d028      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007206:	4b24      	ldr	r3, [pc, #144]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720c:	0e1b      	lsrs	r3, r3, #24
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007214:	4b20      	ldr	r3, [pc, #128]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800721a:	0c1b      	lsrs	r3, r3, #16
 800721c:	f003 0303 	and.w	r3, r3, #3
 8007220:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	019a      	lsls	r2, r3, #6
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	041b      	lsls	r3, r3, #16
 800722c:	431a      	orrs	r2, r3
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	061b      	lsls	r3, r3, #24
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	071b      	lsls	r3, r3, #28
 800723a:	4917      	ldr	r1, [pc, #92]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800723c:	4313      	orrs	r3, r2
 800723e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007242:	4b15      	ldr	r3, [pc, #84]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	4911      	ldr	r1, [pc, #68]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007252:	4313      	orrs	r3, r2
 8007254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007258:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a0e      	ldr	r2, [pc, #56]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800725e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007264:	f7fd f8ca 	bl	80043fc <HAL_GetTick>
 8007268:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800726a:	e008      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800726c:	f7fd f8c6 	bl	80043fc <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b64      	cmp	r3, #100	; 0x64
 8007278:	d901      	bls.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e007      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800727e:	4b06      	ldr	r3, [pc, #24]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800728a:	d1ef      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	40023800 	.word	0x40023800

0800729c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e081      	b.n	80073b2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7f5b      	ldrb	r3, [r3, #29]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d105      	bne.n	80072c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fa fbd4 	bl	8001a6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2202      	movs	r2, #2
 80072c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	22ca      	movs	r2, #202	; 0xca
 80072d0:	625a      	str	r2, [r3, #36]	; 0x24
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2253      	movs	r2, #83	; 0x53
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 faac 	bl	8007838 <RTC_EnterInitMode>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	22ff      	movs	r2, #255	; 0xff
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2204      	movs	r2, #4
 80072f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e05c      	b.n	80073b2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6899      	ldr	r1, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4b2e      	ldr	r3, [pc, #184]	; (80073bc <HAL_RTC_Init+0x120>)
 8007304:	400b      	ands	r3, r1
 8007306:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6899      	ldr	r1, [r3, #8]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68d2      	ldr	r2, [r2, #12]
 800732e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6919      	ldr	r1, [r3, #16]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	041a      	lsls	r2, r3, #16
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007352:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10e      	bne.n	8007380 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa40 	bl	80077e8 <HAL_RTC_WaitForSynchro>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d008      	beq.n	8007380 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	22ff      	movs	r2, #255	; 0xff
 8007374:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2204      	movs	r2, #4
 800737a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e018      	b.n	80073b2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0208 	bic.w	r2, r2, #8
 800738e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	22ff      	movs	r2, #255	; 0xff
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80073b0:	2300      	movs	r3, #0
  }
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	ff8fffbf 	.word	0xff8fffbf

080073c0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	7f1b      	ldrb	r3, [r3, #28]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_RTC_SetTime+0x1c>
 80073d8:	2302      	movs	r3, #2
 80073da:	e0a8      	b.n	800752e <HAL_RTC_SetTime+0x16e>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2202      	movs	r2, #2
 80073e6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d126      	bne.n	800743c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2200      	movs	r2, #0
 8007400:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f000 fa42 	bl	8007890 <RTC_ByteToBcd2>
 800740c:	4603      	mov	r3, r0
 800740e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fa3b 	bl	8007890 <RTC_ByteToBcd2>
 800741a:	4603      	mov	r3, r0
 800741c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800741e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	789b      	ldrb	r3, [r3, #2]
 8007424:	4618      	mov	r0, r3
 8007426:	f000 fa33 	bl	8007890 <RTC_ByteToBcd2>
 800742a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800742c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	7b1b      	ldrb	r3, [r3, #12]
 8007434:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e018      	b.n	800746e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	d102      	bne.n	8007450 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800745c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007462:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	7b1b      	ldrb	r3, [r3, #12]
 8007468:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800746a:	4313      	orrs	r3, r2
 800746c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	22ca      	movs	r2, #202	; 0xca
 8007474:	625a      	str	r2, [r3, #36]	; 0x24
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2253      	movs	r2, #83	; 0x53
 800747c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f9da 	bl	8007838 <RTC_EnterInitMode>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00b      	beq.n	80074a2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	22ff      	movs	r2, #255	; 0xff
 8007490:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2204      	movs	r2, #4
 8007496:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e045      	b.n	800752e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	6979      	ldr	r1, [r7, #20]
 80074a8:	4b23      	ldr	r3, [pc, #140]	; (8007538 <HAL_RTC_SetTime+0x178>)
 80074aa:	400b      	ands	r3, r1
 80074ac:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074bc:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6899      	ldr	r1, [r3, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	431a      	orrs	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074e4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d111      	bne.n	8007518 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f977 	bl	80077e8 <HAL_RTC_WaitForSynchro>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	22ff      	movs	r2, #255	; 0xff
 8007506:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2204      	movs	r2, #4
 800750c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e00a      	b.n	800752e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	22ff      	movs	r2, #255	; 0xff
 800751e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800752c:	2300      	movs	r3, #0
  }
}
 800752e:	4618      	mov	r0, r3
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	bd90      	pop	{r4, r7, pc}
 8007536:	bf00      	nop
 8007538:	007f7f7f 	.word	0x007f7f7f

0800753c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	4b22      	ldr	r3, [pc, #136]	; (80075f4 <HAL_RTC_GetTime+0xb8>)
 800756c:	4013      	ands	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	0c1b      	lsrs	r3, r3, #16
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800757a:	b2da      	uxtb	r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	0a1b      	lsrs	r3, r3, #8
 8007584:	b2db      	uxtb	r3, r3
 8007586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758a:	b2da      	uxtb	r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007598:	b2da      	uxtb	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	0c1b      	lsrs	r3, r3, #16
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d11a      	bne.n	80075ea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f987 	bl	80078cc <RTC_Bcd2ToByte>
 80075be:	4603      	mov	r3, r0
 80075c0:	461a      	mov	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f97e 	bl	80078cc <RTC_Bcd2ToByte>
 80075d0:	4603      	mov	r3, r0
 80075d2:	461a      	mov	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	789b      	ldrb	r3, [r3, #2]
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 f975 	bl	80078cc <RTC_Bcd2ToByte>
 80075e2:	4603      	mov	r3, r0
 80075e4:	461a      	mov	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	007f7f7f 	.word	0x007f7f7f

080075f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80075f8:	b590      	push	{r4, r7, lr}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	7f1b      	ldrb	r3, [r3, #28]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_RTC_SetDate+0x1c>
 8007610:	2302      	movs	r3, #2
 8007612:	e092      	b.n	800773a <HAL_RTC_SetDate+0x142>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2202      	movs	r2, #2
 800761e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10e      	bne.n	8007644 <HAL_RTC_SetDate+0x4c>
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	f023 0310 	bic.w	r3, r3, #16
 800763a:	b2db      	uxtb	r3, r3
 800763c:	330a      	adds	r3, #10
 800763e:	b2da      	uxtb	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d11c      	bne.n	8007684 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	78db      	ldrb	r3, [r3, #3]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f91e 	bl	8007890 <RTC_ByteToBcd2>
 8007654:	4603      	mov	r3, r0
 8007656:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	785b      	ldrb	r3, [r3, #1]
 800765c:	4618      	mov	r0, r3
 800765e:	f000 f917 	bl	8007890 <RTC_ByteToBcd2>
 8007662:	4603      	mov	r3, r0
 8007664:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007666:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	789b      	ldrb	r3, [r3, #2]
 800766c:	4618      	mov	r0, r3
 800766e:	f000 f90f 	bl	8007890 <RTC_ByteToBcd2>
 8007672:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007674:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	e00e      	b.n	80076a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	78db      	ldrb	r3, [r3, #3]
 8007688:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007690:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007696:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	22ca      	movs	r2, #202	; 0xca
 80076a8:	625a      	str	r2, [r3, #36]	; 0x24
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2253      	movs	r2, #83	; 0x53
 80076b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f8c0 	bl	8007838 <RTC_EnterInitMode>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00b      	beq.n	80076d6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	22ff      	movs	r2, #255	; 0xff
 80076c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2204      	movs	r2, #4
 80076ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e031      	b.n	800773a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	6979      	ldr	r1, [r7, #20]
 80076dc:	4b19      	ldr	r3, [pc, #100]	; (8007744 <HAL_RTC_SetDate+0x14c>)
 80076de:	400b      	ands	r3, r1
 80076e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68da      	ldr	r2, [r3, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076f0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d111      	bne.n	8007724 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f871 	bl	80077e8 <HAL_RTC_WaitForSynchro>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	22ff      	movs	r2, #255	; 0xff
 8007712:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2204      	movs	r2, #4
 8007718:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e00a      	b.n	800773a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	22ff      	movs	r2, #255	; 0xff
 800772a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007738:	2300      	movs	r3, #0
  }
}
 800773a:	4618      	mov	r0, r3
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	bd90      	pop	{r4, r7, pc}
 8007742:	bf00      	nop
 8007744:	00ffff3f 	.word	0x00ffff3f

08007748 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	4b21      	ldr	r3, [pc, #132]	; (80077e4 <HAL_RTC_GetDate+0x9c>)
 8007760:	4013      	ands	r3, r2
 8007762:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	0c1b      	lsrs	r3, r3, #16
 8007768:	b2da      	uxtb	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	0a1b      	lsrs	r3, r3, #8
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	b2da      	uxtb	r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007786:	b2da      	uxtb	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	0b5b      	lsrs	r3, r3, #13
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	b2da      	uxtb	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d11a      	bne.n	80077d8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	78db      	ldrb	r3, [r3, #3]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f890 	bl	80078cc <RTC_Bcd2ToByte>
 80077ac:	4603      	mov	r3, r0
 80077ae:	461a      	mov	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 f887 	bl	80078cc <RTC_Bcd2ToByte>
 80077be:	4603      	mov	r3, r0
 80077c0:	461a      	mov	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	789b      	ldrb	r3, [r3, #2]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 f87e 	bl	80078cc <RTC_Bcd2ToByte>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	00ffff3f 	.word	0x00ffff3f

080077e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007802:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007804:	f7fc fdfa 	bl	80043fc <HAL_GetTick>
 8007808:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800780a:	e009      	b.n	8007820 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800780c:	f7fc fdf6 	bl	80043fc <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800781a:	d901      	bls.n	8007820 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e007      	b.n	8007830 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0ee      	beq.n	800780c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d119      	bne.n	8007886 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f04f 32ff 	mov.w	r2, #4294967295
 800785a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800785c:	f7fc fdce 	bl	80043fc <HAL_GetTick>
 8007860:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007862:	e009      	b.n	8007878 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007864:	f7fc fdca 	bl	80043fc <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007872:	d901      	bls.n	8007878 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e007      	b.n	8007888 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0ee      	beq.n	8007864 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800789e:	e005      	b.n	80078ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3301      	adds	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	3b0a      	subs	r3, #10
 80078aa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b09      	cmp	r3, #9
 80078b0:	d8f6      	bhi.n	80078a0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	4313      	orrs	r3, r2
 80078be:	b2db      	uxtb	r3, r3
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	091b      	lsrs	r3, r3, #4
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	f003 030f 	and.w	r3, r3, #15
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	4413      	add	r3, r2
 80078fa:	b2db      	uxtb	r3, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e049      	b.n	80079ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fa f8b6 	bl	8001aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f000 faea 	bl	8007f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d001      	beq.n	80079d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e054      	b.n	8007a7a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a26      	ldr	r2, [pc, #152]	; (8007a88 <HAL_TIM_Base_Start_IT+0xd0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d022      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0x80>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fa:	d01d      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0x80>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a22      	ldr	r2, [pc, #136]	; (8007a8c <HAL_TIM_Base_Start_IT+0xd4>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d018      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0x80>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a21      	ldr	r2, [pc, #132]	; (8007a90 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d013      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0x80>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a1f      	ldr	r2, [pc, #124]	; (8007a94 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00e      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0x80>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a1e      	ldr	r2, [pc, #120]	; (8007a98 <HAL_TIM_Base_Start_IT+0xe0>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d009      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0x80>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a1c      	ldr	r2, [pc, #112]	; (8007a9c <HAL_TIM_Base_Start_IT+0xe4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d004      	beq.n	8007a38 <HAL_TIM_Base_Start_IT+0x80>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a1b      	ldr	r2, [pc, #108]	; (8007aa0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d115      	bne.n	8007a64 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <HAL_TIM_Base_Start_IT+0xec>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b06      	cmp	r3, #6
 8007a48:	d015      	beq.n	8007a76 <HAL_TIM_Base_Start_IT+0xbe>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a50:	d011      	beq.n	8007a76 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0201 	orr.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a62:	e008      	b.n	8007a76 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e000      	b.n	8007a78 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40010000 	.word	0x40010000
 8007a8c:	40000400 	.word	0x40000400
 8007a90:	40000800 	.word	0x40000800
 8007a94:	40000c00 	.word	0x40000c00
 8007a98:	40010400 	.word	0x40010400
 8007a9c:	40014000 	.word	0x40014000
 8007aa0:	40001800 	.word	0x40001800
 8007aa4:	00010007 	.word	0x00010007

08007aa8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a1a      	ldr	r2, [r3, #32]
 8007ac6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10f      	bne.n	8007af0 <HAL_TIM_Base_Stop_IT+0x48>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6a1a      	ldr	r2, [r3, #32]
 8007ad6:	f240 4344 	movw	r3, #1092	; 0x444
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d107      	bne.n	8007af0 <HAL_TIM_Base_Stop_IT+0x48>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0201 	bic.w	r2, r2, #1
 8007aee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d122      	bne.n	8007b62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d11b      	bne.n	8007b62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f06f 0202 	mvn.w	r2, #2
 8007b32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f003 0303 	and.w	r3, r3, #3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f9cb 	bl	8007ee4 <HAL_TIM_IC_CaptureCallback>
 8007b4e:	e005      	b.n	8007b5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f9bd 	bl	8007ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9ce 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d122      	bne.n	8007bb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d11b      	bne.n	8007bb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f06f 0204 	mvn.w	r2, #4
 8007b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f9a1 	bl	8007ee4 <HAL_TIM_IC_CaptureCallback>
 8007ba2:	e005      	b.n	8007bb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f993 	bl	8007ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f9a4 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	f003 0308 	and.w	r3, r3, #8
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d122      	bne.n	8007c0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b08      	cmp	r3, #8
 8007bd0:	d11b      	bne.n	8007c0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f06f 0208 	mvn.w	r2, #8
 8007bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2204      	movs	r2, #4
 8007be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f977 	bl	8007ee4 <HAL_TIM_IC_CaptureCallback>
 8007bf6:	e005      	b.n	8007c04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f969 	bl	8007ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f97a 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	f003 0310 	and.w	r3, r3, #16
 8007c14:	2b10      	cmp	r3, #16
 8007c16:	d122      	bne.n	8007c5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2b10      	cmp	r3, #16
 8007c24:	d11b      	bne.n	8007c5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f06f 0210 	mvn.w	r2, #16
 8007c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2208      	movs	r2, #8
 8007c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f94d 	bl	8007ee4 <HAL_TIM_IC_CaptureCallback>
 8007c4a:	e005      	b.n	8007c58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f93f 	bl	8007ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f950 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d10e      	bne.n	8007c8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d107      	bne.n	8007c8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f06f 0201 	mvn.w	r2, #1
 8007c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f997 	bl	8008fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c94:	2b80      	cmp	r3, #128	; 0x80
 8007c96:	d10e      	bne.n	8007cb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b80      	cmp	r3, #128	; 0x80
 8007ca4:	d107      	bne.n	8007cb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fb07 	bl	80082c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cc4:	d10e      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd0:	2b80      	cmp	r3, #128	; 0x80
 8007cd2:	d107      	bne.n	8007ce4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fafa 	bl	80082d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d10e      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfc:	2b40      	cmp	r3, #64	; 0x40
 8007cfe:	d107      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f8fe 	bl	8007f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d10e      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d107      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f06f 0220 	mvn.w	r2, #32
 8007d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 faba 	bl	80082b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_TIM_ConfigClockSource+0x18>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e0b3      	b.n	8007ec4 <HAL_TIM_ConfigClockSource+0x180>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4b55      	ldr	r3, [pc, #340]	; (8007ecc <HAL_TIM_ConfigClockSource+0x188>)
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d94:	d03e      	beq.n	8007e14 <HAL_TIM_ConfigClockSource+0xd0>
 8007d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9a:	f200 8087 	bhi.w	8007eac <HAL_TIM_ConfigClockSource+0x168>
 8007d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da2:	f000 8085 	beq.w	8007eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007daa:	d87f      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x168>
 8007dac:	2b70      	cmp	r3, #112	; 0x70
 8007dae:	d01a      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0xa2>
 8007db0:	2b70      	cmp	r3, #112	; 0x70
 8007db2:	d87b      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x168>
 8007db4:	2b60      	cmp	r3, #96	; 0x60
 8007db6:	d050      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0x116>
 8007db8:	2b60      	cmp	r3, #96	; 0x60
 8007dba:	d877      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x168>
 8007dbc:	2b50      	cmp	r3, #80	; 0x50
 8007dbe:	d03c      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0xf6>
 8007dc0:	2b50      	cmp	r3, #80	; 0x50
 8007dc2:	d873      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x168>
 8007dc4:	2b40      	cmp	r3, #64	; 0x40
 8007dc6:	d058      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0x136>
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d86f      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x168>
 8007dcc:	2b30      	cmp	r3, #48	; 0x30
 8007dce:	d064      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x156>
 8007dd0:	2b30      	cmp	r3, #48	; 0x30
 8007dd2:	d86b      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x168>
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	d060      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x156>
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d867      	bhi.n	8007eac <HAL_TIM_ConfigClockSource+0x168>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d05c      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x156>
 8007de0:	2b10      	cmp	r3, #16
 8007de2:	d05a      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007de4:	e062      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6899      	ldr	r1, [r3, #8]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f000 f9ad 	bl	8008154 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	609a      	str	r2, [r3, #8]
      break;
 8007e12:	e04e      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	6899      	ldr	r1, [r3, #8]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f000 f996 	bl	8008154 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e36:	609a      	str	r2, [r3, #8]
      break;
 8007e38:	e03b      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6859      	ldr	r1, [r3, #4]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f000 f90a 	bl	8008060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2150      	movs	r1, #80	; 0x50
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 f963 	bl	800811e <TIM_ITRx_SetConfig>
      break;
 8007e58:	e02b      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6859      	ldr	r1, [r3, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f000 f929 	bl	80080be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2160      	movs	r1, #96	; 0x60
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f953 	bl	800811e <TIM_ITRx_SetConfig>
      break;
 8007e78:	e01b      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	6859      	ldr	r1, [r3, #4]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f000 f8ea 	bl	8008060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2140      	movs	r1, #64	; 0x40
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f943 	bl	800811e <TIM_ITRx_SetConfig>
      break;
 8007e98:	e00b      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f000 f93a 	bl	800811e <TIM_ITRx_SetConfig>
        break;
 8007eaa:	e002      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007eac:	bf00      	nop
 8007eae:	e000      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007eb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	fffeff88 	.word	0xfffeff88

08007ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a40      	ldr	r2, [pc, #256]	; (8008034 <TIM_Base_SetConfig+0x114>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d013      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3e:	d00f      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a3d      	ldr	r2, [pc, #244]	; (8008038 <TIM_Base_SetConfig+0x118>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00b      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a3c      	ldr	r2, [pc, #240]	; (800803c <TIM_Base_SetConfig+0x11c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d007      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a3b      	ldr	r2, [pc, #236]	; (8008040 <TIM_Base_SetConfig+0x120>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d003      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a3a      	ldr	r2, [pc, #232]	; (8008044 <TIM_Base_SetConfig+0x124>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d108      	bne.n	8007f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a2f      	ldr	r2, [pc, #188]	; (8008034 <TIM_Base_SetConfig+0x114>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d02b      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f80:	d027      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a2c      	ldr	r2, [pc, #176]	; (8008038 <TIM_Base_SetConfig+0x118>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d023      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2b      	ldr	r2, [pc, #172]	; (800803c <TIM_Base_SetConfig+0x11c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d01f      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <TIM_Base_SetConfig+0x120>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01b      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a29      	ldr	r2, [pc, #164]	; (8008044 <TIM_Base_SetConfig+0x124>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d017      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a28      	ldr	r2, [pc, #160]	; (8008048 <TIM_Base_SetConfig+0x128>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d013      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a27      	ldr	r2, [pc, #156]	; (800804c <TIM_Base_SetConfig+0x12c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00f      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a26      	ldr	r2, [pc, #152]	; (8008050 <TIM_Base_SetConfig+0x130>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00b      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a25      	ldr	r2, [pc, #148]	; (8008054 <TIM_Base_SetConfig+0x134>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d007      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a24      	ldr	r2, [pc, #144]	; (8008058 <TIM_Base_SetConfig+0x138>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d003      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a23      	ldr	r2, [pc, #140]	; (800805c <TIM_Base_SetConfig+0x13c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d108      	bne.n	8007fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <TIM_Base_SetConfig+0x114>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_Base_SetConfig+0xf8>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a0c      	ldr	r2, [pc, #48]	; (8008044 <TIM_Base_SetConfig+0x124>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d103      	bne.n	8008020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	615a      	str	r2, [r3, #20]
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40010000 	.word	0x40010000
 8008038:	40000400 	.word	0x40000400
 800803c:	40000800 	.word	0x40000800
 8008040:	40000c00 	.word	0x40000c00
 8008044:	40010400 	.word	0x40010400
 8008048:	40014000 	.word	0x40014000
 800804c:	40014400 	.word	0x40014400
 8008050:	40014800 	.word	0x40014800
 8008054:	40001800 	.word	0x40001800
 8008058:	40001c00 	.word	0x40001c00
 800805c:	40002000 	.word	0x40002000

08008060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f023 0201 	bic.w	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800808a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	4313      	orrs	r3, r2
 8008094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f023 030a 	bic.w	r3, r3, #10
 800809c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	621a      	str	r2, [r3, #32]
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080be:	b480      	push	{r7}
 80080c0:	b087      	sub	sp, #28
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	f023 0210 	bic.w	r2, r3, #16
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	031b      	lsls	r3, r3, #12
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	011b      	lsls	r3, r3, #4
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	4313      	orrs	r3, r2
 8008104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	621a      	str	r2, [r3, #32]
}
 8008112:	bf00      	nop
 8008114:	371c      	adds	r7, #28
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4313      	orrs	r3, r2
 800813c:	f043 0307 	orr.w	r3, r3, #7
 8008140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	609a      	str	r2, [r3, #8]
}
 8008148:	bf00      	nop
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800816e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	021a      	lsls	r2, r3, #8
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	431a      	orrs	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4313      	orrs	r3, r2
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	609a      	str	r2, [r3, #8]
}
 8008188:	bf00      	nop
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e06d      	b.n	8008288 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a30      	ldr	r2, [pc, #192]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a2f      	ldr	r2, [pc, #188]	; (8008298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d108      	bne.n	80081f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a20      	ldr	r2, [pc, #128]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d022      	beq.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821e:	d01d      	beq.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a1d      	ldr	r2, [pc, #116]	; (800829c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d018      	beq.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a1c      	ldr	r2, [pc, #112]	; (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1a      	ldr	r2, [pc, #104]	; (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00e      	beq.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a15      	ldr	r2, [pc, #84]	; (8008298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d009      	beq.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a16      	ldr	r2, [pc, #88]	; (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a15      	ldr	r2, [pc, #84]	; (80082ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d10c      	bne.n	8008276 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	4313      	orrs	r3, r2
 800826c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	40010000 	.word	0x40010000
 8008298:	40010400 	.word	0x40010400
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800
 80082a4:	40000c00 	.word	0x40000c00
 80082a8:	40014000 	.word	0x40014000
 80082ac:	40001800 	.word	0x40001800

080082b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e040      	b.n	8008380 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f83a 	bl	8008388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2224      	movs	r2, #36	; 0x24
 8008318:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f930 	bl	8008590 <UART_SetConfig>
 8008330:	4603      	mov	r3, r0
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e022      	b.n	8008380 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fb86 	bl	8008a54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fc0d 	bl	8008b98 <UART_CheckIdleState>
 800837e:	4603      	mov	r3, r0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08a      	sub	sp, #40	; 0x28
 80083a0:	af02      	add	r7, sp, #8
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	4613      	mov	r3, r2
 80083aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b0:	2b20      	cmp	r3, #32
 80083b2:	f040 8081 	bne.w	80084b8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <HAL_UART_Transmit+0x26>
 80083bc:	88fb      	ldrh	r3, [r7, #6]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e079      	b.n	80084ba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d101      	bne.n	80083d4 <HAL_UART_Transmit+0x38>
 80083d0:	2302      	movs	r3, #2
 80083d2:	e072      	b.n	80084ba <HAL_UART_Transmit+0x11e>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2221      	movs	r2, #33	; 0x21
 80083e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083ea:	f7fc f807 	bl	80043fc <HAL_GetTick>
 80083ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	88fa      	ldrh	r2, [r7, #6]
 80083f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008408:	d108      	bne.n	800841c <HAL_UART_Transmit+0x80>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	61bb      	str	r3, [r7, #24]
 800841a:	e003      	b.n	8008424 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008420:	2300      	movs	r3, #0
 8008422:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800842c:	e02c      	b.n	8008488 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2200      	movs	r2, #0
 8008436:	2180      	movs	r1, #128	; 0x80
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 fbe0 	bl	8008bfe <UART_WaitOnFlagUntilTimeout>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e038      	b.n	80084ba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800845c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	3302      	adds	r3, #2
 8008462:	61bb      	str	r3, [r7, #24]
 8008464:	e007      	b.n	8008476 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	781a      	ldrb	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	3301      	adds	r3, #1
 8008474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800848e:	b29b      	uxth	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1cc      	bne.n	800842e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2200      	movs	r2, #0
 800849c:	2140      	movs	r1, #64	; 0x40
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 fbad 	bl	8008bfe <UART_WaitOnFlagUntilTimeout>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e005      	b.n	80084ba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e000      	b.n	80084ba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80084b8:	2302      	movs	r3, #2
  }
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3720      	adds	r7, #32
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	d12c      	bne.n	8008532 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <HAL_UART_Receive_DMA+0x22>
 80084de:	88fb      	ldrh	r3, [r7, #6]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e025      	b.n	8008534 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d101      	bne.n	80084f6 <HAL_UART_Receive_DMA+0x34>
 80084f2:	2302      	movs	r3, #2
 80084f4:	e01e      	b.n	8008534 <HAL_UART_Receive_DMA+0x72>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008520:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	461a      	mov	r2, r3
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fbe5 	bl	8008cf8 <UART_Start_Receive_DMA>
 800852e:	4603      	mov	r3, r0
 8008530:	e000      	b.n	8008534 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008532:	2302      	movs	r3, #2
  }
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	431a      	orrs	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	431a      	orrs	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	4ba7      	ldr	r3, [pc, #668]	; (8008858 <UART_SetConfig+0x2c8>)
 80085bc:	4013      	ands	r3, r2
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	6979      	ldr	r1, [r7, #20]
 80085c4:	430b      	orrs	r3, r1
 80085c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68da      	ldr	r2, [r3, #12]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	430a      	orrs	r2, r1
 8008600:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a95      	ldr	r2, [pc, #596]	; (800885c <UART_SetConfig+0x2cc>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d120      	bne.n	800864e <UART_SetConfig+0xbe>
 800860c:	4b94      	ldr	r3, [pc, #592]	; (8008860 <UART_SetConfig+0x2d0>)
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	2b03      	cmp	r3, #3
 8008618:	d816      	bhi.n	8008648 <UART_SetConfig+0xb8>
 800861a:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <UART_SetConfig+0x90>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	08008631 	.word	0x08008631
 8008624:	0800863d 	.word	0x0800863d
 8008628:	08008637 	.word	0x08008637
 800862c:	08008643 	.word	0x08008643
 8008630:	2301      	movs	r3, #1
 8008632:	77fb      	strb	r3, [r7, #31]
 8008634:	e14f      	b.n	80088d6 <UART_SetConfig+0x346>
 8008636:	2302      	movs	r3, #2
 8008638:	77fb      	strb	r3, [r7, #31]
 800863a:	e14c      	b.n	80088d6 <UART_SetConfig+0x346>
 800863c:	2304      	movs	r3, #4
 800863e:	77fb      	strb	r3, [r7, #31]
 8008640:	e149      	b.n	80088d6 <UART_SetConfig+0x346>
 8008642:	2308      	movs	r3, #8
 8008644:	77fb      	strb	r3, [r7, #31]
 8008646:	e146      	b.n	80088d6 <UART_SetConfig+0x346>
 8008648:	2310      	movs	r3, #16
 800864a:	77fb      	strb	r3, [r7, #31]
 800864c:	e143      	b.n	80088d6 <UART_SetConfig+0x346>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a84      	ldr	r2, [pc, #528]	; (8008864 <UART_SetConfig+0x2d4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d132      	bne.n	80086be <UART_SetConfig+0x12e>
 8008658:	4b81      	ldr	r3, [pc, #516]	; (8008860 <UART_SetConfig+0x2d0>)
 800865a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865e:	f003 030c 	and.w	r3, r3, #12
 8008662:	2b0c      	cmp	r3, #12
 8008664:	d828      	bhi.n	80086b8 <UART_SetConfig+0x128>
 8008666:	a201      	add	r2, pc, #4	; (adr r2, 800866c <UART_SetConfig+0xdc>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	080086a1 	.word	0x080086a1
 8008670:	080086b9 	.word	0x080086b9
 8008674:	080086b9 	.word	0x080086b9
 8008678:	080086b9 	.word	0x080086b9
 800867c:	080086ad 	.word	0x080086ad
 8008680:	080086b9 	.word	0x080086b9
 8008684:	080086b9 	.word	0x080086b9
 8008688:	080086b9 	.word	0x080086b9
 800868c:	080086a7 	.word	0x080086a7
 8008690:	080086b9 	.word	0x080086b9
 8008694:	080086b9 	.word	0x080086b9
 8008698:	080086b9 	.word	0x080086b9
 800869c:	080086b3 	.word	0x080086b3
 80086a0:	2300      	movs	r3, #0
 80086a2:	77fb      	strb	r3, [r7, #31]
 80086a4:	e117      	b.n	80088d6 <UART_SetConfig+0x346>
 80086a6:	2302      	movs	r3, #2
 80086a8:	77fb      	strb	r3, [r7, #31]
 80086aa:	e114      	b.n	80088d6 <UART_SetConfig+0x346>
 80086ac:	2304      	movs	r3, #4
 80086ae:	77fb      	strb	r3, [r7, #31]
 80086b0:	e111      	b.n	80088d6 <UART_SetConfig+0x346>
 80086b2:	2308      	movs	r3, #8
 80086b4:	77fb      	strb	r3, [r7, #31]
 80086b6:	e10e      	b.n	80088d6 <UART_SetConfig+0x346>
 80086b8:	2310      	movs	r3, #16
 80086ba:	77fb      	strb	r3, [r7, #31]
 80086bc:	e10b      	b.n	80088d6 <UART_SetConfig+0x346>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a69      	ldr	r2, [pc, #420]	; (8008868 <UART_SetConfig+0x2d8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d120      	bne.n	800870a <UART_SetConfig+0x17a>
 80086c8:	4b65      	ldr	r3, [pc, #404]	; (8008860 <UART_SetConfig+0x2d0>)
 80086ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086d2:	2b30      	cmp	r3, #48	; 0x30
 80086d4:	d013      	beq.n	80086fe <UART_SetConfig+0x16e>
 80086d6:	2b30      	cmp	r3, #48	; 0x30
 80086d8:	d814      	bhi.n	8008704 <UART_SetConfig+0x174>
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d009      	beq.n	80086f2 <UART_SetConfig+0x162>
 80086de:	2b20      	cmp	r3, #32
 80086e0:	d810      	bhi.n	8008704 <UART_SetConfig+0x174>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <UART_SetConfig+0x15c>
 80086e6:	2b10      	cmp	r3, #16
 80086e8:	d006      	beq.n	80086f8 <UART_SetConfig+0x168>
 80086ea:	e00b      	b.n	8008704 <UART_SetConfig+0x174>
 80086ec:	2300      	movs	r3, #0
 80086ee:	77fb      	strb	r3, [r7, #31]
 80086f0:	e0f1      	b.n	80088d6 <UART_SetConfig+0x346>
 80086f2:	2302      	movs	r3, #2
 80086f4:	77fb      	strb	r3, [r7, #31]
 80086f6:	e0ee      	b.n	80088d6 <UART_SetConfig+0x346>
 80086f8:	2304      	movs	r3, #4
 80086fa:	77fb      	strb	r3, [r7, #31]
 80086fc:	e0eb      	b.n	80088d6 <UART_SetConfig+0x346>
 80086fe:	2308      	movs	r3, #8
 8008700:	77fb      	strb	r3, [r7, #31]
 8008702:	e0e8      	b.n	80088d6 <UART_SetConfig+0x346>
 8008704:	2310      	movs	r3, #16
 8008706:	77fb      	strb	r3, [r7, #31]
 8008708:	e0e5      	b.n	80088d6 <UART_SetConfig+0x346>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a57      	ldr	r2, [pc, #348]	; (800886c <UART_SetConfig+0x2dc>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d120      	bne.n	8008756 <UART_SetConfig+0x1c6>
 8008714:	4b52      	ldr	r3, [pc, #328]	; (8008860 <UART_SetConfig+0x2d0>)
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800871e:	2bc0      	cmp	r3, #192	; 0xc0
 8008720:	d013      	beq.n	800874a <UART_SetConfig+0x1ba>
 8008722:	2bc0      	cmp	r3, #192	; 0xc0
 8008724:	d814      	bhi.n	8008750 <UART_SetConfig+0x1c0>
 8008726:	2b80      	cmp	r3, #128	; 0x80
 8008728:	d009      	beq.n	800873e <UART_SetConfig+0x1ae>
 800872a:	2b80      	cmp	r3, #128	; 0x80
 800872c:	d810      	bhi.n	8008750 <UART_SetConfig+0x1c0>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <UART_SetConfig+0x1a8>
 8008732:	2b40      	cmp	r3, #64	; 0x40
 8008734:	d006      	beq.n	8008744 <UART_SetConfig+0x1b4>
 8008736:	e00b      	b.n	8008750 <UART_SetConfig+0x1c0>
 8008738:	2300      	movs	r3, #0
 800873a:	77fb      	strb	r3, [r7, #31]
 800873c:	e0cb      	b.n	80088d6 <UART_SetConfig+0x346>
 800873e:	2302      	movs	r3, #2
 8008740:	77fb      	strb	r3, [r7, #31]
 8008742:	e0c8      	b.n	80088d6 <UART_SetConfig+0x346>
 8008744:	2304      	movs	r3, #4
 8008746:	77fb      	strb	r3, [r7, #31]
 8008748:	e0c5      	b.n	80088d6 <UART_SetConfig+0x346>
 800874a:	2308      	movs	r3, #8
 800874c:	77fb      	strb	r3, [r7, #31]
 800874e:	e0c2      	b.n	80088d6 <UART_SetConfig+0x346>
 8008750:	2310      	movs	r3, #16
 8008752:	77fb      	strb	r3, [r7, #31]
 8008754:	e0bf      	b.n	80088d6 <UART_SetConfig+0x346>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a45      	ldr	r2, [pc, #276]	; (8008870 <UART_SetConfig+0x2e0>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d125      	bne.n	80087ac <UART_SetConfig+0x21c>
 8008760:	4b3f      	ldr	r3, [pc, #252]	; (8008860 <UART_SetConfig+0x2d0>)
 8008762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800876a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800876e:	d017      	beq.n	80087a0 <UART_SetConfig+0x210>
 8008770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008774:	d817      	bhi.n	80087a6 <UART_SetConfig+0x216>
 8008776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877a:	d00b      	beq.n	8008794 <UART_SetConfig+0x204>
 800877c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008780:	d811      	bhi.n	80087a6 <UART_SetConfig+0x216>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <UART_SetConfig+0x1fe>
 8008786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800878a:	d006      	beq.n	800879a <UART_SetConfig+0x20a>
 800878c:	e00b      	b.n	80087a6 <UART_SetConfig+0x216>
 800878e:	2300      	movs	r3, #0
 8008790:	77fb      	strb	r3, [r7, #31]
 8008792:	e0a0      	b.n	80088d6 <UART_SetConfig+0x346>
 8008794:	2302      	movs	r3, #2
 8008796:	77fb      	strb	r3, [r7, #31]
 8008798:	e09d      	b.n	80088d6 <UART_SetConfig+0x346>
 800879a:	2304      	movs	r3, #4
 800879c:	77fb      	strb	r3, [r7, #31]
 800879e:	e09a      	b.n	80088d6 <UART_SetConfig+0x346>
 80087a0:	2308      	movs	r3, #8
 80087a2:	77fb      	strb	r3, [r7, #31]
 80087a4:	e097      	b.n	80088d6 <UART_SetConfig+0x346>
 80087a6:	2310      	movs	r3, #16
 80087a8:	77fb      	strb	r3, [r7, #31]
 80087aa:	e094      	b.n	80088d6 <UART_SetConfig+0x346>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a30      	ldr	r2, [pc, #192]	; (8008874 <UART_SetConfig+0x2e4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d125      	bne.n	8008802 <UART_SetConfig+0x272>
 80087b6:	4b2a      	ldr	r3, [pc, #168]	; (8008860 <UART_SetConfig+0x2d0>)
 80087b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80087c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087c4:	d017      	beq.n	80087f6 <UART_SetConfig+0x266>
 80087c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087ca:	d817      	bhi.n	80087fc <UART_SetConfig+0x26c>
 80087cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087d0:	d00b      	beq.n	80087ea <UART_SetConfig+0x25a>
 80087d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087d6:	d811      	bhi.n	80087fc <UART_SetConfig+0x26c>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <UART_SetConfig+0x254>
 80087dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e0:	d006      	beq.n	80087f0 <UART_SetConfig+0x260>
 80087e2:	e00b      	b.n	80087fc <UART_SetConfig+0x26c>
 80087e4:	2301      	movs	r3, #1
 80087e6:	77fb      	strb	r3, [r7, #31]
 80087e8:	e075      	b.n	80088d6 <UART_SetConfig+0x346>
 80087ea:	2302      	movs	r3, #2
 80087ec:	77fb      	strb	r3, [r7, #31]
 80087ee:	e072      	b.n	80088d6 <UART_SetConfig+0x346>
 80087f0:	2304      	movs	r3, #4
 80087f2:	77fb      	strb	r3, [r7, #31]
 80087f4:	e06f      	b.n	80088d6 <UART_SetConfig+0x346>
 80087f6:	2308      	movs	r3, #8
 80087f8:	77fb      	strb	r3, [r7, #31]
 80087fa:	e06c      	b.n	80088d6 <UART_SetConfig+0x346>
 80087fc:	2310      	movs	r3, #16
 80087fe:	77fb      	strb	r3, [r7, #31]
 8008800:	e069      	b.n	80088d6 <UART_SetConfig+0x346>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a1c      	ldr	r2, [pc, #112]	; (8008878 <UART_SetConfig+0x2e8>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d137      	bne.n	800887c <UART_SetConfig+0x2ec>
 800880c:	4b14      	ldr	r3, [pc, #80]	; (8008860 <UART_SetConfig+0x2d0>)
 800880e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008812:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800881a:	d017      	beq.n	800884c <UART_SetConfig+0x2bc>
 800881c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008820:	d817      	bhi.n	8008852 <UART_SetConfig+0x2c2>
 8008822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008826:	d00b      	beq.n	8008840 <UART_SetConfig+0x2b0>
 8008828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800882c:	d811      	bhi.n	8008852 <UART_SetConfig+0x2c2>
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <UART_SetConfig+0x2aa>
 8008832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008836:	d006      	beq.n	8008846 <UART_SetConfig+0x2b6>
 8008838:	e00b      	b.n	8008852 <UART_SetConfig+0x2c2>
 800883a:	2300      	movs	r3, #0
 800883c:	77fb      	strb	r3, [r7, #31]
 800883e:	e04a      	b.n	80088d6 <UART_SetConfig+0x346>
 8008840:	2302      	movs	r3, #2
 8008842:	77fb      	strb	r3, [r7, #31]
 8008844:	e047      	b.n	80088d6 <UART_SetConfig+0x346>
 8008846:	2304      	movs	r3, #4
 8008848:	77fb      	strb	r3, [r7, #31]
 800884a:	e044      	b.n	80088d6 <UART_SetConfig+0x346>
 800884c:	2308      	movs	r3, #8
 800884e:	77fb      	strb	r3, [r7, #31]
 8008850:	e041      	b.n	80088d6 <UART_SetConfig+0x346>
 8008852:	2310      	movs	r3, #16
 8008854:	77fb      	strb	r3, [r7, #31]
 8008856:	e03e      	b.n	80088d6 <UART_SetConfig+0x346>
 8008858:	efff69f3 	.word	0xefff69f3
 800885c:	40011000 	.word	0x40011000
 8008860:	40023800 	.word	0x40023800
 8008864:	40004400 	.word	0x40004400
 8008868:	40004800 	.word	0x40004800
 800886c:	40004c00 	.word	0x40004c00
 8008870:	40005000 	.word	0x40005000
 8008874:	40011400 	.word	0x40011400
 8008878:	40007800 	.word	0x40007800
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a71      	ldr	r2, [pc, #452]	; (8008a48 <UART_SetConfig+0x4b8>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d125      	bne.n	80088d2 <UART_SetConfig+0x342>
 8008886:	4b71      	ldr	r3, [pc, #452]	; (8008a4c <UART_SetConfig+0x4bc>)
 8008888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800888c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008890:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008894:	d017      	beq.n	80088c6 <UART_SetConfig+0x336>
 8008896:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800889a:	d817      	bhi.n	80088cc <UART_SetConfig+0x33c>
 800889c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088a0:	d00b      	beq.n	80088ba <UART_SetConfig+0x32a>
 80088a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088a6:	d811      	bhi.n	80088cc <UART_SetConfig+0x33c>
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <UART_SetConfig+0x324>
 80088ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b0:	d006      	beq.n	80088c0 <UART_SetConfig+0x330>
 80088b2:	e00b      	b.n	80088cc <UART_SetConfig+0x33c>
 80088b4:	2300      	movs	r3, #0
 80088b6:	77fb      	strb	r3, [r7, #31]
 80088b8:	e00d      	b.n	80088d6 <UART_SetConfig+0x346>
 80088ba:	2302      	movs	r3, #2
 80088bc:	77fb      	strb	r3, [r7, #31]
 80088be:	e00a      	b.n	80088d6 <UART_SetConfig+0x346>
 80088c0:	2304      	movs	r3, #4
 80088c2:	77fb      	strb	r3, [r7, #31]
 80088c4:	e007      	b.n	80088d6 <UART_SetConfig+0x346>
 80088c6:	2308      	movs	r3, #8
 80088c8:	77fb      	strb	r3, [r7, #31]
 80088ca:	e004      	b.n	80088d6 <UART_SetConfig+0x346>
 80088cc:	2310      	movs	r3, #16
 80088ce:	77fb      	strb	r3, [r7, #31]
 80088d0:	e001      	b.n	80088d6 <UART_SetConfig+0x346>
 80088d2:	2310      	movs	r3, #16
 80088d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088de:	d15b      	bne.n	8008998 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80088e0:	7ffb      	ldrb	r3, [r7, #31]
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d827      	bhi.n	8008936 <UART_SetConfig+0x3a6>
 80088e6:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <UART_SetConfig+0x35c>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	08008911 	.word	0x08008911
 80088f0:	08008919 	.word	0x08008919
 80088f4:	08008921 	.word	0x08008921
 80088f8:	08008937 	.word	0x08008937
 80088fc:	08008927 	.word	0x08008927
 8008900:	08008937 	.word	0x08008937
 8008904:	08008937 	.word	0x08008937
 8008908:	08008937 	.word	0x08008937
 800890c:	0800892f 	.word	0x0800892f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008910:	f7fe f8ac 	bl	8006a6c <HAL_RCC_GetPCLK1Freq>
 8008914:	61b8      	str	r0, [r7, #24]
        break;
 8008916:	e013      	b.n	8008940 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008918:	f7fe f8bc 	bl	8006a94 <HAL_RCC_GetPCLK2Freq>
 800891c:	61b8      	str	r0, [r7, #24]
        break;
 800891e:	e00f      	b.n	8008940 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008920:	4b4b      	ldr	r3, [pc, #300]	; (8008a50 <UART_SetConfig+0x4c0>)
 8008922:	61bb      	str	r3, [r7, #24]
        break;
 8008924:	e00c      	b.n	8008940 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008926:	f7fd ffb3 	bl	8006890 <HAL_RCC_GetSysClockFreq>
 800892a:	61b8      	str	r0, [r7, #24]
        break;
 800892c:	e008      	b.n	8008940 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800892e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008932:	61bb      	str	r3, [r7, #24]
        break;
 8008934:	e004      	b.n	8008940 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	77bb      	strb	r3, [r7, #30]
        break;
 800893e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d074      	beq.n	8008a30 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	005a      	lsls	r2, r3, #1
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	085b      	lsrs	r3, r3, #1
 8008950:	441a      	add	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	fbb2 f3f3 	udiv	r3, r2, r3
 800895a:	b29b      	uxth	r3, r3
 800895c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b0f      	cmp	r3, #15
 8008962:	d916      	bls.n	8008992 <UART_SetConfig+0x402>
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800896a:	d212      	bcs.n	8008992 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f023 030f 	bic.w	r3, r3, #15
 8008974:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	085b      	lsrs	r3, r3, #1
 800897a:	b29b      	uxth	r3, r3
 800897c:	f003 0307 	and.w	r3, r3, #7
 8008980:	b29a      	uxth	r2, r3
 8008982:	89fb      	ldrh	r3, [r7, #14]
 8008984:	4313      	orrs	r3, r2
 8008986:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	89fa      	ldrh	r2, [r7, #14]
 800898e:	60da      	str	r2, [r3, #12]
 8008990:	e04e      	b.n	8008a30 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	77bb      	strb	r3, [r7, #30]
 8008996:	e04b      	b.n	8008a30 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008998:	7ffb      	ldrb	r3, [r7, #31]
 800899a:	2b08      	cmp	r3, #8
 800899c:	d827      	bhi.n	80089ee <UART_SetConfig+0x45e>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <UART_SetConfig+0x414>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	080089c9 	.word	0x080089c9
 80089a8:	080089d1 	.word	0x080089d1
 80089ac:	080089d9 	.word	0x080089d9
 80089b0:	080089ef 	.word	0x080089ef
 80089b4:	080089df 	.word	0x080089df
 80089b8:	080089ef 	.word	0x080089ef
 80089bc:	080089ef 	.word	0x080089ef
 80089c0:	080089ef 	.word	0x080089ef
 80089c4:	080089e7 	.word	0x080089e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089c8:	f7fe f850 	bl	8006a6c <HAL_RCC_GetPCLK1Freq>
 80089cc:	61b8      	str	r0, [r7, #24]
        break;
 80089ce:	e013      	b.n	80089f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089d0:	f7fe f860 	bl	8006a94 <HAL_RCC_GetPCLK2Freq>
 80089d4:	61b8      	str	r0, [r7, #24]
        break;
 80089d6:	e00f      	b.n	80089f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089d8:	4b1d      	ldr	r3, [pc, #116]	; (8008a50 <UART_SetConfig+0x4c0>)
 80089da:	61bb      	str	r3, [r7, #24]
        break;
 80089dc:	e00c      	b.n	80089f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089de:	f7fd ff57 	bl	8006890 <HAL_RCC_GetSysClockFreq>
 80089e2:	61b8      	str	r0, [r7, #24]
        break;
 80089e4:	e008      	b.n	80089f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ea:	61bb      	str	r3, [r7, #24]
        break;
 80089ec:	e004      	b.n	80089f8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	77bb      	strb	r3, [r7, #30]
        break;
 80089f6:	bf00      	nop
    }

    if (pclk != 0U)
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d018      	beq.n	8008a30 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	085a      	lsrs	r2, r3, #1
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	441a      	add	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	2b0f      	cmp	r3, #15
 8008a18:	d908      	bls.n	8008a2c <UART_SetConfig+0x49c>
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a20:	d204      	bcs.n	8008a2c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	60da      	str	r2, [r3, #12]
 8008a2a:	e001      	b.n	8008a30 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008a3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	40007c00 	.word	0x40007c00
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	00f42400 	.word	0x00f42400

08008a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00a      	beq.n	8008a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	f003 0308 	and.w	r3, r3, #8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	f003 0310 	and.w	r3, r3, #16
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00a      	beq.n	8008b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	f003 0320 	and.w	r3, r3, #32
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	430a      	orrs	r2, r1
 8008b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01a      	beq.n	8008b6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b52:	d10a      	bne.n	8008b6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00a      	beq.n	8008b8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	605a      	str	r2, [r3, #4]
  }
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ba8:	f7fb fc28 	bl	80043fc <HAL_GetTick>
 8008bac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0308 	and.w	r3, r3, #8
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d10e      	bne.n	8008bda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f817 	bl	8008bfe <UART_WaitOnFlagUntilTimeout>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e00d      	b.n	8008bf6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	603b      	str	r3, [r7, #0]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c0e:	e05e      	b.n	8008cce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c16:	d05a      	beq.n	8008cce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c18:	f7fb fbf0 	bl	80043fc <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d302      	bcc.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x30>
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d11b      	bne.n	8008c66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689a      	ldr	r2, [r3, #8]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 0201 	bic.w	r2, r2, #1
 8008c4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2220      	movs	r2, #32
 8008c52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2220      	movs	r2, #32
 8008c58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e043      	b.n	8008cee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d02c      	beq.n	8008cce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c82:	d124      	bne.n	8008cce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689a      	ldr	r2, [r3, #8]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 0201 	bic.w	r2, r2, #1
 8008cac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008cca:	2303      	movs	r3, #3
 8008ccc:	e00f      	b.n	8008cee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69da      	ldr	r2, [r3, #28]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	bf0c      	ite	eq
 8008cde:	2301      	moveq	r3, #1
 8008ce0:	2300      	movne	r3, #0
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d091      	beq.n	8008c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	4613      	mov	r3, r2
 8008d04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	88fa      	ldrh	r2, [r7, #6]
 8008d10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2222      	movs	r2, #34	; 0x22
 8008d20:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d02b      	beq.n	8008d82 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	4a25      	ldr	r2, [pc, #148]	; (8008dc4 <UART_Start_Receive_DMA+0xcc>)
 8008d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	4a24      	ldr	r2, [pc, #144]	; (8008dc8 <UART_Start_Receive_DMA+0xd0>)
 8008d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3e:	4a23      	ldr	r2, [pc, #140]	; (8008dcc <UART_Start_Receive_DMA+0xd4>)
 8008d40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d46:	2200      	movs	r2, #0
 8008d48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3324      	adds	r3, #36	; 0x24
 8008d54:	4619      	mov	r1, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	88fb      	ldrh	r3, [r7, #6]
 8008d5e:	f7fb fe27 	bl	80049b0 <HAL_DMA_Start_IT>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2210      	movs	r2, #16
 8008d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e01c      	b.n	8008dbc <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d98:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f042 0201 	orr.w	r2, r2, #1
 8008da8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008db8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	08008e59 	.word	0x08008e59
 8008dc8:	08008eed 	.word	0x08008eed
 8008dcc:	08008f25 	.word	0x08008f25

08008dd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008de6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e10:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0201 	bic.w	r2, r2, #1
 8008e20:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d107      	bne.n	8008e3a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0210 	bic.w	r2, r2, #16
 8008e38:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6e:	d02a      	beq.n	8008ec6 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e86:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0201 	bic.w	r2, r2, #1
 8008e96:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689a      	ldr	r2, [r3, #8]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ea6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d107      	bne.n	8008ec6 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 0210 	bic.w	r2, r2, #16
 8008ec4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d107      	bne.n	8008ede <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f7ff fb4e 	bl	8008578 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008edc:	e002      	b.n	8008ee4 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7ff fb2c 	bl	800853c <HAL_UART_RxCpltCallback>
}
 8008ee4:	bf00      	nop
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d109      	bne.n	8008f16 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f08:	085b      	lsrs	r3, r3, #1
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7ff fb32 	bl	8008578 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f14:	e002      	b.n	8008f1c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff fb1a 	bl	8008550 <HAL_UART_RxHalfCpltCallback>
}
 8008f1c:	bf00      	nop
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f30:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f36:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f48:	2b80      	cmp	r3, #128	; 0x80
 8008f4a:	d109      	bne.n	8008f60 <UART_DMAError+0x3c>
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	2b21      	cmp	r3, #33	; 0x21
 8008f50:	d106      	bne.n	8008f60 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008f5a:	6978      	ldr	r0, [r7, #20]
 8008f5c:	f7ff ff38 	bl	8008dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6a:	2b40      	cmp	r3, #64	; 0x40
 8008f6c:	d109      	bne.n	8008f82 <UART_DMAError+0x5e>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b22      	cmp	r3, #34	; 0x22
 8008f72:	d106      	bne.n	8008f82 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008f7c:	6978      	ldr	r0, [r7, #20]
 8008f7e:	f7ff ff3c 	bl	8008dfa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f88:	f043 0210 	orr.w	r2, r3, #16
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f92:	6978      	ldr	r0, [r7, #20]
 8008f94:	f7ff fae6 	bl	8008564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f98:	bf00      	nop
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <MX_MEMS_Init>:
static void MEMS_INT1_Force_Low(void);
static void MEMS_INT1_Init(void);
#endif

void MX_MEMS_Init(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DynamicInclinometer_Init();
 8008fa4:	f000 f820 	bl	8008fe8 <MX_DynamicInclinometer_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8008fa8:	bf00      	nop
 8008faa:	bd80      	pop	{r7, pc}

08008fac <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DynamicInclinometer_Process();
 8008fb0:	f000 f84c 	bl	800904c <MX_DynamicInclinometer_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8008fb4:	bf00      	nop
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	4b06      	ldr	r3, [pc, #24]	; (8008fe0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d102      	bne.n	8008fd2 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8008fcc:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008fce:	2201      	movs	r2, #1
 8008fd0:	701a      	strb	r2, [r3, #0]
  }
}
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	20002098 	.word	0x20002098
 8008fe4:	20001b48 	.word	0x20001b48

08008fe8 <MX_DynamicInclinometer_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DynamicInclinometer_Init(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* Force MEMS INT1 pin of the sensor low during startup in order to disable I3C and enable I2C. This function needs
   * to be called only if user wants to disable I3C / enable I2C and didn't put the pull-down resistor to MEMS INT1 pin
   * on his HW setup. This is also the case of usage X-NUCLEO-IKS01A2 or X-NUCLEO-IKS01A3 expansion board together with
   * sensor in DIL24 adapter board where the LDO with internal pull-up is used.
   */
  MEMS_INT1_Force_Low();
 8008fec:	f000 fc62 	bl	80098b4 <MEMS_INT1_Force_Low>
#endif

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f7fb f82d 	bl	8004050 <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	f7fb f8a6 	bl	8004148 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8008ffc:	f7f8 fc1a 	bl	8001834 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 8009000:	2064      	movs	r0, #100	; 0x64
 8009002:	f000 fc23 	bl	800984c <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8009006:	f000 f88b 	bl	8009120 <Init_Sensors>

#ifdef BSP_IP_MEMS_INT1_PIN_NUM
  /* Initialize MEMS INT1 pin back to it's default state after I3C disable / I2C enable */
  MEMS_INT1_Init();
 800900a:	f000 fc73 	bl	80098f4 <MEMS_INT1_Init>
#endif

  /* DynamicInclinometer API initialization function */
  MotionDI_manager_init((int)ALGO_FREQ);
 800900e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009040 <MX_DynamicInclinometer_Init+0x58>
 8009012:	f001 fff5 	bl	800b000 <MotionDI_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionDI_manager_get_version(LibVersion, &LibVersionLen);
 8009016:	490b      	ldr	r1, [pc, #44]	; (8009044 <MX_DynamicInclinometer_Init+0x5c>)
 8009018:	480b      	ldr	r0, [pc, #44]	; (8009048 <MX_DynamicInclinometer_Init+0x60>)
 800901a:	f002 f8f5 	bl	800b208 <MotionDI_manager_get_version>

  DWT_Init();
 800901e:	f000 fc85 	bl	800992c <DWT_Init>

  BSP_LED_On(LED2);
 8009022:	2000      	movs	r0, #0
 8009024:	f7fb f826 	bl	8004074 <BSP_LED_On>
  HAL_Delay(500);
 8009028:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800902c:	f7fb f9f2 	bl	8004414 <HAL_Delay>
  BSP_LED_Off(LED2);
 8009030:	2000      	movs	r0, #0
 8009032:	f7fb f835 	bl	80040a0 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 8009036:	f000 fda9 	bl	8009b8c <UART_StartReceiveMsg>
}
 800903a:	bf00      	nop
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	42c80000 	.word	0x42c80000
 8009044:	200023b0 	.word	0x200023b0
 8009048:	2000238c 	.word	0x2000238c

0800904c <MX_DynamicInclinometer_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_DynamicInclinometer_Process(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8009050:	482d      	ldr	r0, [pc, #180]	; (8009108 <MX_DynamicInclinometer_Process+0xbc>)
 8009052:	f000 fcc9 	bl	80099e8 <UART_ReceivedMSG>
 8009056:	4603      	mov	r3, r0
 8009058:	2b01      	cmp	r3, #1
 800905a:	d106      	bne.n	800906a <MX_DynamicInclinometer_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 800905c:	4b2a      	ldr	r3, [pc, #168]	; (8009108 <MX_DynamicInclinometer_Process+0xbc>)
 800905e:	791b      	ldrb	r3, [r3, #4]
 8009060:	2b32      	cmp	r3, #50	; 0x32
 8009062:	d102      	bne.n	800906a <MX_DynamicInclinometer_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 8009064:	4828      	ldr	r0, [pc, #160]	; (8009108 <MX_DynamicInclinometer_Process+0xbc>)
 8009066:	f001 fb77 	bl	800a758 <HandleMSG>
    }
  }

  if (SensorReadRequest == 1U)
 800906a:	4b28      	ldr	r3, [pc, #160]	; (800910c <MX_DynamicInclinometer_Process+0xc0>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b01      	cmp	r3, #1
 8009072:	d147      	bne.n	8009104 <MX_DynamicInclinometer_Process+0xb8>
  {
    SensorReadRequest = 0;
 8009074:	4b25      	ldr	r3, [pc, #148]	; (800910c <MX_DynamicInclinometer_Process+0xc0>)
 8009076:	2200      	movs	r2, #0
 8009078:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800907a:	4825      	ldr	r0, [pc, #148]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 800907c:	f000 f86a 	bl	8009154 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 8009080:	4823      	ldr	r0, [pc, #140]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 8009082:	f000 fa45 	bl	8009510 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 8009086:	4822      	ldr	r0, [pc, #136]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 8009088:	f000 fa9c 	bl	80095c4 <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 800908c:	4820      	ldr	r0, [pc, #128]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 800908e:	f000 faf3 	bl	8009678 <Magneto_Sensor_Handler>
    Humidity_Sensor_Handler(&msg_dat);
 8009092:	481f      	ldr	r0, [pc, #124]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 8009094:	f000 fbaa 	bl	80097ec <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat);
 8009098:	481d      	ldr	r0, [pc, #116]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 800909a:	f000 fb77 	bl	800978c <Temperature_Sensor_Handler>
    Pressure_Sensor_Handler(&msg_dat);
 800909e:	481c      	ldr	r0, [pc, #112]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 80090a0:	f000 fb44 	bl	800972c <Pressure_Sensor_Handler>

    /* DynamicInclinometer specific part */
    DI_Data_Handler(&msg_dat, &msg_cmd);
 80090a4:	4918      	ldr	r1, [pc, #96]	; (8009108 <MX_DynamicInclinometer_Process+0xbc>)
 80090a6:	481a      	ldr	r0, [pc, #104]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 80090a8:	f000 f8c8 	bl	800923c <DI_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 80090ac:	4818      	ldr	r0, [pc, #96]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 80090ae:	f001 fb39 	bl	800a724 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 80090b2:	4b17      	ldr	r3, [pc, #92]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 80090b4:	2295      	movs	r2, #149	; 0x95
 80090b6:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 80090b8:	4b16      	ldr	r3, [pc, #88]	; (8009114 <MX_DynamicInclinometer_Process+0xc8>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d11e      	bne.n	80090fe <MX_DynamicInclinometer_Process+0xb2>
    {
      OfflineDataCount--;
 80090c0:	4b15      	ldr	r3, [pc, #84]	; (8009118 <MX_DynamicInclinometer_Process+0xcc>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	4a14      	ldr	r2, [pc, #80]	; (8009118 <MX_DynamicInclinometer_Process+0xcc>)
 80090c8:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 80090ca:	4b13      	ldr	r3, [pc, #76]	; (8009118 <MX_DynamicInclinometer_Process+0xcc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	da02      	bge.n	80090d8 <MX_DynamicInclinometer_Process+0x8c>
      {
        OfflineDataCount = 0;
 80090d2:	4b11      	ldr	r3, [pc, #68]	; (8009118 <MX_DynamicInclinometer_Process+0xcc>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 80090d8:	4b10      	ldr	r3, [pc, #64]	; (800911c <MX_DynamicInclinometer_Process+0xd0>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3301      	adds	r3, #1
 80090de:	4a0f      	ldr	r2, [pc, #60]	; (800911c <MX_DynamicInclinometer_Process+0xd0>)
 80090e0:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 80090e2:	4b0e      	ldr	r3, [pc, #56]	; (800911c <MX_DynamicInclinometer_Process+0xd0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b07      	cmp	r3, #7
 80090e8:	dd02      	ble.n	80090f0 <MX_DynamicInclinometer_Process+0xa4>
      {
        OfflineDataReadIndex = 0;
 80090ea:	4b0c      	ldr	r3, [pc, #48]	; (800911c <MX_DynamicInclinometer_Process+0xd0>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 80090f0:	4b09      	ldr	r3, [pc, #36]	; (8009118 <MX_DynamicInclinometer_Process+0xcc>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dd02      	ble.n	80090fe <MX_DynamicInclinometer_Process+0xb2>
      {
        SensorReadRequest = 1;
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <MX_DynamicInclinometer_Process+0xc0>)
 80090fa:	2201      	movs	r2, #1
 80090fc:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 80090fe:	4804      	ldr	r0, [pc, #16]	; (8009110 <MX_DynamicInclinometer_Process+0xc4>)
 8009100:	f000 fd28 	bl	8009b54 <UART_SendMsg>
  }
}
 8009104:	bf00      	nop
 8009106:	bd80      	pop	{r7, pc}
 8009108:	20001b98 	.word	0x20001b98
 800910c:	20001b48 	.word	0x20001b48
 8009110:	20001c9c 	.word	0x20001c9c
 8009114:	20001b49 	.word	0x20001b49
 8009118:	20001b54 	.word	0x20001b54
 800911c:	20001b4c 	.word	0x20001b4c

08009120 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 8009124:	f000 ff3b 	bl	8009f9e <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 8009128:	f000 ff41 	bl	8009fae <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800912c:	f000 ff47 	bl	8009fbe <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 8009130:	f000 ff4c 	bl	8009fcc <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 8009134:	f000 ff51 	bl	8009fda <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 8009138:	f000 ff56 	bl	8009fe8 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 800913c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8009150 <Init_Sensors+0x30>
 8009140:	f000 fffc 	bl	800a13c <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8009144:	2002      	movs	r0, #2
 8009146:	f001 f808 	bl	800a15a <BSP_SENSOR_ACC_SetFullScale>
}
 800914a:	bf00      	nop
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	42c80000 	.word	0x42c80000

08009154 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b08e      	sub	sp, #56	; 0x38
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 8009162:	4b32      	ldr	r3, [pc, #200]	; (800922c <RTC_Handler+0xd8>)
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	633b      	str	r3, [r7, #48]	; 0x30

  if (UseOfflineData == 1)
 8009168:	4b31      	ldr	r3, [pc, #196]	; (8009230 <RTC_Handler+0xdc>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d12b      	bne.n	80091c8 <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 8009170:	4b30      	ldr	r3, [pc, #192]	; (8009234 <RTC_Handler+0xe0>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a30      	ldr	r2, [pc, #192]	; (8009238 <RTC_Handler+0xe4>)
 8009176:	2134      	movs	r1, #52	; 0x34
 8009178:	fb01 f303 	mul.w	r3, r1, r3
 800917c:	4413      	add	r3, r2
 800917e:	781a      	ldrb	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 8009184:	4b2b      	ldr	r3, [pc, #172]	; (8009234 <RTC_Handler+0xe0>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a2b      	ldr	r2, [pc, #172]	; (8009238 <RTC_Handler+0xe4>)
 800918a:	2134      	movs	r1, #52	; 0x34
 800918c:	fb01 f303 	mul.w	r3, r1, r3
 8009190:	4413      	add	r3, r2
 8009192:	3301      	adds	r3, #1
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 800919a:	4b26      	ldr	r3, [pc, #152]	; (8009234 <RTC_Handler+0xe0>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a26      	ldr	r2, [pc, #152]	; (8009238 <RTC_Handler+0xe4>)
 80091a0:	2134      	movs	r1, #52	; 0x34
 80091a2:	fb01 f303 	mul.w	r3, r1, r3
 80091a6:	4413      	add	r3, r2
 80091a8:	3302      	adds	r3, #2
 80091aa:	781a      	ldrb	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 80091b0:	4b20      	ldr	r3, [pc, #128]	; (8009234 <RTC_Handler+0xe0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a20      	ldr	r2, [pc, #128]	; (8009238 <RTC_Handler+0xe4>)
 80091b6:	2134      	movs	r1, #52	; 0x34
 80091b8:	fb01 f303 	mul.w	r3, r1, r3
 80091bc:	4413      	add	r3, r2
 80091be:	3303      	adds	r3, #3
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 80091c6:	e02d      	b.n	8009224 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 80091c8:	f107 030c 	add.w	r3, r7, #12
 80091cc:	2200      	movs	r2, #0
 80091ce:	4619      	mov	r1, r3
 80091d0:	4816      	ldr	r0, [pc, #88]	; (800922c <RTC_Handler+0xd8>)
 80091d2:	f7fe f9b3 	bl	800753c <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 80091d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091da:	2200      	movs	r2, #0
 80091dc:	4619      	mov	r1, r3
 80091de:	4813      	ldr	r0, [pc, #76]	; (800922c <RTC_Handler+0xd8>)
 80091e0:	f7fe fab2 	bl	8007748 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2264      	movs	r2, #100	; 0x64
 80091ec:	fb02 f303 	mul.w	r3, r2, r3
 80091f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    ans_int32 /= RtcSynchPrediv + 1;
 80091f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	3301      	adds	r3, #1
 80091f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	b2db      	uxtb	r3, r3
 8009202:	62bb      	str	r3, [r7, #40]	; 0x28
    sub_sec = (uint8_t)ans_uint32;
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800920a:	7b3a      	ldrb	r2, [r7, #12]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 8009210:	7b7a      	ldrb	r2, [r7, #13]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 8009216:	7bba      	ldrb	r2, [r7, #14]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009222:	729a      	strb	r2, [r3, #10]
}
 8009224:	bf00      	nop
 8009226:	3738      	adds	r7, #56	; 0x38
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	200020e4 	.word	0x200020e4
 8009230:	20001b49 	.word	0x20001b49
 8009234:	20001b4c 	.word	0x20001b4c
 8009238:	200021ec 	.word	0x200021ec

0800923c <DI_Data_Handler>:
 * @param  Msg the Dynamic Inclinometer data part of the stream
 * @param  Cmd the Dynamic Inclinometer command to GUI
 * @retval None
 */
static void DI_Data_Handler(TMsg *Msg, TMsg *Cmd)
{
 800923c:	b5b0      	push	{r4, r5, r7, lr}
 800923e:	b0b4      	sub	sp, #208	; 0xd0
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t         elapsed_time_us = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  MDI_cal_type_t   acc_cal_mode;
  MDI_cal_type_t   gyro_cal_mode;
  MDI_cal_output_t acc_cal;
  MDI_cal_output_t gyro_cal;

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800924c:	4ba8      	ldr	r3, [pc, #672]	; (80094f0 <DI_Data_Handler+0x2b4>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0310 	and.w	r3, r3, #16
 8009254:	2b10      	cmp	r3, #16
 8009256:	f040 8147 	bne.w	80094e8 <DI_Data_Handler+0x2ac>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800925a:	4ba5      	ldr	r3, [pc, #660]	; (80094f0 <DI_Data_Handler+0x2b4>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0320 	and.w	r3, r3, #32
 8009262:	2b20      	cmp	r3, #32
 8009264:	f040 8140 	bne.w	80094e8 <DI_Data_Handler+0x2ac>
    {
      /* Convert acceleration from [mg] to [g] */
      data_in.Acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8009268:	4ba2      	ldr	r3, [pc, #648]	; (80094f4 <DI_Data_Handler+0x2b8>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009274:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80094f8 <DI_Data_Handler+0x2bc>
 8009278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800927c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
      data_in.Acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8009280:	4b9c      	ldr	r3, [pc, #624]	; (80094f4 <DI_Data_Handler+0x2b8>)
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	ee07 3a90 	vmov	s15, r3
 8009288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800928c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80094f8 <DI_Data_Handler+0x2bc>
 8009290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009294:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
      data_in.Acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8009298:	4b96      	ldr	r3, [pc, #600]	; (80094f4 <DI_Data_Handler+0x2b8>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092a4:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80094f8 <DI_Data_Handler+0x2bc>
 80092a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092ac:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

      /* Convert angular velocity from [mdps] to [dps] */
      data_in.Gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 80092b0:	4b92      	ldr	r3, [pc, #584]	; (80094fc <DI_Data_Handler+0x2c0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	ee07 3a90 	vmov	s15, r3
 80092b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092bc:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80094f8 <DI_Data_Handler+0x2bc>
 80092c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092c4:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
      data_in.Gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 80092c8:	4b8c      	ldr	r3, [pc, #560]	; (80094fc <DI_Data_Handler+0x2c0>)
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	ee07 3a90 	vmov	s15, r3
 80092d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092d4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80094f8 <DI_Data_Handler+0x2bc>
 80092d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092dc:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
      data_in.Gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 80092e0:	4b86      	ldr	r3, [pc, #536]	; (80094fc <DI_Data_Handler+0x2c0>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	ee07 3a90 	vmov	s15, r3
 80092e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092ec:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80094f8 <DI_Data_Handler+0x2bc>
 80092f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092f4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

      data_in.Timestamp = Timestamp;
 80092f8:	4b81      	ldr	r3, [pc, #516]	; (8009500 <DI_Data_Handler+0x2c4>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
      Timestamp += ALGO_PERIOD;
 8009302:	4b7f      	ldr	r3, [pc, #508]	; (8009500 <DI_Data_Handler+0x2c4>)
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f242 7010 	movw	r0, #10000	; 0x2710
 800930c:	f04f 0100 	mov.w	r1, #0
 8009310:	1814      	adds	r4, r2, r0
 8009312:	eb43 0501 	adc.w	r5, r3, r1
 8009316:	4b7a      	ldr	r3, [pc, #488]	; (8009500 <DI_Data_Handler+0x2c4>)
 8009318:	e9c3 4500 	strd	r4, r5, [r3]

      /* Run Dynamic Inclinometer algorithm */
      BSP_LED_On(LED2);
 800931c:	2000      	movs	r0, #0
 800931e:	f7fa fea9 	bl	8004074 <BSP_LED_On>
      DWT_Start();
 8009322:	f000 fb27 	bl	8009974 <DWT_Start>
      MotionDI_manager_run(&data_in, &data_out);
 8009326:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800932a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800932e:	4611      	mov	r1, r2
 8009330:	4618      	mov	r0, r3
 8009332:	f001 ff2b 	bl	800b18c <MotionDI_manager_run>
      elapsed_time_us = DWT_Stop();
 8009336:	f000 fb2f 	bl	8009998 <DWT_Stop>
 800933a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
      BSP_LED_Off(LED2);
 800933e:	2000      	movs	r0, #0
 8009340:	f7fa feae 	bl	80040a0 <BSP_LED_Off>

      /* Check calibration mode */
      MotionDI_get_acc_calibration_mode(&acc_cal_mode);
 8009344:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8009348:	4618      	mov	r0, r3
 800934a:	f001 fe9f 	bl	800b08c <MotionDI_get_acc_calibration_mode>
      MotionDI_get_gyro_calibration_mode(&gyro_cal_mode);
 800934e:	f107 0372 	add.w	r3, r7, #114	; 0x72
 8009352:	4618      	mov	r0, r3
 8009354:	f001 feda 	bl	800b10c <MotionDI_get_gyro_calibration_mode>

      if (acc_cal_mode != AccCalMode)
 8009358:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800935c:	4b69      	ldr	r3, [pc, #420]	; (8009504 <DI_Data_Handler+0x2c8>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d016      	beq.n	8009392 <DI_Data_Handler+0x156>
      {
        AccCalMode = acc_cal_mode;
 8009364:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8009368:	4b66      	ldr	r3, [pc, #408]	; (8009504 <DI_Data_Handler+0x2c8>)
 800936a:	701a      	strb	r2, [r3, #0]

        INIT_STREAMING_HEADER(Cmd);
 800936c:	6838      	ldr	r0, [r7, #0]
 800936e:	f001 f9d9 	bl	800a724 <INIT_STREAMING_HEADER>
        Cmd->Data[2] = CMD_Calibration_Mode + CMD_Reply_Add;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	22d3      	movs	r2, #211	; 0xd3
 8009376:	719a      	strb	r2, [r3, #6]
        Cmd->Data[3] = (uint8_t)ACCELEROMETER_SENSOR;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2210      	movs	r2, #16
 800937c:	71da      	strb	r2, [r3, #7]
        Cmd->Data[4] = (uint8_t)AccCalMode;
 800937e:	4b61      	ldr	r3, [pc, #388]	; (8009504 <DI_Data_Handler+0x2c8>)
 8009380:	781a      	ldrb	r2, [r3, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	721a      	strb	r2, [r3, #8]
        Cmd->Len = 5;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2205      	movs	r2, #5
 800938a:	601a      	str	r2, [r3, #0]
        UART_SendMsg(Cmd);
 800938c:	6838      	ldr	r0, [r7, #0]
 800938e:	f000 fbe1 	bl	8009b54 <UART_SendMsg>
      }

      if (gyro_cal_mode != GyrCalMode)
 8009392:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8009396:	4b5c      	ldr	r3, [pc, #368]	; (8009508 <DI_Data_Handler+0x2cc>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d016      	beq.n	80093cc <DI_Data_Handler+0x190>
      {
        GyrCalMode = gyro_cal_mode;
 800939e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80093a2:	4b59      	ldr	r3, [pc, #356]	; (8009508 <DI_Data_Handler+0x2cc>)
 80093a4:	701a      	strb	r2, [r3, #0]

        INIT_STREAMING_HEADER(Cmd);
 80093a6:	6838      	ldr	r0, [r7, #0]
 80093a8:	f001 f9bc 	bl	800a724 <INIT_STREAMING_HEADER>
        Cmd->Data[2] = CMD_Calibration_Mode + CMD_Reply_Add;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	22d3      	movs	r2, #211	; 0xd3
 80093b0:	719a      	strb	r2, [r3, #6]
        Cmd->Data[3] = (uint8_t)GYROSCOPE_SENSOR;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2220      	movs	r2, #32
 80093b6:	71da      	strb	r2, [r3, #7]
        Cmd->Data[4] = (uint8_t)GyrCalMode;
 80093b8:	4b53      	ldr	r3, [pc, #332]	; (8009508 <DI_Data_Handler+0x2cc>)
 80093ba:	781a      	ldrb	r2, [r3, #0]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	721a      	strb	r2, [r3, #8]
        Cmd->Len = 5;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2205      	movs	r2, #5
 80093c4:	601a      	str	r2, [r3, #0]
        UART_SendMsg(Cmd);
 80093c6:	6838      	ldr	r0, [r7, #0]
 80093c8:	f000 fbc4 	bl	8009b54 <UART_SendMsg>
      }

      /* Get calibration parameters */
      MotionDI_get_acc_calibration(&acc_cal);
 80093cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 fe89 	bl	800b0e8 <MotionDI_get_acc_calibration>
      MotionDI_get_gyro_calibration(&gyro_cal);
 80093d6:	f107 0308 	add.w	r3, r7, #8
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 fec4 	bl	800b168 <MotionDI_get_gyro_calibration>

      /* Convert accelerometer calibration parameters from [g] to [mg] */
      acc_cal.Bias[0] *= FROM_G_TO_MG;
 80093e0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80093e4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800950c <DI_Data_Handler+0x2d0>
 80093e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093ec:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
      acc_cal.Bias[1] *= FROM_G_TO_MG;
 80093f0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80093f4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800950c <DI_Data_Handler+0x2d0>
 80093f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      acc_cal.Bias[2] *= FROM_G_TO_MG;
 8009400:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009404:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800950c <DI_Data_Handler+0x2d0>
 8009408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800940c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

      /* Convert gyroscope calibration parameters from [dps] to [mdps] */
      gyro_cal.Bias[0] *= FROM_DPS_TO_MDPS;
 8009410:	edd7 7a02 	vldr	s15, [r7, #8]
 8009414:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800950c <DI_Data_Handler+0x2d0>
 8009418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800941c:	edc7 7a02 	vstr	s15, [r7, #8]
      gyro_cal.Bias[1] *= FROM_DPS_TO_MDPS;
 8009420:	edd7 7a03 	vldr	s15, [r7, #12]
 8009424:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800950c <DI_Data_Handler+0x2d0>
 8009428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800942c:	edc7 7a03 	vstr	s15, [r7, #12]
      gyro_cal.Bias[2] *= FROM_DPS_TO_MDPS;
 8009430:	edd7 7a04 	vldr	s15, [r7, #16]
 8009434:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800950c <DI_Data_Handler+0x2d0>
 8009438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800943c:	edc7 7a04 	vstr	s15, [r7, #16]

      (void)memcpy(&Msg->Data[55], (void *)data_out.quaternion, 4U * sizeof(float));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8009446:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800944a:	330c      	adds	r3, #12
 800944c:	2210      	movs	r2, #16
 800944e:	4619      	mov	r1, r3
 8009450:	f00c fce2 	bl	8015e18 <memcpy>
      (void)memcpy(&Msg->Data[71], (void *)data_out.rotation, 3U * sizeof(float));
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	334b      	adds	r3, #75	; 0x4b
 8009458:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800945c:	220c      	movs	r2, #12
 800945e:	4618      	mov	r0, r3
 8009460:	f00c fcda 	bl	8015e18 <memcpy>
      (void)memcpy(&Msg->Data[83], (void *)data_out.gravity, 3U * sizeof(float));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f103 0057 	add.w	r0, r3, #87	; 0x57
 800946a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800946e:	331c      	adds	r3, #28
 8009470:	220c      	movs	r2, #12
 8009472:	4619      	mov	r1, r3
 8009474:	f00c fcd0 	bl	8015e18 <memcpy>
      (void)memcpy(&Msg->Data[95], (void *)data_out.linear_acceleration, 3U * sizeof(float));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f103 0063 	add.w	r0, r3, #99	; 0x63
 800947e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009482:	3328      	adds	r3, #40	; 0x28
 8009484:	220c      	movs	r2, #12
 8009486:	4619      	mov	r1, r3
 8009488:	f00c fcc6 	bl	8015e18 <memcpy>

      (void)memcpy(&Msg->Data[107], (void *)acc_cal.Bias, 3U * sizeof(float));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	336f      	adds	r3, #111	; 0x6f
 8009490:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009494:	220c      	movs	r2, #12
 8009496:	4618      	mov	r0, r3
 8009498:	f00c fcbe 	bl	8015e18 <memcpy>
      (void)memcpy(&Msg->Data[119], (void *) & (acc_cal.SF_Matrix[0][0]), sizeof(float));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	337b      	adds	r3, #123	; 0x7b
 80094a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094a2:	601a      	str	r2, [r3, #0]
      (void)memcpy(&Msg->Data[123], (void *) & (acc_cal.SF_Matrix[1][1]), sizeof(float));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	337f      	adds	r3, #127	; 0x7f
 80094a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094aa:	601a      	str	r2, [r3, #0]
      (void)memcpy(&Msg->Data[127], (void *) & (acc_cal.SF_Matrix[2][2]), sizeof(float));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	3383      	adds	r3, #131	; 0x83
 80094b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094b2:	601a      	str	r2, [r3, #0]
      Msg->Data[131] = (uint8_t)acc_cal.CalQuality;
 80094b4:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

      (void)memcpy(&Msg->Data[132], (void *)gyro_cal.Bias, 3U * sizeof(float));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	3388      	adds	r3, #136	; 0x88
 80094c2:	f107 0108 	add.w	r1, r7, #8
 80094c6:	220c      	movs	r2, #12
 80094c8:	4618      	mov	r0, r3
 80094ca:	f00c fca5 	bl	8015e18 <memcpy>
      Msg->Data[144] = (uint8_t)gyro_cal.CalQuality;
 80094ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

      Serialize_s32(&Msg->Data[145], (int32_t)elapsed_time_us, 4);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3395      	adds	r3, #149	; 0x95
 80094dc:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80094e0:	2204      	movs	r2, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 ffb8 	bl	800b458 <Serialize_s32>
    }
  }
}
 80094e8:	bf00      	nop
 80094ea:	37d0      	adds	r7, #208	; 0xd0
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bdb0      	pop	{r4, r5, r7, pc}
 80094f0:	20001b44 	.word	0x20001b44
 80094f4:	20001b5c 	.word	0x20001b5c
 80094f8:	3a83126f 	.word	0x3a83126f
 80094fc:	20001b68 	.word	0x20001b68
 8009500:	20001b90 	.word	0x20001b90
 8009504:	20001b58 	.word	0x20001b58
 8009508:	20001b59 	.word	0x20001b59
 800950c:	447a0000 	.word	0x447a0000

08009510 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8009518:	4b25      	ldr	r3, [pc, #148]	; (80095b0 <Accelero_Sensor_Handler+0xa0>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b10      	cmp	r3, #16
 8009522:	d140      	bne.n	80095a6 <Accelero_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 8009524:	4b23      	ldr	r3, [pc, #140]	; (80095b4 <Accelero_Sensor_Handler+0xa4>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d121      	bne.n	8009570 <Accelero_Sensor_Handler+0x60>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800952c:	4b22      	ldr	r3, [pc, #136]	; (80095b8 <Accelero_Sensor_Handler+0xa8>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a22      	ldr	r2, [pc, #136]	; (80095bc <Accelero_Sensor_Handler+0xac>)
 8009532:	2134      	movs	r1, #52	; 0x34
 8009534:	fb01 f303 	mul.w	r3, r1, r3
 8009538:	4413      	add	r3, r2
 800953a:	3310      	adds	r3, #16
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a20      	ldr	r2, [pc, #128]	; (80095c0 <Accelero_Sensor_Handler+0xb0>)
 8009540:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 8009542:	4b1d      	ldr	r3, [pc, #116]	; (80095b8 <Accelero_Sensor_Handler+0xa8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a1d      	ldr	r2, [pc, #116]	; (80095bc <Accelero_Sensor_Handler+0xac>)
 8009548:	2134      	movs	r1, #52	; 0x34
 800954a:	fb01 f303 	mul.w	r3, r1, r3
 800954e:	4413      	add	r3, r2
 8009550:	3314      	adds	r3, #20
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a1a      	ldr	r2, [pc, #104]	; (80095c0 <Accelero_Sensor_Handler+0xb0>)
 8009556:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 8009558:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <Accelero_Sensor_Handler+0xa8>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a17      	ldr	r2, [pc, #92]	; (80095bc <Accelero_Sensor_Handler+0xac>)
 800955e:	2134      	movs	r1, #52	; 0x34
 8009560:	fb01 f303 	mul.w	r3, r1, r3
 8009564:	4413      	add	r3, r2
 8009566:	3318      	adds	r3, #24
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a15      	ldr	r2, [pc, #84]	; (80095c0 <Accelero_Sensor_Handler+0xb0>)
 800956c:	6093      	str	r3, [r2, #8]
 800956e:	e002      	b.n	8009576 <Accelero_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 8009570:	4813      	ldr	r0, [pc, #76]	; (80095c0 <Accelero_Sensor_Handler+0xb0>)
 8009572:	f000 fd98 	bl	800a0a6 <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3317      	adds	r3, #23
 800957a:	4a11      	ldr	r2, [pc, #68]	; (80095c0 <Accelero_Sensor_Handler+0xb0>)
 800957c:	6811      	ldr	r1, [r2, #0]
 800957e:	2204      	movs	r2, #4
 8009580:	4618      	mov	r0, r3
 8009582:	f001 ff69 	bl	800b458 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	331b      	adds	r3, #27
 800958a:	4a0d      	ldr	r2, [pc, #52]	; (80095c0 <Accelero_Sensor_Handler+0xb0>)
 800958c:	6851      	ldr	r1, [r2, #4]
 800958e:	2204      	movs	r2, #4
 8009590:	4618      	mov	r0, r3
 8009592:	f001 ff61 	bl	800b458 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	331f      	adds	r3, #31
 800959a:	4a09      	ldr	r2, [pc, #36]	; (80095c0 <Accelero_Sensor_Handler+0xb0>)
 800959c:	6891      	ldr	r1, [r2, #8]
 800959e:	2204      	movs	r2, #4
 80095a0:	4618      	mov	r0, r3
 80095a2:	f001 ff59 	bl	800b458 <Serialize_s32>
  }
}
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20001b44 	.word	0x20001b44
 80095b4:	20001b49 	.word	0x20001b49
 80095b8:	20001b4c 	.word	0x20001b4c
 80095bc:	200021ec 	.word	0x200021ec
 80095c0:	20001b5c 	.word	0x20001b5c

080095c4 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 80095cc:	4b25      	ldr	r3, [pc, #148]	; (8009664 <Gyro_Sensor_Handler+0xa0>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 0320 	and.w	r3, r3, #32
 80095d4:	2b20      	cmp	r3, #32
 80095d6:	d140      	bne.n	800965a <Gyro_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 80095d8:	4b23      	ldr	r3, [pc, #140]	; (8009668 <Gyro_Sensor_Handler+0xa4>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d121      	bne.n	8009624 <Gyro_Sensor_Handler+0x60>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 80095e0:	4b22      	ldr	r3, [pc, #136]	; (800966c <Gyro_Sensor_Handler+0xa8>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a22      	ldr	r2, [pc, #136]	; (8009670 <Gyro_Sensor_Handler+0xac>)
 80095e6:	2134      	movs	r1, #52	; 0x34
 80095e8:	fb01 f303 	mul.w	r3, r1, r3
 80095ec:	4413      	add	r3, r2
 80095ee:	331c      	adds	r3, #28
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a20      	ldr	r2, [pc, #128]	; (8009674 <Gyro_Sensor_Handler+0xb0>)
 80095f4:	6013      	str	r3, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 80095f6:	4b1d      	ldr	r3, [pc, #116]	; (800966c <Gyro_Sensor_Handler+0xa8>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a1d      	ldr	r2, [pc, #116]	; (8009670 <Gyro_Sensor_Handler+0xac>)
 80095fc:	2134      	movs	r1, #52	; 0x34
 80095fe:	fb01 f303 	mul.w	r3, r1, r3
 8009602:	4413      	add	r3, r2
 8009604:	3320      	adds	r3, #32
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a1a      	ldr	r2, [pc, #104]	; (8009674 <Gyro_Sensor_Handler+0xb0>)
 800960a:	6053      	str	r3, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800960c:	4b17      	ldr	r3, [pc, #92]	; (800966c <Gyro_Sensor_Handler+0xa8>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a17      	ldr	r2, [pc, #92]	; (8009670 <Gyro_Sensor_Handler+0xac>)
 8009612:	2134      	movs	r1, #52	; 0x34
 8009614:	fb01 f303 	mul.w	r3, r1, r3
 8009618:	4413      	add	r3, r2
 800961a:	3324      	adds	r3, #36	; 0x24
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a15      	ldr	r2, [pc, #84]	; (8009674 <Gyro_Sensor_Handler+0xb0>)
 8009620:	6093      	str	r3, [r2, #8]
 8009622:	e002      	b.n	800962a <Gyro_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8009624:	4813      	ldr	r0, [pc, #76]	; (8009674 <Gyro_Sensor_Handler+0xb0>)
 8009626:	f000 fd4b 	bl	800a0c0 <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	3323      	adds	r3, #35	; 0x23
 800962e:	4a11      	ldr	r2, [pc, #68]	; (8009674 <Gyro_Sensor_Handler+0xb0>)
 8009630:	6811      	ldr	r1, [r2, #0]
 8009632:	2204      	movs	r2, #4
 8009634:	4618      	mov	r0, r3
 8009636:	f001 ff0f 	bl	800b458 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3327      	adds	r3, #39	; 0x27
 800963e:	4a0d      	ldr	r2, [pc, #52]	; (8009674 <Gyro_Sensor_Handler+0xb0>)
 8009640:	6851      	ldr	r1, [r2, #4]
 8009642:	2204      	movs	r2, #4
 8009644:	4618      	mov	r0, r3
 8009646:	f001 ff07 	bl	800b458 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	332b      	adds	r3, #43	; 0x2b
 800964e:	4a09      	ldr	r2, [pc, #36]	; (8009674 <Gyro_Sensor_Handler+0xb0>)
 8009650:	6891      	ldr	r1, [r2, #8]
 8009652:	2204      	movs	r2, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f001 feff 	bl	800b458 <Serialize_s32>
  }
}
 800965a:	bf00      	nop
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20001b44 	.word	0x20001b44
 8009668:	20001b49 	.word	0x20001b49
 800966c:	20001b4c 	.word	0x20001b4c
 8009670:	200021ec 	.word	0x200021ec
 8009674:	20001b68 	.word	0x20001b68

08009678 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8009680:	4b25      	ldr	r3, [pc, #148]	; (8009718 <Magneto_Sensor_Handler+0xa0>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009688:	2b40      	cmp	r3, #64	; 0x40
 800968a:	d140      	bne.n	800970e <Magneto_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 800968c:	4b23      	ldr	r3, [pc, #140]	; (800971c <Magneto_Sensor_Handler+0xa4>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d121      	bne.n	80096d8 <Magneto_Sensor_Handler+0x60>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 8009694:	4b22      	ldr	r3, [pc, #136]	; (8009720 <Magneto_Sensor_Handler+0xa8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a22      	ldr	r2, [pc, #136]	; (8009724 <Magneto_Sensor_Handler+0xac>)
 800969a:	2134      	movs	r1, #52	; 0x34
 800969c:	fb01 f303 	mul.w	r3, r1, r3
 80096a0:	4413      	add	r3, r2
 80096a2:	3328      	adds	r3, #40	; 0x28
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a20      	ldr	r2, [pc, #128]	; (8009728 <Magneto_Sensor_Handler+0xb0>)
 80096a8:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 80096aa:	4b1d      	ldr	r3, [pc, #116]	; (8009720 <Magneto_Sensor_Handler+0xa8>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a1d      	ldr	r2, [pc, #116]	; (8009724 <Magneto_Sensor_Handler+0xac>)
 80096b0:	2134      	movs	r1, #52	; 0x34
 80096b2:	fb01 f303 	mul.w	r3, r1, r3
 80096b6:	4413      	add	r3, r2
 80096b8:	332c      	adds	r3, #44	; 0x2c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a1a      	ldr	r2, [pc, #104]	; (8009728 <Magneto_Sensor_Handler+0xb0>)
 80096be:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 80096c0:	4b17      	ldr	r3, [pc, #92]	; (8009720 <Magneto_Sensor_Handler+0xa8>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a17      	ldr	r2, [pc, #92]	; (8009724 <Magneto_Sensor_Handler+0xac>)
 80096c6:	2134      	movs	r1, #52	; 0x34
 80096c8:	fb01 f303 	mul.w	r3, r1, r3
 80096cc:	4413      	add	r3, r2
 80096ce:	3330      	adds	r3, #48	; 0x30
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a15      	ldr	r2, [pc, #84]	; (8009728 <Magneto_Sensor_Handler+0xb0>)
 80096d4:	6093      	str	r3, [r2, #8]
 80096d6:	e002      	b.n	80096de <Magneto_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 80096d8:	4813      	ldr	r0, [pc, #76]	; (8009728 <Magneto_Sensor_Handler+0xb0>)
 80096da:	f000 fcfe 	bl	800a0da <BSP_SENSOR_MAG_GetAxes>
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	332f      	adds	r3, #47	; 0x2f
 80096e2:	4a11      	ldr	r2, [pc, #68]	; (8009728 <Magneto_Sensor_Handler+0xb0>)
 80096e4:	6811      	ldr	r1, [r2, #0]
 80096e6:	2204      	movs	r2, #4
 80096e8:	4618      	mov	r0, r3
 80096ea:	f001 feb5 	bl	800b458 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3333      	adds	r3, #51	; 0x33
 80096f2:	4a0d      	ldr	r2, [pc, #52]	; (8009728 <Magneto_Sensor_Handler+0xb0>)
 80096f4:	6851      	ldr	r1, [r2, #4]
 80096f6:	2204      	movs	r2, #4
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 fead 	bl	800b458 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3337      	adds	r3, #55	; 0x37
 8009702:	4a09      	ldr	r2, [pc, #36]	; (8009728 <Magneto_Sensor_Handler+0xb0>)
 8009704:	6891      	ldr	r1, [r2, #8]
 8009706:	2204      	movs	r2, #4
 8009708:	4618      	mov	r0, r3
 800970a:	f001 fea5 	bl	800b458 <Serialize_s32>
  }
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20001b44 	.word	0x20001b44
 800971c:	20001b49 	.word	0x20001b49
 8009720:	20001b4c 	.word	0x20001b4c
 8009724:	200021ec 	.word	0x200021ec
 8009728:	20001b74 	.word	0x20001b74

0800972c <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 8009734:	4b10      	ldr	r3, [pc, #64]	; (8009778 <Pressure_Sensor_Handler+0x4c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b01      	cmp	r3, #1
 800973e:	d117      	bne.n	8009770 <Pressure_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 8009740:	4b0e      	ldr	r3, [pc, #56]	; (800977c <Pressure_Sensor_Handler+0x50>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d10b      	bne.n	8009760 <Pressure_Sensor_Handler+0x34>
    {
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 8009748:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <Pressure_Sensor_Handler+0x54>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a0d      	ldr	r2, [pc, #52]	; (8009784 <Pressure_Sensor_Handler+0x58>)
 800974e:	2134      	movs	r1, #52	; 0x34
 8009750:	fb01 f303 	mul.w	r3, r1, r3
 8009754:	4413      	add	r3, r2
 8009756:	3304      	adds	r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a0b      	ldr	r2, [pc, #44]	; (8009788 <Pressure_Sensor_Handler+0x5c>)
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	e002      	b.n	8009766 <Pressure_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 8009760:	4809      	ldr	r0, [pc, #36]	; (8009788 <Pressure_Sensor_Handler+0x5c>)
 8009762:	f000 fccd 	bl	800a100 <BSP_SENSOR_PRESS_GetValue>
    }

    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	330b      	adds	r3, #11
 800976a:	4a07      	ldr	r2, [pc, #28]	; (8009788 <Pressure_Sensor_Handler+0x5c>)
 800976c:	6812      	ldr	r2, [r2, #0]
 800976e:	601a      	str	r2, [r3, #0]
  }
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20001b44 	.word	0x20001b44
 800977c:	20001b49 	.word	0x20001b49
 8009780:	20001b4c 	.word	0x20001b4c
 8009784:	200021ec 	.word	0x200021ec
 8009788:	20001b80 	.word	0x20001b80

0800978c <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8009794:	4b10      	ldr	r3, [pc, #64]	; (80097d8 <Temperature_Sensor_Handler+0x4c>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b02      	cmp	r3, #2
 800979e:	d117      	bne.n	80097d0 <Temperature_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 80097a0:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <Temperature_Sensor_Handler+0x50>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d10b      	bne.n	80097c0 <Temperature_Sensor_Handler+0x34>
    {
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 80097a8:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <Temperature_Sensor_Handler+0x54>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a0d      	ldr	r2, [pc, #52]	; (80097e4 <Temperature_Sensor_Handler+0x58>)
 80097ae:	2134      	movs	r1, #52	; 0x34
 80097b0:	fb01 f303 	mul.w	r3, r1, r3
 80097b4:	4413      	add	r3, r2
 80097b6:	330c      	adds	r3, #12
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a0b      	ldr	r2, [pc, #44]	; (80097e8 <Temperature_Sensor_Handler+0x5c>)
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	e002      	b.n	80097c6 <Temperature_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 80097c0:	4809      	ldr	r0, [pc, #36]	; (80097e8 <Temperature_Sensor_Handler+0x5c>)
 80097c2:	f000 fca7 	bl	800a114 <BSP_SENSOR_TEMP_GetValue>
    }

    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	330f      	adds	r3, #15
 80097ca:	4a07      	ldr	r2, [pc, #28]	; (80097e8 <Temperature_Sensor_Handler+0x5c>)
 80097cc:	6812      	ldr	r2, [r2, #0]
 80097ce:	601a      	str	r2, [r3, #0]
  }
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20001b44 	.word	0x20001b44
 80097dc:	20001b49 	.word	0x20001b49
 80097e0:	20001b4c 	.word	0x20001b4c
 80097e4:	200021ec 	.word	0x200021ec
 80097e8:	20001b84 	.word	0x20001b84

080097ec <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 80097f4:	4b10      	ldr	r3, [pc, #64]	; (8009838 <Humidity_Sensor_Handler+0x4c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	d117      	bne.n	8009830 <Humidity_Sensor_Handler+0x44>
  {
    if (UseOfflineData == 1)
 8009800:	4b0e      	ldr	r3, [pc, #56]	; (800983c <Humidity_Sensor_Handler+0x50>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d10b      	bne.n	8009820 <Humidity_Sensor_Handler+0x34>
    {
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 8009808:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <Humidity_Sensor_Handler+0x54>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a0d      	ldr	r2, [pc, #52]	; (8009844 <Humidity_Sensor_Handler+0x58>)
 800980e:	2134      	movs	r1, #52	; 0x34
 8009810:	fb01 f303 	mul.w	r3, r1, r3
 8009814:	4413      	add	r3, r2
 8009816:	3308      	adds	r3, #8
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a0b      	ldr	r2, [pc, #44]	; (8009848 <Humidity_Sensor_Handler+0x5c>)
 800981c:	6013      	str	r3, [r2, #0]
 800981e:	e002      	b.n	8009826 <Humidity_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_HUM_GetValue(&HumValue);
 8009820:	4809      	ldr	r0, [pc, #36]	; (8009848 <Humidity_Sensor_Handler+0x5c>)
 8009822:	f000 fc81 	bl	800a128 <BSP_SENSOR_HUM_GetValue>
    }

    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3313      	adds	r3, #19
 800982a:	4a07      	ldr	r2, [pc, #28]	; (8009848 <Humidity_Sensor_Handler+0x5c>)
 800982c:	6812      	ldr	r2, [r2, #0]
 800982e:	601a      	str	r2, [r3, #0]
  }
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	20001b44 	.word	0x20001b44
 800983c:	20001b49 	.word	0x20001b49
 8009840:	20001b4c 	.word	0x20001b4c
 8009844:	200021ec 	.word	0x200021ec
 8009848:	20001b88 	.word	0x20001b88

0800984c <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 8009854:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009858:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800985a:	4b14      	ldr	r3, [pc, #80]	; (80098ac <TIM_Config+0x60>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	fbb2 f3f3 	udiv	r3, r2, r3
 8009864:	3b01      	subs	r3, #1
 8009866:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009870:	3b01      	subs	r3, #1
 8009872:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8009874:	4a0e      	ldr	r2, [pc, #56]	; (80098b0 <TIM_Config+0x64>)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800987a:	4b0d      	ldr	r3, [pc, #52]	; (80098b0 <TIM_Config+0x64>)
 800987c:	2200      	movs	r2, #0
 800987e:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 8009880:	4a0b      	ldr	r2, [pc, #44]	; (80098b0 <TIM_Config+0x64>)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009886:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <TIM_Config+0x64>)
 8009888:	2200      	movs	r2, #0
 800988a:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800988c:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <TIM_Config+0x64>)
 800988e:	2200      	movs	r2, #0
 8009890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8009892:	4807      	ldr	r0, [pc, #28]	; (80098b0 <TIM_Config+0x64>)
 8009894:	f7fe f838 	bl	8007908 <HAL_TIM_Base_Init>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <TIM_Config+0x56>
  {
    Error_Handler();
 800989e:	f7f8 f89b 	bl	80019d8 <Error_Handler>
  }
}
 80098a2:	bf00      	nop
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	200011c0 	.word	0x200011c0
 80098b0:	20002098 	.word	0x20002098

080098b4 <MEMS_INT1_Force_Low>:
 * @brief  Force MEMS INT1 pin low
 * @param  None
 * @retval None
 */
static void MEMS_INT1_Force_Low(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098ba:	1d3b      	adds	r3, r7, #4
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	605a      	str	r2, [r3, #4]
 80098c2:	609a      	str	r2, [r3, #8]
 80098c4:	60da      	str	r2, [r3, #12]
 80098c6:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = BSP_IP_MEMS_INT1_PIN_NUM;
 80098c8:	2301      	movs	r3, #1
 80098ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098cc:	2301      	movs	r3, #1
 80098ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BSP_IP_MEMS_INT1_GPIOX, &GPIO_InitStruct);
 80098d4:	1d3b      	adds	r3, r7, #4
 80098d6:	4619      	mov	r1, r3
 80098d8:	4805      	ldr	r0, [pc, #20]	; (80098f0 <MEMS_INT1_Force_Low+0x3c>)
 80098da:	f7fb fb33 	bl	8004f44 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(BSP_IP_MEMS_INT1_GPIOX, BSP_IP_MEMS_INT1_PIN_NUM, GPIO_PIN_RESET);
 80098de:	2200      	movs	r2, #0
 80098e0:	2101      	movs	r1, #1
 80098e2:	4803      	ldr	r0, [pc, #12]	; (80098f0 <MEMS_INT1_Force_Low+0x3c>)
 80098e4:	f7fb fde6 	bl	80054b4 <HAL_GPIO_WritePin>
}
 80098e8:	bf00      	nop
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	40020800 	.word	0x40020800

080098f4 <MEMS_INT1_Init>:
 * @brief  Configure MEMS INT1 pin to the default state
 * @param  None
 * @retval None
 */
static void MEMS_INT1_Init(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098fa:	1d3b      	adds	r3, r7, #4
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	605a      	str	r2, [r3, #4]
 8009902:	609a      	str	r2, [r3, #8]
 8009904:	60da      	str	r2, [r3, #12]
 8009906:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = BSP_IP_MEMS_INT1_PIN_NUM;
 8009908:	2301      	movs	r3, #1
 800990a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800990c:	2300      	movs	r3, #0
 800990e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009910:	2300      	movs	r3, #0
 8009912:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BSP_IP_MEMS_INT1_GPIOX, &GPIO_InitStruct);
 8009914:	1d3b      	adds	r3, r7, #4
 8009916:	4619      	mov	r1, r3
 8009918:	4803      	ldr	r0, [pc, #12]	; (8009928 <MEMS_INT1_Init+0x34>)
 800991a:	f7fb fb13 	bl	8004f44 <HAL_GPIO_Init>
}
 800991e:	bf00      	nop
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	40020800 	.word	0x40020800

0800992c <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 800992c:	b480      	push	{r7}
 800992e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8009930:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <DWT_Init+0x3c>)
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	4a0c      	ldr	r2, [pc, #48]	; (8009968 <DWT_Init+0x3c>)
 8009936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800993a:	60d3      	str	r3, [r2, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800993c:	f3bf 8f4f 	dsb	sy
}
 8009940:	bf00      	nop

  __DSB();
  DWT->LAR = DWT_LAR_KEY; /* Unlock access to register */
 8009942:	4b0a      	ldr	r3, [pc, #40]	; (800996c <DWT_Init+0x40>)
 8009944:	4a0a      	ldr	r2, [pc, #40]	; (8009970 <DWT_Init+0x44>)
 8009946:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  __ASM volatile ("dsb 0xF":::"memory");
 800994a:	f3bf 8f4f 	dsb	sy
}
 800994e:	bf00      	nop
  __DSB();

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <DWT_Init+0x40>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a05      	ldr	r2, [pc, #20]	; (800996c <DWT_Init+0x40>)
 8009956:	f023 0301 	bic.w	r3, r3, #1
 800995a:	6013      	str	r3, [r2, #0]
}
 800995c:	bf00      	nop
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	e000edf0 	.word	0xe000edf0
 800996c:	e0001000 	.word	0xe0001000
 8009970:	c5acce55 	.word	0xc5acce55

08009974 <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8009978:	4b06      	ldr	r3, [pc, #24]	; (8009994 <DWT_Start+0x20>)
 800997a:	2200      	movs	r2, #0
 800997c:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800997e:	4b05      	ldr	r3, [pc, #20]	; (8009994 <DWT_Start+0x20>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a04      	ldr	r2, [pc, #16]	; (8009994 <DWT_Start+0x20>)
 8009984:	f043 0301 	orr.w	r3, r3, #1
 8009988:	6013      	str	r3, [r2, #0]
}
 800998a:	bf00      	nop
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	e0001000 	.word	0xe0001000

08009998 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80099a6:	4b0d      	ldr	r3, [pc, #52]	; (80099dc <DWT_Stop+0x44>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a0c      	ldr	r2, [pc, #48]	; (80099dc <DWT_Stop+0x44>)
 80099ac:	f023 0301 	bic.w	r3, r3, #1
 80099b0:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 80099b2:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <DWT_Stop+0x44>)
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 80099b8:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <DWT_Stop+0x48>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a09      	ldr	r2, [pc, #36]	; (80099e4 <DWT_Stop+0x4c>)
 80099be:	fba2 2303 	umull	r2, r3, r2, r3
 80099c2:	0c9b      	lsrs	r3, r3, #18
 80099c4:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	e0001000 	.word	0xe0001000
 80099e0:	200011c0 	.word	0x200011c0
 80099e4:	431bde83 	.word	0x431bde83

080099e8 <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08a      	sub	sp, #40	; 0x28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 80099f4:	4b54      	ldr	r3, [pc, #336]	; (8009b48 <UART_ReceivedMSG+0x160>)
 80099f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f8:	4618      	mov	r0, r3
 80099fa:	f000 f8e1 	bl	8009bc0 <Get_DMA_Flag_Status>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f040 809c 	bne.w	8009b3e <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 8009a06:	4b50      	ldr	r3, [pc, #320]	; (8009b48 <UART_ReceivedMSG+0x160>)
 8009a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 faba 	bl	8009f84 <Get_DMA_Counter>
 8009a10:	4603      	mov	r3, r0
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009a18:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 8009a1a:	4b4c      	ldr	r3, [pc, #304]	; (8009b4c <UART_ReceivedMSG+0x164>)
 8009a1c:	889b      	ldrh	r3, [r3, #4]
 8009a1e:	8bba      	ldrh	r2, [r7, #28]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d305      	bcc.n	8009a30 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8009a24:	4b49      	ldr	r3, [pc, #292]	; (8009b4c <UART_ReceivedMSG+0x164>)
 8009a26:	889b      	ldrh	r3, [r3, #4]
 8009a28:	8bba      	ldrh	r2, [r7, #28]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	843b      	strh	r3, [r7, #32]
 8009a2e:	e007      	b.n	8009a40 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 8009a30:	4b46      	ldr	r3, [pc, #280]	; (8009b4c <UART_ReceivedMSG+0x164>)
 8009a32:	889b      	ldrh	r3, [r3, #4]
 8009a34:	8bba      	ldrh	r2, [r7, #28]
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009a3e:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 8009a40:	4b42      	ldr	r3, [pc, #264]	; (8009b4c <UART_ReceivedMSG+0x164>)
 8009a42:	889b      	ldrh	r3, [r3, #4]
 8009a44:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 8009a46:	2300      	movs	r3, #0
 8009a48:	847b      	strh	r3, [r7, #34]	; 0x22
 8009a4a:	e06d      	b.n	8009b28 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 8009a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a4e:	4a40      	ldr	r2, [pc, #256]	; (8009b50 <UART_ReceivedMSG+0x168>)
 8009a50:	5cd3      	ldrb	r3, [r2, r3]
 8009a52:	76fb      	strb	r3, [r7, #27]
      j++;
 8009a54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a56:	3301      	adds	r3, #1
 8009a58:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 8009a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a60:	d301      	bcc.n	8009a66 <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 8009a66:	7efb      	ldrb	r3, [r7, #27]
 8009a68:	2bf0      	cmp	r3, #240	; 0xf0
 8009a6a:	d15a      	bne.n	8009b22 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 8009a6c:	4b37      	ldr	r3, [pc, #220]	; (8009b4c <UART_ReceivedMSG+0x164>)
 8009a6e:	889b      	ldrh	r3, [r3, #4]
 8009a70:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 8009a72:	2300      	movs	r3, #0
 8009a74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009a76:	e03a      	b.n	8009aee <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 8009a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a82:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 8009a84:	8bfb      	ldrh	r3, [r7, #30]
 8009a86:	2bff      	cmp	r3, #255	; 0xff
 8009a88:	d904      	bls.n	8009a94 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 8009a8a:	4a30      	ldr	r2, [pc, #192]	; (8009b4c <UART_ReceivedMSG+0x164>)
 8009a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a8e:	8093      	strh	r3, [r2, #4]
            return 0;
 8009a90:	2300      	movs	r3, #0
 8009a92:	e055      	b.n	8009b40 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 8009a94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a96:	4a2e      	ldr	r2, [pc, #184]	; (8009b50 <UART_ReceivedMSG+0x168>)
 8009a98:	5cd3      	ldrb	r3, [r2, r3]
 8009a9a:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 8009a9c:	8b3b      	ldrh	r3, [r7, #24]
 8009a9e:	4a2c      	ldr	r2, [pc, #176]	; (8009b50 <UART_ReceivedMSG+0x168>)
 8009aa0:	5cd3      	ldrb	r3, [r2, r3]
 8009aa2:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 8009aa4:	8bfb      	ldrh	r3, [r7, #30]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	3304      	adds	r3, #4
 8009aac:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 8009aae:	7db9      	ldrb	r1, [r7, #22]
 8009ab0:	7dfb      	ldrb	r3, [r7, #23]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 fc2e 	bl	800b316 <ReverseByteStuffCopyByte2>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d104      	bne.n	8009ace <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8009ac4:	4a21      	ldr	r2, [pc, #132]	; (8009b4c <UART_ReceivedMSG+0x164>)
 8009ac6:	8b3b      	ldrh	r3, [r7, #24]
 8009ac8:	8093      	strh	r3, [r2, #4]
            return 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	e038      	b.n	8009b40 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ad4:	4413      	add	r3, r2
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009adc:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 8009ade:	8bfb      	ldrh	r3, [r7, #30]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009aea:	4413      	add	r3, r2
 8009aec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009aee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d3c0      	bcc.n	8009a78 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 8009af6:	8bfa      	ldrh	r2, [r7, #30]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 8009afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009afe:	3301      	adds	r3, #1
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b06:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 8009b08:	4a10      	ldr	r2, [pc, #64]	; (8009b4c <UART_ReceivedMSG+0x164>)
 8009b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b0c:	8093      	strh	r3, [r2, #4]

        if (CHK_CheckAndRemove(Msg) != 0) /* check message integrity */
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f001 fc52 	bl	800b3b8 <CHK_CheckAndRemove>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d001      	beq.n	8009b1e <UART_ReceivedMSG+0x136>
        {
          return 1;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e010      	b.n	8009b40 <UART_ReceivedMSG+0x158>
        }
        else
        {
          return 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e00e      	b.n	8009b40 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8009b22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b24:	3301      	adds	r3, #1
 8009b26:	847b      	strh	r3, [r7, #34]	; 0x22
 8009b28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009b2a:	8c3b      	ldrh	r3, [r7, #32]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d38d      	bcc.n	8009a4c <UART_ReceivedMSG+0x64>
        }
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 8009b30:	8c3b      	ldrh	r3, [r7, #32]
 8009b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b36:	d902      	bls.n	8009b3e <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 8009b38:	4a04      	ldr	r2, [pc, #16]	; (8009b4c <UART_ReceivedMSG+0x164>)
 8009b3a:	8bbb      	ldrh	r3, [r7, #28]
 8009b3c:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3728      	adds	r7, #40	; 0x28
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	20002164 	.word	0x20002164
 8009b4c:	200025b4 	.word	0x200025b4
 8009b50:	200023b4 	.word	0x200023b4

08009b54 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 fc01 	bl	800b364 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	4807      	ldr	r0, [pc, #28]	; (8009b84 <UART_SendMsg+0x30>)
 8009b66:	f001 fba8 	bl	800b2ba <ByteStuffCopy>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 8009b6e:	89fa      	ldrh	r2, [r7, #14]
 8009b70:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b74:	4903      	ldr	r1, [pc, #12]	; (8009b84 <UART_SendMsg+0x30>)
 8009b76:	4804      	ldr	r0, [pc, #16]	; (8009b88 <UART_SendMsg+0x34>)
 8009b78:	f7fe fc10 	bl	800839c <HAL_UART_Transmit>
}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20001da0 	.word	0x20001da0
 8009b88:	20002164 	.word	0x20002164

08009b8c <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8009b90:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <UART_StartReceiveMsg+0x2c>)
 8009b92:	4a0a      	ldr	r2, [pc, #40]	; (8009bbc <UART_StartReceiveMsg+0x30>)
 8009b94:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8009b96:	4b08      	ldr	r3, [pc, #32]	; (8009bb8 <UART_StartReceiveMsg+0x2c>)
 8009b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8009ba0:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <UART_StartReceiveMsg+0x2c>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8009ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bac:	4903      	ldr	r1, [pc, #12]	; (8009bbc <UART_StartReceiveMsg+0x30>)
 8009bae:	4802      	ldr	r0, [pc, #8]	; (8009bb8 <UART_StartReceiveMsg+0x2c>)
 8009bb0:	f7fe fc87 	bl	80084c2 <HAL_UART_Receive_DMA>
}
 8009bb4:	bf00      	nop
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	20002164 	.word	0x20002164
 8009bbc:	200023b4 	.word	0x200023b4

08009bc0 <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	461a      	mov	r2, r3
 8009bce:	4b9b      	ldr	r3, [pc, #620]	; (8009e3c <Get_DMA_Flag_Status+0x27c>)
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d961      	bls.n	8009c98 <Get_DMA_Flag_Status+0xd8>
 8009bd4:	4b9a      	ldr	r3, [pc, #616]	; (8009e40 <Get_DMA_Flag_Status+0x280>)
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4999      	ldr	r1, [pc, #612]	; (8009e44 <Get_DMA_Flag_Status+0x284>)
 8009bde:	428b      	cmp	r3, r1
 8009be0:	d057      	beq.n	8009c92 <Get_DMA_Flag_Status+0xd2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4998      	ldr	r1, [pc, #608]	; (8009e48 <Get_DMA_Flag_Status+0x288>)
 8009be8:	428b      	cmp	r3, r1
 8009bea:	d050      	beq.n	8009c8e <Get_DMA_Flag_Status+0xce>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4996      	ldr	r1, [pc, #600]	; (8009e4c <Get_DMA_Flag_Status+0x28c>)
 8009bf2:	428b      	cmp	r3, r1
 8009bf4:	d049      	beq.n	8009c8a <Get_DMA_Flag_Status+0xca>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4995      	ldr	r1, [pc, #596]	; (8009e50 <Get_DMA_Flag_Status+0x290>)
 8009bfc:	428b      	cmp	r3, r1
 8009bfe:	d042      	beq.n	8009c86 <Get_DMA_Flag_Status+0xc6>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4993      	ldr	r1, [pc, #588]	; (8009e54 <Get_DMA_Flag_Status+0x294>)
 8009c06:	428b      	cmp	r3, r1
 8009c08:	d03a      	beq.n	8009c80 <Get_DMA_Flag_Status+0xc0>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4992      	ldr	r1, [pc, #584]	; (8009e58 <Get_DMA_Flag_Status+0x298>)
 8009c10:	428b      	cmp	r3, r1
 8009c12:	d032      	beq.n	8009c7a <Get_DMA_Flag_Status+0xba>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4990      	ldr	r1, [pc, #576]	; (8009e5c <Get_DMA_Flag_Status+0x29c>)
 8009c1a:	428b      	cmp	r3, r1
 8009c1c:	d02a      	beq.n	8009c74 <Get_DMA_Flag_Status+0xb4>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	498f      	ldr	r1, [pc, #572]	; (8009e60 <Get_DMA_Flag_Status+0x2a0>)
 8009c24:	428b      	cmp	r3, r1
 8009c26:	d022      	beq.n	8009c6e <Get_DMA_Flag_Status+0xae>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	498d      	ldr	r1, [pc, #564]	; (8009e64 <Get_DMA_Flag_Status+0x2a4>)
 8009c2e:	428b      	cmp	r3, r1
 8009c30:	d01a      	beq.n	8009c68 <Get_DMA_Flag_Status+0xa8>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	498c      	ldr	r1, [pc, #560]	; (8009e68 <Get_DMA_Flag_Status+0x2a8>)
 8009c38:	428b      	cmp	r3, r1
 8009c3a:	d012      	beq.n	8009c62 <Get_DMA_Flag_Status+0xa2>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	498a      	ldr	r1, [pc, #552]	; (8009e6c <Get_DMA_Flag_Status+0x2ac>)
 8009c42:	428b      	cmp	r3, r1
 8009c44:	d00a      	beq.n	8009c5c <Get_DMA_Flag_Status+0x9c>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4989      	ldr	r1, [pc, #548]	; (8009e70 <Get_DMA_Flag_Status+0x2b0>)
 8009c4c:	428b      	cmp	r3, r1
 8009c4e:	d102      	bne.n	8009c56 <Get_DMA_Flag_Status+0x96>
 8009c50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c54:	e01e      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c5a:	e01b      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c60:	e018      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c66:	e015      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c6c:	e012      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c72:	e00f      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c78:	e00c      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c7e:	e009      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c84:	e006      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c86:	2308      	movs	r3, #8
 8009c88:	e004      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	e002      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c8e:	2308      	movs	r3, #8
 8009c90:	e000      	b.n	8009c94 <Get_DMA_Flag_Status+0xd4>
 8009c92:	2308      	movs	r3, #8
 8009c94:	4013      	ands	r3, r2
 8009c96:	e154      	b.n	8009f42 <Get_DMA_Flag_Status+0x382>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4b75      	ldr	r3, [pc, #468]	; (8009e74 <Get_DMA_Flag_Status+0x2b4>)
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d961      	bls.n	8009d68 <Get_DMA_Flag_Status+0x1a8>
 8009ca4:	4b66      	ldr	r3, [pc, #408]	; (8009e40 <Get_DMA_Flag_Status+0x280>)
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4965      	ldr	r1, [pc, #404]	; (8009e44 <Get_DMA_Flag_Status+0x284>)
 8009cae:	428b      	cmp	r3, r1
 8009cb0:	d057      	beq.n	8009d62 <Get_DMA_Flag_Status+0x1a2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4964      	ldr	r1, [pc, #400]	; (8009e48 <Get_DMA_Flag_Status+0x288>)
 8009cb8:	428b      	cmp	r3, r1
 8009cba:	d050      	beq.n	8009d5e <Get_DMA_Flag_Status+0x19e>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4962      	ldr	r1, [pc, #392]	; (8009e4c <Get_DMA_Flag_Status+0x28c>)
 8009cc2:	428b      	cmp	r3, r1
 8009cc4:	d049      	beq.n	8009d5a <Get_DMA_Flag_Status+0x19a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4961      	ldr	r1, [pc, #388]	; (8009e50 <Get_DMA_Flag_Status+0x290>)
 8009ccc:	428b      	cmp	r3, r1
 8009cce:	d042      	beq.n	8009d56 <Get_DMA_Flag_Status+0x196>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	495f      	ldr	r1, [pc, #380]	; (8009e54 <Get_DMA_Flag_Status+0x294>)
 8009cd6:	428b      	cmp	r3, r1
 8009cd8:	d03a      	beq.n	8009d50 <Get_DMA_Flag_Status+0x190>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	495e      	ldr	r1, [pc, #376]	; (8009e58 <Get_DMA_Flag_Status+0x298>)
 8009ce0:	428b      	cmp	r3, r1
 8009ce2:	d032      	beq.n	8009d4a <Get_DMA_Flag_Status+0x18a>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	495c      	ldr	r1, [pc, #368]	; (8009e5c <Get_DMA_Flag_Status+0x29c>)
 8009cea:	428b      	cmp	r3, r1
 8009cec:	d02a      	beq.n	8009d44 <Get_DMA_Flag_Status+0x184>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	495b      	ldr	r1, [pc, #364]	; (8009e60 <Get_DMA_Flag_Status+0x2a0>)
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	d022      	beq.n	8009d3e <Get_DMA_Flag_Status+0x17e>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4959      	ldr	r1, [pc, #356]	; (8009e64 <Get_DMA_Flag_Status+0x2a4>)
 8009cfe:	428b      	cmp	r3, r1
 8009d00:	d01a      	beq.n	8009d38 <Get_DMA_Flag_Status+0x178>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4958      	ldr	r1, [pc, #352]	; (8009e68 <Get_DMA_Flag_Status+0x2a8>)
 8009d08:	428b      	cmp	r3, r1
 8009d0a:	d012      	beq.n	8009d32 <Get_DMA_Flag_Status+0x172>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4956      	ldr	r1, [pc, #344]	; (8009e6c <Get_DMA_Flag_Status+0x2ac>)
 8009d12:	428b      	cmp	r3, r1
 8009d14:	d00a      	beq.n	8009d2c <Get_DMA_Flag_Status+0x16c>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4955      	ldr	r1, [pc, #340]	; (8009e70 <Get_DMA_Flag_Status+0x2b0>)
 8009d1c:	428b      	cmp	r3, r1
 8009d1e:	d102      	bne.n	8009d26 <Get_DMA_Flag_Status+0x166>
 8009d20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d24:	e01e      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d2a:	e01b      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d30:	e018      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d36:	e015      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d3c:	e012      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d42:	e00f      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d48:	e00c      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d4e:	e009      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d54:	e006      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d56:	2308      	movs	r3, #8
 8009d58:	e004      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d5a:	2308      	movs	r3, #8
 8009d5c:	e002      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d5e:	2308      	movs	r3, #8
 8009d60:	e000      	b.n	8009d64 <Get_DMA_Flag_Status+0x1a4>
 8009d62:	2308      	movs	r3, #8
 8009d64:	4013      	ands	r3, r2
 8009d66:	e0ec      	b.n	8009f42 <Get_DMA_Flag_Status+0x382>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4b42      	ldr	r3, [pc, #264]	; (8009e78 <Get_DMA_Flag_Status+0x2b8>)
 8009d70:	429a      	cmp	r2, r3
 8009d72:	f240 8085 	bls.w	8009e80 <Get_DMA_Flag_Status+0x2c0>
 8009d76:	4b41      	ldr	r3, [pc, #260]	; (8009e7c <Get_DMA_Flag_Status+0x2bc>)
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4931      	ldr	r1, [pc, #196]	; (8009e44 <Get_DMA_Flag_Status+0x284>)
 8009d80:	428b      	cmp	r3, r1
 8009d82:	d057      	beq.n	8009e34 <Get_DMA_Flag_Status+0x274>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	492f      	ldr	r1, [pc, #188]	; (8009e48 <Get_DMA_Flag_Status+0x288>)
 8009d8a:	428b      	cmp	r3, r1
 8009d8c:	d050      	beq.n	8009e30 <Get_DMA_Flag_Status+0x270>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	492e      	ldr	r1, [pc, #184]	; (8009e4c <Get_DMA_Flag_Status+0x28c>)
 8009d94:	428b      	cmp	r3, r1
 8009d96:	d049      	beq.n	8009e2c <Get_DMA_Flag_Status+0x26c>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	492c      	ldr	r1, [pc, #176]	; (8009e50 <Get_DMA_Flag_Status+0x290>)
 8009d9e:	428b      	cmp	r3, r1
 8009da0:	d042      	beq.n	8009e28 <Get_DMA_Flag_Status+0x268>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	492b      	ldr	r1, [pc, #172]	; (8009e54 <Get_DMA_Flag_Status+0x294>)
 8009da8:	428b      	cmp	r3, r1
 8009daa:	d03a      	beq.n	8009e22 <Get_DMA_Flag_Status+0x262>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4929      	ldr	r1, [pc, #164]	; (8009e58 <Get_DMA_Flag_Status+0x298>)
 8009db2:	428b      	cmp	r3, r1
 8009db4:	d032      	beq.n	8009e1c <Get_DMA_Flag_Status+0x25c>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4928      	ldr	r1, [pc, #160]	; (8009e5c <Get_DMA_Flag_Status+0x29c>)
 8009dbc:	428b      	cmp	r3, r1
 8009dbe:	d02a      	beq.n	8009e16 <Get_DMA_Flag_Status+0x256>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4926      	ldr	r1, [pc, #152]	; (8009e60 <Get_DMA_Flag_Status+0x2a0>)
 8009dc6:	428b      	cmp	r3, r1
 8009dc8:	d022      	beq.n	8009e10 <Get_DMA_Flag_Status+0x250>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4925      	ldr	r1, [pc, #148]	; (8009e64 <Get_DMA_Flag_Status+0x2a4>)
 8009dd0:	428b      	cmp	r3, r1
 8009dd2:	d01a      	beq.n	8009e0a <Get_DMA_Flag_Status+0x24a>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4923      	ldr	r1, [pc, #140]	; (8009e68 <Get_DMA_Flag_Status+0x2a8>)
 8009dda:	428b      	cmp	r3, r1
 8009ddc:	d012      	beq.n	8009e04 <Get_DMA_Flag_Status+0x244>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4922      	ldr	r1, [pc, #136]	; (8009e6c <Get_DMA_Flag_Status+0x2ac>)
 8009de4:	428b      	cmp	r3, r1
 8009de6:	d00a      	beq.n	8009dfe <Get_DMA_Flag_Status+0x23e>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4920      	ldr	r1, [pc, #128]	; (8009e70 <Get_DMA_Flag_Status+0x2b0>)
 8009dee:	428b      	cmp	r3, r1
 8009df0:	d102      	bne.n	8009df8 <Get_DMA_Flag_Status+0x238>
 8009df2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009df6:	e01e      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dfc:	e01b      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009dfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e02:	e018      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e08:	e015      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e0e:	e012      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e14:	e00f      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e1a:	e00c      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e20:	e009      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e26:	e006      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e28:	2308      	movs	r3, #8
 8009e2a:	e004      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	e002      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e30:	2308      	movs	r3, #8
 8009e32:	e000      	b.n	8009e36 <Get_DMA_Flag_Status+0x276>
 8009e34:	2308      	movs	r3, #8
 8009e36:	4013      	ands	r3, r2
 8009e38:	e083      	b.n	8009f42 <Get_DMA_Flag_Status+0x382>
 8009e3a:	bf00      	nop
 8009e3c:	40026458 	.word	0x40026458
 8009e40:	40026400 	.word	0x40026400
 8009e44:	40026010 	.word	0x40026010
 8009e48:	40026410 	.word	0x40026410
 8009e4c:	40026070 	.word	0x40026070
 8009e50:	40026470 	.word	0x40026470
 8009e54:	40026028 	.word	0x40026028
 8009e58:	40026428 	.word	0x40026428
 8009e5c:	40026088 	.word	0x40026088
 8009e60:	40026488 	.word	0x40026488
 8009e64:	40026040 	.word	0x40026040
 8009e68:	40026440 	.word	0x40026440
 8009e6c:	400260a0 	.word	0x400260a0
 8009e70:	400264a0 	.word	0x400264a0
 8009e74:	400260b8 	.word	0x400260b8
 8009e78:	40026058 	.word	0x40026058
 8009e7c:	40026000 	.word	0x40026000
 8009e80:	4b33      	ldr	r3, [pc, #204]	; (8009f50 <Get_DMA_Flag_Status+0x390>)
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4932      	ldr	r1, [pc, #200]	; (8009f54 <Get_DMA_Flag_Status+0x394>)
 8009e8a:	428b      	cmp	r3, r1
 8009e8c:	d057      	beq.n	8009f3e <Get_DMA_Flag_Status+0x37e>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4931      	ldr	r1, [pc, #196]	; (8009f58 <Get_DMA_Flag_Status+0x398>)
 8009e94:	428b      	cmp	r3, r1
 8009e96:	d050      	beq.n	8009f3a <Get_DMA_Flag_Status+0x37a>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	492f      	ldr	r1, [pc, #188]	; (8009f5c <Get_DMA_Flag_Status+0x39c>)
 8009e9e:	428b      	cmp	r3, r1
 8009ea0:	d049      	beq.n	8009f36 <Get_DMA_Flag_Status+0x376>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	492e      	ldr	r1, [pc, #184]	; (8009f60 <Get_DMA_Flag_Status+0x3a0>)
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	d042      	beq.n	8009f32 <Get_DMA_Flag_Status+0x372>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	492c      	ldr	r1, [pc, #176]	; (8009f64 <Get_DMA_Flag_Status+0x3a4>)
 8009eb2:	428b      	cmp	r3, r1
 8009eb4:	d03a      	beq.n	8009f2c <Get_DMA_Flag_Status+0x36c>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	492b      	ldr	r1, [pc, #172]	; (8009f68 <Get_DMA_Flag_Status+0x3a8>)
 8009ebc:	428b      	cmp	r3, r1
 8009ebe:	d032      	beq.n	8009f26 <Get_DMA_Flag_Status+0x366>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4929      	ldr	r1, [pc, #164]	; (8009f6c <Get_DMA_Flag_Status+0x3ac>)
 8009ec6:	428b      	cmp	r3, r1
 8009ec8:	d02a      	beq.n	8009f20 <Get_DMA_Flag_Status+0x360>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4928      	ldr	r1, [pc, #160]	; (8009f70 <Get_DMA_Flag_Status+0x3b0>)
 8009ed0:	428b      	cmp	r3, r1
 8009ed2:	d022      	beq.n	8009f1a <Get_DMA_Flag_Status+0x35a>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4926      	ldr	r1, [pc, #152]	; (8009f74 <Get_DMA_Flag_Status+0x3b4>)
 8009eda:	428b      	cmp	r3, r1
 8009edc:	d01a      	beq.n	8009f14 <Get_DMA_Flag_Status+0x354>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4925      	ldr	r1, [pc, #148]	; (8009f78 <Get_DMA_Flag_Status+0x3b8>)
 8009ee4:	428b      	cmp	r3, r1
 8009ee6:	d012      	beq.n	8009f0e <Get_DMA_Flag_Status+0x34e>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4923      	ldr	r1, [pc, #140]	; (8009f7c <Get_DMA_Flag_Status+0x3bc>)
 8009eee:	428b      	cmp	r3, r1
 8009ef0:	d00a      	beq.n	8009f08 <Get_DMA_Flag_Status+0x348>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4922      	ldr	r1, [pc, #136]	; (8009f80 <Get_DMA_Flag_Status+0x3c0>)
 8009ef8:	428b      	cmp	r3, r1
 8009efa:	d102      	bne.n	8009f02 <Get_DMA_Flag_Status+0x342>
 8009efc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f00:	e01e      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f06:	e01b      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f0c:	e018      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f12:	e015      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f18:	e012      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f1e:	e00f      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f24:	e00c      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f2a:	e009      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f30:	e006      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f32:	2308      	movs	r3, #8
 8009f34:	e004      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f36:	2308      	movs	r3, #8
 8009f38:	e002      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	e000      	b.n	8009f40 <Get_DMA_Flag_Status+0x380>
 8009f3e:	2308      	movs	r3, #8
 8009f40:	4013      	ands	r3, r2
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	40026000 	.word	0x40026000
 8009f54:	40026010 	.word	0x40026010
 8009f58:	40026410 	.word	0x40026410
 8009f5c:	40026070 	.word	0x40026070
 8009f60:	40026470 	.word	0x40026470
 8009f64:	40026028 	.word	0x40026028
 8009f68:	40026428 	.word	0x40026428
 8009f6c:	40026088 	.word	0x40026088
 8009f70:	40026488 	.word	0x40026488
 8009f74:	40026040 	.word	0x40026040
 8009f78:	40026440 	.word	0x40026440
 8009f7c:	400260a0 	.word	0x400260a0
 8009f80:	400264a0 	.word	0x400264a0

08009f84 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
 8009fa2:	2102      	movs	r1, #2
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	f000 f90f 	bl	800a1c8 <CUSTOM_MOTION_SENSOR_Init>
  #endif
#endif
#endif
}
 8009faa:	bf00      	nop
 8009fac:	bd80      	pop	{r7, pc}

08009fae <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	f000 f907 	bl	800a1c8 <CUSTOM_MOTION_SENSOR_Init>
  #endif
#endif
}
 8009fba:	bf00      	nop
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8009fbe:	b480      	push	{r7}
 8009fc0:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
  #endif
#endif
}
 8009fc2:	bf00      	nop
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
  #endif
#endif
}
 8009fd0:	bf00      	nop
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	af00      	add	r7, sp, #0
  #ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
  #endif
#endif
#endif
}
 8009fde:	bf00      	nop
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
  #endif
#endif
}
 8009fec:	bf00      	nop
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
 8009ffa:	2102      	movs	r1, #2
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f000 f96b 	bl	800a2d8 <CUSTOM_MOTION_SENSOR_Enable>
  #endif
#endif
#endif
}
 800a002:	bf00      	nop
 800a004:	bd80      	pop	{r7, pc}

0800a006 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
 800a00a:	2101      	movs	r1, #1
 800a00c:	2000      	movs	r0, #0
 800a00e:	f000 f963 	bl	800a2d8 <CUSTOM_MOTION_SENSOR_Enable>
  #endif
#endif
}
 800a012:	bf00      	nop
 800a014:	bd80      	pop	{r7, pc}

0800a016 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800a016:	b480      	push	{r7}
 800a018:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
  #endif
#endif
}
 800a01a:	bf00      	nop
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 800a024:	b480      	push	{r7}
 800a026:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
  #endif
#endif
}
 800a028:	bf00      	nop
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800a032:	b480      	push	{r7}
 800a034:	af00      	add	r7, sp, #0
  #ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
  #endif
#endif
#endif
}
 800a036:	bf00      	nop
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800a040:	b480      	push	{r7}
 800a042:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
  #endif
#endif
}
 800a044:	bf00      	nop
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
 800a052:	2102      	movs	r1, #2
 800a054:	2000      	movs	r0, #0
 800a056:	f000 f981 	bl	800a35c <CUSTOM_MOTION_SENSOR_Disable>
  #endif
#endif
#endif
}
 800a05a:	bf00      	nop
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
 800a062:	2101      	movs	r1, #1
 800a064:	2000      	movs	r0, #0
 800a066:	f000 f979 	bl	800a35c <CUSTOM_MOTION_SENSOR_Disable>
  #endif
#endif
}
 800a06a:	bf00      	nop
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 800a06e:	b480      	push	{r7}
 800a070:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
  #endif
#endif
}
 800a072:	bf00      	nop
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 800a07c:	b480      	push	{r7}
 800a07e:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
  #endif
#endif
}
 800a080:	bf00      	nop
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 800a08a:	b480      	push	{r7}
 800a08c:	af00      	add	r7, sp, #0
  #ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
  #endif
#endif
#endif
}
 800a08e:	bf00      	nop
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 800a098:	b480      	push	{r7}
 800a09a:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
  #ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
  #endif
#endif
}
 800a09c:	bf00      	nop
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(MOTION_SENSOR_Axes_t *Axes)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b082      	sub	sp, #8
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  Axes->z = 0;
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO, (CUSTOM_MOTION_SENSOR_Axes_t *)Axes);
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	2102      	movs	r1, #2
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	f000 f994 	bl	800a3e0 <CUSTOM_MOTION_SENSOR_GetAxes>
  Axes->y = 0;
  Axes->z = 0;
  #endif
#endif
#endif
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(MOTION_SENSOR_Axes_t *Axes)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO, (CUSTOM_MOTION_SENSOR_Axes_t *)Axes);
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	f000 f987 	bl	800a3e0 <CUSTOM_MOTION_SENSOR_GetAxes>
  Axes->x = 0;
  Axes->y = 0;
  Axes->z = 0;
  #endif
#endif
}
 800a0d2:	bf00      	nop
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(MOTION_SENSOR_Axes_t *Axes)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO, (CUSTOM_MOTION_SENSOR_Axes_t *)Axes);
  #else
  Axes->x = 0;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	601a      	str	r2, [r3, #0]
  Axes->y = 0;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	605a      	str	r2, [r3, #4]
  Axes->z = 0;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	609a      	str	r2, [r3, #8]
  #endif
#endif
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_ENV_SENSOR_GetValue(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE, Value);
  #else
  *Value = 0.0f;
  #endif
#endif
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  #else
  *Value = 0.0f;
  #endif
#endif
#endif
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_ENV_SENSOR_GetValue(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY, Value);
  #else
  *Value = 0.0f;
  #endif
#endif
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)CUSTOM_HYBRID_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO, Odr);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO, Odr);
 800a146:	ed97 0a01 	vldr	s0, [r7, #4]
 800a14a:	2102      	movs	r1, #2
 800a14c:	2000      	movs	r0, #0
 800a14e:	f000 f98b 	bl	800a468 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
  #endif
#endif
#endif
}
 800a152:	bf00      	nop
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b082      	sub	sp, #8
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  (void)CUSTOM_HYBRID_MOTION_SENSOR_SetFullScale(CUSTOM_ACC_INSTANCE_0, HYBRID_ACCELERO, Fullscale);
  #endif
#else
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_SetFullScale(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO, Fullscale);
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	2102      	movs	r1, #2
 800a166:	2000      	movs	r0, #0
 800a168:	f000 f9c4 	bl	800a4f4 <CUSTOM_MOTION_SENSOR_SetFullScale>
  #endif
#endif
#endif
}
 800a16c:	bf00      	nop
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS || defined BSP_HYBRID_SENSORS)
  #ifdef CUSTOM_ACC_INSTANCE_0
    Orientation[0] = 's';
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2273      	movs	r2, #115	; 0x73
 800a180:	701a      	strb	r2, [r3, #0]
    Orientation[1] = 'e';
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3301      	adds	r3, #1
 800a186:	2265      	movs	r2, #101	; 0x65
 800a188:	701a      	strb	r2, [r3, #0]
    Orientation[2] = 'u';
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3302      	adds	r3, #2
 800a18e:	2275      	movs	r2, #117	; 0x75
 800a190:	701a      	strb	r2, [r3, #0]
  #endif
#endif
}
 800a192:	bf00      	nop
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
#if (defined BSP_MOTION_SENSORS)
  #ifdef CUSTOM_GYR_INSTANCE_0
    Orientation[0] = 's';
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2273      	movs	r2, #115	; 0x73
 800a1aa:	701a      	strb	r2, [r3, #0]
    Orientation[1] = 'e';
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	2265      	movs	r2, #101	; 0x65
 800a1b2:	701a      	strb	r2, [r3, #0]
    Orientation[2] = 'u';
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3302      	adds	r3, #2
 800a1b8:	2275      	movs	r2, #117	; 0x75
 800a1ba:	701a      	strb	r2, [r3, #0]
  #endif
#endif
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08e      	sub	sp, #56	; 0x38
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d131      	bne.n	800a248 <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSOX_0 == 1)
    case CUSTOM_LSM6DSOX_0:
      if (LSM6DSOX_0_Probe(Functions) != BSP_ERROR_NONE)
 800a1e4:	6838      	ldr	r0, [r7, #0]
 800a1e6:	f000 f9c9 	bl	800a57c <LSM6DSOX_0_Probe>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 800a1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f4:	e064      	b.n	800a2c0 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a1f6:	4a34      	ldr	r2, [pc, #208]	; (800a2c8 <CUSTOM_MOTION_SENSOR_Init+0x100>)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	4932      	ldr	r1, [pc, #200]	; (800a2cc <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a208:	f107 010c 	add.w	r1, r7, #12
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a216:	f06f 0306 	mvn.w	r3, #6
 800a21a:	e051      	b.n	800a2c0 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 800a21c:	7b3b      	ldrb	r3, [r7, #12]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d103      	bne.n	800a22a <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	f043 0302 	orr.w	r3, r3, #2
 800a228:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800a22a:	7b7b      	ldrb	r3, [r7, #13]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d103      	bne.n	800a238 <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 800a230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a232:	f043 0301 	orr.w	r3, r3, #1
 800a236:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800a238:	7bbb      	ldrb	r3, [r7, #14]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d108      	bne.n	800a250 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	f043 0304 	orr.w	r3, r3, #4
 800a244:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800a246:	e003      	b.n	800a250 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a248:	f06f 0301 	mvn.w	r3, #1
 800a24c:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800a24e:	e000      	b.n	800a252 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 800a250:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 800a258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25a:	e031      	b.n	800a2c0 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800a25c:	2300      	movs	r3, #0
 800a25e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a260:	e02a      	b.n	800a2b8 <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a266:	4013      	ands	r3, r2
 800a268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d11e      	bne.n	800a2ac <CUSTOM_MOTION_SENSOR_Init+0xe4>
 800a26e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a272:	4013      	ands	r3, r2
 800a274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a276:	429a      	cmp	r2, r3
 800a278:	d118      	bne.n	800a2ac <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a27a:	4a15      	ldr	r2, [pc, #84]	; (800a2d0 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a282:	4814      	ldr	r0, [pc, #80]	; (800a2d4 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	4613      	mov	r3, r2
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	4413      	add	r3, r2
 800a28c:	440b      	add	r3, r1
 800a28e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	490d      	ldr	r1, [pc, #52]	; (800a2cc <CUSTOM_MOTION_SENSOR_Init+0x104>)
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a29c:	4610      	mov	r0, r2
 800a29e:	4798      	blx	r3
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d002      	beq.n	800a2ac <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800a2a6:	f06f 0304 	mvn.w	r3, #4
 800a2aa:	e009      	b.n	800a2c0 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	005b      	lsls	r3, r3, #1
 800a2b0:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d9d1      	bls.n	800a262 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 800a2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3738      	adds	r7, #56	; 0x38
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	20001fac 	.word	0x20001fac
 800a2cc:	200025bc 	.word	0x200025bc
 800a2d0:	20001230 	.word	0x20001230
 800a2d4:	20001fa0 	.word	0x20001fa0

0800a2d8 <CUSTOM_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <CUSTOM_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a2e8:	f06f 0301 	mvn.w	r3, #1
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	e028      	b.n	800a342 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a2f0:	4a16      	ldr	r2, [pc, #88]	; (800a34c <CUSTOM_MOTION_SENSOR_Enable+0x74>)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d11c      	bne.n	800a33c <CUSTOM_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a302:	4a13      	ldr	r2, [pc, #76]	; (800a350 <CUSTOM_MOTION_SENSOR_Enable+0x78>)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a30a:	4812      	ldr	r0, [pc, #72]	; (800a354 <CUSTOM_MOTION_SENSOR_Enable+0x7c>)
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	4613      	mov	r3, r2
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	4413      	add	r3, r2
 800a314:	440b      	add	r3, r1
 800a316:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	490e      	ldr	r1, [pc, #56]	; (800a358 <CUSTOM_MOTION_SENSOR_Enable+0x80>)
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a324:	4610      	mov	r0, r2
 800a326:	4798      	blx	r3
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <CUSTOM_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a32e:	f06f 0304 	mvn.w	r3, #4
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	e005      	b.n	800a342 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	e002      	b.n	800a342 <CUSTOM_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a33c:	f06f 0301 	mvn.w	r3, #1
 800a340:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20001fb0 	.word	0x20001fb0
 800a350:	20001230 	.word	0x20001230
 800a354:	20001fa0 	.word	0x20001fa0
 800a358:	200025bc 	.word	0x200025bc

0800a35c <CUSTOM_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO
 *         - MOTION_MAGNETO
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <CUSTOM_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a36c:	f06f 0301 	mvn.w	r3, #1
 800a370:	60fb      	str	r3, [r7, #12]
 800a372:	e028      	b.n	800a3c6 <CUSTOM_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a374:	4a16      	ldr	r2, [pc, #88]	; (800a3d0 <CUSTOM_MOTION_SENSOR_Disable+0x74>)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	4013      	ands	r3, r2
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d11c      	bne.n	800a3c0 <CUSTOM_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a386:	4a13      	ldr	r2, [pc, #76]	; (800a3d4 <CUSTOM_MOTION_SENSOR_Disable+0x78>)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a38e:	4812      	ldr	r0, [pc, #72]	; (800a3d8 <CUSTOM_MOTION_SENSOR_Disable+0x7c>)
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	4613      	mov	r3, r2
 800a394:	005b      	lsls	r3, r3, #1
 800a396:	4413      	add	r3, r2
 800a398:	440b      	add	r3, r1
 800a39a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	490e      	ldr	r1, [pc, #56]	; (800a3dc <CUSTOM_MOTION_SENSOR_Disable+0x80>)
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a3a8:	4610      	mov	r0, r2
 800a3aa:	4798      	blx	r3
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <CUSTOM_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3b2:	f06f 0304 	mvn.w	r3, #4
 800a3b6:	60fb      	str	r3, [r7, #12]
 800a3b8:	e005      	b.n	800a3c6 <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	e002      	b.n	800a3c6 <CUSTOM_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a3c0:	f06f 0301 	mvn.w	r3, #1
 800a3c4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20001fb0 	.word	0x20001fb0
 800a3d4:	20001230 	.word	0x20001230
 800a3d8:	20001fa0 	.word	0x20001fa0
 800a3dc:	200025bc 	.word	0x200025bc

0800a3e0 <CUSTOM_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_Axes_t *Axes)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <CUSTOM_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a3f2:	f06f 0301 	mvn.w	r3, #1
 800a3f6:	617b      	str	r3, [r7, #20]
 800a3f8:	e029      	b.n	800a44e <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a3fa:	4a17      	ldr	r2, [pc, #92]	; (800a458 <CUSTOM_MOTION_SENSOR_GetAxes+0x78>)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	4013      	ands	r3, r2
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d11d      	bne.n	800a448 <CUSTOM_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800a40c:	4a13      	ldr	r2, [pc, #76]	; (800a45c <CUSTOM_MOTION_SENSOR_GetAxes+0x7c>)
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a414:	4812      	ldr	r0, [pc, #72]	; (800a460 <CUSTOM_MOTION_SENSOR_GetAxes+0x80>)
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	4613      	mov	r3, r2
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	4413      	add	r3, r2
 800a41e:	440b      	add	r3, r1
 800a420:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	490f      	ldr	r1, [pc, #60]	; (800a464 <CUSTOM_MOTION_SENSOR_GetAxes+0x84>)
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	4610      	mov	r0, r2
 800a432:	4798      	blx	r3
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <CUSTOM_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a43a:	f06f 0304 	mvn.w	r3, #4
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e005      	b.n	800a44e <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a442:	2300      	movs	r3, #0
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	e002      	b.n	800a44e <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a448:	f06f 0301 	mvn.w	r3, #1
 800a44c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a44e:	697b      	ldr	r3, [r7, #20]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20001fb0 	.word	0x20001fb0
 800a45c:	20001230 	.word	0x20001230
 800a460:	20001fa0 	.word	0x20001fa0
 800a464:	200025bc 	.word	0x200025bc

0800a468 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a47c:	f06f 0301 	mvn.w	r3, #1
 800a480:	617b      	str	r3, [r7, #20]
 800a482:	e02a      	b.n	800a4da <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a484:	4a17      	ldr	r2, [pc, #92]	; (800a4e4 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	4013      	ands	r3, r2
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	429a      	cmp	r2, r3
 800a494:	d11e      	bne.n	800a4d4 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800a496:	4a14      	ldr	r2, [pc, #80]	; (800a4e8 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a49e:	4813      	ldr	r0, [pc, #76]	; (800a4ec <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	4413      	add	r3, r2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	490f      	ldr	r1, [pc, #60]	; (800a4f0 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a4b8:	ed97 0a01 	vldr	s0, [r7, #4]
 800a4bc:	4610      	mov	r0, r2
 800a4be:	4798      	blx	r3
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a4c6:	f06f 0304 	mvn.w	r3, #4
 800a4ca:	617b      	str	r3, [r7, #20]
 800a4cc:	e005      	b.n	800a4da <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	617b      	str	r3, [r7, #20]
 800a4d2:	e002      	b.n	800a4da <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a4d4:	f06f 0301 	mvn.w	r3, #1
 800a4d8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a4da:	697b      	ldr	r3, [r7, #20]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	20001fb0 	.word	0x20001fb0
 800a4e8:	20001230 	.word	0x20001230
 800a4ec:	20001fa0 	.word	0x20001fa0
 800a4f0:	200025bc 	.word	0x200025bc

0800a4f4 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a506:	f06f 0301 	mvn.w	r3, #1
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	e029      	b.n	800a562 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a50e:	4a17      	ldr	r2, [pc, #92]	; (800a56c <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	4013      	ands	r3, r2
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d11d      	bne.n	800a55c <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 800a520:	4a13      	ldr	r2, [pc, #76]	; (800a570 <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a528:	4812      	ldr	r0, [pc, #72]	; (800a574 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4613      	mov	r3, r2
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	4413      	add	r3, r2
 800a532:	440b      	add	r3, r1
 800a534:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	490f      	ldr	r1, [pc, #60]	; (800a578 <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	4610      	mov	r0, r2
 800a546:	4798      	blx	r3
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d003      	beq.n	800a556 <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a54e:	f06f 0304 	mvn.w	r3, #4
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	e005      	b.n	800a562 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a556:	2300      	movs	r3, #0
 800a558:	617b      	str	r3, [r7, #20]
 800a55a:	e002      	b.n	800a562 <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a55c:	f06f 0301 	mvn.w	r3, #1
 800a560:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a562:	697b      	ldr	r3, [r7, #20]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	20001fb0 	.word	0x20001fb0
 800a570:	20001230 	.word	0x20001230
 800a574:	20001fa0 	.word	0x20001fa0
 800a578:	200025bc 	.word	0x200025bc

0800a57c <LSM6DSOX_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSOX_0_Probe(uint32_t Functions)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b092      	sub	sp, #72	; 0x48
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  LSM6DSOX_IO_t            io_ctx;
  uint8_t                  id;
  static LSM6DSOX_Object_t lsm6dsox_obj_0;
  LSM6DSOX_Capabilities_t  cap;
  int32_t                  ret = BSP_ERROR_NONE;
 800a584:	2300      	movs	r3, #0
 800a586:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSOX_I2C_BUS; /* I2C */
 800a588:	2300      	movs	r3, #0
 800a58a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSOX_I2C_ADD_L; /* SA0 = GND */
 800a58c:	23d5      	movs	r3, #213	; 0xd5
 800a58e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = CUSTOM_LSM6DSOX_0_I2C_Init;
 800a592:	4b4a      	ldr	r3, [pc, #296]	; (800a6bc <LSM6DSOX_0_Probe+0x140>)
 800a594:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = CUSTOM_LSM6DSOX_0_I2C_DeInit;
 800a596:	4b4a      	ldr	r3, [pc, #296]	; (800a6c0 <LSM6DSOX_0_Probe+0x144>)
 800a598:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = CUSTOM_LSM6DSOX_0_I2C_ReadReg;
 800a59a:	4b4a      	ldr	r3, [pc, #296]	; (800a6c4 <LSM6DSOX_0_Probe+0x148>)
 800a59c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = CUSTOM_LSM6DSOX_0_I2C_WriteReg;
 800a59e:	4b4a      	ldr	r3, [pc, #296]	; (800a6c8 <LSM6DSOX_0_Probe+0x14c>)
 800a5a0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 800a5a2:	4b4a      	ldr	r3, [pc, #296]	; (800a6cc <LSM6DSOX_0_Probe+0x150>)
 800a5a4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSOX_RegisterBusIO(&lsm6dsox_obj_0, &io_ctx) != LSM6DSOX_OK)
 800a5a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4848      	ldr	r0, [pc, #288]	; (800a6d0 <LSM6DSOX_0_Probe+0x154>)
 800a5ae:	f7f7 fbe5 	bl	8001d7c <LSM6DSOX_RegisterBusIO>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <LSM6DSOX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a5b8:	f06f 0306 	mvn.w	r3, #6
 800a5bc:	647b      	str	r3, [r7, #68]	; 0x44
 800a5be:	e077      	b.n	800a6b0 <LSM6DSOX_0_Probe+0x134>
  }
  else if (LSM6DSOX_ReadID(&lsm6dsox_obj_0, &id) != LSM6DSOX_OK)
 800a5c0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4842      	ldr	r0, [pc, #264]	; (800a6d0 <LSM6DSOX_0_Probe+0x154>)
 800a5c8:	f7f7 fcda 	bl	8001f80 <LSM6DSOX_ReadID>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <LSM6DSOX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a5d2:	f06f 0306 	mvn.w	r3, #6
 800a5d6:	647b      	str	r3, [r7, #68]	; 0x44
 800a5d8:	e06a      	b.n	800a6b0 <LSM6DSOX_0_Probe+0x134>
  }
  else if (id != LSM6DSOX_ID)
 800a5da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5de:	2b6c      	cmp	r3, #108	; 0x6c
 800a5e0:	d003      	beq.n	800a5ea <LSM6DSOX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a5e2:	f06f 0306 	mvn.w	r3, #6
 800a5e6:	647b      	str	r3, [r7, #68]	; 0x44
 800a5e8:	e062      	b.n	800a6b0 <LSM6DSOX_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSOX_GetCapabilities(&lsm6dsox_obj_0, &cap);
 800a5ea:	f107 0308 	add.w	r3, r7, #8
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	4837      	ldr	r0, [pc, #220]	; (800a6d0 <LSM6DSOX_0_Probe+0x154>)
 800a5f2:	f7f7 fcdb 	bl	8001fac <LSM6DSOX_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSOX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a5f6:	7a7b      	ldrb	r3, [r7, #9]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	7a3b      	ldrb	r3, [r7, #8]
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	431a      	orrs	r2, r3
 800a600:	7abb      	ldrb	r3, [r7, #10]
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4313      	orrs	r3, r2
 800a606:	4a33      	ldr	r2, [pc, #204]	; (800a6d4 <LSM6DSOX_0_Probe+0x158>)
 800a608:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSOX_0] = &lsm6dsox_obj_0;
 800a60a:	4b33      	ldr	r3, [pc, #204]	; (800a6d8 <LSM6DSOX_0_Probe+0x15c>)
 800a60c:	4a30      	ldr	r2, [pc, #192]	; (800a6d0 <LSM6DSOX_0_Probe+0x154>)
 800a60e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSOX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSOX_COMMON_Driver;
 800a610:	4b32      	ldr	r3, [pc, #200]	; (800a6dc <LSM6DSOX_0_Probe+0x160>)
 800a612:	4a33      	ldr	r2, [pc, #204]	; (800a6e0 <LSM6DSOX_0_Probe+0x164>)
 800a614:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800a616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d11d      	bne.n	800a658 <LSM6DSOX_0_Probe+0xdc>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b00      	cmp	r3, #0
 800a624:	d018      	beq.n	800a658 <LSM6DSOX_0_Probe+0xdc>
 800a626:	7a7b      	ldrb	r3, [r7, #9]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d115      	bne.n	800a658 <LSM6DSOX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSOX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_GYRO_Driver;
 800a62c:	4b2d      	ldr	r3, [pc, #180]	; (800a6e4 <LSM6DSOX_0_Probe+0x168>)
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	4a2d      	ldr	r2, [pc, #180]	; (800a6e8 <LSM6DSOX_0_Probe+0x16c>)
 800a632:	492e      	ldr	r1, [pc, #184]	; (800a6ec <LSM6DSOX_0_Probe+0x170>)
 800a634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSOX_0]->Init(MotionCompObj[CUSTOM_LSM6DSOX_0]) != LSM6DSOX_OK)
 800a638:	4b28      	ldr	r3, [pc, #160]	; (800a6dc <LSM6DSOX_0_Probe+0x160>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a26      	ldr	r2, [pc, #152]	; (800a6d8 <LSM6DSOX_0_Probe+0x15c>)
 800a640:	6812      	ldr	r2, [r2, #0]
 800a642:	4610      	mov	r0, r2
 800a644:	4798      	blx	r3
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <LSM6DSOX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a64c:	f06f 0304 	mvn.w	r3, #4
 800a650:	647b      	str	r3, [r7, #68]	; 0x44
 800a652:	e001      	b.n	800a658 <LSM6DSOX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a654:	2300      	movs	r3, #0
 800a656:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800a658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d11d      	bne.n	800a69a <LSM6DSOX_0_Probe+0x11e>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d018      	beq.n	800a69a <LSM6DSOX_0_Probe+0x11e>
 800a668:	7a3b      	ldrb	r3, [r7, #8]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d115      	bne.n	800a69a <LSM6DSOX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSOX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSOX_ACC_Driver;
 800a66e:	4b1d      	ldr	r3, [pc, #116]	; (800a6e4 <LSM6DSOX_0_Probe+0x168>)
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	4a1d      	ldr	r2, [pc, #116]	; (800a6e8 <LSM6DSOX_0_Probe+0x16c>)
 800a674:	491e      	ldr	r1, [pc, #120]	; (800a6f0 <LSM6DSOX_0_Probe+0x174>)
 800a676:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSOX_0]->Init(MotionCompObj[CUSTOM_LSM6DSOX_0]) != LSM6DSOX_OK)
 800a67a:	4b18      	ldr	r3, [pc, #96]	; (800a6dc <LSM6DSOX_0_Probe+0x160>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <LSM6DSOX_0_Probe+0x15c>)
 800a682:	6812      	ldr	r2, [r2, #0]
 800a684:	4610      	mov	r0, r2
 800a686:	4798      	blx	r3
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <LSM6DSOX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a68e:	f06f 0304 	mvn.w	r3, #4
 800a692:	647b      	str	r3, [r7, #68]	; 0x44
 800a694:	e001      	b.n	800a69a <LSM6DSOX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a696:	2300      	movs	r3, #0
 800a698:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800a69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d107      	bne.n	800a6b0 <LSM6DSOX_0_Probe+0x134>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f003 0304 	and.w	r3, r3, #4
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d002      	beq.n	800a6b0 <LSM6DSOX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a6aa:	f06f 0304 	mvn.w	r3, #4
 800a6ae:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800a6b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3748      	adds	r7, #72	; 0x48
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	080012e9 	.word	0x080012e9
 800a6c0:	08001365 	.word	0x08001365
 800a6c4:	08001419 	.word	0x08001419
 800a6c8:	080013b5 	.word	0x080013b5
 800a6cc:	0800147d 	.word	0x0800147d
 800a6d0:	20001fb4 	.word	0x20001fb4
 800a6d4:	20001fb0 	.word	0x20001fb0
 800a6d8:	200025bc 	.word	0x200025bc
 800a6dc:	20001fac 	.word	0x20001fac
 800a6e0:	200011c4 	.word	0x200011c4
 800a6e4:	20001230 	.word	0x20001230
 800a6e8:	20001fa0 	.word	0x20001fa0
 800a6ec:	200011f8 	.word	0x200011f8
 800a6f0:	200011d4 	.word	0x200011d4

0800a6f4 <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	795a      	ldrb	r2, [r3, #5]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2232      	movs	r2, #50	; 0x32
 800a708:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	799b      	ldrb	r3, [r3, #6]
 800a70e:	3b80      	subs	r3, #128	; 0x80
 800a710:	b2da      	uxtb	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	719a      	strb	r2, [r3, #6]
}
 800a716:	bf00      	nop
 800a718:	370c      	adds	r7, #12
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
	...

0800a724 <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 800a72c:	4b09      	ldr	r3, [pc, #36]	; (800a754 <INIT_STREAMING_HEADER+0x30>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	b2da      	uxtb	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2232      	movs	r2, #50	; 0x32
 800a73a:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2208      	movs	r2, #8
 800a740:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2203      	movs	r2, #3
 800a746:	601a      	str	r2, [r3, #0]
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	20001244 	.word	0x20001244

0800a758 <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SouceAddr | CMD | PAYLOAD
 *      1          1        1       N
 */
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b098      	sub	sp, #96	; 0x60
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  int ret = 1;
 800a760:	2301      	movs	r3, #1
 800a762:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d801      	bhi.n	800a774 <HandleMSG+0x1c>
  {
    return 0;
 800a770:	2300      	movs	r3, #0
 800a772:	e3af      	b.n	800aed4 <HandleMSG+0x77c>
  }

  if (Msg->Data[0] != DEV_ADDR)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	791b      	ldrb	r3, [r3, #4]
 800a778:	2b32      	cmp	r3, #50	; 0x32
 800a77a:	d001      	beq.n	800a780 <HandleMSG+0x28>
  {
    return 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	e3a9      	b.n	800aed4 <HandleMSG+0x77c>
  }

  switch (Msg->Data[2])   /* CMD */
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	799b      	ldrb	r3, [r3, #6]
 800a784:	2b12      	cmp	r3, #18
 800a786:	f300 8087 	bgt.w	800a898 <HandleMSG+0x140>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dc58      	bgt.n	800a840 <HandleMSG+0xe8>
 800a78e:	e39d      	b.n	800aecc <HandleMSG+0x774>
 800a790:	3b53      	subs	r3, #83	; 0x53
 800a792:	2b27      	cmp	r3, #39	; 0x27
 800a794:	f200 839a 	bhi.w	800aecc <HandleMSG+0x774>
 800a798:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <HandleMSG+0x48>)
 800a79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79e:	bf00      	nop
 800a7a0:	0800ae4d 	.word	0x0800ae4d
 800a7a4:	0800ae93 	.word	0x0800ae93
 800a7a8:	0800aecd 	.word	0x0800aecd
 800a7ac:	0800aecd 	.word	0x0800aecd
 800a7b0:	0800aecd 	.word	0x0800aecd
 800a7b4:	0800aecd 	.word	0x0800aecd
 800a7b8:	0800aecd 	.word	0x0800aecd
 800a7bc:	0800aecd 	.word	0x0800aecd
 800a7c0:	0800aecd 	.word	0x0800aecd
 800a7c4:	0800aecd 	.word	0x0800aecd
 800a7c8:	0800aecd 	.word	0x0800aecd
 800a7cc:	0800aecd 	.word	0x0800aecd
 800a7d0:	0800aecd 	.word	0x0800aecd
 800a7d4:	0800a93d 	.word	0x0800a93d
 800a7d8:	0800aecd 	.word	0x0800aecd
 800a7dc:	0800a96b 	.word	0x0800a96b
 800a7e0:	0800aecd 	.word	0x0800aecd
 800a7e4:	0800aecd 	.word	0x0800aecd
 800a7e8:	0800aecd 	.word	0x0800aecd
 800a7ec:	0800aecd 	.word	0x0800aecd
 800a7f0:	0800aecd 	.word	0x0800aecd
 800a7f4:	0800aecd 	.word	0x0800aecd
 800a7f8:	0800aecd 	.word	0x0800aecd
 800a7fc:	0800aecd 	.word	0x0800aecd
 800a800:	0800aecd 	.word	0x0800aecd
 800a804:	0800aecd 	.word	0x0800aecd
 800a808:	0800aecd 	.word	0x0800aecd
 800a80c:	0800aecd 	.word	0x0800aecd
 800a810:	0800aecd 	.word	0x0800aecd
 800a814:	0800aecd 	.word	0x0800aecd
 800a818:	0800aecd 	.word	0x0800aecd
 800a81c:	0800aecd 	.word	0x0800aecd
 800a820:	0800aecd 	.word	0x0800aecd
 800a824:	0800aecd 	.word	0x0800aecd
 800a828:	0800aecd 	.word	0x0800aecd
 800a82c:	0800a999 	.word	0x0800a999
 800a830:	0800aecd 	.word	0x0800aecd
 800a834:	0800aecd 	.word	0x0800aecd
 800a838:	0800aecd 	.word	0x0800aecd
 800a83c:	0800a9c7 	.word	0x0800a9c7
 800a840:	3b01      	subs	r3, #1
 800a842:	2b11      	cmp	r3, #17
 800a844:	f200 8342 	bhi.w	800aecc <HandleMSG+0x774>
 800a848:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <HandleMSG+0xf8>)
 800a84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84e:	bf00      	nop
 800a850:	0800a8a7 	.word	0x0800a8a7
 800a854:	0800a8e1 	.word	0x0800a8e1
 800a858:	0800aecd 	.word	0x0800aecd
 800a85c:	0800aecd 	.word	0x0800aecd
 800a860:	0800aecd 	.word	0x0800aecd
 800a864:	0800aecd 	.word	0x0800aecd
 800a868:	0800aecd 	.word	0x0800aecd
 800a86c:	0800a9f5 	.word	0x0800a9f5
 800a870:	0800aa9b 	.word	0x0800aa9b
 800a874:	0800aecd 	.word	0x0800aecd
 800a878:	0800aecd 	.word	0x0800aecd
 800a87c:	0800aae5 	.word	0x0800aae5
 800a880:	0800aecd 	.word	0x0800aecd
 800a884:	0800a8c7 	.word	0x0800a8c7
 800a888:	0800aecd 	.word	0x0800aecd
 800a88c:	0800ab2b 	.word	0x0800ab2b
 800a890:	0800ad9d 	.word	0x0800ad9d
 800a894:	0800adeb 	.word	0x0800adeb
 800a898:	2b7a      	cmp	r3, #122	; 0x7a
 800a89a:	f300 8317 	bgt.w	800aecc <HandleMSG+0x774>
 800a89e:	2b53      	cmp	r3, #83	; 0x53
 800a8a0:	f6bf af76 	bge.w	800a790 <HandleMSG+0x38>
 800a8a4:	e312      	b.n	800aecc <HandleMSG+0x774>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d001      	beq.n	800a8b2 <HandleMSG+0x15a>
      {
        return 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e310      	b.n	800aed4 <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7ff ff1e 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2203      	movs	r2, #3
 800a8bc:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f7ff f948 	bl	8009b54 <UART_SendMsg>
      break;
 800a8c4:	e305      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b03      	cmp	r3, #3
 800a8cc:	d001      	beq.n	800a8d2 <HandleMSG+0x17a>
      {
        return 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e300      	b.n	800aed4 <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff ff0e 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2203      	movs	r2, #3
 800a8dc:	601a      	str	r2, [r3, #0]
      break;
 800a8de:	e2f8      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d001      	beq.n	800a8ec <HandleMSG+0x194>
      {
        return 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	e2f3      	b.n	800aed4 <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ff01 	bl	800a6f4 <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 800a8f2:	f107 020c 	add.w	r2, r7, #12
 800a8f6:	f107 0310 	add.w	r3, r7, #16
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fb43 	bl	800af88 <Get_PresentationString>

      i = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800a906:	e00d      	b.n	800a924 <HandleMSG+0x1cc>
      {
        Msg->Data[3U + i] = ps[i];
 800a908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a90a:	3303      	adds	r3, #3
 800a90c:	f107 0110 	add.w	r1, r7, #16
 800a910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a912:	440a      	add	r2, r1
 800a914:	7811      	ldrb	r1, [r2, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	4413      	add	r3, r2
 800a91a:	460a      	mov	r2, r1
 800a91c:	711a      	strb	r2, [r3, #4]
        i++;
 800a91e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a920:	3301      	adds	r3, #1
 800a922:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a928:	429a      	cmp	r2, r3
 800a92a:	d3ed      	bcc.n	800a908 <HandleMSG+0x1b0>
      }

      Msg->Len = 3U + i;
 800a92c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a92e:	1cda      	adds	r2, r3, #3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff f90d 	bl	8009b54 <UART_SendMsg>
      break;
 800a93a:	e2ca      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b02      	cmp	r3, #2
 800a942:	d801      	bhi.n	800a948 <HandleMSG+0x1f0>
      {
        return 0;
 800a944:	2300      	movs	r3, #0
 800a946:	e2c5      	b.n	800aed4 <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7ff fed3 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	3307      	adds	r3, #7
 800a952:	2204      	movs	r2, #4
 800a954:	21ff      	movs	r1, #255	; 0xff
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fd7e 	bl	800b458 <Serialize_s32>
      Msg->Len = 3 + 4;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2207      	movs	r2, #7
 800a960:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff f8f6 	bl	8009b54 <UART_SendMsg>
      break;
 800a968:	e2b3      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d801      	bhi.n	800a976 <HandleMSG+0x21e>
      {
        return 0;
 800a972:	2300      	movs	r3, #0
 800a974:	e2ae      	b.n	800aed4 <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7ff febc 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3307      	adds	r3, #7
 800a980:	2204      	movs	r2, #4
 800a982:	21ff      	movs	r1, #255	; 0xff
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fd67 	bl	800b458 <Serialize_s32>
      Msg->Len = 3 + 4;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2207      	movs	r2, #7
 800a98e:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff f8df 	bl	8009b54 <UART_SendMsg>
      break;
 800a996:	e29c      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d801      	bhi.n	800a9a4 <HandleMSG+0x24c>
      {
        return 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	e297      	b.n	800aed4 <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff fea5 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	3307      	adds	r3, #7
 800a9ae:	2204      	movs	r2, #4
 800a9b0:	210a      	movs	r1, #10
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fd50 	bl	800b458 <Serialize_s32>
      Msg->Len = 3 + 4;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2207      	movs	r2, #7
 800a9bc:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff f8c8 	bl	8009b54 <UART_SendMsg>
      break;
 800a9c4:	e285      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d801      	bhi.n	800a9d2 <HandleMSG+0x27a>
      {
        return 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e280      	b.n	800aed4 <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff fe8e 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3307      	adds	r3, #7
 800a9dc:	2204      	movs	r2, #4
 800a9de:	21ff      	movs	r1, #255	; 0xff
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 fd39 	bl	800b458 <Serialize_s32>
      Msg->Len = 3 + 4;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2207      	movs	r2, #7
 800a9ea:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff f8b1 	bl	8009b54 <UART_SendMsg>
      break;
 800a9f2:	e26e      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d801      	bhi.n	800aa00 <HandleMSG+0x2a8>
      {
        return 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e269      	b.n	800aed4 <HandleMSG+0x77c>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3307      	adds	r3, #7
 800aa04:	2104      	movs	r1, #4
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fd00 	bl	800b40c <Deserialize>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	4a4e      	ldr	r2, [pc, #312]	; (800ab48 <HandleMSG+0x3f0>)
 800aa10:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800aa12:	4b4d      	ldr	r3, [pc, #308]	; (800ab48 <HandleMSG+0x3f0>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d101      	bne.n	800aa22 <HandleMSG+0x2ca>
      {
        BSP_SENSOR_PRESS_Enable();
 800aa1e:	f7ff fb01 	bl	800a024 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800aa22:	4b49      	ldr	r3, [pc, #292]	; (800ab48 <HandleMSG+0x3f0>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d101      	bne.n	800aa32 <HandleMSG+0x2da>
      {
        BSP_SENSOR_TEMP_Enable();
 800aa2e:	f7ff fb00 	bl	800a032 <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800aa32:	4b45      	ldr	r3, [pc, #276]	; (800ab48 <HandleMSG+0x3f0>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0304 	and.w	r3, r3, #4
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d101      	bne.n	800aa42 <HandleMSG+0x2ea>
      {
        BSP_SENSOR_HUM_Enable();
 800aa3e:	f7ff faff 	bl	800a040 <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800aa42:	4b41      	ldr	r3, [pc, #260]	; (800ab48 <HandleMSG+0x3f0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0310 	and.w	r3, r3, #16
 800aa4a:	2b10      	cmp	r3, #16
 800aa4c:	d101      	bne.n	800aa52 <HandleMSG+0x2fa>
      {
        BSP_SENSOR_ACC_Enable();
 800aa4e:	f7ff fad2 	bl	8009ff6 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800aa52:	4b3d      	ldr	r3, [pc, #244]	; (800ab48 <HandleMSG+0x3f0>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b20      	cmp	r3, #32
 800aa5c:	d101      	bne.n	800aa62 <HandleMSG+0x30a>
      {
        BSP_SENSOR_GYR_Enable();
 800aa5e:	f7ff fad2 	bl	800a006 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800aa62:	4b39      	ldr	r3, [pc, #228]	; (800ab48 <HandleMSG+0x3f0>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6a:	2b40      	cmp	r3, #64	; 0x40
 800aa6c:	d101      	bne.n	800aa72 <HandleMSG+0x31a>
      {
        BSP_SENSOR_MAG_Enable();
 800aa6e:	f7ff fad2 	bl	800a016 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 800aa72:	4836      	ldr	r0, [pc, #216]	; (800ab4c <HandleMSG+0x3f4>)
 800aa74:	f7fc ffa0 	bl	80079b8 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 800aa78:	4b35      	ldr	r3, [pc, #212]	; (800ab50 <HandleMSG+0x3f8>)
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	795a      	ldrb	r2, [r3, #5]
 800aa82:	4b34      	ldr	r3, [pc, #208]	; (800ab54 <HandleMSG+0x3fc>)
 800aa84:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff fe34 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2203      	movs	r2, #3
 800aa90:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7ff f85e 	bl	8009b54 <UART_SendMsg>
      break;
 800aa98:	e21b      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d801      	bhi.n	800aaa6 <HandleMSG+0x34e>
      {
        return 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e216      	b.n	800aed4 <HandleMSG+0x77c>
      }

      DataLoggerActive = 0;
 800aaa6:	4b2a      	ldr	r3, [pc, #168]	; (800ab50 <HandleMSG+0x3f8>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800aaac:	4827      	ldr	r0, [pc, #156]	; (800ab4c <HandleMSG+0x3f4>)
 800aaae:	f7fc fffb 	bl	8007aa8 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 800aab2:	f7ff facc 	bl	800a04e <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 800aab6:	f7ff fad2 	bl	800a05e <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 800aaba:	f7ff fad8 	bl	800a06e <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 800aabe:	f7ff fadd 	bl	800a07c <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 800aac2:	f7ff fae2 	bl	800a08a <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 800aac6:	f7ff fae7 	bl	800a098 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 800aaca:	4b1f      	ldr	r3, [pc, #124]	; (800ab48 <HandleMSG+0x3f0>)
 800aacc:	2200      	movs	r2, #0
 800aace:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 800aad0:	4b21      	ldr	r3, [pc, #132]	; (800ab58 <HandleMSG+0x400>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff fe0c 	bl	800a6f4 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff f839 	bl	8009b54 <UART_SendMsg>
      break;
 800aae2:	e1f6      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d801      	bhi.n	800aaf0 <HandleMSG+0x398>
      {
        return 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	e1f1      	b.n	800aed4 <HandleMSG+0x77c>
      }

      BUILD_REPLY_HEADER(Msg);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7ff fdff 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2203      	movs	r2, #3
 800aafa:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	79d8      	ldrb	r0, [r3, #7]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	7a19      	ldrb	r1, [r3, #8]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7a5b      	ldrb	r3, [r3, #9]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	f000 fa13 	bl	800af34 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	7a98      	ldrb	r0, [r3, #10]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	7ad9      	ldrb	r1, [r3, #11]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7b1a      	ldrb	r2, [r3, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	7b5b      	ldrb	r3, [r3, #13]
 800ab1e:	f000 f9df 	bl	800aee0 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff f816 	bl	8009b54 <UART_SendMsg>
      break;
 800ab28:	e1d3      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b36      	cmp	r3, #54	; 0x36
 800ab30:	d801      	bhi.n	800ab36 <HandleMSG+0x3de>
      {
        return 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	e1ce      	b.n	800aed4 <HandleMSG+0x77c>
      }

      msg_offset = 4;
 800ab36:	2304      	movs	r3, #4
 800ab38:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	79db      	ldrb	r3, [r3, #7]
 800ab3e:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 800ab40:	2300      	movs	r3, #0
 800ab42:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab44:	e11b      	b.n	800ad7e <HandleMSG+0x626>
 800ab46:	bf00      	nop
 800ab48:	20001b44 	.word	0x20001b44
 800ab4c:	20002098 	.word	0x20002098
 800ab50:	20001b41 	.word	0x20001b41
 800ab54:	20001244 	.word	0x20001244
 800ab58:	20001b49 	.word	0x20001b49
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 800ab5c:	4ba6      	ldr	r3, [pc, #664]	; (800adf8 <HandleMSG+0x6a0>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2234      	movs	r2, #52	; 0x34
 800ab62:	fb02 f303 	mul.w	r3, r2, r3
 800ab66:	4aa5      	ldr	r2, [pc, #660]	; (800adfc <HandleMSG+0x6a4>)
 800ab68:	4413      	add	r3, r2
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab6e:	440a      	add	r2, r1
 800ab70:	3204      	adds	r2, #4
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800ab76:	4ba0      	ldr	r3, [pc, #640]	; (800adf8 <HandleMSG+0x6a0>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2234      	movs	r2, #52	; 0x34
 800ab7c:	fb02 f303 	mul.w	r3, r2, r3
 800ab80:	4a9e      	ldr	r2, [pc, #632]	; (800adfc <HandleMSG+0x6a4>)
 800ab82:	4413      	add	r3, r2
 800ab84:	3301      	adds	r3, #1
 800ab86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab88:	3201      	adds	r2, #1
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	3204      	adds	r2, #4
 800ab90:	7812      	ldrb	r2, [r2, #0]
 800ab92:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 800ab94:	4b98      	ldr	r3, [pc, #608]	; (800adf8 <HandleMSG+0x6a0>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2234      	movs	r2, #52	; 0x34
 800ab9a:	fb02 f303 	mul.w	r3, r2, r3
 800ab9e:	4a97      	ldr	r2, [pc, #604]	; (800adfc <HandleMSG+0x6a4>)
 800aba0:	4413      	add	r3, r2
 800aba2:	3302      	adds	r3, #2
 800aba4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aba6:	3202      	adds	r2, #2
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	440a      	add	r2, r1
 800abac:	3204      	adds	r2, #4
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 800abb2:	4b91      	ldr	r3, [pc, #580]	; (800adf8 <HandleMSG+0x6a0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2234      	movs	r2, #52	; 0x34
 800abb8:	fb02 f303 	mul.w	r3, r2, r3
 800abbc:	4a8f      	ldr	r2, [pc, #572]	; (800adfc <HandleMSG+0x6a4>)
 800abbe:	4413      	add	r3, r2
 800abc0:	3303      	adds	r3, #3
 800abc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abc4:	3203      	adds	r2, #3
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	440a      	add	r2, r1
 800abca:	3204      	adds	r2, #4
 800abcc:	7812      	ldrb	r2, [r2, #0]
 800abce:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 800abd0:	4b89      	ldr	r3, [pc, #548]	; (800adf8 <HandleMSG+0x6a0>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2234      	movs	r2, #52	; 0x34
 800abd6:	fb02 f303 	mul.w	r3, r2, r3
 800abda:	4a88      	ldr	r2, [pc, #544]	; (800adfc <HandleMSG+0x6a4>)
 800abdc:	4413      	add	r3, r2
 800abde:	3304      	adds	r3, #4
 800abe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abe2:	3204      	adds	r2, #4
 800abe4:	6879      	ldr	r1, [r7, #4]
 800abe6:	440a      	add	r2, r1
 800abe8:	3204      	adds	r2, #4
 800abea:	6812      	ldr	r2, [r2, #0]
 800abec:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 800abee:	4b82      	ldr	r3, [pc, #520]	; (800adf8 <HandleMSG+0x6a0>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2234      	movs	r2, #52	; 0x34
 800abf4:	fb02 f303 	mul.w	r3, r2, r3
 800abf8:	3308      	adds	r3, #8
 800abfa:	4a80      	ldr	r2, [pc, #512]	; (800adfc <HandleMSG+0x6a4>)
 800abfc:	4413      	add	r3, r2
 800abfe:	3304      	adds	r3, #4
 800ac00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac02:	3208      	adds	r2, #8
 800ac04:	6879      	ldr	r1, [r7, #4]
 800ac06:	440a      	add	r2, r1
 800ac08:	3204      	adds	r2, #4
 800ac0a:	6812      	ldr	r2, [r2, #0]
 800ac0c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 800ac0e:	4b7a      	ldr	r3, [pc, #488]	; (800adf8 <HandleMSG+0x6a0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2234      	movs	r2, #52	; 0x34
 800ac14:	fb02 f303 	mul.w	r3, r2, r3
 800ac18:	3308      	adds	r3, #8
 800ac1a:	4a78      	ldr	r2, [pc, #480]	; (800adfc <HandleMSG+0x6a4>)
 800ac1c:	4413      	add	r3, r2
 800ac1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac20:	320c      	adds	r2, #12
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	440a      	add	r2, r1
 800ac26:	3204      	adds	r2, #4
 800ac28:	6812      	ldr	r2, [r2, #0]
 800ac2a:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 800ac2c:	4b72      	ldr	r3, [pc, #456]	; (800adf8 <HandleMSG+0x6a0>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2234      	movs	r2, #52	; 0x34
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	3310      	adds	r3, #16
 800ac38:	4a70      	ldr	r2, [pc, #448]	; (800adfc <HandleMSG+0x6a4>)
 800ac3a:	4413      	add	r3, r2
 800ac3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac3e:	3210      	adds	r2, #16
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	440a      	add	r2, r1
 800ac44:	3204      	adds	r2, #4
 800ac46:	6812      	ldr	r2, [r2, #0]
 800ac48:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 800ac4a:	4b6b      	ldr	r3, [pc, #428]	; (800adf8 <HandleMSG+0x6a0>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2234      	movs	r2, #52	; 0x34
 800ac50:	fb02 f303 	mul.w	r3, r2, r3
 800ac54:	3310      	adds	r3, #16
 800ac56:	4a69      	ldr	r2, [pc, #420]	; (800adfc <HandleMSG+0x6a4>)
 800ac58:	4413      	add	r3, r2
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac5e:	3214      	adds	r2, #20
 800ac60:	6879      	ldr	r1, [r7, #4]
 800ac62:	440a      	add	r2, r1
 800ac64:	3204      	adds	r2, #4
 800ac66:	6812      	ldr	r2, [r2, #0]
 800ac68:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800ac6a:	4b63      	ldr	r3, [pc, #396]	; (800adf8 <HandleMSG+0x6a0>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2234      	movs	r2, #52	; 0x34
 800ac70:	fb02 f303 	mul.w	r3, r2, r3
 800ac74:	3318      	adds	r3, #24
 800ac76:	4a61      	ldr	r2, [pc, #388]	; (800adfc <HandleMSG+0x6a4>)
 800ac78:	4413      	add	r3, r2
 800ac7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac7c:	3218      	adds	r2, #24
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	440a      	add	r2, r1
 800ac82:	3204      	adds	r2, #4
 800ac84:	6812      	ldr	r2, [r2, #0]
 800ac86:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 800ac88:	4b5b      	ldr	r3, [pc, #364]	; (800adf8 <HandleMSG+0x6a0>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2234      	movs	r2, #52	; 0x34
 800ac8e:	fb02 f303 	mul.w	r3, r2, r3
 800ac92:	3318      	adds	r3, #24
 800ac94:	4a59      	ldr	r2, [pc, #356]	; (800adfc <HandleMSG+0x6a4>)
 800ac96:	4413      	add	r3, r2
 800ac98:	3304      	adds	r3, #4
 800ac9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac9c:	321c      	adds	r2, #28
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	440a      	add	r2, r1
 800aca2:	3204      	adds	r2, #4
 800aca4:	6812      	ldr	r2, [r2, #0]
 800aca6:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 800aca8:	4b53      	ldr	r3, [pc, #332]	; (800adf8 <HandleMSG+0x6a0>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2234      	movs	r2, #52	; 0x34
 800acae:	fb02 f303 	mul.w	r3, r2, r3
 800acb2:	3320      	adds	r3, #32
 800acb4:	4a51      	ldr	r2, [pc, #324]	; (800adfc <HandleMSG+0x6a4>)
 800acb6:	4413      	add	r3, r2
 800acb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acba:	3220      	adds	r2, #32
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	440a      	add	r2, r1
 800acc0:	3204      	adds	r2, #4
 800acc2:	6812      	ldr	r2, [r2, #0]
 800acc4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 800acc6:	4b4c      	ldr	r3, [pc, #304]	; (800adf8 <HandleMSG+0x6a0>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2234      	movs	r2, #52	; 0x34
 800accc:	fb02 f303 	mul.w	r3, r2, r3
 800acd0:	3320      	adds	r3, #32
 800acd2:	4a4a      	ldr	r2, [pc, #296]	; (800adfc <HandleMSG+0x6a4>)
 800acd4:	4413      	add	r3, r2
 800acd6:	3304      	adds	r3, #4
 800acd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acda:	3224      	adds	r2, #36	; 0x24
 800acdc:	6879      	ldr	r1, [r7, #4]
 800acde:	440a      	add	r2, r1
 800ace0:	3204      	adds	r2, #4
 800ace2:	6812      	ldr	r2, [r2, #0]
 800ace4:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 800ace6:	4b44      	ldr	r3, [pc, #272]	; (800adf8 <HandleMSG+0x6a0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2234      	movs	r2, #52	; 0x34
 800acec:	fb02 f303 	mul.w	r3, r2, r3
 800acf0:	3328      	adds	r3, #40	; 0x28
 800acf2:	4a42      	ldr	r2, [pc, #264]	; (800adfc <HandleMSG+0x6a4>)
 800acf4:	4413      	add	r3, r2
 800acf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acf8:	3228      	adds	r2, #40	; 0x28
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	440a      	add	r2, r1
 800acfe:	3204      	adds	r2, #4
 800ad00:	6812      	ldr	r2, [r2, #0]
 800ad02:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 800ad04:	4b3c      	ldr	r3, [pc, #240]	; (800adf8 <HandleMSG+0x6a0>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2234      	movs	r2, #52	; 0x34
 800ad0a:	fb02 f303 	mul.w	r3, r2, r3
 800ad0e:	3328      	adds	r3, #40	; 0x28
 800ad10:	4a3a      	ldr	r2, [pc, #232]	; (800adfc <HandleMSG+0x6a4>)
 800ad12:	4413      	add	r3, r2
 800ad14:	3304      	adds	r3, #4
 800ad16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad18:	322c      	adds	r2, #44	; 0x2c
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	440a      	add	r2, r1
 800ad1e:	3204      	adds	r2, #4
 800ad20:	6812      	ldr	r2, [r2, #0]
 800ad22:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 800ad24:	4b34      	ldr	r3, [pc, #208]	; (800adf8 <HandleMSG+0x6a0>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2234      	movs	r2, #52	; 0x34
 800ad2a:	fb02 f303 	mul.w	r3, r2, r3
 800ad2e:	3330      	adds	r3, #48	; 0x30
 800ad30:	4a32      	ldr	r2, [pc, #200]	; (800adfc <HandleMSG+0x6a4>)
 800ad32:	4413      	add	r3, r2
 800ad34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad36:	3230      	adds	r2, #48	; 0x30
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	440a      	add	r2, r1
 800ad3c:	3204      	adds	r2, #4
 800ad3e:	6812      	ldr	r2, [r2, #0]
 800ad40:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 800ad42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad44:	3334      	adds	r3, #52	; 0x34
 800ad46:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 800ad48:	4b2d      	ldr	r3, [pc, #180]	; (800ae00 <HandleMSG+0x6a8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	4a2c      	ldr	r2, [pc, #176]	; (800ae00 <HandleMSG+0x6a8>)
 800ad50:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 800ad52:	4b2b      	ldr	r3, [pc, #172]	; (800ae00 <HandleMSG+0x6a8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b08      	cmp	r3, #8
 800ad58:	dd02      	ble.n	800ad60 <HandleMSG+0x608>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800ad5a:	4b29      	ldr	r3, [pc, #164]	; (800ae00 <HandleMSG+0x6a8>)
 800ad5c:	2208      	movs	r2, #8
 800ad5e:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 800ad60:	4b25      	ldr	r3, [pc, #148]	; (800adf8 <HandleMSG+0x6a0>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	4a24      	ldr	r2, [pc, #144]	; (800adf8 <HandleMSG+0x6a0>)
 800ad68:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800ad6a:	4b23      	ldr	r3, [pc, #140]	; (800adf8 <HandleMSG+0x6a0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b07      	cmp	r3, #7
 800ad70:	dd02      	ble.n	800ad78 <HandleMSG+0x620>
        {
          OfflineDataWriteIndex = 0;
 800ad72:	4b21      	ldr	r3, [pc, #132]	; (800adf8 <HandleMSG+0x6a0>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 800ad78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad82:	429a      	cmp	r2, r3
 800ad84:	f4ff aeea 	bcc.w	800ab5c <HandleMSG+0x404>
        }
      }

      SensorReadRequest = 1;
 800ad88:	4b1e      	ldr	r3, [pc, #120]	; (800ae04 <HandleMSG+0x6ac>)
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff fcb0 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2203      	movs	r2, #3
 800ad98:	601a      	str	r2, [r3, #0]
      break;
 800ad9a:	e09a      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d801      	bhi.n	800ada8 <HandleMSG+0x650>
      {
        return 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	e095      	b.n	800aed4 <HandleMSG+0x77c>
      }

      if (Msg->Data[3] == 1U)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	79db      	ldrb	r3, [r3, #7]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d10e      	bne.n	800adce <HandleMSG+0x676>
      {
        UseOfflineData = 1U;
 800adb0:	4b15      	ldr	r3, [pc, #84]	; (800ae08 <HandleMSG+0x6b0>)
 800adb2:	2201      	movs	r2, #1
 800adb4:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800adb6:	4b15      	ldr	r3, [pc, #84]	; (800ae0c <HandleMSG+0x6b4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a15      	ldr	r2, [pc, #84]	; (800ae10 <HandleMSG+0x6b8>)
 800adbc:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 800adbe:	4b13      	ldr	r3, [pc, #76]	; (800ae0c <HandleMSG+0x6b4>)
 800adc0:	f04f 32ff 	mov.w	r2, #4294967295
 800adc4:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800adc6:	4813      	ldr	r0, [pc, #76]	; (800ae14 <HandleMSG+0x6bc>)
 800adc8:	f7fc fe6e 	bl	8007aa8 <HAL_TIM_Base_Stop_IT>
 800adcc:	e006      	b.n	800addc <HandleMSG+0x684>
      }
      else
      {
        UseOfflineData = 0U;
 800adce:	4b0e      	ldr	r3, [pc, #56]	; (800ae08 <HandleMSG+0x6b0>)
 800add0:	2200      	movs	r2, #0
 800add2:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 800add4:	4b0e      	ldr	r3, [pc, #56]	; (800ae10 <HandleMSG+0x6b8>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a0c      	ldr	r2, [pc, #48]	; (800ae0c <HandleMSG+0x6b4>)
 800adda:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7ff fc89 	bl	800a6f4 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7fe feb6 	bl	8009b54 <UART_SendMsg>
      break;
 800ade8:	e073      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d812      	bhi.n	800ae18 <HandleMSG+0x6c0>
      {
        return 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	e06e      	b.n	800aed4 <HandleMSG+0x77c>
 800adf6:	bf00      	nop
 800adf8:	20001b50 	.word	0x20001b50
 800adfc:	200021ec 	.word	0x200021ec
 800ae00:	20001b54 	.word	0x20001b54
 800ae04:	20001b48 	.word	0x20001b48
 800ae08:	20001b49 	.word	0x20001b49
 800ae0c:	20001b44 	.word	0x20001b44
 800ae10:	20001fe4 	.word	0x20001fe4
 800ae14:	20002098 	.word	0x20002098
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3307      	adds	r3, #7
 800ae1c:	4a2f      	ldr	r2, [pc, #188]	; (800aedc <HandleMSG+0x784>)
 800ae1e:	6812      	ldr	r2, [r2, #0]
 800ae20:	4611      	mov	r1, r2
 800ae22:	2204      	movs	r2, #4
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 fb17 	bl	800b458 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	330b      	adds	r3, #11
 800ae2e:	2201      	movs	r2, #1
 800ae30:	2130      	movs	r1, #48	; 0x30
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 fb10 	bl	800b458 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff fc5b 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2208      	movs	r2, #8
 800ae42:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7fe fe85 	bl	8009b54 <UART_SendMsg>
      break;
 800ae4a:	e042      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Calibration_Mode:
      if (Msg->Len < 5U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b04      	cmp	r3, #4
 800ae52:	d801      	bhi.n	800ae58 <HandleMSG+0x700>
      {
        return 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	e03d      	b.n	800aed4 <HandleMSG+0x77c>
      }

      switch ((uint32_t)Msg->Data[3])
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	79db      	ldrb	r3, [r3, #7]
 800ae5c:	2b10      	cmp	r3, #16
 800ae5e:	d002      	beq.n	800ae66 <HandleMSG+0x70e>
 800ae60:	2b20      	cmp	r3, #32
 800ae62:	d006      	beq.n	800ae72 <HandleMSG+0x71a>
        case GYROSCOPE_SENSOR:
          MotionDI_set_gyro_calibration_mode((MDI_cal_type_t)Msg->Data[4]);
          break;

        default:
          break;
 800ae64:	e00b      	b.n	800ae7e <HandleMSG+0x726>
          MotionDI_set_acc_calibration_mode((MDI_cal_type_t)Msg->Data[4]);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7a1b      	ldrb	r3, [r3, #8]
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 f922 	bl	800b0b4 <MotionDI_set_acc_calibration_mode>
          break;
 800ae70:	e005      	b.n	800ae7e <HandleMSG+0x726>
          MotionDI_set_gyro_calibration_mode((MDI_cal_type_t)Msg->Data[4]);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	7a1b      	ldrb	r3, [r3, #8]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 f95c 	bl	800b134 <MotionDI_set_gyro_calibration_mode>
          break;
 800ae7c:	bf00      	nop
      }

      BUILD_REPLY_HEADER(Msg);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7ff fc38 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Msg->Len = 5;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2205      	movs	r2, #5
 800ae88:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7fe fe62 	bl	8009b54 <UART_SendMsg>
      break;
 800ae90:	e01f      	b.n	800aed2 <HandleMSG+0x77a>

    case CMD_Calibration_Reset:
      if (Msg->Len < 4U)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d801      	bhi.n	800ae9e <HandleMSG+0x746>
      {
        return 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e01a      	b.n	800aed4 <HandleMSG+0x77c>
      }

      switch ((uint32_t)Msg->Data[3])
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	79db      	ldrb	r3, [r3, #7]
 800aea2:	2b10      	cmp	r3, #16
 800aea4:	d002      	beq.n	800aeac <HandleMSG+0x754>
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	d003      	beq.n	800aeb2 <HandleMSG+0x75a>
        case GYROSCOPE_SENSOR:
          MotionDI_reset_gyro_calibration();
          break;

        default:
          break;
 800aeaa:	e005      	b.n	800aeb8 <HandleMSG+0x760>
          MotionDI_reset_acc_calibration();
 800aeac:	f000 f927 	bl	800b0fe <MotionDI_reset_acc_calibration>
          break;
 800aeb0:	e002      	b.n	800aeb8 <HandleMSG+0x760>
          MotionDI_reset_gyro_calibration();
 800aeb2:	f000 f964 	bl	800b17e <MotionDI_reset_gyro_calibration>
          break;
 800aeb6:	bf00      	nop
      }

      BUILD_REPLY_HEADER(Msg);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff fc1b 	bl	800a6f4 <BUILD_REPLY_HEADER>
      Msg->Len = 4;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2204      	movs	r2, #4
 800aec2:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7fe fe45 	bl	8009b54 <UART_SendMsg>
      break;
 800aeca:	e002      	b.n	800aed2 <HandleMSG+0x77a>

    default:
      ret = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800aed0:	bf00      	nop
  }

  return ret;
 800aed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3760      	adds	r7, #96	; 0x60
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	2000122c 	.word	0x2000122c

0800aee0 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 800aee0:	b590      	push	{r4, r7, lr}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4604      	mov	r4, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	4611      	mov	r1, r2
 800aeec:	461a      	mov	r2, r3
 800aeee:	4623      	mov	r3, r4
 800aef0:	71fb      	strb	r3, [r7, #7]
 800aef2:	4603      	mov	r3, r0
 800aef4:	71bb      	strb	r3, [r7, #6]
 800aef6:	460b      	mov	r3, r1
 800aef8:	717b      	strb	r3, [r7, #5]
 800aefa:	4613      	mov	r3, r2
 800aefc:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 800af02:	79bb      	ldrb	r3, [r7, #6]
 800af04:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 800af06:	797b      	ldrb	r3, [r7, #5]
 800af08:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 800af0a:	793b      	ldrb	r3, [r7, #4]
 800af0c:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 800af0e:	f107 030c 	add.w	r3, r7, #12
 800af12:	2200      	movs	r2, #0
 800af14:	4619      	mov	r1, r3
 800af16:	4806      	ldr	r0, [pc, #24]	; (800af30 <RTC_DateRegulate+0x50>)
 800af18:	f7fc fb6e 	bl	80075f8 <HAL_RTC_SetDate>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800af22:	f7f6 fd59 	bl	80019d8 <Error_Handler>
  }
}
 800af26:	bf00      	nop
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd90      	pop	{r4, r7, pc}
 800af2e:	bf00      	nop
 800af30:	200020e4 	.word	0x200020e4

0800af34 <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	71fb      	strb	r3, [r7, #7]
 800af3e:	460b      	mov	r3, r1
 800af40:	71bb      	strb	r3, [r7, #6]
 800af42:	4613      	mov	r3, r2
 800af44:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	723b      	strb	r3, [r7, #8]
  stimestructure.Minutes        = mm;
 800af4a:	79bb      	ldrb	r3, [r7, #6]
 800af4c:	727b      	strb	r3, [r7, #9]
  stimestructure.Seconds        = ss;
 800af4e:	797b      	ldrb	r3, [r7, #5]
 800af50:	72bb      	strb	r3, [r7, #10]
  stimestructure.SubSeconds     = 0;
 800af52:	2300      	movs	r3, #0
 800af54:	60fb      	str	r3, [r7, #12]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800af56:	2300      	movs	r3, #0
 800af58:	753b      	strb	r3, [r7, #20]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800af5a:	2300      	movs	r3, #0
 800af5c:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800af5e:	2300      	movs	r3, #0
 800af60:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 800af62:	f107 0308 	add.w	r3, r7, #8
 800af66:	2200      	movs	r2, #0
 800af68:	4619      	mov	r1, r3
 800af6a:	4806      	ldr	r0, [pc, #24]	; (800af84 <RTC_TimeRegulate+0x50>)
 800af6c:	f7fc fa28 	bl	80073c0 <HAL_RTC_SetTime>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800af76:	f7f6 fd2f 	bl	80019d8 <Error_Handler>
  }
}
 800af7a:	bf00      	nop
 800af7c:	3720      	adds	r7, #32
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	200020e4 	.word	0x200020e4

0800af88 <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 800af88:	b5b0      	push	{r4, r5, r7, lr}
 800af8a:	b09e      	sub	sp, #120	; 0x78
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 800af92:	230d      	movs	r3, #13
 800af94:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 800af98:	2300      	movs	r3, #0
 800af9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,26,"FW_VERSION",%s,"BOARD_NAME};
 800af9c:	4b17      	ldr	r3, [pc, #92]	; (800affc <Get_PresentationString+0x74>)
 800af9e:	f107 0408 	add.w	r4, r7, #8
 800afa2:	461d      	mov	r5, r3
 800afa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afac:	682b      	ldr	r3, [r5, #0]
 800afae:	6023      	str	r3, [r4, #0]

  MotionDI_manager_get_version(lib_version_string, &lib_version_len);
 800afb0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800afb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afb8:	4611      	mov	r1, r2
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 f924 	bl	800b208 <MotionDI_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 800afc0:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800afc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc6:	429a      	cmp	r2, r3
 800afc8:	da06      	bge.n	800afd8 <Get_PresentationString+0x50>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 800afca:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800afce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800afd2:	4413      	add	r3, r2
 800afd4:	677b      	str	r3, [r7, #116]	; 0x74
 800afd6:	e002      	b.n	800afde <Get_PresentationString+0x56>
  }
  else
  {
    lib_version_num = lib_version_string;
 800afd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afdc:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 800afde:	f107 0208 	add.w	r2, r7, #8
 800afe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afe4:	2140      	movs	r1, #64	; 0x40
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f00b fdac 	bl	8016b44 <sniprintf>
 800afec:	4603      	mov	r3, r0
 800afee:	461a      	mov	r2, r3
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	601a      	str	r2, [r3, #0]
}
 800aff4:	bf00      	nop
 800aff6:	3778      	adds	r7, #120	; 0x78
 800aff8:	46bd      	mov	sp, r7
 800affa:	bdb0      	pop	{r4, r5, r7, pc}
 800affc:	0801c6c8 	.word	0x0801c6c8

0800b000 <MotionDI_manager_init>:
 * @brief  Initialize the MotionDI engine
 * @param  freq frequency of input data
 * @retval None
 */
void MotionDI_manager_init(float freq)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	ed87 0a01 	vstr	s0, [r7, #4]
  MotionDI_Initialize(&freq);
 800b00a:	1d3b      	adds	r3, r7, #4
 800b00c:	4618      	mov	r0, r3
 800b00e:	f006 fea3 	bl	8011d58 <MotionDI_Initialize>

  MotionDI_getKnobs(ipKnobs);
 800b012:	4b1b      	ldr	r3, [pc, #108]	; (800b080 <MotionDI_manager_init+0x80>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4618      	mov	r0, r3
 800b018:	f007 f9ee 	bl	80123f8 <MotionDI_getKnobs>

  ipKnobs->AccKnob.CalType = MDI_CAL_CONTINUOUS;
 800b01c:	4b18      	ldr	r3, [pc, #96]	; (800b080 <MotionDI_manager_init+0x80>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2202      	movs	r2, #2
 800b022:	711a      	strb	r2, [r3, #4]
  ipKnobs->GyrKnob.CalType = MDI_CAL_CONTINUOUS;
 800b024:	4b16      	ldr	r3, [pc, #88]	; (800b080 <MotionDI_manager_init+0x80>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2202      	movs	r2, #2
 800b02a:	771a      	strb	r2, [r3, #28]

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->AccOrientation);
 800b02c:	4b14      	ldr	r3, [pc, #80]	; (800b080 <MotionDI_manager_init+0x80>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	332c      	adds	r3, #44	; 0x2c
 800b032:	4618      	mov	r0, r3
 800b034:	f7ff f89e 	bl	800a174 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->GyroOrientation);
 800b038:	4b11      	ldr	r3, [pc, #68]	; (800b080 <MotionDI_manager_init+0x80>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3330      	adds	r3, #48	; 0x30
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff f8ad 	bl	800a19e <BSP_SENSOR_GYR_GetOrientation>

  ipKnobs->SFKnob.output_type = MDI_ENGINE_OUTPUT_ENU;
 800b044:	4b0e      	ldr	r3, [pc, #56]	; (800b080 <MotionDI_manager_init+0x80>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->SFKnob.modx = DECIMATION;
 800b04e:	4b0c      	ldr	r3, [pc, #48]	; (800b080 <MotionDI_manager_init+0x80>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  MotionDI_setKnobs(ipKnobs);
 800b058:	4b09      	ldr	r3, [pc, #36]	; (800b080 <MotionDI_manager_init+0x80>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f007 f9c1 	bl	80123e4 <MotionDI_setKnobs>

  AccCalMode = ipKnobs->AccKnob.CalType;
 800b062:	4b07      	ldr	r3, [pc, #28]	; (800b080 <MotionDI_manager_init+0x80>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	791a      	ldrb	r2, [r3, #4]
 800b068:	4b06      	ldr	r3, [pc, #24]	; (800b084 <MotionDI_manager_init+0x84>)
 800b06a:	701a      	strb	r2, [r3, #0]
  GyrCalMode = ipKnobs->GyrKnob.CalType;
 800b06c:	4b04      	ldr	r3, [pc, #16]	; (800b080 <MotionDI_manager_init+0x80>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	7f1a      	ldrb	r2, [r3, #28]
 800b072:	4b05      	ldr	r3, [pc, #20]	; (800b088 <MotionDI_manager_init+0x88>)
 800b074:	701a      	strb	r2, [r3, #0]
}
 800b076:	bf00      	nop
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20001248 	.word	0x20001248
 800b084:	20001b58 	.word	0x20001b58
 800b088:	20001b59 	.word	0x20001b59

0800b08c <MotionDI_get_acc_calibration_mode>:
 * @brief  Get calibration mode for accelerometer
 * @param  mode Calibration mode
 * @retval None
 */
void MotionDI_get_acc_calibration_mode(MDI_cal_type_t *mode)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  MotionDI_getKnobs(ipKnobs);
 800b094:	4b06      	ldr	r3, [pc, #24]	; (800b0b0 <MotionDI_get_acc_calibration_mode+0x24>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4618      	mov	r0, r3
 800b09a:	f007 f9ad 	bl	80123f8 <MotionDI_getKnobs>
  *mode = ipKnobs->AccKnob.CalType;
 800b09e:	4b04      	ldr	r3, [pc, #16]	; (800b0b0 <MotionDI_get_acc_calibration_mode+0x24>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	791a      	ldrb	r2, [r3, #4]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	701a      	strb	r2, [r3, #0]
}
 800b0a8:	bf00      	nop
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	20001248 	.word	0x20001248

0800b0b4 <MotionDI_set_acc_calibration_mode>:
 * @brief  Set calibration mode for accelerometer
 * @param  mode Calibration mode
 * @retval None
 */
void MotionDI_set_acc_calibration_mode(MDI_cal_type_t mode)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	71fb      	strb	r3, [r7, #7]
  MotionDI_getKnobs(ipKnobs);
 800b0be:	4b09      	ldr	r3, [pc, #36]	; (800b0e4 <MotionDI_set_acc_calibration_mode+0x30>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f007 f998 	bl	80123f8 <MotionDI_getKnobs>
  ipKnobs->AccKnob.CalType = mode;
 800b0c8:	4b06      	ldr	r3, [pc, #24]	; (800b0e4 <MotionDI_set_acc_calibration_mode+0x30>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	79fa      	ldrb	r2, [r7, #7]
 800b0ce:	711a      	strb	r2, [r3, #4]
  MotionDI_setKnobs(ipKnobs);
 800b0d0:	4b04      	ldr	r3, [pc, #16]	; (800b0e4 <MotionDI_set_acc_calibration_mode+0x30>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f007 f985 	bl	80123e4 <MotionDI_setKnobs>
}
 800b0da:	bf00      	nop
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20001248 	.word	0x20001248

0800b0e8 <MotionDI_get_acc_calibration>:
 * @brief  Get calibration parameters for accelerometer
 * @param  acc_cal Structure containing calibration data for accelerometer
 * @retval None
 */
void MotionDI_get_acc_calibration(MDI_cal_output_t *acc_cal)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  MotionDI_AccCal_getParams(acc_cal);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f007 f9cd 	bl	8012490 <MotionDI_AccCal_getParams>
}
 800b0f6:	bf00      	nop
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <MotionDI_reset_acc_calibration>:
/**
 * @brief  Reset calibration parameters for accelerometer
 * @retval None
 */
void MotionDI_reset_acc_calibration(void)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	af00      	add	r7, sp, #0
  MotionDI_AccCal_reset();
 800b102:	f007 f9e5 	bl	80124d0 <MotionDI_AccCal_reset>
}
 800b106:	bf00      	nop
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <MotionDI_get_gyro_calibration_mode>:
 * @brief  Get calibration mode for gyroscope
 * @param  mode Calibration mode
 * @retval None
 */
void MotionDI_get_gyro_calibration_mode(MDI_cal_type_t *mode)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  MotionDI_getKnobs(ipKnobs);
 800b114:	4b06      	ldr	r3, [pc, #24]	; (800b130 <MotionDI_get_gyro_calibration_mode+0x24>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4618      	mov	r0, r3
 800b11a:	f007 f96d 	bl	80123f8 <MotionDI_getKnobs>
  *mode = ipKnobs->GyrKnob.CalType;
 800b11e:	4b04      	ldr	r3, [pc, #16]	; (800b130 <MotionDI_get_gyro_calibration_mode+0x24>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	7f1a      	ldrb	r2, [r3, #28]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	701a      	strb	r2, [r3, #0]
}
 800b128:	bf00      	nop
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	20001248 	.word	0x20001248

0800b134 <MotionDI_set_gyro_calibration_mode>:
 * @brief  Set calibration mode for gyroscope
 * @param  mode Calibration mode
 * @retval None
 */
void MotionDI_set_gyro_calibration_mode(MDI_cal_type_t mode)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	71fb      	strb	r3, [r7, #7]
  MotionDI_getKnobs(ipKnobs);
 800b13e:	4b09      	ldr	r3, [pc, #36]	; (800b164 <MotionDI_set_gyro_calibration_mode+0x30>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4618      	mov	r0, r3
 800b144:	f007 f958 	bl	80123f8 <MotionDI_getKnobs>
  ipKnobs->GyrKnob.CalType = mode;
 800b148:	4b06      	ldr	r3, [pc, #24]	; (800b164 <MotionDI_set_gyro_calibration_mode+0x30>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	79fa      	ldrb	r2, [r7, #7]
 800b14e:	771a      	strb	r2, [r3, #28]
  MotionDI_setKnobs(ipKnobs);
 800b150:	4b04      	ldr	r3, [pc, #16]	; (800b164 <MotionDI_set_gyro_calibration_mode+0x30>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f007 f945 	bl	80123e4 <MotionDI_setKnobs>
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	20001248 	.word	0x20001248

0800b168 <MotionDI_get_gyro_calibration>:
 * @brief  Get calibration parameters for gyroscope
 * @param  gyro_cal Structure containing calibration data for gyroscope
 * @retval None
 */
void MotionDI_get_gyro_calibration(MDI_cal_output_t *gyro_cal)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  MotionDI_GyrCal_getParams(gyro_cal);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f007 fa23 	bl	80125bc <MotionDI_GyrCal_getParams>
}
 800b176:	bf00      	nop
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <MotionDI_reset_gyro_calibration>:
/**
 * @brief  Reset calibration parameters for gyroscope
 * @retval None
 */
void MotionDI_reset_gyro_calibration(void)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	af00      	add	r7, sp, #0
  MotionDI_GyrCal_reset();
 800b182:	f007 fa3f 	bl	8012604 <MotionDI_GyrCal_reset>
}
 800b186:	bf00      	nop
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <MotionDI_manager_run>:
 * @param  data_in  Structure containing input data
 * @param  data_out Structure containing output data
 * @retval None
 */
void MotionDI_manager_run(MDI_input_t *data_in, MDI_output_t *data_out)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  if (discardedCount == sampleToDiscard)
 800b196:	4b19      	ldr	r3, [pc, #100]	; (800b1fc <MotionDI_manager_run+0x70>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	4b19      	ldr	r3, [pc, #100]	; (800b200 <MotionDI_manager_run+0x74>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d104      	bne.n	800b1ac <MotionDI_manager_run+0x20>
  {
    MotionDI_update(data_out, data_in);
 800b1a2:	6879      	ldr	r1, [r7, #4]
 800b1a4:	6838      	ldr	r0, [r7, #0]
 800b1a6:	f007 fa63 	bl	8012670 <MotionDI_update>
    float_array_set(data_out->quaternion, 0, MDI_QNUM_AXES);
    float_array_set(data_out->rotation, 0, MDI_NUM_AXES);
    float_array_set(data_out->gravity, 0, MDI_NUM_AXES);
    float_array_set(data_out->linear_acceleration, 0, MDI_NUM_AXES);
  }
}
 800b1aa:	e023      	b.n	800b1f4 <MotionDI_manager_run+0x68>
    discardedCount++;
 800b1ac:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <MotionDI_manager_run+0x70>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	4a12      	ldr	r2, [pc, #72]	; (800b1fc <MotionDI_manager_run+0x70>)
 800b1b4:	6013      	str	r3, [r2, #0]
    float_array_set(data_out->quaternion, 0, MDI_QNUM_AXES);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	2104      	movs	r1, #4
 800b1bc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800b204 <MotionDI_manager_run+0x78>
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 f831 	bl	800b228 <float_array_set>
    float_array_set(data_out->rotation, 0, MDI_NUM_AXES);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2103      	movs	r1, #3
 800b1ca:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b204 <MotionDI_manager_run+0x78>
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f82a 	bl	800b228 <float_array_set>
    float_array_set(data_out->gravity, 0, MDI_NUM_AXES);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	331c      	adds	r3, #28
 800b1d8:	2103      	movs	r1, #3
 800b1da:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800b204 <MotionDI_manager_run+0x78>
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 f822 	bl	800b228 <float_array_set>
    float_array_set(data_out->linear_acceleration, 0, MDI_NUM_AXES);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	3328      	adds	r3, #40	; 0x28
 800b1e8:	2103      	movs	r1, #3
 800b1ea:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800b204 <MotionDI_manager_run+0x78>
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 f81a 	bl	800b228 <float_array_set>
}
 800b1f4:	bf00      	nop
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	2000201c 	.word	0x2000201c
 800b200:	2000124c 	.word	0x2000124c
 800b204:	00000000 	.word	0x00000000

0800b208 <MotionDI_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionDI_manager_get_version(char *version, int *length)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  *length = (int)MotionDI_GetLibVersion(version);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f00a fdb0 	bl	8015d78 <MotionDI_GetLibVersion>
 800b218:	4603      	mov	r3, r0
 800b21a:	461a      	mov	r2, r3
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	601a      	str	r2, [r3, #0]
}
 800b220:	bf00      	nop
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <float_array_set>:
 * @param  value Set to this value
 * @param  count Number of items to be set
 * @retval None
 */
static void float_array_set(float array[], float value, uint32_t count)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	ed87 0a02 	vstr	s0, [r7, #8]
 800b234:	6079      	str	r1, [r7, #4]
  for (uint32_t i = 0; i < count; i++)
 800b236:	2300      	movs	r3, #0
 800b238:	617b      	str	r3, [r7, #20]
 800b23a:	e008      	b.n	800b24e <float_array_set+0x26>
  {
    array[i] = value;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4413      	add	r3, r2
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < count; i++)
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	3301      	adds	r3, #1
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	429a      	cmp	r2, r3
 800b254:	d3f2      	bcc.n	800b23c <float_array_set+0x14>
  }
}
 800b256:	bf00      	nop
 800b258:	bf00      	nop
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 800b270:	2302      	movs	r3, #2
 800b272:	60fb      	str	r3, [r7, #12]

  switch (Source)
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	2bf0      	cmp	r3, #240	; 0xf0
 800b278:	d002      	beq.n	800b280 <ByteStuffCopyByte+0x1c>
 800b27a:	2bf1      	cmp	r3, #241	; 0xf1
 800b27c:	d008      	beq.n	800b290 <ByteStuffCopyByte+0x2c>
 800b27e:	e00f      	b.n	800b2a0 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	22f1      	movs	r2, #241	; 0xf1
 800b284:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3301      	adds	r3, #1
 800b28a:	22f2      	movs	r2, #242	; 0xf2
 800b28c:	701a      	strb	r2, [r3, #0]
      break;
 800b28e:	e00d      	b.n	800b2ac <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	22f1      	movs	r2, #241	; 0xf1
 800b294:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3301      	adds	r3, #1
 800b29a:	22f1      	movs	r2, #241	; 0xf1
 800b29c:	701a      	strb	r2, [r3, #0]
      break;
 800b29e:	e005      	b.n	800b2ac <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	701a      	strb	r2, [r3, #0]
      ret = 1;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	60fb      	str	r3, [r7, #12]
      break;
 800b2aa:	bf00      	nop
  }

  return ret;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b084      	sub	sp, #16
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
 800b2c2:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e011      	b.n	800b2f2 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	18d0      	adds	r0, r2, r3
 800b2d4:	683a      	ldr	r2, [r7, #0]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4413      	add	r3, r2
 800b2da:	3304      	adds	r3, #4
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	f7ff ffc0 	bl	800b264 <ByteStuffCopyByte>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d3e8      	bcc.n	800b2ce <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	4413      	add	r3, r2
 800b302:	22f0      	movs	r2, #240	; 0xf0
 800b304:	701a      	strb	r2, [r3, #0]
  count++;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	3301      	adds	r3, #1
 800b30a:	60bb      	str	r3, [r7, #8]
  return count;
 800b30c:	68bb      	ldr	r3, [r7, #8]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 800b316:	b480      	push	{r7}
 800b318:	b083      	sub	sp, #12
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	4603      	mov	r3, r0
 800b31e:	603a      	str	r2, [r7, #0]
 800b320:	71fb      	strb	r3, [r7, #7]
 800b322:	460b      	mov	r3, r1
 800b324:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 800b326:	79fb      	ldrb	r3, [r7, #7]
 800b328:	2bf1      	cmp	r3, #241	; 0xf1
 800b32a:	d111      	bne.n	800b350 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 800b32c:	79bb      	ldrb	r3, [r7, #6]
 800b32e:	2bf1      	cmp	r3, #241	; 0xf1
 800b330:	d104      	bne.n	800b33c <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	22f1      	movs	r2, #241	; 0xf1
 800b336:	701a      	strb	r2, [r3, #0]
      return 2;
 800b338:	2302      	movs	r3, #2
 800b33a:	e00d      	b.n	800b358 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 800b33c:	79bb      	ldrb	r3, [r7, #6]
 800b33e:	2bf2      	cmp	r3, #242	; 0xf2
 800b340:	d104      	bne.n	800b34c <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	22f0      	movs	r2, #240	; 0xf0
 800b346:	701a      	strb	r2, [r3, #0]
      return 2;
 800b348:	2302      	movs	r3, #2
 800b34a:	e005      	b.n	800b358 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 800b34c:	2300      	movs	r3, #0
 800b34e:	e003      	b.n	800b358 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	79fa      	ldrb	r2, [r7, #7]
 800b354:	701a      	strb	r2, [r3, #0]
    return 1;
 800b356:	2301      	movs	r3, #1
  }
}
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800b370:	2300      	movs	r3, #0
 800b372:	60bb      	str	r3, [r7, #8]
 800b374:	e00a      	b.n	800b38c <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	4413      	add	r3, r2
 800b37c:	3304      	adds	r3, #4
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	7bfa      	ldrb	r2, [r7, #15]
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	3301      	adds	r3, #1
 800b38a:	60bb      	str	r3, [r7, #8]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	429a      	cmp	r2, r3
 800b394:	d3ef      	bcc.n	800b376 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	4413      	add	r3, r2
 800b39c:	3304      	adds	r3, #4
 800b39e:	7bfa      	ldrb	r2, [r7, #15]
 800b3a0:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	601a      	str	r2, [r3, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	60bb      	str	r3, [r7, #8]
 800b3c8:	e00a      	b.n	800b3e0 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	781a      	ldrb	r2, [r3, #0]
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	60bb      	str	r3, [r7, #8]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d3ef      	bcc.n	800b3ca <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	1e5a      	subs	r2, r3, #1
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	bf0c      	ite	eq
 800b3fa:	2301      	moveq	r3, #1
 800b3fc:	2300      	movne	r3, #0
 800b3fe:	b2db      	uxtb	r3, r3
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	3b01      	subs	r3, #1
 800b41a:	603b      	str	r3, [r7, #0]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	4413      	add	r3, r2
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800b426:	e00d      	b.n	800b444 <Deserialize+0x38>
  {
    app <<= 8;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	021b      	lsls	r3, r3, #8
 800b42c:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	3b01      	subs	r3, #1
 800b432:	603b      	str	r3, [r7, #0]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	4413      	add	r3, r2
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	461a      	mov	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	4413      	add	r3, r2
 800b442:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1ee      	bne.n	800b428 <Deserialize+0x1c>
  }

  return app;
 800b44a:	68fb      	ldr	r3, [r7, #12]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 800b464:	2300      	movs	r3, #0
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	e00f      	b.n	800b48a <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	4413      	add	r3, r2
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	b2d2      	uxtb	r2, r2
 800b478:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	0a1b      	lsrs	r3, r3, #8
 800b47e:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	3301      	adds	r3, #1
 800b488:	617b      	str	r3, [r7, #20]
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d3eb      	bcc.n	800b46a <Serialize_s32+0x12>
  }
}
 800b492:	bf00      	nop
 800b494:	bf00      	nop
 800b496:	371c      	adds	r7, #28
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <iNemoEngine_gbias_init>:
 800b4a0:	4b1f      	ldr	r3, [pc, #124]	; (800b520 <iNemoEngine_gbias_init+0x80>)
 800b4a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b4a6:	4a1f      	ldr	r2, [pc, #124]	; (800b524 <iNemoEngine_gbias_init+0x84>)
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	481f      	ldr	r0, [pc, #124]	; (800b528 <iNemoEngine_gbias_init+0x88>)
 800b4ac:	b430      	push	{r4, r5}
 800b4ae:	4c1f      	ldr	r4, [pc, #124]	; (800b52c <iNemoEngine_gbias_init+0x8c>)
 800b4b0:	4d1f      	ldr	r5, [pc, #124]	; (800b530 <iNemoEngine_gbias_init+0x90>)
 800b4b2:	601c      	str	r4, [r3, #0]
 800b4b4:	605a      	str	r2, [r3, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	4c1e      	ldr	r4, [pc, #120]	; (800b534 <iNemoEngine_gbias_init+0x94>)
 800b4ba:	609d      	str	r5, [r3, #8]
 800b4bc:	60dc      	str	r4, [r3, #12]
 800b4be:	ed83 0a04 	vstr	s0, [r3, #16]
 800b4c2:	6158      	str	r0, [r3, #20]
 800b4c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800b4c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b4cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b4d0:	655a      	str	r2, [r3, #84]	; 0x54
 800b4d2:	661a      	str	r2, [r3, #96]	; 0x60
 800b4d4:	659a      	str	r2, [r3, #88]	; 0x58
 800b4d6:	665a      	str	r2, [r3, #100]	; 0x64
 800b4d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800b4da:	669a      	str	r2, [r3, #104]	; 0x68
 800b4dc:	671a      	str	r2, [r3, #112]	; 0x70
 800b4de:	67da      	str	r2, [r3, #124]	; 0x7c
 800b4e0:	675a      	str	r2, [r3, #116]	; 0x74
 800b4e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b4e6:	679a      	str	r2, [r3, #120]	; 0x78
 800b4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b4ec:	61da      	str	r2, [r3, #28]
 800b4ee:	629a      	str	r2, [r3, #40]	; 0x28
 800b4f0:	621a      	str	r2, [r3, #32]
 800b4f2:	62da      	str	r2, [r3, #44]	; 0x2c
 800b4f4:	625a      	str	r2, [r3, #36]	; 0x24
 800b4f6:	631a      	str	r2, [r3, #48]	; 0x30
 800b4f8:	f8a3 1088 	strh.w	r1, [r3, #136]	; 0x88
 800b4fc:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 800b500:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
 800b504:	8319      	strh	r1, [r3, #24]
 800b506:	8699      	strh	r1, [r3, #52]	; 0x34
 800b508:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
 800b50c:	639a      	str	r2, [r3, #56]	; 0x38
 800b50e:	645a      	str	r2, [r3, #68]	; 0x44
 800b510:	63da      	str	r2, [r3, #60]	; 0x3c
 800b512:	649a      	str	r2, [r3, #72]	; 0x48
 800b514:	641a      	str	r2, [r3, #64]	; 0x40
 800b516:	64da      	str	r2, [r3, #76]	; 0x4c
 800b518:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 800b51c:	bc30      	pop	{r4, r5}
 800b51e:	4770      	bx	lr
 800b520:	20001448 	.word	0x20001448
 800b524:	3e8a3d71 	.word	0x3e8a3d71
 800b528:	41700000 	.word	0x41700000
 800b52c:	3ab20043 	.word	0x3ab20043
 800b530:	3ea8f5c3 	.word	0x3ea8f5c3
 800b534:	3d09c927 	.word	0x3d09c927

0800b538 <rotVect>:
 800b538:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b53c:	ed92 6a01 	vldr	s12, [r2, #4]
 800b540:	ee07 3a90 	vmov	s15, r3
 800b544:	f991 3000 	ldrsb.w	r3, [r1]
 800b548:	edd2 5a00 	vldr	s11, [r2]
 800b54c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b550:	ee06 3a90 	vmov	s13, r3
 800b554:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b558:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b55c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b560:	ee07 3a10 	vmov	s14, r3
 800b564:	ed92 6a02 	vldr	s12, [r2, #8]
 800b568:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b56c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b570:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b574:	edc0 7a00 	vstr	s15, [r0]
 800b578:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800b57c:	ed92 6a01 	vldr	s12, [r2, #4]
 800b580:	ee07 3a90 	vmov	s15, r3
 800b584:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b588:	edd2 5a00 	vldr	s11, [r2]
 800b58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b590:	ee06 3a90 	vmov	s13, r3
 800b594:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800b598:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b59c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b5a0:	ee07 3a10 	vmov	s14, r3
 800b5a4:	ed92 6a02 	vldr	s12, [r2, #8]
 800b5a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5ac:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b5b0:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b5b4:	edc0 7a01 	vstr	s15, [r0, #4]
 800b5b8:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800b5bc:	ed92 6a01 	vldr	s12, [r2, #4]
 800b5c0:	ee07 3a90 	vmov	s15, r3
 800b5c4:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800b5c8:	edd2 5a00 	vldr	s11, [r2]
 800b5cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5d0:	ee06 3a90 	vmov	s13, r3
 800b5d4:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800b5d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b5dc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b5e0:	ee07 3a10 	vmov	s14, r3
 800b5e4:	ed92 6a02 	vldr	s12, [r2, #8]
 800b5e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5ec:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b5f0:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b5f4:	edc0 7a02 	vstr	s15, [r0, #8]
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop

0800b5fc <m_mldivide>:
 800b5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b600:	b099      	sub	sp, #100	; 0x64
 800b602:	4606      	mov	r6, r0
 800b604:	460d      	mov	r5, r1
 800b606:	4614      	mov	r4, r2
 800b608:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
 800b60c:	4607      	mov	r7, r0
 800b60e:	f100 0820 	add.w	r8, r0, #32
 800b612:	6838      	ldr	r0, [r7, #0]
 800b614:	3710      	adds	r7, #16
 800b616:	f857 1c0c 	ldr.w	r1, [r7, #-12]
 800b61a:	46f4      	mov	ip, lr
 800b61c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800b620:	f10e 0e10 	add.w	lr, lr, #16
 800b624:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800b628:	4547      	cmp	r7, r8
 800b62a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b62e:	d1f0      	bne.n	800b612 <m_mldivide+0x16>
 800b630:	edd6 7a00 	vldr	s15, [r6]
 800b634:	ed96 7a01 	vldr	s14, [r6, #4]
 800b638:	eef0 7ae7 	vabs.f32	s15, s15
 800b63c:	6838      	ldr	r0, [r7, #0]
 800b63e:	eeb0 7ac7 	vabs.f32	s14, s14
 800b642:	f8ce 0000 	str.w	r0, [lr]
 800b646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64e:	f140 8173 	bpl.w	800b938 <m_mldivide+0x33c>
 800b652:	2300      	movs	r3, #0
 800b654:	f04f 0e04 	mov.w	lr, #4
 800b658:	eef0 7a47 	vmov.f32	s15, s14
 800b65c:	f04f 0c07 	mov.w	ip, #7
 800b660:	4698      	mov	r8, r3
 800b662:	9301      	str	r3, [sp, #4]
 800b664:	4670      	mov	r0, lr
 800b666:	2306      	movs	r3, #6
 800b668:	2203      	movs	r2, #3
 800b66a:	f04f 0901 	mov.w	r9, #1
 800b66e:	9303      	str	r3, [sp, #12]
 800b670:	ed96 7a02 	vldr	s14, [r6, #8]
 800b674:	eeb0 7ac7 	vabs.f32	s14, s14
 800b678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b680:	f340 8154 	ble.w	800b92c <m_mldivide+0x330>
 800b684:	2307      	movs	r3, #7
 800b686:	f04f 0c08 	mov.w	ip, #8
 800b68a:	2204      	movs	r2, #4
 800b68c:	2100      	movs	r1, #0
 800b68e:	9303      	str	r3, [sp, #12]
 800b690:	f04f 0a06 	mov.w	sl, #6
 800b694:	2301      	movs	r3, #1
 800b696:	4660      	mov	r0, ip
 800b698:	4690      	mov	r8, r2
 800b69a:	2703      	movs	r7, #3
 800b69c:	f04f 0e05 	mov.w	lr, #5
 800b6a0:	f04f 0902 	mov.w	r9, #2
 800b6a4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b6a8:	44b0      	add	r8, r6
 800b6aa:	4406      	add	r6, r0
 800b6ac:	ab18      	add	r3, sp, #96	; 0x60
 800b6ae:	9802      	ldr	r0, [sp, #8]
 800b6b0:	edd8 6a00 	vldr	s13, [r8]
 800b6b4:	ed96 7a00 	vldr	s14, [r6]
 800b6b8:	eb03 0b80 	add.w	fp, r3, r0, lsl #2
 800b6bc:	9901      	ldr	r1, [sp, #4]
 800b6be:	eb03 088e 	add.w	r8, r3, lr, lsl #2
 800b6c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6c6:	ea4f 008e 	mov.w	r0, lr, lsl #2
 800b6ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b6ce:	00be      	lsls	r6, r7, #2
 800b6d0:	900c      	str	r0, [sp, #48]	; 0x30
 800b6d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800b6d6:	ea4f 008c 	mov.w	r0, ip, lsl #2
 800b6da:	9604      	str	r6, [sp, #16]
 800b6dc:	930a      	str	r3, [sp, #40]	; 0x28
 800b6de:	ab18      	add	r3, sp, #96	; 0x60
 800b6e0:	9e03      	ldr	r6, [sp, #12]
 800b6e2:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800b6e6:	900d      	str	r0, [sp, #52]	; 0x34
 800b6e8:	eb03 078c 	add.w	r7, r3, ip, lsl #2
 800b6ec:	ea4f 008a 	mov.w	r0, sl, lsl #2
 800b6f0:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 800b6f4:	eb03 068a 	add.w	r6, r3, sl, lsl #2
 800b6f8:	9005      	str	r0, [sp, #20]
 800b6fa:	eb03 0a89 	add.w	sl, r3, r9, lsl #2
 800b6fe:	9801      	ldr	r0, [sp, #4]
 800b700:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800b704:	0080      	lsls	r0, r0, #2
 800b706:	930b      	str	r3, [sp, #44]	; 0x2c
 800b708:	ed41 7a09 	vstr	s15, [r1, #-36]	; 0xffffffdc
 800b70c:	ed5a 7a09 	vldr	s15, [sl, #-36]	; 0xffffffdc
 800b710:	ed1b 7a09 	vldr	s14, [fp, #-36]	; 0xffffffdc
 800b714:	9006      	str	r0, [sp, #24]
 800b716:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b71a:	9802      	ldr	r0, [sp, #8]
 800b71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b71e:	0080      	lsls	r0, r0, #2
 800b720:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b724:	9903      	ldr	r1, [sp, #12]
 800b726:	0090      	lsls	r0, r2, #2
 800b728:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 800b72c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b72e:	9007      	str	r0, [sp, #28]
 800b730:	ed4b 6a09 	vstr	s13, [fp, #-36]	; 0xffffffdc
 800b734:	ed11 6a09 	vldr	s12, [r1, #-36]	; 0xffffffdc
 800b738:	ed18 7a09 	vldr	s14, [r8, #-36]	; 0xffffffdc
 800b73c:	ed53 7a09 	vldr	s15, [r3, #-36]	; 0xffffffdc
 800b740:	eee6 7a47 	vfms.f32	s15, s12, s14
 800b744:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
 800b748:	ed18 7a09 	vldr	s14, [r8, #-36]	; 0xffffffdc
 800b74c:	ed5e 7a09 	vldr	s15, [lr, #-36]	; 0xffffffdc
 800b750:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b754:	ed4e 7a09 	vstr	s15, [lr, #-36]	; 0xffffffdc
 800b758:	eef0 7ae7 	vabs.f32	s15, s15
 800b75c:	ed57 5a09 	vldr	s11, [r7, #-36]	; 0xffffffdc
 800b760:	ed1c 7a09 	vldr	s14, [ip, #-36]	; 0xffffffdc
 800b764:	eea6 7a65 	vfms.f32	s14, s12, s11
 800b768:	ed0c 7a09 	vstr	s14, [ip, #-36]	; 0xffffffdc
 800b76c:	ed17 6a09 	vldr	s12, [r7, #-36]	; 0xffffffdc
 800b770:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800b774:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800b778:	ed06 7a09 	vstr	s14, [r6, #-36]	; 0xffffffdc
 800b77c:	ed13 7a09 	vldr	s14, [r3, #-36]	; 0xffffffdc
 800b780:	eeb0 7ac7 	vabs.f32	s14, s14
 800b784:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b78c:	dd10      	ble.n	800b7b0 <m_mldivide+0x1b4>
 800b78e:	0093      	lsls	r3, r2, #2
 800b790:	9903      	ldr	r1, [sp, #12]
 800b792:	9f04      	ldr	r7, [sp, #16]
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	008b      	lsls	r3, r1, #2
 800b798:	f8dd a014 	ldr.w	sl, [sp, #20]
 800b79c:	9305      	str	r3, [sp, #20]
 800b79e:	9707      	str	r7, [sp, #28]
 800b7a0:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
 800b7a4:	0083      	lsls	r3, r0, #2
 800b7a6:	9601      	str	r6, [sp, #4]
 800b7a8:	9002      	str	r0, [sp, #8]
 800b7aa:	9308      	str	r3, [sp, #32]
 800b7ac:	00b3      	lsls	r3, r6, #2
 800b7ae:	9306      	str	r3, [sp, #24]
 800b7b0:	ab18      	add	r3, sp, #96	; 0x60
 800b7b2:	9a04      	ldr	r2, [sp, #16]
 800b7b4:	9905      	ldr	r1, [sp, #20]
 800b7b6:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
 800b7ba:	441a      	add	r2, r3
 800b7bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b7be:	4419      	add	r1, r3
 800b7c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7c4:	4617      	mov	r7, r2
 800b7c6:	9a07      	ldr	r2, [sp, #28]
 800b7c8:	441e      	add	r6, r3
 800b7ca:	441a      	add	r2, r3
 800b7cc:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800b7d0:	9605      	str	r6, [sp, #20]
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	eb03 020a 	add.w	r2, r3, sl
 800b7d8:	468a      	mov	sl, r1
 800b7da:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b7dc:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 800b7e0:	4419      	add	r1, r3
 800b7e2:	ee86 2aa7 	vdiv.f32	s4, s13, s15
 800b7e6:	9104      	str	r1, [sp, #16]
 800b7e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7ea:	186e      	adds	r6, r5, r1
 800b7ec:	1859      	adds	r1, r3, r1
 800b7ee:	9107      	str	r1, [sp, #28]
 800b7f0:	9906      	ldr	r1, [sp, #24]
 800b7f2:	edd6 6a00 	vldr	s13, [r6]
 800b7f6:	440b      	add	r3, r1
 800b7f8:	186e      	adds	r6, r5, r1
 800b7fa:	9908      	ldr	r1, [sp, #32]
 800b7fc:	9303      	str	r3, [sp, #12]
 800b7fe:	eb05 0e01 	add.w	lr, r5, r1
 800b802:	eb0c 0801 	add.w	r8, ip, r1
 800b806:	9b01      	ldr	r3, [sp, #4]
 800b808:	eb05 0c89 	add.w	ip, r5, r9, lsl #2
 800b80c:	9902      	ldr	r1, [sp, #8]
 800b80e:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 800b812:	edc4 6a00 	vstr	s13, [r4]
 800b816:	ed07 2a09 	vstr	s4, [r7, #-36]	; 0xffffffdc
 800b81a:	eb05 0b81 	add.w	fp, r5, r1, lsl #2
 800b81e:	ed52 5a09 	vldr	s11, [r2, #-36]	; 0xffffffdc
 800b822:	ed5a 7a09 	vldr	s15, [sl, #-36]	; 0xffffffdc
 800b826:	9d03      	ldr	r5, [sp, #12]
 800b828:	eee2 7a65 	vfms.f32	s15, s4, s11
 800b82c:	ed96 6a00 	vldr	s12, [r6]
 800b830:	f8cd 9004 	str.w	r9, [sp, #4]
 800b834:	ed4a 7a09 	vstr	s15, [sl, #-36]	; 0xffffffdc
 800b838:	eec7 2a27 	vdiv.f32	s5, s14, s15
 800b83c:	ed15 1a09 	vldr	s2, [r5, #-36]	; 0xffffffdc
 800b840:	ed50 5a09 	vldr	s11, [r0, #-36]	; 0xffffffdc
 800b844:	9807      	ldr	r0, [sp, #28]
 800b846:	ed12 3a09 	vldr	s6, [r2, #-36]	; 0xffffffdc
 800b84a:	eea1 6a66 	vfms.f32	s12, s2, s13
 800b84e:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 800b852:	9a04      	ldr	r2, [sp, #16]
 800b854:	ee87 4a25 	vdiv.f32	s8, s14, s11
 800b858:	ed58 1a09 	vldr	s3, [r8, #-36]	; 0xffffffdc
 800b85c:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 800b860:	9a05      	ldr	r2, [sp, #20]
 800b862:	ed84 6a01 	vstr	s12, [r4, #4]
 800b866:	ee87 5a27 	vdiv.f32	s10, s14, s15
 800b86a:	edde 7a00 	vldr	s15, [lr]
 800b86e:	ed52 4a09 	vldr	s9, [r2, #-36]	; 0xffffffdc
 800b872:	eee1 7ae6 	vfms.f32	s15, s3, s13
 800b876:	eee2 7a46 	vfms.f32	s15, s4, s12
 800b87a:	ee62 7aa7 	vmul.f32	s15, s5, s15
 800b87e:	eea3 6a67 	vfms.f32	s12, s6, s15
 800b882:	edc4 7a02 	vstr	s15, [r4, #8]
 800b886:	eee3 6ae7 	vfms.f32	s13, s7, s15
 800b88a:	ee24 6a06 	vmul.f32	s12, s8, s12
 800b88e:	eee4 6ac6 	vfms.f32	s13, s9, s12
 800b892:	ed84 6a01 	vstr	s12, [r4, #4]
 800b896:	ee65 6a26 	vmul.f32	s13, s10, s13
 800b89a:	edc4 6a00 	vstr	s13, [r4]
 800b89e:	eddc 6a03 	vldr	s13, [ip, #12]
 800b8a2:	edc4 6a03 	vstr	s13, [r4, #12]
 800b8a6:	ed99 6a03 	vldr	s12, [r9, #12]
 800b8aa:	eea1 6a66 	vfms.f32	s12, s2, s13
 800b8ae:	ed84 6a04 	vstr	s12, [r4, #16]
 800b8b2:	eddb 5a03 	vldr	s11, [fp, #12]
 800b8b6:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800b8ba:	eee2 5a46 	vfms.f32	s11, s4, s12
 800b8be:	ee62 5aa5 	vmul.f32	s11, s5, s11
 800b8c2:	eea3 6a65 	vfms.f32	s12, s6, s11
 800b8c6:	edc4 5a05 	vstr	s11, [r4, #20]
 800b8ca:	eee3 6ae5 	vfms.f32	s13, s7, s11
 800b8ce:	ee24 6a06 	vmul.f32	s12, s8, s12
 800b8d2:	eee4 6ac6 	vfms.f32	s13, s9, s12
 800b8d6:	ed84 6a04 	vstr	s12, [r4, #16]
 800b8da:	ee65 6a26 	vmul.f32	s13, s10, s13
 800b8de:	edc4 6a03 	vstr	s13, [r4, #12]
 800b8e2:	eddc 7a06 	vldr	s15, [ip, #24]
 800b8e6:	edc4 7a06 	vstr	s15, [r4, #24]
 800b8ea:	ed99 7a06 	vldr	s14, [r9, #24]
 800b8ee:	eea7 7ac1 	vfms.f32	s14, s15, s2
 800b8f2:	ed84 7a07 	vstr	s14, [r4, #28]
 800b8f6:	eddb 6a06 	vldr	s13, [fp, #24]
 800b8fa:	eee7 6ae1 	vfms.f32	s13, s15, s3
 800b8fe:	eee2 6a47 	vfms.f32	s13, s4, s14
 800b902:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800b906:	eea6 7ac3 	vfms.f32	s14, s13, s6
 800b90a:	edc4 6a08 	vstr	s13, [r4, #32]
 800b90e:	eee6 7ae3 	vfms.f32	s15, s13, s7
 800b912:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b916:	eee7 7a64 	vfms.f32	s15, s14, s9
 800b91a:	ed84 7a07 	vstr	s14, [r4, #28]
 800b91e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b922:	edc4 7a06 	vstr	s15, [r4, #24]
 800b926:	b019      	add	sp, #100	; 0x64
 800b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92c:	2302      	movs	r3, #2
 800b92e:	f04f 0a08 	mov.w	sl, #8
 800b932:	2705      	movs	r7, #5
 800b934:	9302      	str	r3, [sp, #8]
 800b936:	e6b7      	b.n	800b6a8 <m_mldivide+0xac>
 800b938:	2307      	movs	r3, #7
 800b93a:	2204      	movs	r2, #4
 800b93c:	f04f 0900 	mov.w	r9, #0
 800b940:	f04f 0c06 	mov.w	ip, #6
 800b944:	9303      	str	r3, [sp, #12]
 800b946:	2301      	movs	r3, #1
 800b948:	4690      	mov	r8, r2
 800b94a:	4648      	mov	r0, r9
 800b94c:	f04f 0e03 	mov.w	lr, #3
 800b950:	9301      	str	r3, [sp, #4]
 800b952:	e68d      	b.n	800b670 <m_mldivide+0x74>

0800b954 <m_qmult_eml>:
 800b954:	ed90 2a01 	vldr	s4, [r0, #4]
 800b958:	edd1 4a02 	vldr	s9, [r1, #8]
 800b95c:	edd1 5a03 	vldr	s11, [r1, #12]
 800b960:	edd0 2a02 	vldr	s5, [r0, #8]
 800b964:	ee22 6a24 	vmul.f32	s12, s4, s9
 800b968:	edd1 3a00 	vldr	s7, [r1]
 800b96c:	ee22 7aa5 	vmul.f32	s14, s5, s11
 800b970:	ed90 3a00 	vldr	s6, [r0]
 800b974:	ee62 6aa3 	vmul.f32	s13, s5, s7
 800b978:	ed91 4a01 	vldr	s8, [r1, #4]
 800b97c:	ee64 7ae2 	vnmul.f32	s15, s9, s5
 800b980:	ed90 5a03 	vldr	s10, [r0, #12]
 800b984:	eea3 6a25 	vfma.f32	s12, s6, s11
 800b988:	eee2 6a25 	vfma.f32	s13, s4, s11
 800b98c:	eea3 7ac2 	vfms.f32	s14, s7, s4
 800b990:	eee4 7a42 	vfms.f32	s15, s8, s4
 800b994:	eea4 6a62 	vfms.f32	s12, s8, s5
 800b998:	eee4 6ac3 	vfms.f32	s13, s9, s6
 800b99c:	eea3 7a04 	vfma.f32	s14, s6, s8
 800b9a0:	eee3 7ac3 	vfms.f32	s15, s7, s6
 800b9a4:	eea5 6a23 	vfma.f32	s12, s10, s7
 800b9a8:	eee5 6a04 	vfma.f32	s13, s10, s8
 800b9ac:	eea5 7a24 	vfma.f32	s14, s10, s9
 800b9b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b9b4:	ed82 6a00 	vstr	s12, [r2]
 800b9b8:	edc2 6a01 	vstr	s13, [r2, #4]
 800b9bc:	ed82 7a02 	vstr	s14, [r2, #8]
 800b9c0:	edc2 7a03 	vstr	s15, [r2, #12]
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop

0800b9c8 <m_q2dcm_eml>:
 800b9c8:	b510      	push	{r4, lr}
 800b9ca:	ed2d 8b06 	vpush	{d8-d10}
 800b9ce:	ed90 aa03 	vldr	s20, [r0, #12]
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	ee6a 9a0a 	vmul.f32	s19, s20, s20
 800b9dc:	2100      	movs	r1, #0
 800b9de:	ed93 9a02 	vldr	s18, [r3, #8]
 800b9e2:	1d20      	adds	r0, r4, #4
 800b9e4:	ed93 8a00 	vldr	s16, [r3]
 800b9e8:	edd3 8a01 	vldr	s17, [r3, #4]
 800b9ec:	f00a fa22 	bl	8015e34 <memset>
 800b9f0:	eef0 5a69 	vmov.f32	s11, s19
 800b9f4:	eeb0 6a69 	vmov.f32	s12, s19
 800b9f8:	eee9 9a09 	vfma.f32	s19, s18, s18
 800b9fc:	eee8 5a08 	vfma.f32	s11, s16, s16
 800ba00:	eea8 6aa8 	vfma.f32	s12, s17, s17
 800ba04:	ee28 7a8a 	vmul.f32	s14, s17, s20
 800ba08:	ee69 6a0a 	vmul.f32	s13, s18, s20
 800ba0c:	ee68 7a89 	vmul.f32	s15, s17, s18
 800ba10:	eee8 9a48 	vfms.f32	s19, s16, s16
 800ba14:	eee8 5ae8 	vfms.f32	s11, s17, s17
 800ba18:	eea8 6a48 	vfms.f32	s12, s16, s16
 800ba1c:	eef0 4a47 	vmov.f32	s9, s14
 800ba20:	eeb0 4a66 	vmov.f32	s8, s13
 800ba24:	eeb0 5a67 	vmov.f32	s10, s15
 800ba28:	eed8 4a09 	vfnms.f32	s9, s16, s18
 800ba2c:	eea8 4a28 	vfma.f32	s8, s16, s17
 800ba30:	eed8 6a28 	vfnms.f32	s13, s16, s17
 800ba34:	eea8 7a09 	vfma.f32	s14, s16, s18
 800ba38:	eea8 5a0a 	vfma.f32	s10, s16, s20
 800ba3c:	eee8 7a4a 	vfms.f32	s15, s16, s20
 800ba40:	eee8 9ae8 	vfms.f32	s19, s17, s17
 800ba44:	eee9 5a49 	vfms.f32	s11, s18, s18
 800ba48:	eea9 6a49 	vfms.f32	s12, s18, s18
 800ba4c:	ee34 4a04 	vadd.f32	s8, s8, s8
 800ba50:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800ba54:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800ba58:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ba5c:	edc4 9a08 	vstr	s19, [r4, #32]
 800ba60:	ee35 5a05 	vadd.f32	s10, s10, s10
 800ba64:	edc4 5a00 	vstr	s11, [r4]
 800ba68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ba6c:	ed84 4a03 	vstr	s8, [r4, #12]
 800ba70:	edc4 6a01 	vstr	s13, [r4, #4]
 800ba74:	edc4 4a06 	vstr	s9, [r4, #24]
 800ba78:	ed84 7a02 	vstr	s14, [r4, #8]
 800ba7c:	ed84 6a04 	vstr	s12, [r4, #16]
 800ba80:	ed84 5a07 	vstr	s10, [r4, #28]
 800ba84:	edc4 7a05 	vstr	s15, [r4, #20]
 800ba88:	ecbd 8b06 	vpop	{d8-d10}
 800ba8c:	bd10      	pop	{r4, pc}
 800ba8e:	bf00      	nop

0800ba90 <st_accCal_MEMS_EIG3>:
 800ba90:	edd0 5a02 	vldr	s11, [r0, #8]
 800ba94:	edd0 2a01 	vldr	s5, [r0, #4]
 800ba98:	ee65 7aa5 	vmul.f32	s15, s11, s11
 800ba9c:	ed90 7a05 	vldr	s14, [r0, #20]
 800baa0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bc5c <st_accCal_MEMS_EIG3+0x1cc>
 800baa4:	eee2 7aa2 	vfma.f32	s15, s5, s5
 800baa8:	b510      	push	{r4, lr}
 800baaa:	460c      	mov	r4, r1
 800baac:	eee7 7a07 	vfma.f32	s15, s14, s14
 800bab0:	ed2d 8b04 	vpush	{d8-d9}
 800bab4:	b08a      	sub	sp, #40	; 0x28
 800bab6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800baba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babe:	d509      	bpl.n	800bad4 <st_accCal_MEMS_EIG3+0x44>
 800bac0:	6803      	ldr	r3, [r0, #0]
 800bac2:	600b      	str	r3, [r1, #0]
 800bac4:	6903      	ldr	r3, [r0, #16]
 800bac6:	604b      	str	r3, [r1, #4]
 800bac8:	6a03      	ldr	r3, [r0, #32]
 800baca:	608b      	str	r3, [r1, #8]
 800bacc:	b00a      	add	sp, #40	; 0x28
 800bace:	ecbd 8b04 	vpop	{d8-d9}
 800bad2:	bd10      	pop	{r4, pc}
 800bad4:	ed90 2a00 	vldr	s4, [r0]
 800bad8:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 800badc:	ed90 5a04 	vldr	s10, [r0, #16]
 800bae0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800bae4:	edd0 1a08 	vldr	s3, [r0, #32]
 800bae8:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800baec:	ee32 8a05 	vadd.f32	s16, s4, s10
 800baf0:	ed90 1a06 	vldr	s2, [r0, #24]
 800baf4:	eddf 8a5a 	vldr	s17, [pc, #360]	; 800bc60 <st_accCal_MEMS_EIG3+0x1d0>
 800baf8:	ee65 7a81 	vmul.f32	s15, s11, s2
 800bafc:	edd0 6a03 	vldr	s13, [r0, #12]
 800bb00:	ee38 8a21 	vadd.f32	s16, s16, s3
 800bb04:	ed90 6a07 	vldr	s12, [r0, #28]
 800bb08:	eddf 0a56 	vldr	s1, [pc, #344]	; 800bc64 <st_accCal_MEMS_EIG3+0x1d4>
 800bb0c:	eee2 7aa6 	vfma.f32	s15, s5, s13
 800bb10:	ee28 8a28 	vmul.f32	s16, s16, s17
 800bb14:	ee35 5a48 	vsub.f32	s10, s10, s16
 800bb18:	ee32 2a48 	vsub.f32	s4, s4, s16
 800bb1c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800bb20:	ee65 4a05 	vmul.f32	s9, s10, s10
 800bb24:	ee71 1ac8 	vsub.f32	s3, s3, s16
 800bb28:	eee2 4a02 	vfma.f32	s9, s4, s4
 800bb2c:	eee7 4aa3 	vfma.f32	s9, s15, s7
 800bb30:	eee1 4aa1 	vfma.f32	s9, s3, s3
 800bb34:	ee64 4aa0 	vmul.f32	s9, s9, s1
 800bb38:	eeb1 9ae4 	vsqrt.f32	s18, s9
 800bb3c:	eec4 7a09 	vdiv.f32	s15, s8, s18
 800bb40:	eec1 0a89 	vdiv.f32	s1, s3, s18
 800bb44:	eec2 1a09 	vdiv.f32	s3, s4, s18
 800bb48:	ee25 5a27 	vmul.f32	s10, s10, s15
 800bb4c:	ee61 4a27 	vmul.f32	s9, s2, s15
 800bb50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800bb54:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bb58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb5c:	ee24 0ac5 	vnmul.f32	s0, s9, s10
 800bb60:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800bb64:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800bb68:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bb6c:	ee26 6a47 	vnmul.f32	s12, s12, s14
 800bb70:	ee60 6ae6 	vnmul.f32	s13, s1, s13
 800bb74:	eea5 6a20 	vfma.f32	s12, s10, s1
 800bb78:	eee7 6a24 	vfma.f32	s13, s14, s9
 800bb7c:	ee20 0a25 	vmul.f32	s0, s0, s11
 800bb80:	eea6 0a21 	vfma.f32	s0, s12, s3
 800bb84:	eea6 0aa7 	vfma.f32	s0, s13, s15
 800bb88:	eeb4 0ac3 	vcmpe.f32	s0, s6
 800bb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb90:	d909      	bls.n	800bba6 <st_accCal_MEMS_EIG3+0x116>
 800bb92:	eeb4 0ae3 	vcmpe.f32	s0, s7
 800bb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb9a:	db4a      	blt.n	800bc32 <st_accCal_MEMS_EIG3+0x1a2>
 800bb9c:	eef0 9a44 	vmov.f32	s19, s8
 800bba0:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800bc68 <st_accCal_MEMS_EIG3+0x1d8>
 800bba4:	e003      	b.n	800bbae <st_accCal_MEMS_EIG3+0x11e>
 800bba6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800bbaa:	eddf 9a30 	vldr	s19, [pc, #192]	; 800bc6c <st_accCal_MEMS_EIG3+0x1dc>
 800bbae:	ee39 9a09 	vadd.f32	s18, s18, s18
 800bbb2:	eeb0 7a48 	vmov.f32	s14, s16
 800bbb6:	eef0 6a48 	vmov.f32	s13, s16
 800bbba:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800bbbe:	eea9 7a29 	vfma.f32	s14, s18, s19
 800bbc2:	eee9 6a00 	vfma.f32	s13, s18, s0
 800bbc6:	ed84 7a00 	vstr	s14, [r4]
 800bbca:	ee77 7a26 	vadd.f32	s15, s14, s13
 800bbce:	edc4 6a02 	vstr	s13, [r4, #8]
 800bbd2:	eed8 7a06 	vfnms.f32	s15, s16, s12
 800bbd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bbda:	edc4 7a01 	vstr	s15, [r4, #4]
 800bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe2:	dd09      	ble.n	800bbf8 <st_accCal_MEMS_EIG3+0x168>
 800bbe4:	eeb0 6a47 	vmov.f32	s12, s14
 800bbe8:	ed84 7a01 	vstr	s14, [r4, #4]
 800bbec:	edc4 7a00 	vstr	s15, [r4]
 800bbf0:	eeb0 7a67 	vmov.f32	s14, s15
 800bbf4:	eef0 7a46 	vmov.f32	s15, s12
 800bbf8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc00:	d509      	bpl.n	800bc16 <st_accCal_MEMS_EIG3+0x186>
 800bc02:	edc4 7a02 	vstr	s15, [r4, #8]
 800bc06:	ed84 7a01 	vstr	s14, [r4, #4]
 800bc0a:	edc4 6a00 	vstr	s13, [r4]
 800bc0e:	b00a      	add	sp, #40	; 0x28
 800bc10:	ecbd 8b04 	vpop	{d8-d9}
 800bc14:	bd10      	pop	{r4, pc}
 800bc16:	eef4 6ae7 	vcmpe.f32	s13, s15
 800bc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1e:	f57f af55 	bpl.w	800bacc <st_accCal_MEMS_EIG3+0x3c>
 800bc22:	edc4 7a02 	vstr	s15, [r4, #8]
 800bc26:	edc4 6a01 	vstr	s13, [r4, #4]
 800bc2a:	b00a      	add	sp, #40	; 0x28
 800bc2c:	ecbd 8b04 	vpop	{d8-d9}
 800bc30:	bd10      	pop	{r4, pc}
 800bc32:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bc36:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc3a:	f00e ff3b 	bl	801aab4 <acosf>
 800bc3e:	ee60 8a28 	vmul.f32	s17, s0, s17
 800bc42:	eeb0 0a68 	vmov.f32	s0, s17
 800bc46:	f00e fdcb 	bl	801a7e0 <cosf>
 800bc4a:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bc70 <st_accCal_MEMS_EIG3+0x1e0>
 800bc4e:	eef0 9a40 	vmov.f32	s19, s0
 800bc52:	ee38 0aa7 	vadd.f32	s0, s17, s15
 800bc56:	f00e fdc3 	bl	801a7e0 <cosf>
 800bc5a:	e7a8      	b.n	800bbae <st_accCal_MEMS_EIG3+0x11e>
 800bc5c:	358637bd 	.word	0x358637bd
 800bc60:	3eaaaaab 	.word	0x3eaaaaab
 800bc64:	3e2aaaab 	.word	0x3e2aaaab
 800bc68:	bf000001 	.word	0xbf000001
 800bc6c:	3effffff 	.word	0x3effffff
 800bc70:	40060a92 	.word	0x40060a92

0800bc74 <st_accCal_MEMS_ellipsoidFit7>:
 800bc74:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 800bc78:	223c      	movs	r2, #60	; 0x3c
 800bc7a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	4604      	mov	r4, r0
 800bc80:	2600      	movs	r6, #0
 800bc82:	460d      	mov	r5, r1
 800bc84:	4631      	mov	r1, r6
 800bc86:	ed2d 8b10 	vpush	{d8-d15}
 800bc8a:	b0c6      	sub	sp, #280	; 0x118
 800bc8c:	eeb0 8a67 	vmov.f32	s16, s15
 800bc90:	edd0 9a12 	vldr	s19, [r0, #72]	; 0x48
 800bc94:	9311      	str	r3, [sp, #68]	; 0x44
 800bc96:	a837      	add	r0, sp, #220	; 0xdc
 800bc98:	9315      	str	r3, [sp, #84]	; 0x54
 800bc9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bc9c:	edd4 8a16 	vldr	s17, [r4, #88]	; 0x58
 800bca0:	9314      	str	r3, [sp, #80]	; 0x50
 800bca2:	9316      	str	r3, [sp, #88]	; 0x58
 800bca4:	ed94 9a19 	vldr	s18, [r4, #100]	; 0x64
 800bca8:	960c      	str	r6, [sp, #48]	; 0x30
 800bcaa:	960e      	str	r6, [sp, #56]	; 0x38
 800bcac:	f00a f8c2 	bl	8015e34 <memset>
 800bcb0:	ee38 7a48 	vsub.f32	s14, s16, s16
 800bcb4:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bdbc <st_accCal_MEMS_ellipsoidFit7+0x148>
 800bcb8:	a936      	add	r1, sp, #216	; 0xd8
 800bcba:	aa3a      	add	r2, sp, #232	; 0xe8
 800bcbc:	ab3e      	add	r3, sp, #248	; 0xf8
 800bcbe:	eef0 7a48 	vmov.f32	s15, s16
 800bcc2:	eeb0 7ac7 	vabs.f32	s14, s14
 800bcc6:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
 800bcca:	eeb0 2a48 	vmov.f32	s4, s16
 800bcce:	ed9d 4a15 	vldr	s8, [sp, #84]	; 0x54
 800bcd2:	9103      	str	r1, [sp, #12]
 800bcd4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bcd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce0:	f100 8255 	bmi.w	800c18e <st_accCal_MEMS_ellipsoidFit7+0x51a>
 800bce4:	ed9d 1a14 	vldr	s2, [sp, #80]	; 0x50
 800bce8:	eddd 1a16 	vldr	s3, [sp, #88]	; 0x58
 800bcec:	ee29 5a42 	vnmul.f32	s10, s18, s4
 800bcf0:	eddf 5a32 	vldr	s11, [pc, #200]	; 800bdbc <st_accCal_MEMS_ellipsoidFit7+0x148>
 800bcf4:	ee61 6ac1 	vnmul.f32	s13, s3, s2
 800bcf8:	ee28 7ac4 	vnmul.f32	s14, s17, s8
 800bcfc:	eea4 5a01 	vfma.f32	s10, s8, s2
 800bd00:	eee9 6a28 	vfma.f32	s13, s18, s17
 800bd04:	eea2 7a21 	vfma.f32	s14, s4, s3
 800bd08:	ee27 6a85 	vmul.f32	s12, s15, s10
 800bd0c:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 800bd10:	eef0 2a45 	vmov.f32	s5, s10
 800bd14:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 800bd18:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 800bd1c:	eea6 6aa9 	vfma.f32	s12, s13, s19
 800bd20:	eea7 6a20 	vfma.f32	s12, s14, s1
 800bd24:	eeb0 5ac6 	vabs.f32	s10, s12
 800bd28:	eeb4 5ae5 	vcmpe.f32	s10, s11
 800bd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd30:	dd46      	ble.n	800bdc0 <st_accCal_MEMS_ellipsoidFit7+0x14c>
 800bd32:	ee69 3ae1 	vnmul.f32	s7, s19, s3
 800bd36:	ee22 3a67 	vnmul.f32	s6, s4, s15
 800bd3a:	ee24 0a60 	vnmul.f32	s0, s8, s1
 800bd3e:	eee7 3a84 	vfma.f32	s7, s15, s8
 800bd42:	eea9 0a29 	vfma.f32	s0, s18, s19
 800bd46:	eeb0 4a63 	vmov.f32	s8, s7
 800bd4a:	eef0 3a43 	vmov.f32	s7, s6
 800bd4e:	eee9 3aa8 	vfma.f32	s7, s19, s17
 800bd52:	2e00      	cmp	r6, #0
 800bd54:	f000 8235 	beq.w	800c1c2 <st_accCal_MEMS_ellipsoidFit7+0x54e>
 800bd58:	eef0 7a47 	vmov.f32	s15, s14
 800bd5c:	ed8d 4a3c 	vstr	s8, [sp, #240]	; 0xf0
 800bd60:	eeb0 5a62 	vmov.f32	s10, s5
 800bd64:	eef0 4a44 	vmov.f32	s9, s8
 800bd68:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800bd6c:	eec3 5a06 	vdiv.f32	s11, s6, s12
 800bd70:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800bd74:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800bd78:	ee25 6a85 	vmul.f32	s12, s11, s10
 800bd7c:	ee25 7a87 	vmul.f32	s14, s11, s14
 800bd80:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 800bd84:	ee25 5aa2 	vmul.f32	s10, s11, s5
 800bd88:	edcd 7a38 	vstr	s15, [sp, #224]	; 0xe0
 800bd8c:	ee65 6a80 	vmul.f32	s13, s11, s0
 800bd90:	ed8d 6a37 	vstr	s12, [sp, #220]	; 0xdc
 800bd94:	ee25 4a84 	vmul.f32	s8, s11, s8
 800bd98:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 800bd9c:	ee65 7aa3 	vmul.f32	s15, s11, s7
 800bda0:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 800bda4:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800bda8:	edcd 6a3b 	vstr	s13, [sp, #236]	; 0xec
 800bdac:	ed8d 4a3f 	vstr	s8, [sp, #252]	; 0xfc
 800bdb0:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 800bdb4:	edcd 5a3c 	vstr	s11, [sp, #240]	; 0xf0
 800bdb8:	e002      	b.n	800bdc0 <st_accCal_MEMS_ellipsoidFit7+0x14c>
 800bdba:	bf00      	nop
 800bdbc:	3a83126f 	.word	0x3a83126f
 800bdc0:	ed94 5a04 	vldr	s10, [r4, #16]
 800bdc4:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800bdc8:	edd4 3a0a 	vldr	s7, [r4, #40]	; 0x28
 800bdcc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bdd0:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 800bdd4:	a906      	add	r1, sp, #24
 800bdd6:	ed9d 7a3b 	vldr	s14, [sp, #236]	; 0xec
 800bdda:	a821      	add	r0, sp, #132	; 0x84
 800bddc:	ed9d ba3f 	vldr	s22, [sp, #252]	; 0xfc
 800bde0:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800bde4:	ee67 ca05 	vmul.f32	s25, s14, s10
 800bde8:	ee2b 4a05 	vmul.f32	s8, s22, s10
 800bdec:	edd4 5a03 	vldr	s11, [r4, #12]
 800bdf0:	ee67 ba23 	vmul.f32	s23, s14, s7
 800bdf4:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
 800bdf8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800bdfc:	ed94 3a0e 	vldr	s6, [r4, #56]	; 0x38
 800be00:	ee26 da05 	vmul.f32	s26, s12, s10
 800be04:	eddd 4a36 	vldr	s9, [sp, #216]	; 0xd8
 800be08:	ee26 aa23 	vmul.f32	s20, s12, s7
 800be0c:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 800be10:	ee66 aa26 	vmul.f32	s21, s12, s13
 800be14:	ed9d 6a3a 	vldr	s12, [sp, #232]	; 0xe8
 800be18:	eea4 daa5 	vfma.f32	s26, s9, s11
 800be1c:	ed94 2a05 	vldr	s4, [r4, #20]
 800be20:	eee6 ca25 	vfma.f32	s25, s12, s11
 800be24:	ed94 1a0b 	vldr	s2, [r4, #44]	; 0x2c
 800be28:	eee6 ba20 	vfma.f32	s23, s12, s1
 800be2c:	ed94 9a10 	vldr	s18, [r4, #64]	; 0x40
 800be30:	eea6 8a03 	vfma.f32	s16, s12, s6
 800be34:	eddd 8a3c 	vldr	s17, [sp, #240]	; 0xf0
 800be38:	eeb0 6a44 	vmov.f32	s12, s8
 800be3c:	eddd 9a38 	vldr	s19, [sp, #224]	; 0xe0
 800be40:	eea4 aaa0 	vfma.f32	s20, s9, s1
 800be44:	eddd ea40 	vldr	s29, [sp, #256]	; 0x100
 800be48:	eee4 aa83 	vfma.f32	s21, s9, s6
 800be4c:	edd4 4a1b 	vldr	s9, [r4, #108]	; 0x6c
 800be50:	eea7 6a25 	vfma.f32	s12, s14, s11
 800be54:	edd4 1a0c 	vldr	s3, [r4, #48]	; 0x30
 800be58:	eece da24 	vdiv.f32	s27, s28, s9
 800be5c:	edd4 2a06 	vldr	s5, [r4, #24]
 800be60:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
 800be64:	eddd 4a3d 	vldr	s9, [sp, #244]	; 0xf4
 800be68:	ed9d 4a39 	vldr	s8, [sp, #228]	; 0xe4
 800be6c:	eee8 ca82 	vfma.f32	s25, s17, s4
 800be70:	eee8 ba81 	vfma.f32	s23, s17, s2
 800be74:	eea8 8a89 	vfma.f32	s16, s17, s18
 800be78:	eea9 da82 	vfma.f32	s26, s19, s4
 800be7c:	eea9 aa81 	vfma.f32	s20, s19, s2
 800be80:	eee9 aa89 	vfma.f32	s21, s19, s18
 800be84:	eeae 6a82 	vfma.f32	s12, s29, s4
 800be88:	eee4 baa1 	vfma.f32	s23, s9, s3
 800be8c:	eea4 8a80 	vfma.f32	s16, s9, s0
 800be90:	eee4 caa2 	vfma.f32	s25, s9, s5
 800be94:	eddd 4a41 	vldr	s9, [sp, #260]	; 0x104
 800be98:	eea4 aa21 	vfma.f32	s20, s8, s3
 800be9c:	eee4 aa00 	vfma.f32	s21, s8, s0
 800bea0:	edcd da45 	vstr	s27, [sp, #276]	; 0x114
 800bea4:	eea4 da22 	vfma.f32	s26, s8, s5
 800bea8:	eea4 6aa2 	vfma.f32	s12, s9, s5
 800beac:	edcd ba2e 	vstr	s23, [sp, #184]	; 0xb8
 800beb0:	ee6b 9a26 	vmul.f32	s19, s22, s13
 800beb4:	ed8d 8a2f 	vstr	s16, [sp, #188]	; 0xbc
 800beb8:	ee2b ba23 	vmul.f32	s22, s22, s7
 800bebc:	edcd ca2d 	vstr	s25, [sp, #180]	; 0xb4
 800bec0:	ed8d aa2b 	vstr	s20, [sp, #172]	; 0xac
 800bec4:	ee2c 4a85 	vmul.f32	s8, s25, s10
 800bec8:	eee7 9a03 	vfma.f32	s19, s14, s6
 800becc:	edcd aa2c 	vstr	s21, [sp, #176]	; 0xb0
 800bed0:	eea7 ba20 	vfma.f32	s22, s14, s1
 800bed4:	ed8d da2a 	vstr	s26, [sp, #168]	; 0xa8
 800bed8:	ed8d 6a30 	vstr	s12, [sp, #192]	; 0xc0
 800bedc:	ee65 4a08 	vmul.f32	s9, s10, s16
 800bee0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800bee4:	eef0 fa46 	vmov.f32	s31, s12
 800bee8:	ed9d fa42 	vldr	s30, [sp, #264]	; 0x108
 800beec:	eea5 4a8d 	vfma.f32	s8, s11, s26
 800bef0:	ee27 ca05 	vmul.f32	s24, s14, s10
 800bef4:	ee67 8a26 	vmul.f32	s17, s14, s13
 800bef8:	ee68 6a26 	vmul.f32	s13, s16, s13
 800befc:	eeaf ca25 	vfma.f32	s24, s30, s11
 800bf00:	eeef 8a03 	vfma.f32	s17, s30, s6
 800bf04:	eeee 9a89 	vfma.f32	s19, s29, s18
 800bf08:	ee27 7a23 	vmul.f32	s14, s14, s7
 800bf0c:	eee5 4aaa 	vfma.f32	s9, s11, s21
 800bf10:	eeea 6a83 	vfma.f32	s13, s21, s6
 800bf14:	ed9d 3a44 	vldr	s6, [sp, #272]	; 0x110
 800bf18:	ee28 6a23 	vmul.f32	s12, s16, s7
 800bf1c:	eeaf 7a20 	vfma.f32	s14, s30, s1
 800bf20:	eea3 ca02 	vfma.f32	s24, s6, s4
 800bf24:	eee3 8a09 	vfma.f32	s17, s6, s18
 800bf28:	ed9d 3a41 	vldr	s6, [sp, #260]	; 0x104
 800bf2c:	eeaa 6aa0 	vfma.f32	s12, s21, s1
 800bf30:	eee3 9a00 	vfma.f32	s19, s6, s0
 800bf34:	ed94 3a00 	vldr	s6, [r4]
 800bf38:	ee25 5a2b 	vmul.f32	s10, s10, s23
 800bf3c:	eeae ba81 	vfma.f32	s22, s29, s2
 800bf40:	edd4 ea0d 	vldr	s29, [r4, #52]	; 0x34
 800bf44:	eeb0 fa64 	vmov.f32	s30, s9
 800bf48:	edd4 4a02 	vldr	s9, [r4, #8]
 800bf4c:	ee33 4a44 	vsub.f32	s8, s6, s8
 800bf50:	ed9d 3a44 	vldr	s6, [sp, #272]	; 0x110
 800bf54:	eea5 5a8a 	vfma.f32	s10, s11, s20
 800bf58:	edd4 5a08 	vldr	s11, [r4, #32]
 800bf5c:	eea3 7a01 	vfma.f32	s14, s6, s2
 800bf60:	ed94 3a01 	vldr	s6, [r4, #4]
 800bf64:	ee74 4acf 	vsub.f32	s9, s9, s30
 800bf68:	ed9d fa0e 	vldr	s30, [sp, #56]	; 0x38
 800bf6c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800bf70:	ed8d 3a01 	vstr	s6, [sp, #4]
 800bf74:	ed9d 3a41 	vldr	s6, [sp, #260]	; 0x104
 800bf78:	eeed 8a80 	vfma.f32	s17, s27, s0
 800bf7c:	eee2 4a69 	vfms.f32	s9, s4, s19
 800bf80:	eddd 5a01 	vldr	s11, [sp, #4]
 800bf84:	eea3 ba21 	vfma.f32	s22, s6, s3
 800bf88:	ed94 3a07 	vldr	s6, [r4, #28]
 800bf8c:	eea9 6ac1 	vfms.f32	s12, s19, s2
 800bf90:	edcd 9a32 	vstr	s19, [sp, #200]	; 0xc8
 800bf94:	ee7e 6ae6 	vsub.f32	s13, s29, s13
 800bf98:	eddd ea0c 	vldr	s29, [sp, #48]	; 0x30
 800bf9c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800bfa0:	eead 7aa1 	vfma.f32	s14, s27, s3
 800bfa4:	edcd 8a35 	vstr	s17, [sp, #212]	; 0xd4
 800bfa8:	eee2 4ae8 	vfms.f32	s9, s5, s17
 800bfac:	eee9 6a69 	vfms.f32	s13, s18, s19
 800bfb0:	ed8d ba31 	vstr	s22, [sp, #196]	; 0xc4
 800bfb4:	eea8 6ae1 	vfms.f32	s12, s17, s3
 800bfb8:	eee2 5a4b 	vfms.f32	s11, s4, s22
 800bfbc:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800bfc0:	eead caa2 	vfma.f32	s24, s27, s5
 800bfc4:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 800bfc8:	eeaf 4ac2 	vfms.f32	s8, s31, s4
 800bfcc:	eeea 3a20 	vfma.f32	s7, s20, s1
 800bfd0:	eeb0 2a46 	vmov.f32	s4, s12
 800bfd4:	eee2 5ac7 	vfms.f32	s11, s5, s14
 800bfd8:	eee0 6a68 	vfms.f32	s13, s0, s17
 800bfdc:	ee24 0aa7 	vmul.f32	s0, s9, s15
 800bfe0:	ed8d ca33 	vstr	s24, [sp, #204]	; 0xcc
 800bfe4:	eea2 4acc 	vfms.f32	s8, s5, s24
 800bfe8:	ee33 3a63 	vsub.f32	s6, s6, s7
 800bfec:	ee62 2a27 	vmul.f32	s5, s4, s15
 800bff0:	eef0 3a40 	vmov.f32	s7, s0
 800bff4:	eeb0 9a47 	vmov.f32	s18, s14
 800bff8:	eeab 3a41 	vfms.f32	s6, s22, s2
 800bffc:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800c000:	eeee 3aa5 	vfma.f32	s7, s29, s11
 800c004:	eeb0 1a62 	vmov.f32	s2, s5
 800c008:	ee64 0a27 	vmul.f32	s1, s8, s15
 800c00c:	eeb0 5a47 	vmov.f32	s10, s14
 800c010:	eea5 1aa7 	vfma.f32	s2, s11, s15
 800c014:	ee6f 6a26 	vmul.f32	s13, s30, s13
 800c018:	ee2f 6a06 	vmul.f32	s12, s30, s12
 800c01c:	eea9 3a61 	vfms.f32	s6, s18, s3
 800c020:	eee4 3a27 	vfma.f32	s7, s8, s15
 800c024:	eee5 0aa7 	vfma.f32	s1, s11, s15
 800c028:	eee4 6aa7 	vfma.f32	s13, s9, s15
 800c02c:	eea4 5aa7 	vfma.f32	s10, s9, s15
 800c030:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800c034:	eeb0 4a40 	vmov.f32	s8, s0
 800c038:	eea2 7a27 	vfma.f32	s14, s4, s15
 800c03c:	edcd 3a24 	vstr	s7, [sp, #144]	; 0x90
 800c040:	eeef 0a24 	vfma.f32	s1, s30, s9
 800c044:	eea5 4aa7 	vfma.f32	s8, s11, s15
 800c048:	eef0 5a41 	vmov.f32	s11, s2
 800c04c:	eeae 5a82 	vfma.f32	s10, s29, s4
 800c050:	eee2 6a27 	vfma.f32	s13, s4, s15
 800c054:	eeee 5a83 	vfma.f32	s11, s29, s6
 800c058:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800c05c:	eea3 6a27 	vfma.f32	s12, s6, s15
 800c060:	edcd 0a27 	vstr	s1, [sp, #156]	; 0x9c
 800c064:	eee3 2a27 	vfma.f32	s5, s6, s15
 800c068:	ed8d 4a21 	vstr	s8, [sp, #132]	; 0x84
 800c06c:	ed8d 5a26 	vstr	s10, [sp, #152]	; 0x98
 800c070:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 800c074:	edcd 5a25 	vstr	s11, [sp, #148]	; 0x94
 800c078:	ed8d 6a28 	vstr	s12, [sp, #160]	; 0xa0
 800c07c:	edcd 2a22 	vstr	s5, [sp, #136]	; 0x88
 800c080:	f7ff fd06 	bl	800ba90 <st_accCal_MEMS_EIG3>
 800c084:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
 800c088:	ed9d 5a07 	vldr	s10, [sp, #28]
 800c08c:	ed9d 6a06 	vldr	s12, [sp, #24]
 800c090:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800c094:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800c098:	ee77 4ac6 	vsub.f32	s9, s15, s12
 800c09c:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
 800c0a0:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800c0a4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c0a8:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
 800c0ac:	ee24 7a07 	vmul.f32	s14, s8, s14
 800c0b0:	eddd 2a22 	vldr	s5, [sp, #136]	; 0x88
 800c0b4:	ee64 7a27 	vmul.f32	s15, s8, s15
 800c0b8:	ed9d 3a29 	vldr	s6, [sp, #164]	; 0xa4
 800c0bc:	ee76 5a25 	vadd.f32	s11, s12, s11
 800c0c0:	eddd 3a28 	vldr	s7, [sp, #160]	; 0xa0
 800c0c4:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
 800c0c8:	ee36 6a03 	vadd.f32	s12, s12, s6
 800c0cc:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800c0d0:	eea2 7aa6 	vfma.f32	s14, s5, s13
 800c0d4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800c0d8:	eee4 6a06 	vfma.f32	s13, s8, s12
 800c0dc:	eef0 7ae7 	vabs.f32	s15, s15
 800c0e0:	eea4 7a85 	vfma.f32	s14, s9, s10
 800c0e4:	eec6 eaa7 	vdiv.f32	s29, s13, s15
 800c0e8:	eec7 da27 	vdiv.f32	s27, s14, s15
 800c0ec:	ee6e 7aae 	vmul.f32	s15, s29, s29
 800c0f0:	eeed 7aad 	vfma.f32	s15, s27, s27
 800c0f4:	ee77 7a8e 	vadd.f32	s15, s15, s28
 800c0f8:	ee17 0a90 	vmov	r0, s15
 800c0fc:	f7f4 fa44 	bl	8000588 <__aeabi_f2d>
 800c100:	ec41 0b10 	vmov	d0, r0, r1
 800c104:	f00e fca2 	bl	801aa4c <sqrt>
 800c108:	ec51 0b10 	vmov	r0, r1, d0
 800c10c:	f7f4 fd8c 	bl	8000c28 <__aeabi_d2f>
 800c110:	ee07 0a90 	vmov	s15, r0
 800c114:	eece 4a27 	vdiv.f32	s9, s28, s15
 800c118:	ee6e 5aa4 	vmul.f32	s11, s29, s9
 800c11c:	edc5 4a01 	vstr	s9, [r5, #4]
 800c120:	ee2d 5aa4 	vmul.f32	s10, s27, s9
 800c124:	ee2a 6a24 	vmul.f32	s12, s20, s9
 800c128:	ee68 6a25 	vmul.f32	s13, s16, s11
 800c12c:	edc5 5a02 	vstr	s11, [r5, #8]
 800c130:	ee29 7aa5 	vmul.f32	s14, s19, s11
 800c134:	ed85 5a00 	vstr	s10, [r5]
 800c138:	ee68 7aa5 	vmul.f32	s15, s17, s11
 800c13c:	eea5 6a0d 	vfma.f32	s12, s10, s26
 800c140:	eeeb 6aa4 	vfma.f32	s13, s23, s9
 800c144:	eea4 7a8b 	vfma.f32	s14, s9, s22
 800c148:	eee4 7a89 	vfma.f32	s15, s9, s18
 800c14c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800c150:	eea5 6aaa 	vfma.f32	s12, s11, s21
 800c154:	eeec 6a85 	vfma.f32	s13, s25, s10
 800c158:	eeaf 7a85 	vfma.f32	s14, s31, s10
 800c15c:	eee5 7a0c 	vfma.f32	s15, s10, s24
 800c160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c164:	eeb1 6a46 	vneg.f32	s12, s12
 800c168:	eef1 6a66 	vneg.f32	s13, s13
 800c16c:	eeb1 7a47 	vneg.f32	s14, s14
 800c170:	eef1 7a67 	vneg.f32	s15, s15
 800c174:	ed85 6a03 	vstr	s12, [r5, #12]
 800c178:	edc5 6a04 	vstr	s13, [r5, #16]
 800c17c:	ed85 7a05 	vstr	s14, [r5, #20]
 800c180:	edc5 7a06 	vstr	s15, [r5, #24]
 800c184:	d42e      	bmi.n	800c1e4 <st_accCal_MEMS_ellipsoidFit7+0x570>
 800c186:	b046      	add	sp, #280	; 0x118
 800c188:	ecbd 8b10 	vpop	{d8-d15}
 800c18c:	bd70      	pop	{r4, r5, r6, pc}
 800c18e:	ee30 7ac4 	vsub.f32	s14, s1, s8
 800c192:	ed9d 1a14 	vldr	s2, [sp, #80]	; 0x50
 800c196:	eddd 1a16 	vldr	s3, [sp, #88]	; 0x58
 800c19a:	eeb0 7ac7 	vabs.f32	s14, s14
 800c19e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a6:	f57f ada1 	bpl.w	800bcec <st_accCal_MEMS_ellipsoidFit7+0x78>
 800c1aa:	ee31 7a61 	vsub.f32	s14, s2, s3
 800c1ae:	eeb0 7ac7 	vabs.f32	s14, s14
 800c1b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ba:	bf4c      	ite	mi
 800c1bc:	2601      	movmi	r6, #1
 800c1be:	2600      	movpl	r6, #0
 800c1c0:	e594      	b.n	800bcec <st_accCal_MEMS_ellipsoidFit7+0x78>
 800c1c2:	ee69 4ac1 	vnmul.f32	s9, s19, s2
 800c1c6:	ee68 5ae0 	vnmul.f32	s11, s17, s1
 800c1ca:	ee29 5a67 	vnmul.f32	s10, s18, s15
 800c1ce:	eee2 4a20 	vfma.f32	s9, s4, s1
 800c1d2:	eee7 5a81 	vfma.f32	s11, s15, s2
 800c1d6:	eea0 5aa1 	vfma.f32	s10, s1, s3
 800c1da:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800c1de:	eef0 7a65 	vmov.f32	s15, s11
 800c1e2:	e5c1      	b.n	800bd68 <st_accCal_MEMS_ellipsoidFit7+0xf4>
 800c1e4:	eeb1 5a45 	vneg.f32	s10, s10
 800c1e8:	eef1 4a64 	vneg.f32	s9, s9
 800c1ec:	eef1 5a65 	vneg.f32	s11, s11
 800c1f0:	eeb1 6a46 	vneg.f32	s12, s12
 800c1f4:	ed85 5a00 	vstr	s10, [r5]
 800c1f8:	eef1 6a66 	vneg.f32	s13, s13
 800c1fc:	edc5 4a01 	vstr	s9, [r5, #4]
 800c200:	eeb1 7a47 	vneg.f32	s14, s14
 800c204:	edc5 5a02 	vstr	s11, [r5, #8]
 800c208:	eef1 7a67 	vneg.f32	s15, s15
 800c20c:	ed85 6a03 	vstr	s12, [r5, #12]
 800c210:	edc5 6a04 	vstr	s13, [r5, #16]
 800c214:	ed85 7a05 	vstr	s14, [r5, #20]
 800c218:	edc5 7a06 	vstr	s15, [r5, #24]
 800c21c:	b046      	add	sp, #280	; 0x118
 800c21e:	ecbd 8b10 	vpop	{d8-d15}
 800c222:	bd70      	pop	{r4, r5, r6, pc}

0800c224 <m_dcm2q_eml>:
 800c224:	ed90 7a04 	vldr	s14, [r0, #16]
 800c228:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800c22c:	ed90 6a08 	vldr	s12, [r0, #32]
 800c230:	edd0 7a00 	vldr	s15, [r0]
 800c234:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c23e:	4604      	mov	r4, r0
 800c240:	460d      	mov	r5, r1
 800c242:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c246:	ed2d 8b02 	vpush	{d8}
 800c24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c24e:	f340 80c1 	ble.w	800c3d4 <m_dcm2q_eml+0x1b0>
 800c252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c256:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c25a:	ee17 0a90 	vmov	r0, s15
 800c25e:	f7f4 f993 	bl	8000588 <__aeabi_f2d>
 800c262:	ec41 0b10 	vmov	d0, r0, r1
 800c266:	f00e fbf1 	bl	801aa4c <sqrt>
 800c26a:	ec51 0b10 	vmov	r0, r1, d0
 800c26e:	f7f4 fcdb 	bl	8000c28 <__aeabi_d2f>
 800c272:	ee07 0a90 	vmov	s15, r0
 800c276:	ed94 7a05 	vldr	s14, [r4, #20]
 800c27a:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800c27e:	ed94 5a07 	vldr	s10, [r4, #28]
 800c282:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c286:	ed94 4a06 	vldr	s8, [r4, #24]
 800c28a:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800c28e:	ee35 5a47 	vsub.f32	s10, s10, s14
 800c292:	edd4 5a02 	vldr	s11, [r4, #8]
 800c296:	ed94 7a03 	vldr	s14, [r4, #12]
 800c29a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800c29e:	ed94 4a01 	vldr	s8, [r4, #4]
 800c2a2:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800c2a6:	ee37 7a44 	vsub.f32	s14, s14, s8
 800c2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ae:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800c2b2:	bf54      	ite	pl
 800c2b4:	eef0 5a66 	vmovpl.f32	s11, s13
 800c2b8:	eef0 5a46 	vmovmi.f32	s11, s12
 800c2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800c2c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c2c8:	bf54      	ite	pl
 800c2ca:	eef0 8a66 	vmovpl.f32	s17, s13
 800c2ce:	eef0 8a46 	vmovmi.f32	s17, s12
 800c2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d6:	edc5 7a00 	vstr	s15, [r5]
 800c2da:	ed94 7a00 	vldr	s14, [r4]
 800c2de:	edd4 5a08 	vldr	s11, [r4, #32]
 800c2e2:	bf54      	ite	pl
 800c2e4:	eeb0 8a66 	vmovpl.f32	s16, s13
 800c2e8:	eeb0 8a46 	vmovmi.f32	s16, s12
 800c2ec:	edd4 7a04 	vldr	s15, [r4, #16]
 800c2f0:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c2f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2f8:	eef4 7ae4 	vcmpe.f32	s15, s9
 800c2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c300:	dd75      	ble.n	800c3ee <m_dcm2q_eml+0x1ca>
 800c302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c306:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c30a:	ee17 0a90 	vmov	r0, s15
 800c30e:	f7f4 f93b 	bl	8000588 <__aeabi_f2d>
 800c312:	ec41 0b10 	vmov	d0, r0, r1
 800c316:	f00e fb99 	bl	801aa4c <sqrt>
 800c31a:	ec51 0b10 	vmov	r0, r1, d0
 800c31e:	f7f4 fc83 	bl	8000c28 <__aeabi_d2f>
 800c322:	ee07 0a90 	vmov	s15, r0
 800c326:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800c32a:	edc5 7a01 	vstr	s15, [r5, #4]
 800c32e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800c332:	ed94 7a00 	vldr	s14, [r4]
 800c336:	ed94 6a04 	vldr	s12, [r4, #16]
 800c33a:	edd4 7a08 	vldr	s15, [r4, #32]
 800c33e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c346:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34e:	dd4b      	ble.n	800c3e8 <m_dcm2q_eml+0x1c4>
 800c350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c354:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c358:	ee17 0a90 	vmov	r0, s15
 800c35c:	f7f4 f914 	bl	8000588 <__aeabi_f2d>
 800c360:	ec41 0b10 	vmov	d0, r0, r1
 800c364:	f00e fb72 	bl	801aa4c <sqrt>
 800c368:	ec51 0b10 	vmov	r0, r1, d0
 800c36c:	f7f4 fc5c 	bl	8000c28 <__aeabi_d2f>
 800c370:	ee07 0a90 	vmov	s15, r0
 800c374:	ee67 6a88 	vmul.f32	s13, s15, s16
 800c378:	edc5 6a02 	vstr	s13, [r5, #8]
 800c37c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c380:	edd4 7a00 	vldr	s15, [r4]
 800c384:	ed94 6a04 	vldr	s12, [r4, #16]
 800c388:	edd4 6a08 	vldr	s13, [r4, #32]
 800c38c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c394:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c39c:	dd1d      	ble.n	800c3da <m_dcm2q_eml+0x1b6>
 800c39e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c3a6:	ee17 0a90 	vmov	r0, s15
 800c3aa:	f7f4 f8ed 	bl	8000588 <__aeabi_f2d>
 800c3ae:	ec41 0b10 	vmov	d0, r0, r1
 800c3b2:	f00e fb4b 	bl	801aa4c <sqrt>
 800c3b6:	ec51 0b10 	vmov	r0, r1, d0
 800c3ba:	f7f4 fc35 	bl	8000c28 <__aeabi_d2f>
 800c3be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c3c2:	ee07 0a10 	vmov	s14, r0
 800c3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ca:	ecbd 8b02 	vpop	{d8}
 800c3ce:	edc5 7a03 	vstr	s15, [r5, #12]
 800c3d2:	bd38      	pop	{r3, r4, r5, pc}
 800c3d4:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c3f4 <m_dcm2q_eml+0x1d0>
 800c3d8:	e74d      	b.n	800c276 <m_dcm2q_eml+0x52>
 800c3da:	eddf 7a06 	vldr	s15, [pc, #24]	; 800c3f4 <m_dcm2q_eml+0x1d0>
 800c3de:	ecbd 8b02 	vpop	{d8}
 800c3e2:	edc5 7a03 	vstr	s15, [r5, #12]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	eddf 6a02 	vldr	s13, [pc, #8]	; 800c3f4 <m_dcm2q_eml+0x1d0>
 800c3ec:	e7c4      	b.n	800c378 <m_dcm2q_eml+0x154>
 800c3ee:	eddf 7a01 	vldr	s15, [pc, #4]	; 800c3f4 <m_dcm2q_eml+0x1d0>
 800c3f2:	e79a      	b.n	800c32a <m_dcm2q_eml+0x106>
 800c3f4:	00000000 	.word	0x00000000

0800c3f8 <SpacePointGyroProp>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	edd2 7a01 	vldr	s15, [r2, #4]
 800c3fe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800c402:	4606      	mov	r6, r0
 800c404:	461c      	mov	r4, r3
 800c406:	ed2d 8b04 	vpush	{d8-d9}
 800c40a:	ed9f 8a41 	vldr	s16, [pc, #260]	; 800c510 <SpacePointGyroProp+0x118>
 800c40e:	edd1 8a01 	vldr	s17, [r1, #4]
 800c412:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c416:	ed91 9a00 	vldr	s18, [r1]
 800c41a:	ee78 8ae7 	vsub.f32	s17, s17, s15
 800c41e:	edd2 7a00 	vldr	s15, [r2]
 800c422:	ed91 8a02 	vldr	s16, [r1, #8]
 800c426:	ee39 9a67 	vsub.f32	s18, s18, s15
 800c42a:	edd2 7a02 	vldr	s15, [r2, #8]
 800c42e:	ee68 8a80 	vmul.f32	s17, s17, s0
 800c432:	9d08      	ldr	r5, [sp, #32]
 800c434:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c438:	ee29 9a00 	vmul.f32	s18, s18, s0
 800c43c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800c440:	ee28 8a00 	vmul.f32	s16, s16, s0
 800c444:	eee9 7a09 	vfma.f32	s15, s18, s18
 800c448:	eee8 7a08 	vfma.f32	s15, s16, s16
 800c44c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c454:	d55a      	bpl.n	800c50c <SpacePointGyroProp+0x114>
 800c456:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800c45a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c45e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c462:	ee17 0a10 	vmov	r0, s14
 800c466:	f7f4 f88f 	bl	8000588 <__aeabi_f2d>
 800c46a:	ec41 0b10 	vmov	d0, r0, r1
 800c46e:	f00e faed 	bl	801aa4c <sqrt>
 800c472:	ec51 0b10 	vmov	r0, r1, d0
 800c476:	f7f4 fbd7 	bl	8000c28 <__aeabi_d2f>
 800c47a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c47e:	4622      	mov	r2, r4
 800c480:	4631      	mov	r1, r6
 800c482:	60e8      	str	r0, [r5, #12]
 800c484:	4628      	mov	r0, r5
 800c486:	ee29 9a27 	vmul.f32	s18, s18, s15
 800c48a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800c48e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c492:	ed85 9a00 	vstr	s18, [r5]
 800c496:	edc5 8a01 	vstr	s17, [r5, #4]
 800c49a:	ed85 8a02 	vstr	s16, [r5, #8]
 800c49e:	f7ff fa59 	bl	800b954 <m_qmult_eml>
 800c4a2:	edd4 8a02 	vldr	s17, [r4, #8]
 800c4a6:	ed94 9a01 	vldr	s18, [r4, #4]
 800c4aa:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800c4ae:	ed94 8a03 	vldr	s16, [r4, #12]
 800c4b2:	edd4 9a00 	vldr	s19, [r4]
 800c4b6:	eee9 7a09 	vfma.f32	s15, s18, s18
 800c4ba:	eee8 7a08 	vfma.f32	s15, s16, s16
 800c4be:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800c4c2:	ee17 0a90 	vmov	r0, s15
 800c4c6:	f7f4 f85f 	bl	8000588 <__aeabi_f2d>
 800c4ca:	ec41 0b10 	vmov	d0, r0, r1
 800c4ce:	f00e fabd 	bl	801aa4c <sqrt>
 800c4d2:	ec51 0b10 	vmov	r0, r1, d0
 800c4d6:	f7f4 fba7 	bl	8000c28 <__aeabi_d2f>
 800c4da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4de:	ee07 0a90 	vmov	s15, r0
 800c4e2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800c4e6:	ee67 9aa9 	vmul.f32	s19, s15, s19
 800c4ea:	ee29 9a27 	vmul.f32	s18, s18, s15
 800c4ee:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800c4f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c4f6:	edc4 9a00 	vstr	s19, [r4]
 800c4fa:	ed84 9a01 	vstr	s18, [r4, #4]
 800c4fe:	edc4 8a02 	vstr	s17, [r4, #8]
 800c502:	ed84 8a03 	vstr	s16, [r4, #12]
 800c506:	ecbd 8b04 	vpop	{d8-d9}
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	2000      	movs	r0, #0
 800c50e:	e7b4      	b.n	800c47a <SpacePointGyroProp+0x82>
 800c510:	3c8efa35 	.word	0x3c8efa35

0800c514 <SpacePointGyroPropRedist>:
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	460d      	mov	r5, r1
 800c518:	4606      	mov	r6, r0
 800c51a:	4619      	mov	r1, r3
 800c51c:	4610      	mov	r0, r2
 800c51e:	461a      	mov	r2, r3
 800c520:	ed2d 8b04 	vpush	{d8-d9}
 800c524:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c526:	f7ff fa15 	bl	800b954 <m_qmult_eml>
 800c52a:	462a      	mov	r2, r5
 800c52c:	4629      	mov	r1, r5
 800c52e:	4630      	mov	r0, r6
 800c530:	f7ff fa10 	bl	800b954 <m_qmult_eml>
 800c534:	4622      	mov	r2, r4
 800c536:	4618      	mov	r0, r3
 800c538:	9908      	ldr	r1, [sp, #32]
 800c53a:	f7ff fa0b 	bl	800b954 <m_qmult_eml>
 800c53e:	4621      	mov	r1, r4
 800c540:	4628      	mov	r0, r5
 800c542:	f7ff fa07 	bl	800b954 <m_qmult_eml>
 800c546:	ed94 9a01 	vldr	s18, [r4, #4]
 800c54a:	edd4 9a00 	vldr	s19, [r4]
 800c54e:	ee69 7a09 	vmul.f32	s15, s18, s18
 800c552:	edd4 8a02 	vldr	s17, [r4, #8]
 800c556:	ed94 8a03 	vldr	s16, [r4, #12]
 800c55a:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800c55e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800c562:	eee8 7a08 	vfma.f32	s15, s16, s16
 800c566:	ee17 0a90 	vmov	r0, s15
 800c56a:	f7f4 f80d 	bl	8000588 <__aeabi_f2d>
 800c56e:	ec41 0b10 	vmov	d0, r0, r1
 800c572:	f00e fa6b 	bl	801aa4c <sqrt>
 800c576:	ec51 0b10 	vmov	r0, r1, d0
 800c57a:	f7f4 fb55 	bl	8000c28 <__aeabi_d2f>
 800c57e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c582:	ee07 0a90 	vmov	s15, r0
 800c586:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800c58a:	ee67 9aa9 	vmul.f32	s19, s15, s19
 800c58e:	ee29 9a27 	vmul.f32	s18, s18, s15
 800c592:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800c596:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c59a:	edc4 9a00 	vstr	s19, [r4]
 800c59e:	ed84 9a01 	vstr	s18, [r4, #4]
 800c5a2:	edc4 8a02 	vstr	s17, [r4, #8]
 800c5a6:	ed84 8a03 	vstr	s16, [r4, #12]
 800c5aa:	ecbd 8b04 	vpop	{d8-d9}
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}

0800c5b0 <quatErr2EulerErr>:
 800c5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	460c      	mov	r4, r1
 800c5ba:	4615      	mov	r5, r2
 800c5bc:	ed2d 8b04 	vpush	{d8-d9}
 800c5c0:	6013      	str	r3, [r2, #0]
 800c5c2:	6053      	str	r3, [r2, #4]
 800c5c4:	6093      	str	r3, [r2, #8]
 800c5c6:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 800c778 <quatErr2EulerErr+0x1c8>
 800c5ca:	ed90 0a01 	vldr	s0, [r0, #4]
 800c5ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c5d2:	f00e f905 	bl	801a7e0 <cosf>
 800c5d6:	ed96 9a02 	vldr	s18, [r6, #8]
 800c5da:	eef0 8a40 	vmov.f32	s17, s0
 800c5de:	ee29 9a08 	vmul.f32	s18, s18, s16
 800c5e2:	eeb0 0a49 	vmov.f32	s0, s18
 800c5e6:	f00e f93b 	bl	801a860 <sinf>
 800c5ea:	eeb0 8a40 	vmov.f32	s16, s0
 800c5ee:	eeb0 0a49 	vmov.f32	s0, s18
 800c5f2:	f00e f8f5 	bl	801a7e0 <cosf>
 800c5f6:	ee20 9a00 	vmul.f32	s18, s0, s0
 800c5fa:	edd4 7a01 	vldr	s15, [r4, #4]
 800c5fe:	ee28 8a08 	vmul.f32	s16, s16, s16
 800c602:	edd4 6a02 	vldr	s13, [r4, #8]
 800c606:	ee69 7a27 	vmul.f32	s15, s18, s15
 800c60a:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800c77c <quatErr2EulerErr+0x1cc>
 800c60e:	eee8 7a26 	vfma.f32	s15, s16, s13
 800c612:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c616:	ee66 7a87 	vmul.f32	s15, s13, s14
 800c61a:	ee17 0a90 	vmov	r0, s15
 800c61e:	f7f3 ffb3 	bl	8000588 <__aeabi_f2d>
 800c622:	2200      	movs	r2, #0
 800c624:	4b56      	ldr	r3, [pc, #344]	; (800c780 <quatErr2EulerErr+0x1d0>)
 800c626:	4680      	mov	r8, r0
 800c628:	4689      	mov	r9, r1
 800c62a:	f7f4 fa81 	bl	8000b30 <__aeabi_dcmple>
 800c62e:	b918      	cbnz	r0, 800c638 <quatErr2EulerErr+0x88>
 800c630:	f04f 0800 	mov.w	r8, #0
 800c634:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800c780 <quatErr2EulerErr+0x1d0>
 800c638:	4649      	mov	r1, r9
 800c63a:	4640      	mov	r0, r8
 800c63c:	f7f4 faf4 	bl	8000c28 <__aeabi_d2f>
 800c640:	f7f3 ffa2 	bl	8000588 <__aeabi_f2d>
 800c644:	2200      	movs	r2, #0
 800c646:	4b4f      	ldr	r3, [pc, #316]	; (800c784 <quatErr2EulerErr+0x1d4>)
 800c648:	4680      	mov	r8, r0
 800c64a:	4689      	mov	r9, r1
 800c64c:	f7f4 fa7a 	bl	8000b44 <__aeabi_dcmpge>
 800c650:	b918      	cbnz	r0, 800c65a <quatErr2EulerErr+0xaa>
 800c652:	f04f 0800 	mov.w	r8, #0
 800c656:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800c784 <quatErr2EulerErr+0x1d4>
 800c65a:	4649      	mov	r1, r9
 800c65c:	4640      	mov	r0, r8
 800c65e:	f7f4 fae3 	bl	8000c28 <__aeabi_d2f>
 800c662:	6068      	str	r0, [r5, #4]
 800c664:	edd4 7a02 	vldr	s15, [r4, #8]
 800c668:	ed94 6a01 	vldr	s12, [r4, #4]
 800c66c:	ee69 7a27 	vmul.f32	s15, s18, s15
 800c670:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800c788 <quatErr2EulerErr+0x1d8>
 800c674:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c77c <quatErr2EulerErr+0x1cc>
 800c678:	eea8 7aa8 	vfma.f32	s14, s17, s17
 800c67c:	eee8 7a06 	vfma.f32	s15, s16, s12
 800c680:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800c684:	eef1 7ac6 	vsqrt.f32	s15, s12
 800c688:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c68c:	ee17 0a90 	vmov	r0, s15
 800c690:	f7f3 ff7a 	bl	8000588 <__aeabi_f2d>
 800c694:	2200      	movs	r2, #0
 800c696:	4b3d      	ldr	r3, [pc, #244]	; (800c78c <quatErr2EulerErr+0x1dc>)
 800c698:	4680      	mov	r8, r0
 800c69a:	4689      	mov	r9, r1
 800c69c:	f7f4 fa48 	bl	8000b30 <__aeabi_dcmple>
 800c6a0:	b918      	cbnz	r0, 800c6aa <quatErr2EulerErr+0xfa>
 800c6a2:	f04f 0800 	mov.w	r8, #0
 800c6a6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800c78c <quatErr2EulerErr+0x1dc>
 800c6aa:	4649      	mov	r1, r9
 800c6ac:	4640      	mov	r0, r8
 800c6ae:	f7f4 fabb 	bl	8000c28 <__aeabi_d2f>
 800c6b2:	f7f3 ff69 	bl	8000588 <__aeabi_f2d>
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	4b32      	ldr	r3, [pc, #200]	; (800c784 <quatErr2EulerErr+0x1d4>)
 800c6ba:	4680      	mov	r8, r0
 800c6bc:	4689      	mov	r9, r1
 800c6be:	f7f4 fa41 	bl	8000b44 <__aeabi_dcmpge>
 800c6c2:	b918      	cbnz	r0, 800c6cc <quatErr2EulerErr+0x11c>
 800c6c4:	f04f 0800 	mov.w	r8, #0
 800c6c8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800c784 <quatErr2EulerErr+0x1d4>
 800c6cc:	4640      	mov	r0, r8
 800c6ce:	4649      	mov	r1, r9
 800c6d0:	f7f4 faaa 	bl	8000c28 <__aeabi_d2f>
 800c6d4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800c778 <quatErr2EulerErr+0x1c8>
 800c6d8:	6028      	str	r0, [r5, #0]
 800c6da:	ed96 0a01 	vldr	s0, [r6, #4]
 800c6de:	edd4 7a02 	vldr	s15, [r4, #8]
 800c6e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c6e6:	edd4 6a01 	vldr	s13, [r4, #4]
 800c6ea:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c6ee:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c790 <quatErr2EulerErr+0x1e0>
 800c6f2:	eeb0 7ac0 	vabs.f32	s14, s0
 800c6f6:	eea9 8a26 	vfma.f32	s16, s18, s13
 800c6fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c702:	d532      	bpl.n	800c76a <quatErr2EulerErr+0x1ba>
 800c704:	f00e f8ee 	bl	801a8e4 <tanf>
 800c708:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c70c:	edd4 7a00 	vldr	s15, [r4]
 800c710:	eee0 7a08 	vfma.f32	s15, s0, s16
 800c714:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800c718:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c77c <quatErr2EulerErr+0x1cc>
 800c71c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c720:	ee17 0a90 	vmov	r0, s15
 800c724:	f7f3 ff30 	bl	8000588 <__aeabi_f2d>
 800c728:	2200      	movs	r2, #0
 800c72a:	4b18      	ldr	r3, [pc, #96]	; (800c78c <quatErr2EulerErr+0x1dc>)
 800c72c:	4606      	mov	r6, r0
 800c72e:	460f      	mov	r7, r1
 800c730:	f7f4 f9fe 	bl	8000b30 <__aeabi_dcmple>
 800c734:	b908      	cbnz	r0, 800c73a <quatErr2EulerErr+0x18a>
 800c736:	2600      	movs	r6, #0
 800c738:	4f14      	ldr	r7, [pc, #80]	; (800c78c <quatErr2EulerErr+0x1dc>)
 800c73a:	4639      	mov	r1, r7
 800c73c:	4630      	mov	r0, r6
 800c73e:	f7f4 fa73 	bl	8000c28 <__aeabi_d2f>
 800c742:	f7f3 ff21 	bl	8000588 <__aeabi_f2d>
 800c746:	2200      	movs	r2, #0
 800c748:	4b0e      	ldr	r3, [pc, #56]	; (800c784 <quatErr2EulerErr+0x1d4>)
 800c74a:	4606      	mov	r6, r0
 800c74c:	460f      	mov	r7, r1
 800c74e:	f7f4 f9f9 	bl	8000b44 <__aeabi_dcmpge>
 800c752:	b908      	cbnz	r0, 800c758 <quatErr2EulerErr+0x1a8>
 800c754:	2600      	movs	r6, #0
 800c756:	4f0b      	ldr	r7, [pc, #44]	; (800c784 <quatErr2EulerErr+0x1d4>)
 800c758:	4630      	mov	r0, r6
 800c75a:	4639      	mov	r1, r7
 800c75c:	f7f4 fa64 	bl	8000c28 <__aeabi_d2f>
 800c760:	60a8      	str	r0, [r5, #8]
 800c762:	ecbd 8b04 	vpop	{d8-d9}
 800c766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c76a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800c794 <quatErr2EulerErr+0x1e4>
 800c76e:	edd4 7a00 	vldr	s15, [r4]
 800c772:	eee8 7a07 	vfma.f32	s15, s16, s14
 800c776:	e7cd      	b.n	800c714 <quatErr2EulerErr+0x164>
 800c778:	3c8efa35 	.word	0x3c8efa35
 800c77c:	42e52ee1 	.word	0x42e52ee1
 800c780:	40568000 	.word	0x40568000
 800c784:	3ff00000 	.word	0x3ff00000
 800c788:	3a83126f 	.word	0x3a83126f
 800c78c:	40668000 	.word	0x40668000
 800c790:	3fbc430e 	.word	0x3fbc430e
 800c794:	42c6ab07 	.word	0x42c6ab07

0800c798 <m_b_interp1q_constrain>:
 800c798:	ed90 7a00 	vldr	s14, [r0]
 800c79c:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800c7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a4:	d53c      	bpl.n	800c820 <m_b_interp1q_constrain+0x88>
 800c7a6:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 800c7aa:	eef4 7ac0 	vcmpe.f32	s15, s0
 800c7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b2:	dd32      	ble.n	800c81a <m_b_interp1q_constrain+0x82>
 800c7b4:	b4f0      	push	{r4, r5, r6, r7}
 800c7b6:	240a      	movs	r4, #10
 800c7b8:	2602      	movs	r6, #2
 800c7ba:	2501      	movs	r5, #1
 800c7bc:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 800c7c0:	e007      	b.n	800c7d2 <m_b_interp1q_constrain+0x3a>
 800c7c2:	edd2 7a00 	vldr	s15, [r2]
 800c7c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ce:	da2a      	bge.n	800c826 <m_b_interp1q_constrain+0x8e>
 800c7d0:	461c      	mov	r4, r3
 800c7d2:	1963      	adds	r3, r4, r5
 800c7d4:	42b4      	cmp	r4, r6
 800c7d6:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 800c7da:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800c7de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c7e2:	d8ee      	bhi.n	800c7c2 <m_b_interp1q_constrain+0x2a>
 800c7e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c7e8:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c7ec:	442b      	add	r3, r5
 800c7ee:	009a      	lsls	r2, r3, #2
 800c7f0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c7f4:	3204      	adds	r2, #4
 800c7f6:	ed93 0a00 	vldr	s0, [r3]
 800c7fa:	4410      	add	r0, r2
 800c7fc:	4411      	add	r1, r2
 800c7fe:	ed90 6a00 	vldr	s12, [r0]
 800c802:	edd1 6a00 	vldr	s13, [r1]
 800c806:	ee36 7a47 	vsub.f32	s14, s12, s14
 800c80a:	ee76 6ac0 	vsub.f32	s13, s13, s0
 800c80e:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800c812:	bcf0      	pop	{r4, r5, r6, r7}
 800c814:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c818:	4770      	bx	lr
 800c81a:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
 800c81e:	4770      	bx	lr
 800c820:	ed91 0a00 	vldr	s0, [r1]
 800c824:	4770      	bx	lr
 800c826:	eeb0 7a67 	vmov.f32	s14, s15
 800c82a:	1c5e      	adds	r6, r3, #1
 800c82c:	461d      	mov	r5, r3
 800c82e:	e7d0      	b.n	800c7d2 <m_b_interp1q_constrain+0x3a>

0800c830 <m_interp1q_constrain>:
 800c830:	ed90 7a00 	vldr	s14, [r0]
 800c834:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800c838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c83c:	d53c      	bpl.n	800c8b8 <m_interp1q_constrain+0x88>
 800c83e:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 800c842:	eef4 7ac0 	vcmpe.f32	s15, s0
 800c846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84a:	dd32      	ble.n	800c8b2 <m_interp1q_constrain+0x82>
 800c84c:	b4f0      	push	{r4, r5, r6, r7}
 800c84e:	240d      	movs	r4, #13
 800c850:	2602      	movs	r6, #2
 800c852:	2501      	movs	r5, #1
 800c854:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 800c858:	e007      	b.n	800c86a <m_interp1q_constrain+0x3a>
 800c85a:	edd2 7a00 	vldr	s15, [r2]
 800c85e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c866:	da2a      	bge.n	800c8be <m_interp1q_constrain+0x8e>
 800c868:	461c      	mov	r4, r3
 800c86a:	1963      	adds	r3, r4, r5
 800c86c:	42b4      	cmp	r4, r6
 800c86e:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 800c872:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800c876:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c87a:	d8ee      	bhi.n	800c85a <m_interp1q_constrain+0x2a>
 800c87c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c880:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c884:	442b      	add	r3, r5
 800c886:	009a      	lsls	r2, r3, #2
 800c888:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c88c:	3204      	adds	r2, #4
 800c88e:	ed93 0a00 	vldr	s0, [r3]
 800c892:	4410      	add	r0, r2
 800c894:	4411      	add	r1, r2
 800c896:	ed90 6a00 	vldr	s12, [r0]
 800c89a:	edd1 6a00 	vldr	s13, [r1]
 800c89e:	ee36 7a47 	vsub.f32	s14, s12, s14
 800c8a2:	ee76 6ac0 	vsub.f32	s13, s13, s0
 800c8a6:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800c8aa:	bcf0      	pop	{r4, r5, r6, r7}
 800c8ac:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c8b0:	4770      	bx	lr
 800c8b2:	ed91 0a0c 	vldr	s0, [r1, #48]	; 0x30
 800c8b6:	4770      	bx	lr
 800c8b8:	ed91 0a00 	vldr	s0, [r1]
 800c8bc:	4770      	bx	lr
 800c8be:	eeb0 7a67 	vmov.f32	s14, s15
 800c8c2:	1c5e      	adds	r6, r3, #1
 800c8c4:	461d      	mov	r5, r3
 800c8c6:	e7d0      	b.n	800c86a <m_interp1q_constrain+0x3a>

0800c8c8 <m_rt_atan2f_snf>:
 800c8c8:	b508      	push	{r3, lr}
 800c8ca:	4b37      	ldr	r3, [pc, #220]	; (800c9a8 <m_rt_atan2f_snf+0xe0>)
 800c8cc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800c8d0:	eeb4 0a67 	vcmp.f32	s0, s15
 800c8d4:	ed2d 8b04 	vpush	{d8-d9}
 800c8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8dc:	eeb0 9a40 	vmov.f32	s18, s0
 800c8e0:	d014      	beq.n	800c90c <m_rt_atan2f_snf+0x44>
 800c8e2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800c8e6:	eeb4 0a47 	vcmp.f32	s0, s14
 800c8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ee:	d00d      	beq.n	800c90c <m_rt_atan2f_snf+0x44>
 800c8f0:	eef5 0a40 	vcmp.f32	s1, #0.0
 800c8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f8:	d132      	bne.n	800c960 <m_rt_atan2f_snf+0x98>
 800c8fa:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800c8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c902:	dc48      	bgt.n	800c996 <m_rt_atan2f_snf+0xce>
 800c904:	d44c      	bmi.n	800c9a0 <m_rt_atan2f_snf+0xd8>
 800c906:	eeb0 0a60 	vmov.f32	s0, s1
 800c90a:	e01a      	b.n	800c942 <m_rt_atan2f_snf+0x7a>
 800c90c:	eef4 0a67 	vcmp.f32	s1, s15
 800c910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c914:	d118      	bne.n	800c948 <m_rt_atan2f_snf+0x80>
 800c916:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800c91a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c9ac <m_rt_atan2f_snf+0xe4>
 800c91e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c9b0 <m_rt_atan2f_snf+0xe8>
 800c922:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800c9b4 <m_rt_atan2f_snf+0xec>
 800c926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c92a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800c9b8 <m_rt_atan2f_snf+0xf0>
 800c92e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800c932:	fe77 7aa6 	vselgt.f32	s15, s15, s13
 800c936:	fe37 0a00 	vselgt.f32	s0, s14, s0
 800c93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c93e:	fe30 0a27 	vselgt.f32	s0, s0, s15
 800c942:	ecbd 8b04 	vpop	{d8-d9}
 800c946:	bd08      	pop	{r3, pc}
 800c948:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800c94c:	eef4 0a67 	vcmp.f32	s1, s15
 800c950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c954:	d0df      	beq.n	800c916 <m_rt_atan2f_snf+0x4e>
 800c956:	eef5 0a40 	vcmp.f32	s1, #0.0
 800c95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c95e:	d0cc      	beq.n	800c8fa <m_rt_atan2f_snf+0x32>
 800c960:	ee10 0a90 	vmov	r0, s1
 800c964:	f7f3 fe10 	bl	8000588 <__aeabi_f2d>
 800c968:	ec41 0b18 	vmov	d8, r0, r1
 800c96c:	ee19 0a10 	vmov	r0, s18
 800c970:	f7f3 fe0a 	bl	8000588 <__aeabi_f2d>
 800c974:	eeb0 1a48 	vmov.f32	s2, s16
 800c978:	eef0 1a68 	vmov.f32	s3, s17
 800c97c:	ec41 0b10 	vmov	d0, r0, r1
 800c980:	f00e f812 	bl	801a9a8 <atan2>
 800c984:	ec51 0b10 	vmov	r0, r1, d0
 800c988:	f7f4 f94e 	bl	8000c28 <__aeabi_d2f>
 800c98c:	ee00 0a10 	vmov	s0, r0
 800c990:	ecbd 8b04 	vpop	{d8-d9}
 800c994:	bd08      	pop	{r3, pc}
 800c996:	ecbd 8b04 	vpop	{d8-d9}
 800c99a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800c9bc <m_rt_atan2f_snf+0xf4>
 800c99e:	bd08      	pop	{r3, pc}
 800c9a0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800c9c0 <m_rt_atan2f_snf+0xf8>
 800c9a4:	e7cd      	b.n	800c942 <m_rt_atan2f_snf+0x7a>
 800c9a6:	bf00      	nop
 800c9a8:	20001448 	.word	0x20001448
 800c9ac:	4016cbe4 	.word	0x4016cbe4
 800c9b0:	c016cbe4 	.word	0xc016cbe4
 800c9b4:	3f490fdb 	.word	0x3f490fdb
 800c9b8:	bf490fdb 	.word	0xbf490fdb
 800c9bc:	3fc90fdb 	.word	0x3fc90fdb
 800c9c0:	bfc90fdb 	.word	0xbfc90fdb

0800c9c4 <output_update>:
 800c9c4:	edd0 6a00 	vldr	s13, [r0]
 800c9c8:	ed90 7a01 	vldr	s14, [r0, #4]
 800c9cc:	edd0 7a02 	vldr	s15, [r0, #8]
 800c9d0:	eef1 6a66 	vneg.f32	s13, s13
 800c9d4:	eeb1 7a47 	vneg.f32	s14, s14
 800c9d8:	eef1 7a67 	vneg.f32	s15, s15
 800c9dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9e0:	ed2d 8b0c 	vpush	{d8-d13}
 800c9e4:	b08b      	sub	sp, #44	; 0x2c
 800c9e6:	4688      	mov	r8, r1
 800c9e8:	edc0 6a00 	vstr	s13, [r0]
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	f89d 707c 	ldrb.w	r7, [sp, #124]	; 0x7c
 800c9f2:	a901      	add	r1, sp, #4
 800c9f4:	ed80 7a01 	vstr	s14, [r0, #4]
 800c9f8:	4615      	mov	r5, r2
 800c9fa:	edc0 7a02 	vstr	s15, [r0, #8]
 800c9fe:	461e      	mov	r6, r3
 800ca00:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800ca04:	f7fe ffe0 	bl	800b9c8 <m_q2dcm_eml>
 800ca08:	2f00      	cmp	r7, #0
 800ca0a:	f040 8088 	bne.w	800cb1e <output_update+0x15a>
 800ca0e:	9a08      	ldr	r2, [sp, #32]
 800ca10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca12:	9907      	ldr	r1, [sp, #28]
 800ca14:	6072      	str	r2, [r6, #4]
 800ca16:	60b3      	str	r3, [r6, #8]
 800ca18:	6031      	str	r1, [r6, #0]
 800ca1a:	ed94 0a03 	vldr	s0, [r4, #12]
 800ca1e:	edd4 9a00 	vldr	s19, [r4]
 800ca22:	ee20 8a00 	vmul.f32	s16, s0, s0
 800ca26:	ed94 aa02 	vldr	s20, [r4, #8]
 800ca2a:	ed94 9a01 	vldr	s18, [r4, #4]
 800ca2e:	ee2a 0a00 	vmul.f32	s0, s20, s0
 800ca32:	eef0 0a48 	vmov.f32	s1, s16
 800ca36:	eef1 aa49 	vneg.f32	s21, s18
 800ca3a:	eea9 0a89 	vfma.f32	s0, s19, s18
 800ca3e:	eee9 0aa9 	vfma.f32	s1, s19, s19
 800ca42:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ca46:	eee9 0a49 	vfms.f32	s1, s18, s18
 800ca4a:	eeea 0a4a 	vfms.f32	s1, s20, s20
 800ca4e:	f7ff ff3b 	bl	800c8c8 <m_rt_atan2f_snf>
 800ca52:	ed85 0a00 	vstr	s0, [r5]
 800ca56:	edd4 6a01 	vldr	s13, [r4, #4]
 800ca5a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800ca5e:	edd4 7a03 	vldr	s15, [r4, #12]
 800ca62:	eef0 8a40 	vmov.f32	s17, s0
 800ca66:	ed94 6a00 	vldr	s12, [r4]
 800ca6a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ca6e:	edd4 6a02 	vldr	s13, [r4, #8]
 800ca72:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ca76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca7a:	ee17 0a90 	vmov	r0, s15
 800ca7e:	f7f3 fd83 	bl	8000588 <__aeabi_f2d>
 800ca82:	ec41 0b10 	vmov	d0, r0, r1
 800ca86:	f00d ff55 	bl	801a934 <asin>
 800ca8a:	ec51 0b10 	vmov	r0, r1, d0
 800ca8e:	f7f4 f8cb 	bl	8000c28 <__aeabi_d2f>
 800ca92:	eef0 0a48 	vmov.f32	s1, s16
 800ca96:	6068      	str	r0, [r5, #4]
 800ca98:	ee08 0a10 	vmov	s16, r0
 800ca9c:	edd4 7a03 	vldr	s15, [r4, #12]
 800caa0:	eeea 0a0a 	vfma.f32	s1, s20, s20
 800caa4:	ed94 0a00 	vldr	s0, [r4]
 800caa8:	ed94 7a01 	vldr	s14, [r4, #4]
 800caac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cab0:	edd4 7a02 	vldr	s15, [r4, #8]
 800cab4:	eea7 0a27 	vfma.f32	s0, s14, s15
 800cab8:	eee9 0ae9 	vfms.f32	s1, s19, s19
 800cabc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cac0:	eeea 0a89 	vfma.f32	s1, s21, s18
 800cac4:	f7ff ff00 	bl	800c8c8 <m_rt_atan2f_snf>
 800cac8:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800ccb4 <output_update+0x2f0>
 800cacc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800cad0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cad4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cad8:	edc5 8a00 	vstr	s17, [r5]
 800cadc:	ed85 8a01 	vstr	s16, [r5, #4]
 800cae0:	ed85 0a02 	vstr	s0, [r5, #8]
 800cae4:	ed98 7a00 	vldr	s14, [r8]
 800cae8:	edd6 7a00 	vldr	s15, [r6]
 800caec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800caf0:	edc9 7a00 	vstr	s15, [r9]
 800caf4:	ed98 7a01 	vldr	s14, [r8, #4]
 800caf8:	edd6 7a01 	vldr	s15, [r6, #4]
 800cafc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb00:	edc9 7a01 	vstr	s15, [r9, #4]
 800cb04:	edd6 7a02 	vldr	s15, [r6, #8]
 800cb08:	ed98 7a02 	vldr	s14, [r8, #8]
 800cb0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb10:	edc9 7a02 	vstr	s15, [r9, #8]
 800cb14:	b00b      	add	sp, #44	; 0x2c
 800cb16:	ecbd 8b0c 	vpop	{d8-d13}
 800cb1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb1e:	2f01      	cmp	r7, #1
 800cb20:	d018      	beq.n	800cb54 <output_update+0x190>
 800cb22:	ed9f 6a64 	vldr	s12, [pc, #400]	; 800ccb4 <output_update+0x2f0>
 800cb26:	edd5 6a00 	vldr	s13, [r5]
 800cb2a:	ed95 7a01 	vldr	s14, [r5, #4]
 800cb2e:	edd5 7a02 	vldr	s15, [r5, #8]
 800cb32:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cb36:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cb3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cb3e:	edc5 6a00 	vstr	s13, [r5]
 800cb42:	ed85 7a01 	vstr	s14, [r5, #4]
 800cb46:	edc5 7a02 	vstr	s15, [r5, #8]
 800cb4a:	b00b      	add	sp, #44	; 0x2c
 800cb4c:	ecbd 8b0c 	vpop	{d8-d13}
 800cb50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb54:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800cb58:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 800cb5c:	9a08      	ldr	r2, [sp, #32]
 800cb5e:	eeb0 da00 	vmov.f32	s26, #0	; 0x40000000  2.0
 800cb62:	eef1 7a67 	vneg.f32	s15, s15
 800cb66:	9b07      	ldr	r3, [sp, #28]
 800cb68:	6032      	str	r2, [r6, #0]
 800cb6a:	6073      	str	r3, [r6, #4]
 800cb6c:	edc6 7a02 	vstr	s15, [r6, #8]
 800cb70:	edd4 7a02 	vldr	s15, [r4, #8]
 800cb74:	edd4 8a00 	vldr	s17, [r4]
 800cb78:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800cb7c:	ed94 9a01 	vldr	s18, [r4, #4]
 800cb80:	ed94 8a03 	vldr	s16, [r4, #12]
 800cb84:	eeb1 ca67 	vneg.f32	s24, s15
 800cb88:	ee68 9a89 	vmul.f32	s19, s17, s18
 800cb8c:	eea8 7aa8 	vfma.f32	s14, s17, s17
 800cb90:	ee69 aa09 	vmul.f32	s21, s18, s18
 800cb94:	eee7 9ac8 	vfms.f32	s19, s15, s16
 800cb98:	eef0 7a6c 	vmov.f32	s15, s25
 800cb9c:	ee29 aa08 	vmul.f32	s20, s18, s16
 800cba0:	ee28 8a68 	vnmul.f32	s16, s16, s17
 800cba4:	eee7 7a4d 	vfms.f32	s15, s14, s26
 800cba8:	eea8 aa8c 	vfma.f32	s20, s17, s24
 800cbac:	eeac 8a09 	vfma.f32	s16, s24, s18
 800cbb0:	ee17 0a90 	vmov	r0, s15
 800cbb4:	f7f3 fce8 	bl	8000588 <__aeabi_f2d>
 800cbb8:	ee79 7aa9 	vadd.f32	s15, s19, s19
 800cbbc:	ec41 0b1b 	vmov	d11, r0, r1
 800cbc0:	ee17 0a90 	vmov	r0, s15
 800cbc4:	f7f3 fce0 	bl	8000588 <__aeabi_f2d>
 800cbc8:	eeb0 1a4b 	vmov.f32	s2, s22
 800cbcc:	eef0 1a6b 	vmov.f32	s3, s23
 800cbd0:	ec41 0b10 	vmov	d0, r0, r1
 800cbd4:	f00d fee8 	bl	801a9a8 <atan2>
 800cbd8:	ec51 0b10 	vmov	r0, r1, d0
 800cbdc:	f7f4 f824 	bl	8000c28 <__aeabi_d2f>
 800cbe0:	eef0 7a6a 	vmov.f32	s15, s21
 800cbe4:	ee09 0a90 	vmov	s19, r0
 800cbe8:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800cbec:	eef1 aa69 	vneg.f32	s21, s19
 800cbf0:	eee7 cacd 	vfms.f32	s25, s15, s26
 800cbf4:	ee1c 0a90 	vmov	r0, s25
 800cbf8:	f7f3 fcc6 	bl	8000588 <__aeabi_f2d>
 800cbfc:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 800cc00:	ec41 0b1b 	vmov	d11, r0, r1
 800cc04:	ee17 0a90 	vmov	r0, s15
 800cc08:	f7f3 fcbe 	bl	8000588 <__aeabi_f2d>
 800cc0c:	eeb0 1a4b 	vmov.f32	s2, s22
 800cc10:	eef0 1a6b 	vmov.f32	s3, s23
 800cc14:	ec41 0b10 	vmov	d0, r0, r1
 800cc18:	f00d fec6 	bl	801a9a8 <atan2>
 800cc1c:	ec51 0b10 	vmov	r0, r1, d0
 800cc20:	f7f4 f802 	bl	8000c28 <__aeabi_d2f>
 800cc24:	ee07 0a90 	vmov	s15, r0
 800cc28:	eef1 8a67 	vneg.f32	s17, s15
 800cc2c:	ee78 7a08 	vadd.f32	s15, s16, s16
 800cc30:	ee17 0a90 	vmov	r0, s15
 800cc34:	f7f3 fca8 	bl	8000588 <__aeabi_f2d>
 800cc38:	ec41 0b10 	vmov	d0, r0, r1
 800cc3c:	f00d fe7a 	bl	801a934 <asin>
 800cc40:	ec51 0b10 	vmov	r0, r1, d0
 800cc44:	f7f3 fff0 	bl	8000c28 <__aeabi_d2f>
 800cc48:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800cc4c:	ee07 0a90 	vmov	s15, r0
 800cc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc54:	dd03      	ble.n	800cc5e <output_update+0x29a>
 800cc56:	eddf aa18 	vldr	s21, [pc, #96]	; 800ccb8 <output_update+0x2f4>
 800cc5a:	ee7a aae9 	vsub.f32	s21, s21, s19
 800cc5e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800ccb4 <output_update+0x2f0>
 800cc62:	ee6a aa87 	vmul.f32	s21, s21, s14
 800cc66:	ee68 8a87 	vmul.f32	s17, s17, s14
 800cc6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc6e:	edc5 aa00 	vstr	s21, [r5]
 800cc72:	edc5 8a01 	vstr	s17, [r5, #4]
 800cc76:	edc5 7a02 	vstr	s15, [r5, #8]
 800cc7a:	ed98 7a01 	vldr	s14, [r8, #4]
 800cc7e:	edd6 7a00 	vldr	s15, [r6]
 800cc82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc86:	edc9 7a00 	vstr	s15, [r9]
 800cc8a:	ed98 7a00 	vldr	s14, [r8]
 800cc8e:	edd6 7a01 	vldr	s15, [r6, #4]
 800cc92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc96:	edc9 7a01 	vstr	s15, [r9, #4]
 800cc9a:	edd6 7a02 	vldr	s15, [r6, #8]
 800cc9e:	ed98 7a02 	vldr	s14, [r8, #8]
 800cca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cca6:	edc9 7a02 	vstr	s15, [r9, #8]
 800ccaa:	b00b      	add	sp, #44	; 0x2c
 800ccac:	ecbd 8b0c 	vpop	{d8-d13}
 800ccb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccb4:	42652ee1 	.word	0x42652ee1
 800ccb8:	40c90e56 	.word	0x40c90e56

0800ccbc <iNemo_setOrientation.constprop.0>:
 800ccbc:	4a6d      	ldr	r2, [pc, #436]	; (800ce74 <iNemo_setOrientation.constprop.0+0x1b8>)
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	4b6d      	ldr	r3, [pc, #436]	; (800ce78 <iNemo_setOrientation.constprop.0+0x1bc>)
 800ccc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc6:	f892 e000 	ldrb.w	lr, [r2]
 800ccca:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 800ccce:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 800ccd2:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
 800ccd6:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 800ccda:	2e17      	cmp	r6, #23
 800ccdc:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 800cce0:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 800cce4:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 800cce8:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
 800ccec:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 800ccf0:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
 800ccf4:	d803      	bhi.n	800ccfe <iNemo_setOrientation.constprop.0+0x42>
 800ccf6:	f10e 0e20 	add.w	lr, lr, #32
 800ccfa:	fa5f fe8e 	uxtb.w	lr, lr
 800ccfe:	7915      	ldrb	r5, [r2, #4]
 800cd00:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 800cd04:	2917      	cmp	r1, #23
 800cd06:	d801      	bhi.n	800cd0c <iNemo_setOrientation.constprop.0+0x50>
 800cd08:	3520      	adds	r5, #32
 800cd0a:	b2ed      	uxtb	r5, r5
 800cd0c:	7a11      	ldrb	r1, [r2, #8]
 800cd0e:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 800cd12:	2817      	cmp	r0, #23
 800cd14:	d801      	bhi.n	800cd1a <iNemo_setOrientation.constprop.0+0x5e>
 800cd16:	3120      	adds	r1, #32
 800cd18:	b2c9      	uxtb	r1, r1
 800cd1a:	7857      	ldrb	r7, [r2, #1]
 800cd1c:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 800cd20:	2817      	cmp	r0, #23
 800cd22:	d801      	bhi.n	800cd28 <iNemo_setOrientation.constprop.0+0x6c>
 800cd24:	3720      	adds	r7, #32
 800cd26:	b2ff      	uxtb	r7, r7
 800cd28:	7954      	ldrb	r4, [r2, #5]
 800cd2a:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 800cd2e:	2817      	cmp	r0, #23
 800cd30:	d801      	bhi.n	800cd36 <iNemo_setOrientation.constprop.0+0x7a>
 800cd32:	3420      	adds	r4, #32
 800cd34:	b2e4      	uxtb	r4, r4
 800cd36:	f892 c009 	ldrb.w	ip, [r2, #9]
 800cd3a:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 800cd3e:	2817      	cmp	r0, #23
 800cd40:	d803      	bhi.n	800cd4a <iNemo_setOrientation.constprop.0+0x8e>
 800cd42:	f10c 0c20 	add.w	ip, ip, #32
 800cd46:	fa5f fc8c 	uxtb.w	ip, ip
 800cd4a:	7896      	ldrb	r6, [r2, #2]
 800cd4c:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 800cd50:	2817      	cmp	r0, #23
 800cd52:	d801      	bhi.n	800cd58 <iNemo_setOrientation.constprop.0+0x9c>
 800cd54:	3620      	adds	r6, #32
 800cd56:	b2f6      	uxtb	r6, r6
 800cd58:	7990      	ldrb	r0, [r2, #6]
 800cd5a:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 800cd5e:	f1b8 0f17 	cmp.w	r8, #23
 800cd62:	d801      	bhi.n	800cd68 <iNemo_setOrientation.constprop.0+0xac>
 800cd64:	3020      	adds	r0, #32
 800cd66:	b2c0      	uxtb	r0, r0
 800cd68:	7a92      	ldrb	r2, [r2, #10]
 800cd6a:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 800cd6e:	f1b8 0f17 	cmp.w	r8, #23
 800cd72:	d801      	bhi.n	800cd78 <iNemo_setOrientation.constprop.0+0xbc>
 800cd74:	3220      	adds	r2, #32
 800cd76:	b2d2      	uxtb	r2, r2
 800cd78:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 800cd7c:	f1be 0f13 	cmp.w	lr, #19
 800cd80:	d80f      	bhi.n	800cda2 <iNemo_setOrientation.constprop.0+0xe6>
 800cd82:	e8df f00e 	tbb	[pc, lr]
 800cd86:	ab0a      	.short	0xab0a
 800cd88:	0e0e0e0e 	.word	0x0e0e0e0e
 800cd8c:	0e0e0e0e 	.word	0x0e0e0e0e
 800cd90:	0e0e0eb0 	.word	0x0e0e0eb0
 800cd94:	ba0eb50e 	.word	0xba0eb50e
 800cd98:	bf0e      	.short	0xbf0e
 800cd9a:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800cd9e:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 800cda2:	3f64      	subs	r7, #100	; 0x64
 800cda4:	2f13      	cmp	r7, #19
 800cda6:	d80e      	bhi.n	800cdc6 <iNemo_setOrientation.constprop.0+0x10a>
 800cda8:	e8df f007 	tbb	[pc, r7]
 800cdac:	0d0db10a 	.word	0x0d0db10a
 800cdb0:	0d0d0d0d 	.word	0x0d0d0d0d
 800cdb4:	0db50d0d 	.word	0x0db50d0d
 800cdb8:	b90d0d0d 	.word	0xb90d0d0d
 800cdbc:	c10dbd0d 	.word	0xc10dbd0d
 800cdc0:	27ff      	movs	r7, #255	; 0xff
 800cdc2:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 800cdc6:	3e64      	subs	r6, #100	; 0x64
 800cdc8:	2e13      	cmp	r6, #19
 800cdca:	d80e      	bhi.n	800cdea <iNemo_setOrientation.constprop.0+0x12e>
 800cdcc:	e8df f006 	tbb	[pc, r6]
 800cdd0:	0d0db30a 	.word	0x0d0db30a
 800cdd4:	0d0d0d0d 	.word	0x0d0d0d0d
 800cdd8:	0db70d0d 	.word	0x0db70d0d
 800cddc:	bb0d0d0d 	.word	0xbb0d0d0d
 800cde0:	c30dbf0d 	.word	0xc30dbf0d
 800cde4:	26ff      	movs	r6, #255	; 0xff
 800cde6:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 800cdea:	3d64      	subs	r5, #100	; 0x64
 800cdec:	2d13      	cmp	r5, #19
 800cdee:	d80e      	bhi.n	800ce0e <iNemo_setOrientation.constprop.0+0x152>
 800cdf0:	e8df f005 	tbb	[pc, r5]
 800cdf4:	0d0db50a 	.word	0x0d0db50a
 800cdf8:	0d0d0d0d 	.word	0x0d0d0d0d
 800cdfc:	0db90d0d 	.word	0x0db90d0d
 800ce00:	bd0d0d0d 	.word	0xbd0d0d0d
 800ce04:	c50dc10d 	.word	0xc50dc10d
 800ce08:	25ff      	movs	r5, #255	; 0xff
 800ce0a:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 800ce0e:	3c64      	subs	r4, #100	; 0x64
 800ce10:	2c13      	cmp	r4, #19
 800ce12:	d80e      	bhi.n	800ce32 <iNemo_setOrientation.constprop.0+0x176>
 800ce14:	e8df f004 	tbb	[pc, r4]
 800ce18:	0d0db70a 	.word	0x0d0db70a
 800ce1c:	0d0d0d0d 	.word	0x0d0d0d0d
 800ce20:	0dbb0d0d 	.word	0x0dbb0d0d
 800ce24:	bf0d0d0d 	.word	0xbf0d0d0d
 800ce28:	c70dc30d 	.word	0xc70dc30d
 800ce2c:	24ff      	movs	r4, #255	; 0xff
 800ce2e:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 800ce32:	3864      	subs	r0, #100	; 0x64
 800ce34:	2813      	cmp	r0, #19
 800ce36:	d80e      	bhi.n	800ce56 <iNemo_setOrientation.constprop.0+0x19a>
 800ce38:	e8df f000 	tbb	[pc, r0]
 800ce3c:	0d0db90a 	.word	0x0d0db90a
 800ce40:	0d0d0d0d 	.word	0x0d0d0d0d
 800ce44:	0dbd0d0d 	.word	0x0dbd0d0d
 800ce48:	c10d0d0d 	.word	0xc10d0d0d
 800ce4c:	c90dc50d 	.word	0xc90dc50d
 800ce50:	20ff      	movs	r0, #255	; 0xff
 800ce52:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 800ce56:	3964      	subs	r1, #100	; 0x64
 800ce58:	2913      	cmp	r1, #19
 800ce5a:	d812      	bhi.n	800ce82 <iNemo_setOrientation.constprop.0+0x1c6>
 800ce5c:	e8df f001 	tbb	[pc, r1]
 800ce60:	1111bb0e 	.word	0x1111bb0e
 800ce64:	11111111 	.word	0x11111111
 800ce68:	11bf1111 	.word	0x11bf1111
 800ce6c:	c3111111 	.word	0xc3111111
 800ce70:	cb11c711 	.word	0xcb11c711
 800ce74:	20000000 	.word	0x20000000
 800ce78:	20001448 	.word	0x20001448
 800ce7c:	21ff      	movs	r1, #255	; 0xff
 800ce7e:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 800ce82:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800ce86:	f1bc 0f13 	cmp.w	ip, #19
 800ce8a:	d80e      	bhi.n	800ceaa <iNemo_setOrientation.constprop.0+0x1ee>
 800ce8c:	e8df f00c 	tbb	[pc, ip]
 800ce90:	0d0db70a 	.word	0x0d0db70a
 800ce94:	0d0d0d0d 	.word	0x0d0d0d0d
 800ce98:	0dbb0d0d 	.word	0x0dbb0d0d
 800ce9c:	bf0d0d0d 	.word	0xbf0d0d0d
 800cea0:	c70dc30d 	.word	0xc70dc30d
 800cea4:	21ff      	movs	r1, #255	; 0xff
 800cea6:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 800ceaa:	3a64      	subs	r2, #100	; 0x64
 800ceac:	2a13      	cmp	r2, #19
 800ceae:	d80e      	bhi.n	800cece <iNemo_setOrientation.constprop.0+0x212>
 800ceb0:	e8df f002 	tbb	[pc, r2]
 800ceb4:	0d0db90a 	.word	0x0d0db90a
 800ceb8:	0d0d0d0d 	.word	0x0d0d0d0d
 800cebc:	0dbe0d0d 	.word	0x0dbe0d0d
 800cec0:	c30d0d0d 	.word	0xc30d0d0d
 800cec4:	0f0dc80d 	.word	0x0f0dc80d
 800cec8:	22ff      	movs	r2, #255	; 0xff
 800ceca:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800cece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced2:	22ff      	movs	r2, #255	; 0xff
 800ced4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 800ced8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cedc:	f04f 0e01 	mov.w	lr, #1
 800cee0:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 800cee4:	e75d      	b.n	800cda2 <iNemo_setOrientation.constprop.0+0xe6>
 800cee6:	f04f 0e01 	mov.w	lr, #1
 800ceea:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 800ceee:	e758      	b.n	800cda2 <iNemo_setOrientation.constprop.0+0xe6>
 800cef0:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800cef4:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 800cef8:	e753      	b.n	800cda2 <iNemo_setOrientation.constprop.0+0xe6>
 800cefa:	f04f 0e01 	mov.w	lr, #1
 800cefe:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 800cf02:	e74e      	b.n	800cda2 <iNemo_setOrientation.constprop.0+0xe6>
 800cf04:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800cf08:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 800cf0c:	e749      	b.n	800cda2 <iNemo_setOrientation.constprop.0+0xe6>
 800cf0e:	2701      	movs	r7, #1
 800cf10:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 800cf14:	e757      	b.n	800cdc6 <iNemo_setOrientation.constprop.0+0x10a>
 800cf16:	2701      	movs	r7, #1
 800cf18:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 800cf1c:	e753      	b.n	800cdc6 <iNemo_setOrientation.constprop.0+0x10a>
 800cf1e:	27ff      	movs	r7, #255	; 0xff
 800cf20:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 800cf24:	e74f      	b.n	800cdc6 <iNemo_setOrientation.constprop.0+0x10a>
 800cf26:	2701      	movs	r7, #1
 800cf28:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 800cf2c:	e74b      	b.n	800cdc6 <iNemo_setOrientation.constprop.0+0x10a>
 800cf2e:	27ff      	movs	r7, #255	; 0xff
 800cf30:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 800cf34:	e747      	b.n	800cdc6 <iNemo_setOrientation.constprop.0+0x10a>
 800cf36:	2601      	movs	r6, #1
 800cf38:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 800cf3c:	e755      	b.n	800cdea <iNemo_setOrientation.constprop.0+0x12e>
 800cf3e:	2601      	movs	r6, #1
 800cf40:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 800cf44:	e751      	b.n	800cdea <iNemo_setOrientation.constprop.0+0x12e>
 800cf46:	26ff      	movs	r6, #255	; 0xff
 800cf48:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 800cf4c:	e74d      	b.n	800cdea <iNemo_setOrientation.constprop.0+0x12e>
 800cf4e:	2601      	movs	r6, #1
 800cf50:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 800cf54:	e749      	b.n	800cdea <iNemo_setOrientation.constprop.0+0x12e>
 800cf56:	26ff      	movs	r6, #255	; 0xff
 800cf58:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 800cf5c:	e745      	b.n	800cdea <iNemo_setOrientation.constprop.0+0x12e>
 800cf5e:	2501      	movs	r5, #1
 800cf60:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 800cf64:	e753      	b.n	800ce0e <iNemo_setOrientation.constprop.0+0x152>
 800cf66:	2501      	movs	r5, #1
 800cf68:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 800cf6c:	e74f      	b.n	800ce0e <iNemo_setOrientation.constprop.0+0x152>
 800cf6e:	25ff      	movs	r5, #255	; 0xff
 800cf70:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 800cf74:	e74b      	b.n	800ce0e <iNemo_setOrientation.constprop.0+0x152>
 800cf76:	2501      	movs	r5, #1
 800cf78:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 800cf7c:	e747      	b.n	800ce0e <iNemo_setOrientation.constprop.0+0x152>
 800cf7e:	25ff      	movs	r5, #255	; 0xff
 800cf80:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 800cf84:	e743      	b.n	800ce0e <iNemo_setOrientation.constprop.0+0x152>
 800cf86:	2401      	movs	r4, #1
 800cf88:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 800cf8c:	e751      	b.n	800ce32 <iNemo_setOrientation.constprop.0+0x176>
 800cf8e:	2401      	movs	r4, #1
 800cf90:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 800cf94:	e74d      	b.n	800ce32 <iNemo_setOrientation.constprop.0+0x176>
 800cf96:	24ff      	movs	r4, #255	; 0xff
 800cf98:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 800cf9c:	e749      	b.n	800ce32 <iNemo_setOrientation.constprop.0+0x176>
 800cf9e:	2401      	movs	r4, #1
 800cfa0:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 800cfa4:	e745      	b.n	800ce32 <iNemo_setOrientation.constprop.0+0x176>
 800cfa6:	24ff      	movs	r4, #255	; 0xff
 800cfa8:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 800cfac:	e741      	b.n	800ce32 <iNemo_setOrientation.constprop.0+0x176>
 800cfae:	2001      	movs	r0, #1
 800cfb0:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 800cfb4:	e74f      	b.n	800ce56 <iNemo_setOrientation.constprop.0+0x19a>
 800cfb6:	2001      	movs	r0, #1
 800cfb8:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 800cfbc:	e74b      	b.n	800ce56 <iNemo_setOrientation.constprop.0+0x19a>
 800cfbe:	20ff      	movs	r0, #255	; 0xff
 800cfc0:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 800cfc4:	e747      	b.n	800ce56 <iNemo_setOrientation.constprop.0+0x19a>
 800cfc6:	2001      	movs	r0, #1
 800cfc8:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 800cfcc:	e743      	b.n	800ce56 <iNemo_setOrientation.constprop.0+0x19a>
 800cfce:	20ff      	movs	r0, #255	; 0xff
 800cfd0:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 800cfd4:	e73f      	b.n	800ce56 <iNemo_setOrientation.constprop.0+0x19a>
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 800cfdc:	e751      	b.n	800ce82 <iNemo_setOrientation.constprop.0+0x1c6>
 800cfde:	2101      	movs	r1, #1
 800cfe0:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 800cfe4:	e74d      	b.n	800ce82 <iNemo_setOrientation.constprop.0+0x1c6>
 800cfe6:	21ff      	movs	r1, #255	; 0xff
 800cfe8:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 800cfec:	e749      	b.n	800ce82 <iNemo_setOrientation.constprop.0+0x1c6>
 800cfee:	2101      	movs	r1, #1
 800cff0:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 800cff4:	e745      	b.n	800ce82 <iNemo_setOrientation.constprop.0+0x1c6>
 800cff6:	21ff      	movs	r1, #255	; 0xff
 800cff8:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 800cffc:	e741      	b.n	800ce82 <iNemo_setOrientation.constprop.0+0x1c6>
 800cffe:	2101      	movs	r1, #1
 800d000:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 800d004:	e751      	b.n	800ceaa <iNemo_setOrientation.constprop.0+0x1ee>
 800d006:	2101      	movs	r1, #1
 800d008:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 800d00c:	e74d      	b.n	800ceaa <iNemo_setOrientation.constprop.0+0x1ee>
 800d00e:	21ff      	movs	r1, #255	; 0xff
 800d010:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 800d014:	e749      	b.n	800ceaa <iNemo_setOrientation.constprop.0+0x1ee>
 800d016:	2101      	movs	r1, #1
 800d018:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 800d01c:	e745      	b.n	800ceaa <iNemo_setOrientation.constprop.0+0x1ee>
 800d01e:	21ff      	movs	r1, #255	; 0xff
 800d020:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 800d024:	e741      	b.n	800ceaa <iNemo_setOrientation.constprop.0+0x1ee>
 800d026:	2201      	movs	r2, #1
 800d028:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 800d02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d030:	2201      	movs	r2, #1
 800d032:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800d036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03a:	22ff      	movs	r2, #255	; 0xff
 800d03c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 800d040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d044:	2201      	movs	r2, #1
 800d046:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800d04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d04e:	bf00      	nop

0800d050 <iNemo_setOrientation_6X.constprop.0>:
 800d050:	4a6d      	ldr	r2, [pc, #436]	; (800d208 <iNemo_setOrientation_6X.constprop.0+0x1b8>)
 800d052:	2100      	movs	r1, #0
 800d054:	4b6d      	ldr	r3, [pc, #436]	; (800d20c <iNemo_setOrientation_6X.constprop.0+0x1bc>)
 800d056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d05a:	f892 e000 	ldrb.w	lr, [r2]
 800d05e:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 800d062:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 800d066:	f883 10d0 	strb.w	r1, [r3, #208]	; 0xd0
 800d06a:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 800d06e:	2e17      	cmp	r6, #23
 800d070:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 800d074:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 800d078:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 800d07c:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
 800d080:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 800d084:	f883 10e8 	strb.w	r1, [r3, #232]	; 0xe8
 800d088:	d803      	bhi.n	800d092 <iNemo_setOrientation_6X.constprop.0+0x42>
 800d08a:	f10e 0e20 	add.w	lr, lr, #32
 800d08e:	fa5f fe8e 	uxtb.w	lr, lr
 800d092:	7915      	ldrb	r5, [r2, #4]
 800d094:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 800d098:	2917      	cmp	r1, #23
 800d09a:	d801      	bhi.n	800d0a0 <iNemo_setOrientation_6X.constprop.0+0x50>
 800d09c:	3520      	adds	r5, #32
 800d09e:	b2ed      	uxtb	r5, r5
 800d0a0:	7a11      	ldrb	r1, [r2, #8]
 800d0a2:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 800d0a6:	2817      	cmp	r0, #23
 800d0a8:	d801      	bhi.n	800d0ae <iNemo_setOrientation_6X.constprop.0+0x5e>
 800d0aa:	3120      	adds	r1, #32
 800d0ac:	b2c9      	uxtb	r1, r1
 800d0ae:	7857      	ldrb	r7, [r2, #1]
 800d0b0:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 800d0b4:	2817      	cmp	r0, #23
 800d0b6:	d801      	bhi.n	800d0bc <iNemo_setOrientation_6X.constprop.0+0x6c>
 800d0b8:	3720      	adds	r7, #32
 800d0ba:	b2ff      	uxtb	r7, r7
 800d0bc:	7954      	ldrb	r4, [r2, #5]
 800d0be:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 800d0c2:	2817      	cmp	r0, #23
 800d0c4:	d801      	bhi.n	800d0ca <iNemo_setOrientation_6X.constprop.0+0x7a>
 800d0c6:	3420      	adds	r4, #32
 800d0c8:	b2e4      	uxtb	r4, r4
 800d0ca:	f892 c009 	ldrb.w	ip, [r2, #9]
 800d0ce:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 800d0d2:	2817      	cmp	r0, #23
 800d0d4:	d803      	bhi.n	800d0de <iNemo_setOrientation_6X.constprop.0+0x8e>
 800d0d6:	f10c 0c20 	add.w	ip, ip, #32
 800d0da:	fa5f fc8c 	uxtb.w	ip, ip
 800d0de:	7896      	ldrb	r6, [r2, #2]
 800d0e0:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 800d0e4:	2817      	cmp	r0, #23
 800d0e6:	d801      	bhi.n	800d0ec <iNemo_setOrientation_6X.constprop.0+0x9c>
 800d0e8:	3620      	adds	r6, #32
 800d0ea:	b2f6      	uxtb	r6, r6
 800d0ec:	7990      	ldrb	r0, [r2, #6]
 800d0ee:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 800d0f2:	f1b8 0f17 	cmp.w	r8, #23
 800d0f6:	d801      	bhi.n	800d0fc <iNemo_setOrientation_6X.constprop.0+0xac>
 800d0f8:	3020      	adds	r0, #32
 800d0fa:	b2c0      	uxtb	r0, r0
 800d0fc:	7a92      	ldrb	r2, [r2, #10]
 800d0fe:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 800d102:	f1b8 0f17 	cmp.w	r8, #23
 800d106:	d801      	bhi.n	800d10c <iNemo_setOrientation_6X.constprop.0+0xbc>
 800d108:	3220      	adds	r2, #32
 800d10a:	b2d2      	uxtb	r2, r2
 800d10c:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 800d110:	f1be 0f13 	cmp.w	lr, #19
 800d114:	d80f      	bhi.n	800d136 <iNemo_setOrientation_6X.constprop.0+0xe6>
 800d116:	e8df f00e 	tbb	[pc, lr]
 800d11a:	ab0a      	.short	0xab0a
 800d11c:	0e0e0e0e 	.word	0x0e0e0e0e
 800d120:	0e0e0e0e 	.word	0x0e0e0e0e
 800d124:	0e0e0eb0 	.word	0x0e0e0eb0
 800d128:	ba0eb50e 	.word	0xba0eb50e
 800d12c:	bf0e      	.short	0xbf0e
 800d12e:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800d132:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 800d136:	3f64      	subs	r7, #100	; 0x64
 800d138:	2f13      	cmp	r7, #19
 800d13a:	d80e      	bhi.n	800d15a <iNemo_setOrientation_6X.constprop.0+0x10a>
 800d13c:	e8df f007 	tbb	[pc, r7]
 800d140:	0d0db10a 	.word	0x0d0db10a
 800d144:	0d0d0d0d 	.word	0x0d0d0d0d
 800d148:	0db50d0d 	.word	0x0db50d0d
 800d14c:	b90d0d0d 	.word	0xb90d0d0d
 800d150:	c10dbd0d 	.word	0xc10dbd0d
 800d154:	27ff      	movs	r7, #255	; 0xff
 800d156:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 800d15a:	3e64      	subs	r6, #100	; 0x64
 800d15c:	2e13      	cmp	r6, #19
 800d15e:	d80e      	bhi.n	800d17e <iNemo_setOrientation_6X.constprop.0+0x12e>
 800d160:	e8df f006 	tbb	[pc, r6]
 800d164:	0d0db30a 	.word	0x0d0db30a
 800d168:	0d0d0d0d 	.word	0x0d0d0d0d
 800d16c:	0db70d0d 	.word	0x0db70d0d
 800d170:	bb0d0d0d 	.word	0xbb0d0d0d
 800d174:	c30dbf0d 	.word	0xc30dbf0d
 800d178:	26ff      	movs	r6, #255	; 0xff
 800d17a:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 800d17e:	3d64      	subs	r5, #100	; 0x64
 800d180:	2d13      	cmp	r5, #19
 800d182:	d80e      	bhi.n	800d1a2 <iNemo_setOrientation_6X.constprop.0+0x152>
 800d184:	e8df f005 	tbb	[pc, r5]
 800d188:	0d0db50a 	.word	0x0d0db50a
 800d18c:	0d0d0d0d 	.word	0x0d0d0d0d
 800d190:	0db90d0d 	.word	0x0db90d0d
 800d194:	bd0d0d0d 	.word	0xbd0d0d0d
 800d198:	c50dc10d 	.word	0xc50dc10d
 800d19c:	25ff      	movs	r5, #255	; 0xff
 800d19e:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 800d1a2:	3c64      	subs	r4, #100	; 0x64
 800d1a4:	2c13      	cmp	r4, #19
 800d1a6:	d80e      	bhi.n	800d1c6 <iNemo_setOrientation_6X.constprop.0+0x176>
 800d1a8:	e8df f004 	tbb	[pc, r4]
 800d1ac:	0d0db70a 	.word	0x0d0db70a
 800d1b0:	0d0d0d0d 	.word	0x0d0d0d0d
 800d1b4:	0dbb0d0d 	.word	0x0dbb0d0d
 800d1b8:	bf0d0d0d 	.word	0xbf0d0d0d
 800d1bc:	c70dc30d 	.word	0xc70dc30d
 800d1c0:	24ff      	movs	r4, #255	; 0xff
 800d1c2:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 800d1c6:	3864      	subs	r0, #100	; 0x64
 800d1c8:	2813      	cmp	r0, #19
 800d1ca:	d80e      	bhi.n	800d1ea <iNemo_setOrientation_6X.constprop.0+0x19a>
 800d1cc:	e8df f000 	tbb	[pc, r0]
 800d1d0:	0d0db90a 	.word	0x0d0db90a
 800d1d4:	0d0d0d0d 	.word	0x0d0d0d0d
 800d1d8:	0dbd0d0d 	.word	0x0dbd0d0d
 800d1dc:	c10d0d0d 	.word	0xc10d0d0d
 800d1e0:	c90dc50d 	.word	0xc90dc50d
 800d1e4:	20ff      	movs	r0, #255	; 0xff
 800d1e6:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 800d1ea:	3964      	subs	r1, #100	; 0x64
 800d1ec:	2913      	cmp	r1, #19
 800d1ee:	d812      	bhi.n	800d216 <iNemo_setOrientation_6X.constprop.0+0x1c6>
 800d1f0:	e8df f001 	tbb	[pc, r1]
 800d1f4:	1111bb0e 	.word	0x1111bb0e
 800d1f8:	11111111 	.word	0x11111111
 800d1fc:	11bf1111 	.word	0x11bf1111
 800d200:	c3111111 	.word	0xc3111111
 800d204:	cb11c711 	.word	0xcb11c711
 800d208:	20000000 	.word	0x20000000
 800d20c:	20001448 	.word	0x20001448
 800d210:	21ff      	movs	r1, #255	; 0xff
 800d212:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 800d216:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800d21a:	f1bc 0f13 	cmp.w	ip, #19
 800d21e:	d80e      	bhi.n	800d23e <iNemo_setOrientation_6X.constprop.0+0x1ee>
 800d220:	e8df f00c 	tbb	[pc, ip]
 800d224:	0d0db70a 	.word	0x0d0db70a
 800d228:	0d0d0d0d 	.word	0x0d0d0d0d
 800d22c:	0dbb0d0d 	.word	0x0dbb0d0d
 800d230:	bf0d0d0d 	.word	0xbf0d0d0d
 800d234:	c70dc30d 	.word	0xc70dc30d
 800d238:	21ff      	movs	r1, #255	; 0xff
 800d23a:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 800d23e:	3a64      	subs	r2, #100	; 0x64
 800d240:	2a13      	cmp	r2, #19
 800d242:	d80e      	bhi.n	800d262 <iNemo_setOrientation_6X.constprop.0+0x212>
 800d244:	e8df f002 	tbb	[pc, r2]
 800d248:	0d0db90a 	.word	0x0d0db90a
 800d24c:	0d0d0d0d 	.word	0x0d0d0d0d
 800d250:	0dbe0d0d 	.word	0x0dbe0d0d
 800d254:	c30d0d0d 	.word	0xc30d0d0d
 800d258:	0f0dc80d 	.word	0x0f0dc80d
 800d25c:	22ff      	movs	r2, #255	; 0xff
 800d25e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800d262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d266:	22ff      	movs	r2, #255	; 0xff
 800d268:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 800d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d270:	f04f 0e01 	mov.w	lr, #1
 800d274:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 800d278:	e75d      	b.n	800d136 <iNemo_setOrientation_6X.constprop.0+0xe6>
 800d27a:	f04f 0e01 	mov.w	lr, #1
 800d27e:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 800d282:	e758      	b.n	800d136 <iNemo_setOrientation_6X.constprop.0+0xe6>
 800d284:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800d288:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 800d28c:	e753      	b.n	800d136 <iNemo_setOrientation_6X.constprop.0+0xe6>
 800d28e:	f04f 0e01 	mov.w	lr, #1
 800d292:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 800d296:	e74e      	b.n	800d136 <iNemo_setOrientation_6X.constprop.0+0xe6>
 800d298:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800d29c:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 800d2a0:	e749      	b.n	800d136 <iNemo_setOrientation_6X.constprop.0+0xe6>
 800d2a2:	2701      	movs	r7, #1
 800d2a4:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 800d2a8:	e757      	b.n	800d15a <iNemo_setOrientation_6X.constprop.0+0x10a>
 800d2aa:	2701      	movs	r7, #1
 800d2ac:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 800d2b0:	e753      	b.n	800d15a <iNemo_setOrientation_6X.constprop.0+0x10a>
 800d2b2:	27ff      	movs	r7, #255	; 0xff
 800d2b4:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 800d2b8:	e74f      	b.n	800d15a <iNemo_setOrientation_6X.constprop.0+0x10a>
 800d2ba:	2701      	movs	r7, #1
 800d2bc:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 800d2c0:	e74b      	b.n	800d15a <iNemo_setOrientation_6X.constprop.0+0x10a>
 800d2c2:	27ff      	movs	r7, #255	; 0xff
 800d2c4:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 800d2c8:	e747      	b.n	800d15a <iNemo_setOrientation_6X.constprop.0+0x10a>
 800d2ca:	2601      	movs	r6, #1
 800d2cc:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 800d2d0:	e755      	b.n	800d17e <iNemo_setOrientation_6X.constprop.0+0x12e>
 800d2d2:	2601      	movs	r6, #1
 800d2d4:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 800d2d8:	e751      	b.n	800d17e <iNemo_setOrientation_6X.constprop.0+0x12e>
 800d2da:	26ff      	movs	r6, #255	; 0xff
 800d2dc:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 800d2e0:	e74d      	b.n	800d17e <iNemo_setOrientation_6X.constprop.0+0x12e>
 800d2e2:	2601      	movs	r6, #1
 800d2e4:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 800d2e8:	e749      	b.n	800d17e <iNemo_setOrientation_6X.constprop.0+0x12e>
 800d2ea:	26ff      	movs	r6, #255	; 0xff
 800d2ec:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 800d2f0:	e745      	b.n	800d17e <iNemo_setOrientation_6X.constprop.0+0x12e>
 800d2f2:	2501      	movs	r5, #1
 800d2f4:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 800d2f8:	e753      	b.n	800d1a2 <iNemo_setOrientation_6X.constprop.0+0x152>
 800d2fa:	2501      	movs	r5, #1
 800d2fc:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 800d300:	e74f      	b.n	800d1a2 <iNemo_setOrientation_6X.constprop.0+0x152>
 800d302:	25ff      	movs	r5, #255	; 0xff
 800d304:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 800d308:	e74b      	b.n	800d1a2 <iNemo_setOrientation_6X.constprop.0+0x152>
 800d30a:	2501      	movs	r5, #1
 800d30c:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 800d310:	e747      	b.n	800d1a2 <iNemo_setOrientation_6X.constprop.0+0x152>
 800d312:	25ff      	movs	r5, #255	; 0xff
 800d314:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 800d318:	e743      	b.n	800d1a2 <iNemo_setOrientation_6X.constprop.0+0x152>
 800d31a:	2401      	movs	r4, #1
 800d31c:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 800d320:	e751      	b.n	800d1c6 <iNemo_setOrientation_6X.constprop.0+0x176>
 800d322:	2401      	movs	r4, #1
 800d324:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 800d328:	e74d      	b.n	800d1c6 <iNemo_setOrientation_6X.constprop.0+0x176>
 800d32a:	24ff      	movs	r4, #255	; 0xff
 800d32c:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 800d330:	e749      	b.n	800d1c6 <iNemo_setOrientation_6X.constprop.0+0x176>
 800d332:	2401      	movs	r4, #1
 800d334:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 800d338:	e745      	b.n	800d1c6 <iNemo_setOrientation_6X.constprop.0+0x176>
 800d33a:	24ff      	movs	r4, #255	; 0xff
 800d33c:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 800d340:	e741      	b.n	800d1c6 <iNemo_setOrientation_6X.constprop.0+0x176>
 800d342:	2001      	movs	r0, #1
 800d344:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 800d348:	e74f      	b.n	800d1ea <iNemo_setOrientation_6X.constprop.0+0x19a>
 800d34a:	2001      	movs	r0, #1
 800d34c:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 800d350:	e74b      	b.n	800d1ea <iNemo_setOrientation_6X.constprop.0+0x19a>
 800d352:	20ff      	movs	r0, #255	; 0xff
 800d354:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 800d358:	e747      	b.n	800d1ea <iNemo_setOrientation_6X.constprop.0+0x19a>
 800d35a:	2001      	movs	r0, #1
 800d35c:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 800d360:	e743      	b.n	800d1ea <iNemo_setOrientation_6X.constprop.0+0x19a>
 800d362:	20ff      	movs	r0, #255	; 0xff
 800d364:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 800d368:	e73f      	b.n	800d1ea <iNemo_setOrientation_6X.constprop.0+0x19a>
 800d36a:	2101      	movs	r1, #1
 800d36c:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 800d370:	e751      	b.n	800d216 <iNemo_setOrientation_6X.constprop.0+0x1c6>
 800d372:	2101      	movs	r1, #1
 800d374:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 800d378:	e74d      	b.n	800d216 <iNemo_setOrientation_6X.constprop.0+0x1c6>
 800d37a:	21ff      	movs	r1, #255	; 0xff
 800d37c:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 800d380:	e749      	b.n	800d216 <iNemo_setOrientation_6X.constprop.0+0x1c6>
 800d382:	2101      	movs	r1, #1
 800d384:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 800d388:	e745      	b.n	800d216 <iNemo_setOrientation_6X.constprop.0+0x1c6>
 800d38a:	21ff      	movs	r1, #255	; 0xff
 800d38c:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 800d390:	e741      	b.n	800d216 <iNemo_setOrientation_6X.constprop.0+0x1c6>
 800d392:	2101      	movs	r1, #1
 800d394:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 800d398:	e751      	b.n	800d23e <iNemo_setOrientation_6X.constprop.0+0x1ee>
 800d39a:	2101      	movs	r1, #1
 800d39c:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 800d3a0:	e74d      	b.n	800d23e <iNemo_setOrientation_6X.constprop.0+0x1ee>
 800d3a2:	21ff      	movs	r1, #255	; 0xff
 800d3a4:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 800d3a8:	e749      	b.n	800d23e <iNemo_setOrientation_6X.constprop.0+0x1ee>
 800d3aa:	2101      	movs	r1, #1
 800d3ac:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 800d3b0:	e745      	b.n	800d23e <iNemo_setOrientation_6X.constprop.0+0x1ee>
 800d3b2:	21ff      	movs	r1, #255	; 0xff
 800d3b4:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 800d3b8:	e741      	b.n	800d23e <iNemo_setOrientation_6X.constprop.0+0x1ee>
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 800d3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 800d3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ce:	22ff      	movs	r2, #255	; 0xff
 800d3d0:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 800d3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800d3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e2:	bf00      	nop

0800d3e4 <MotionDI_setKnobs.part.0>:
 800d3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3e6:	4b40      	ldr	r3, [pc, #256]	; (800d4e8 <MotionDI_setKnobs.part.0+0x104>)
 800d3e8:	b091      	sub	sp, #68	; 0x44
 800d3ea:	4605      	mov	r5, r0
 800d3ec:	4c3f      	ldr	r4, [pc, #252]	; (800d4ec <MotionDI_setKnobs.part.0+0x108>)
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	f8d4 70f0 	ldr.w	r7, [r4, #240]	; 0xf0
 800d3f6:	f832 cf08 	ldrh.w	ip, [r2, #8]!
 800d3fa:	f8c4 712c 	str.w	r7, [r4, #300]	; 0x12c
 800d3fe:	f8ad c035 	strh.w	ip, [sp, #53]	; 0x35
 800d402:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 800d406:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
 800d40a:	f884 113d 	strb.w	r1, [r4, #317]	; 0x13d
 800d40e:	f8c4 c134 	str.w	ip, [r4, #308]	; 0x134
 800d412:	f8c4 c0f8 	str.w	ip, [r4, #248]	; 0xf8
 800d416:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 800d41a:	e9d0 060b 	ldrd	r0, r6, [r0, #44]	; 0x2c
 800d41e:	f8cd 6031 	str.w	r6, [sp, #49]	; 0x31
 800d422:	f8cd 002d 	str.w	r0, [sp, #45]	; 0x2d
 800d426:	f8bd 0031 	ldrh.w	r0, [sp, #49]	; 0x31
 800d42a:	f8bd 602d 	ldrh.w	r6, [sp, #45]	; 0x2d
 800d42e:	8098      	strh	r0, [r3, #4]
 800d430:	801e      	strh	r6, [r3, #0]
 800d432:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 800d436:	6a2e      	ldr	r6, [r5, #32]
 800d438:	7098      	strb	r0, [r3, #2]
 800d43a:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800d43e:	7890      	ldrb	r0, [r2, #2]
 800d440:	f8c4 60ec 	str.w	r6, [r4, #236]	; 0xec
 800d444:	f895 6029 	ldrb.w	r6, [r5, #41]	; 0x29
 800d448:	f89d e033 	ldrb.w	lr, [sp, #51]	; 0x33
 800d44c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 800d450:	f884 7161 	strb.w	r7, [r4, #353]	; 0x161
 800d454:	f884 6162 	strb.w	r6, [r4, #354]	; 0x162
 800d458:	f884 7125 	strb.w	r7, [r4, #293]	; 0x125
 800d45c:	f884 6126 	strb.w	r6, [r4, #294]	; 0x126
 800d460:	f884 1101 	strb.w	r1, [r4, #257]	; 0x101
 800d464:	f8bd 1035 	ldrh.w	r1, [sp, #53]	; 0x35
 800d468:	f883 e006 	strb.w	lr, [r3, #6]
 800d46c:	8119      	strh	r1, [r3, #8]
 800d46e:	7090      	strb	r0, [r2, #2]
 800d470:	f7ff fc24 	bl	800ccbc <iNemo_setOrientation.constprop.0>
 800d474:	f7ff fdec 	bl	800d050 <iNemo_setOrientation_6X.constprop.0>
 800d478:	4a1d      	ldr	r2, [pc, #116]	; (800d4f0 <MotionDI_setKnobs.part.0+0x10c>)
 800d47a:	f8d2 3464 	ldr.w	r3, [r2, #1124]	; 0x464
 800d47e:	1e59      	subs	r1, r3, #1
 800d480:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800d484:	d211      	bcs.n	800d4aa <MotionDI_setKnobs.part.0+0xc6>
 800d486:	3b0a      	subs	r3, #10
 800d488:	682e      	ldr	r6, [r5, #0]
 800d48a:	f502 608d 	add.w	r0, r2, #1128	; 0x468
 800d48e:	f502 618c 	add.w	r1, r2, #1120	; 0x460
 800d492:	b29b      	uxth	r3, r3
 800d494:	6006      	str	r6, [r0, #0]
 800d496:	2601      	movs	r6, #1
 800d498:	2b5a      	cmp	r3, #90	; 0x5a
 800d49a:	4816      	ldr	r0, [pc, #88]	; (800d4f4 <MotionDI_setKnobs.part.0+0x110>)
 800d49c:	f882 646c 	strb.w	r6, [r2, #1132]	; 0x46c
 800d4a0:	bf8c      	ite	hi
 800d4a2:	2300      	movhi	r3, #0
 800d4a4:	2301      	movls	r3, #1
 800d4a6:	6008      	str	r0, [r1, #0]
 800d4a8:	7013      	strb	r3, [r2, #0]
 800d4aa:	68ea      	ldr	r2, [r5, #12]
 800d4ac:	462e      	mov	r6, r5
 800d4ae:	692b      	ldr	r3, [r5, #16]
 800d4b0:	f105 0730 	add.w	r7, r5, #48	; 0x30
 800d4b4:	6969      	ldr	r1, [r5, #20]
 800d4b6:	6062      	str	r2, [r4, #4]
 800d4b8:	6163      	str	r3, [r4, #20]
 800d4ba:	69aa      	ldr	r2, [r5, #24]
 800d4bc:	68ab      	ldr	r3, [r5, #8]
 800d4be:	4d0e      	ldr	r5, [pc, #56]	; (800d4f8 <MotionDI_setKnobs.part.0+0x114>)
 800d4c0:	60a1      	str	r1, [r4, #8]
 800d4c2:	60e2      	str	r2, [r4, #12]
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	6830      	ldr	r0, [r6, #0]
 800d4c8:	3610      	adds	r6, #16
 800d4ca:	f856 1c0c 	ldr.w	r1, [r6, #-12]
 800d4ce:	462c      	mov	r4, r5
 800d4d0:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800d4d4:	3510      	adds	r5, #16
 800d4d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d4da:	42be      	cmp	r6, r7
 800d4dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4de:	d1f2      	bne.n	800d4c6 <MotionDI_setKnobs.part.0+0xe2>
 800d4e0:	6830      	ldr	r0, [r6, #0]
 800d4e2:	6028      	str	r0, [r5, #0]
 800d4e4:	b011      	add	sp, #68	; 0x44
 800d4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4e8:	20000000 	.word	0x20000000
 800d4ec:	20001448 	.word	0x20001448
 800d4f0:	200025c0 	.word	0x200025c0
 800d4f4:	3a83126f 	.word	0x3a83126f
 800d4f8:	200015ac 	.word	0x200015ac

0800d4fc <getAccStats.constprop.0>:
 800d4fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d500:	ed9f 4a6b 	vldr	s8, [pc, #428]	; 800d6b0 <getAccStats.constprop.0+0x1b4>
 800d504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d508:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800d50c:	2400      	movs	r4, #0
 800d50e:	4f69      	ldr	r7, [pc, #420]	; (800d6b4 <getAccStats.constprop.0+0x1b8>)
 800d510:	2500      	movs	r5, #0
 800d512:	6014      	str	r4, [r2, #0]
 800d514:	601c      	str	r4, [r3, #0]
 800d516:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d518:	7025      	strb	r5, [r4, #0]
 800d51a:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 800d51e:	f8b7 5052 	ldrh.w	r5, [r7, #82]	; 0x52
 800d522:	f9b7 4058 	ldrsh.w	r4, [r7, #88]	; 0x58
 800d526:	45ac      	cmp	ip, r5
 800d528:	f104 0401 	add.w	r4, r4, #1
 800d52c:	ee23 4a84 	vmul.f32	s8, s7, s8
 800d530:	f000 80b7 	beq.w	800d6a2 <getAccStats.constprop.0+0x1a6>
 800d534:	eba4 040c 	sub.w	r4, r4, ip
 800d538:	fb94 faf5 	sdiv	sl, r4, r5
 800d53c:	fb05 441a 	mls	r4, r5, sl, r4
 800d540:	fa0f fa84 	sxth.w	sl, r4
 800d544:	f1ba 0f00 	cmp.w	sl, #0
 800d548:	f2c0 80a1 	blt.w	800d68e <getAccStats.constprop.0+0x192>
 800d54c:	f1bc 0f00 	cmp.w	ip, #0
 800d550:	f000 80a4 	beq.w	800d69c <getAccStats.constprop.0+0x1a0>
 800d554:	2600      	movs	r6, #0
 800d556:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d55a:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 800d55e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 800d562:	e01a      	b.n	800d59a <getAccStats.constprop.0+0x9e>
 800d564:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d566:	3601      	adds	r6, #1
 800d568:	7824      	ldrb	r4, [r4, #0]
 800d56a:	b2b5      	uxth	r5, r6
 800d56c:	f104 0c01 	add.w	ip, r4, #1
 800d570:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d572:	f884 c000 	strb.w	ip, [r4]
 800d576:	edd3 7a00 	vldr	s15, [r3]
 800d57a:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 800d57e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800d582:	45ac      	cmp	ip, r5
 800d584:	edc3 7a00 	vstr	s15, [r3]
 800d588:	d967      	bls.n	800d65a <getAccStats.constprop.0+0x15e>
 800d58a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d58e:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 800d592:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 800d596:	f8b7 5052 	ldrh.w	r5, [r7, #82]	; 0x52
 800d59a:	fa1a fb86 	uxtah	fp, sl, r6
 800d59e:	edd1 4a04 	vldr	s9, [r1, #16]
 800d5a2:	ed91 5a00 	vldr	s10, [r1]
 800d5a6:	edd1 5a08 	vldr	s11, [r1, #32]
 800d5aa:	ed92 6a00 	vldr	s12, [r2]
 800d5ae:	fb9b f4f5 	sdiv	r4, fp, r5
 800d5b2:	fb05 b414 	mls	r4, r5, r4, fp
 800d5b6:	b224      	sxth	r4, r4
 800d5b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d5bc:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800d5c0:	f9b4 b062 	ldrsh.w	fp, [r4, #98]	; 0x62
 800d5c4:	f9b4 5060 	ldrsh.w	r5, [r4, #96]	; 0x60
 800d5c8:	ebab 0b08 	sub.w	fp, fp, r8
 800d5cc:	f9b4 4064 	ldrsh.w	r4, [r4, #100]	; 0x64
 800d5d0:	eba5 0509 	sub.w	r5, r5, r9
 800d5d4:	ee06 ba90 	vmov	s13, fp
 800d5d8:	eba4 040e 	sub.w	r4, r4, lr
 800d5dc:	ee07 5a10 	vmov	s14, r5
 800d5e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d5e4:	ee07 4a90 	vmov	s15, r4
 800d5e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d5ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5f0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800d5f4:	ee27 7a05 	vmul.f32	s14, s14, s10
 800d5f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d5fc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800d600:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800d604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d608:	ee16 5a90 	vmov	r5, s13
 800d60c:	ee17 ba10 	vmov	fp, s14
 800d610:	fb05 f505 	mul.w	r5, r5, r5
 800d614:	ee17 4a90 	vmov	r4, s15
 800d618:	fb0b 5b0b 	mla	fp, fp, fp, r5
 800d61c:	fb04 b404 	mla	r4, r4, r4, fp
 800d620:	ee07 4a90 	vmov	s15, r4
 800d624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d628:	eef1 6ae7 	vsqrt.f32	s13, s15
 800d62c:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800d630:	ee76 7a26 	vadd.f32	s15, s12, s13
 800d634:	eef0 6ac7 	vabs.f32	s13, s14
 800d638:	edc2 7a00 	vstr	s15, [r2]
 800d63c:	eeb4 4ae6 	vcmpe.f32	s8, s13
 800d640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d644:	d48e      	bmi.n	800d564 <getAccStats.constprop.0+0x68>
 800d646:	edd3 7a00 	vldr	s15, [r3]
 800d64a:	3601      	adds	r6, #1
 800d64c:	eee7 7a07 	vfma.f32	s15, s14, s14
 800d650:	b2b4      	uxth	r4, r6
 800d652:	45a4      	cmp	ip, r4
 800d654:	edc3 7a00 	vstr	s15, [r3]
 800d658:	d89d      	bhi.n	800d596 <getAccStats.constprop.0+0x9a>
 800d65a:	ee07 ca10 	vmov	s14, ip
 800d65e:	eddf 6a16 	vldr	s13, [pc, #88]	; 800d6b8 <getAccStats.constprop.0+0x1bc>
 800d662:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d666:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800d66a:	eef1 7ac6 	vsqrt.f32	s15, s12
 800d66e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d672:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 800d676:	edc3 7a00 	vstr	s15, [r3]
 800d67a:	edd2 7a00 	vldr	s15, [r2]
 800d67e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d682:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800d686:	edc2 7a00 	vstr	s15, [r2]
 800d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68e:	442c      	add	r4, r5
 800d690:	fa0f fa84 	sxth.w	sl, r4
 800d694:	f1bc 0f00 	cmp.w	ip, #0
 800d698:	f47f af5c 	bne.w	800d554 <getAccStats.constprop.0+0x58>
 800d69c:	edd3 7a00 	vldr	s15, [r3]
 800d6a0:	e7db      	b.n	800d65a <getAccStats.constprop.0+0x15e>
 800d6a2:	fb94 fafc 	sdiv	sl, r4, ip
 800d6a6:	fb0c 441a 	mls	r4, ip, sl, r4
 800d6aa:	fa0f fa84 	sxth.w	sl, r4
 800d6ae:	e74d      	b.n	800d54c <getAccStats.constprop.0+0x50>
 800d6b0:	3e4ccccd 	.word	0x3e4ccccd
 800d6b4:	200025c0 	.word	0x200025c0
 800d6b8:	3ca3d70a 	.word	0x3ca3d70a
 800d6bc:	00000000 	.word	0x00000000

0800d6c0 <iNemo_quat2heading>:
 800d6c0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800d6c4:	460e      	mov	r6, r1
 800d6c6:	ed2d 8b08 	vpush	{d8-d11}
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d15b      	bne.n	800d786 <iNemo_quat2heading+0xc6>
 800d6ce:	edd2 6a00 	vldr	s13, [r2]
 800d6d2:	edd2 7a01 	vldr	s15, [r2, #4]
 800d6d6:	eef0 aae6 	vabs.f32	s21, s13
 800d6da:	4db7      	ldr	r5, [pc, #732]	; (800d9b8 <iNemo_quat2heading+0x2f8>)
 800d6dc:	eeb0 9ae7 	vabs.f32	s18, s15
 800d6e0:	ed92 7a02 	vldr	s14, [r2, #8]
 800d6e4:	edd0 9a00 	vldr	s19, [r0]
 800d6e8:	eeb0 bac7 	vabs.f32	s22, s14
 800d6ec:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 800d6f0:	eef4 aac9 	vcmpe.f32	s21, s18
 800d6f4:	ed90 aa01 	vldr	s20, [r0, #4]
 800d6f8:	edd0 8a02 	vldr	s17, [r0, #8]
 800d6fc:	ed90 8a03 	vldr	s16, [r0, #12]
 800d700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d704:	f340 80b4 	ble.w	800d870 <iNemo_quat2heading+0x1b0>
 800d708:	eef4 aacb 	vcmpe.f32	s21, s22
 800d70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d710:	f340 80ae 	ble.w	800d870 <iNemo_quat2heading+0x1b0>
 800d714:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d718:	ee1a 0a90 	vmov	r0, s21
 800d71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d720:	f340 81ad 	ble.w	800da7e <iNemo_quat2heading+0x3be>
 800d724:	f7f2 ff30 	bl	8000588 <__aeabi_f2d>
 800d728:	4680      	mov	r8, r0
 800d72a:	4689      	mov	r9, r1
 800d72c:	ee19 0a10 	vmov	r0, s18
 800d730:	f7f2 ff2a 	bl	8000588 <__aeabi_f2d>
 800d734:	a39c      	add	r3, pc, #624	; (adr r3, 800d9a8 <iNemo_quat2heading+0x2e8>)
 800d736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73a:	f7f2 ff7d 	bl	8000638 <__aeabi_dmul>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	4640      	mov	r0, r8
 800d744:	4649      	mov	r1, r9
 800d746:	f7f3 fa07 	bl	8000b58 <__aeabi_dcmpgt>
 800d74a:	b188      	cbz	r0, 800d770 <iNemo_quat2heading+0xb0>
 800d74c:	ee1b 0a10 	vmov	r0, s22
 800d750:	f7f2 ff1a 	bl	8000588 <__aeabi_f2d>
 800d754:	a394      	add	r3, pc, #592	; (adr r3, 800d9a8 <iNemo_quat2heading+0x2e8>)
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	f7f2 ff6d 	bl	8000638 <__aeabi_dmul>
 800d75e:	4602      	mov	r2, r0
 800d760:	460b      	mov	r3, r1
 800d762:	4640      	mov	r0, r8
 800d764:	4649      	mov	r1, r9
 800d766:	f7f3 f9f7 	bl	8000b58 <__aeabi_dcmpgt>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	f040 81b3 	bne.w	800dad6 <iNemo_quat2heading+0x416>
 800d770:	2c05      	cmp	r4, #5
 800d772:	f200 81b4 	bhi.w	800dade <iNemo_quat2heading+0x41e>
 800d776:	e8df f014 	tbh	[pc, r4, lsl #1]
 800d77a:	00b2      	.short	0x00b2
 800d77c:	005f00e7 	.word	0x005f00e7
 800d780:	005f0152 	.word	0x005f0152
 800d784:	00b2      	.short	0x00b2
 800d786:	edd2 6a01 	vldr	s13, [r2, #4]
 800d78a:	edd2 7a00 	vldr	s15, [r2]
 800d78e:	eef0 aae6 	vabs.f32	s21, s13
 800d792:	edd0 8a02 	vldr	s17, [r0, #8]
 800d796:	eeb0 9ae7 	vabs.f32	s18, s15
 800d79a:	4d87      	ldr	r5, [pc, #540]	; (800d9b8 <iNemo_quat2heading+0x2f8>)
 800d79c:	ed92 7a02 	vldr	s14, [r2, #8]
 800d7a0:	eef1 8a68 	vneg.f32	s17, s17
 800d7a4:	edd0 9a01 	vldr	s19, [r0, #4]
 800d7a8:	eef4 aac9 	vcmpe.f32	s21, s18
 800d7ac:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 800d7b0:	eeb0 bac7 	vabs.f32	s22, s14
 800d7b4:	ed90 aa00 	vldr	s20, [r0]
 800d7b8:	ed90 8a03 	vldr	s16, [r0, #12]
 800d7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c0:	dd04      	ble.n	800d7cc <iNemo_quat2heading+0x10c>
 800d7c2:	eef4 aacb 	vcmpe.f32	s21, s22
 800d7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ca:	dca3      	bgt.n	800d714 <iNemo_quat2heading+0x54>
 800d7cc:	eeb4 9acb 	vcmpe.f32	s18, s22
 800d7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d4:	f300 8086 	bgt.w	800d8e4 <iNemo_quat2heading+0x224>
 800d7d8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d7dc:	ee1b 0a10 	vmov	r0, s22
 800d7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e4:	d450      	bmi.n	800d888 <iNemo_quat2heading+0x1c8>
 800d7e6:	f7f2 fecf 	bl	8000588 <__aeabi_f2d>
 800d7ea:	4680      	mov	r8, r0
 800d7ec:	4689      	mov	r9, r1
 800d7ee:	ee19 0a10 	vmov	r0, s18
 800d7f2:	f7f2 fec9 	bl	8000588 <__aeabi_f2d>
 800d7f6:	a36c      	add	r3, pc, #432	; (adr r3, 800d9a8 <iNemo_quat2heading+0x2e8>)
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	f7f2 ff1c 	bl	8000638 <__aeabi_dmul>
 800d800:	4602      	mov	r2, r0
 800d802:	460b      	mov	r3, r1
 800d804:	4640      	mov	r0, r8
 800d806:	4649      	mov	r1, r9
 800d808:	f7f3 f9a6 	bl	8000b58 <__aeabi_dcmpgt>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d0af      	beq.n	800d770 <iNemo_quat2heading+0xb0>
 800d810:	ee1a 0a90 	vmov	r0, s21
 800d814:	f7f2 feb8 	bl	8000588 <__aeabi_f2d>
 800d818:	a363      	add	r3, pc, #396	; (adr r3, 800d9a8 <iNemo_quat2heading+0x2e8>)
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	f7f2 ff0b 	bl	8000638 <__aeabi_dmul>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	4640      	mov	r0, r8
 800d828:	4649      	mov	r1, r9
 800d82a:	f7f3 f995 	bl	8000b58 <__aeabi_dcmpgt>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d09e      	beq.n	800d770 <iNemo_quat2heading+0xb0>
 800d832:	2302      	movs	r3, #2
 800d834:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800d838:	ed96 0a00 	vldr	s0, [r6]
 800d83c:	eddf 7a5f 	vldr	s15, [pc, #380]	; 800d9bc <iNemo_quat2heading+0x2fc>
 800d840:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d844:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800d9c0 <iNemo_quat2heading+0x300>
 800d848:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d850:	bfa8      	it	ge
 800d852:	ee30 0a67 	vsubge.f32	s0, s0, s15
 800d856:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85e:	d503      	bpl.n	800d868 <iNemo_quat2heading+0x1a8>
 800d860:	eddf 7a57 	vldr	s15, [pc, #348]	; 800d9c0 <iNemo_quat2heading+0x300>
 800d864:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d868:	ecbd 8b08 	vpop	{d8-d11}
 800d86c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d870:	eeb4 9acb 	vcmpe.f32	s18, s22
 800d874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d878:	dc34      	bgt.n	800d8e4 <iNemo_quat2heading+0x224>
 800d87a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d87e:	ee1b 0a10 	vmov	r0, s22
 800d882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d886:	ddae      	ble.n	800d7e6 <iNemo_quat2heading+0x126>
 800d888:	f7f2 fe7e 	bl	8000588 <__aeabi_f2d>
 800d88c:	4680      	mov	r8, r0
 800d88e:	4689      	mov	r9, r1
 800d890:	ee19 0a10 	vmov	r0, s18
 800d894:	f7f2 fe78 	bl	8000588 <__aeabi_f2d>
 800d898:	a343      	add	r3, pc, #268	; (adr r3, 800d9a8 <iNemo_quat2heading+0x2e8>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	f7f2 fecb 	bl	8000638 <__aeabi_dmul>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	f7f3 f955 	bl	8000b58 <__aeabi_dcmpgt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f43f af5e 	beq.w	800d770 <iNemo_quat2heading+0xb0>
 800d8b4:	ee1a 0a90 	vmov	r0, s21
 800d8b8:	f7f2 fe66 	bl	8000588 <__aeabi_f2d>
 800d8bc:	a33a      	add	r3, pc, #232	; (adr r3, 800d9a8 <iNemo_quat2heading+0x2e8>)
 800d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c2:	f7f2 feb9 	bl	8000638 <__aeabi_dmul>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	4649      	mov	r1, r9
 800d8ce:	f7f3 f943 	bl	8000b58 <__aeabi_dcmpgt>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	f43f af4c 	beq.w	800d770 <iNemo_quat2heading+0xb0>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800d8de:	ed96 0a00 	vldr	s0, [r6]
 800d8e2:	e7af      	b.n	800d844 <iNemo_quat2heading+0x184>
 800d8e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d8e8:	ee19 0a10 	vmov	r0, s18
 800d8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f0:	dd6a      	ble.n	800d9c8 <iNemo_quat2heading+0x308>
 800d8f2:	f7f2 fe49 	bl	8000588 <__aeabi_f2d>
 800d8f6:	4680      	mov	r8, r0
 800d8f8:	4689      	mov	r9, r1
 800d8fa:	ee1a 0a90 	vmov	r0, s21
 800d8fe:	f7f2 fe43 	bl	8000588 <__aeabi_f2d>
 800d902:	a329      	add	r3, pc, #164	; (adr r3, 800d9a8 <iNemo_quat2heading+0x2e8>)
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	f7f2 fe96 	bl	8000638 <__aeabi_dmul>
 800d90c:	4602      	mov	r2, r0
 800d90e:	460b      	mov	r3, r1
 800d910:	4640      	mov	r0, r8
 800d912:	4649      	mov	r1, r9
 800d914:	f7f3 f920 	bl	8000b58 <__aeabi_dcmpgt>
 800d918:	2800      	cmp	r0, #0
 800d91a:	f43f af29 	beq.w	800d770 <iNemo_quat2heading+0xb0>
 800d91e:	ee1b 0a10 	vmov	r0, s22
 800d922:	f7f2 fe31 	bl	8000588 <__aeabi_f2d>
 800d926:	a320      	add	r3, pc, #128	; (adr r3, 800d9a8 <iNemo_quat2heading+0x2e8>)
 800d928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92c:	f7f2 fe84 	bl	8000638 <__aeabi_dmul>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	4640      	mov	r0, r8
 800d936:	4649      	mov	r1, r9
 800d938:	f7f3 f90e 	bl	8000b58 <__aeabi_dcmpgt>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	f43f af17 	beq.w	800d770 <iNemo_quat2heading+0xb0>
 800d942:	2301      	movs	r3, #1
 800d944:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800d948:	ee68 7a08 	vmul.f32	s15, s16, s16
 800d94c:	ee28 8a28 	vmul.f32	s16, s16, s17
 800d950:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800d954:	eeaa 8a29 	vfma.f32	s16, s20, s19
 800d958:	eeea 7a4a 	vfms.f32	s15, s20, s20
 800d95c:	eee8 7ae8 	vfms.f32	s15, s17, s17
 800d960:	ee17 0a90 	vmov	r0, s15
 800d964:	f7f2 fe10 	bl	8000588 <__aeabi_f2d>
 800d968:	ee78 7a08 	vadd.f32	s15, s16, s16
 800d96c:	ec41 0b19 	vmov	d9, r0, r1
 800d970:	ee17 0a90 	vmov	r0, s15
 800d974:	f7f2 fe08 	bl	8000588 <__aeabi_f2d>
 800d978:	eeb0 1a49 	vmov.f32	s2, s18
 800d97c:	eef0 1a69 	vmov.f32	s3, s19
 800d980:	ec41 0b10 	vmov	d0, r0, r1
 800d984:	f00d f810 	bl	801a9a8 <atan2>
 800d988:	a309      	add	r3, pc, #36	; (adr r3, 800d9b0 <iNemo_quat2heading+0x2f0>)
 800d98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98e:	ec51 0b10 	vmov	r0, r1, d0
 800d992:	f7f2 fe51 	bl	8000638 <__aeabi_dmul>
 800d996:	2200      	movs	r2, #0
 800d998:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <iNemo_quat2heading+0x304>)
 800d99a:	f7f2 fc95 	bl	80002c8 <__aeabi_dsub>
 800d99e:	f7f3 f943 	bl	8000c28 <__aeabi_d2f>
 800d9a2:	ee00 0a10 	vmov	s0, r0
 800d9a6:	e74d      	b.n	800d844 <iNemo_quat2heading+0x184>
 800d9a8:	e0000000 	.word	0xe0000000
 800d9ac:	3ff6b851 	.word	0x3ff6b851
 800d9b0:	20000000 	.word	0x20000000
 800d9b4:	404ca5dc 	.word	0x404ca5dc
 800d9b8:	20001448 	.word	0x20001448
 800d9bc:	43340000 	.word	0x43340000
 800d9c0:	43b40000 	.word	0x43b40000
 800d9c4:	40568000 	.word	0x40568000
 800d9c8:	f7f2 fdde 	bl	8000588 <__aeabi_f2d>
 800d9cc:	4680      	mov	r8, r0
 800d9ce:	4689      	mov	r9, r1
 800d9d0:	ee1a 0a90 	vmov	r0, s21
 800d9d4:	f7f2 fdd8 	bl	8000588 <__aeabi_f2d>
 800d9d8:	a343      	add	r3, pc, #268	; (adr r3, 800dae8 <iNemo_quat2heading+0x428>)
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	f7f2 fe2b 	bl	8000638 <__aeabi_dmul>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	f7f3 f8b5 	bl	8000b58 <__aeabi_dcmpgt>
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f43f aebe 	beq.w	800d770 <iNemo_quat2heading+0xb0>
 800d9f4:	ee1b 0a10 	vmov	r0, s22
 800d9f8:	f7f2 fdc6 	bl	8000588 <__aeabi_f2d>
 800d9fc:	a33a      	add	r3, pc, #232	; (adr r3, 800dae8 <iNemo_quat2heading+0x428>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	f7f2 fe19 	bl	8000638 <__aeabi_dmul>
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	4640      	mov	r0, r8
 800da0c:	4649      	mov	r1, r9
 800da0e:	f7f3 f8a3 	bl	8000b58 <__aeabi_dcmpgt>
 800da12:	2800      	cmp	r0, #0
 800da14:	f43f aeac 	beq.w	800d770 <iNemo_quat2heading+0xb0>
 800da18:	2303      	movs	r3, #3
 800da1a:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800da1e:	ee68 7a08 	vmul.f32	s15, s16, s16
 800da22:	ee28 8a28 	vmul.f32	s16, s16, s17
 800da26:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800da2a:	eeaa 8a29 	vfma.f32	s16, s20, s19
 800da2e:	eeea 7a4a 	vfms.f32	s15, s20, s20
 800da32:	eee8 7ae8 	vfms.f32	s15, s17, s17
 800da36:	ee17 0a90 	vmov	r0, s15
 800da3a:	f7f2 fda5 	bl	8000588 <__aeabi_f2d>
 800da3e:	ee78 7a08 	vadd.f32	s15, s16, s16
 800da42:	ec41 0b19 	vmov	d9, r0, r1
 800da46:	ee17 0a90 	vmov	r0, s15
 800da4a:	f7f2 fd9d 	bl	8000588 <__aeabi_f2d>
 800da4e:	eeb0 1a49 	vmov.f32	s2, s18
 800da52:	eef0 1a69 	vmov.f32	s3, s19
 800da56:	ec41 0b10 	vmov	d0, r0, r1
 800da5a:	f00c ffa5 	bl	801a9a8 <atan2>
 800da5e:	a326      	add	r3, pc, #152	; (adr r3, 800daf8 <iNemo_quat2heading+0x438>)
 800da60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da64:	ec51 0b10 	vmov	r0, r1, d0
 800da68:	f7f2 fde6 	bl	8000638 <__aeabi_dmul>
 800da6c:	2200      	movs	r2, #0
 800da6e:	4b20      	ldr	r3, [pc, #128]	; (800daf0 <iNemo_quat2heading+0x430>)
 800da70:	f7f2 fc2c 	bl	80002cc <__adddf3>
 800da74:	f7f3 f8d8 	bl	8000c28 <__aeabi_d2f>
 800da78:	ee00 0a10 	vmov	s0, r0
 800da7c:	e6e2      	b.n	800d844 <iNemo_quat2heading+0x184>
 800da7e:	f7f2 fd83 	bl	8000588 <__aeabi_f2d>
 800da82:	4680      	mov	r8, r0
 800da84:	4689      	mov	r9, r1
 800da86:	ee19 0a10 	vmov	r0, s18
 800da8a:	f7f2 fd7d 	bl	8000588 <__aeabi_f2d>
 800da8e:	a316      	add	r3, pc, #88	; (adr r3, 800dae8 <iNemo_quat2heading+0x428>)
 800da90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da94:	f7f2 fdd0 	bl	8000638 <__aeabi_dmul>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	f7f3 f85a 	bl	8000b58 <__aeabi_dcmpgt>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	f43f ae63 	beq.w	800d770 <iNemo_quat2heading+0xb0>
 800daaa:	ee1b 0a10 	vmov	r0, s22
 800daae:	f7f2 fd6b 	bl	8000588 <__aeabi_f2d>
 800dab2:	a30d      	add	r3, pc, #52	; (adr r3, 800dae8 <iNemo_quat2heading+0x428>)
 800dab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab8:	f7f2 fdbe 	bl	8000638 <__aeabi_dmul>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	4640      	mov	r0, r8
 800dac2:	4649      	mov	r1, r9
 800dac4:	f7f3 f848 	bl	8000b58 <__aeabi_dcmpgt>
 800dac8:	2800      	cmp	r0, #0
 800daca:	f43f ae51 	beq.w	800d770 <iNemo_quat2heading+0xb0>
 800dace:	2305      	movs	r3, #5
 800dad0:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800dad4:	e703      	b.n	800d8de <iNemo_quat2heading+0x21e>
 800dad6:	2304      	movs	r3, #4
 800dad8:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800dadc:	e6ac      	b.n	800d838 <iNemo_quat2heading+0x178>
 800dade:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800daf4 <iNemo_quat2heading+0x434>
 800dae2:	e6c1      	b.n	800d868 <iNemo_quat2heading+0x1a8>
 800dae4:	f3af 8000 	nop.w
 800dae8:	e0000000 	.word	0xe0000000
 800daec:	3ff6b851 	.word	0x3ff6b851
 800daf0:	40568000 	.word	0x40568000
 800daf4:	00000000 	.word	0x00000000
 800daf8:	20000000 	.word	0x20000000
 800dafc:	404ca5dc 	.word	0x404ca5dc

0800db00 <m_kalman_3gyro.isra.0.constprop.0>:
 800db00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db04:	4cdc      	ldr	r4, [pc, #880]	; (800de78 <m_kalman_3gyro.isra.0.constprop.0+0x378>)
 800db06:	ed2d 8b10 	vpush	{d8-d15}
 800db0a:	f2ad 6d2c 	subw	sp, sp, #1580	; 0x62c
 800db0e:	eef0 9a61 	vmov.f32	s19, s3
 800db12:	eef0 fa42 	vmov.f32	s31, s4
 800db16:	9117      	str	r1, [sp, #92]	; 0x5c
 800db18:	f50d 7834 	add.w	r8, sp, #720	; 0x2d0
 800db1c:	9000      	str	r0, [sp, #0]
 800db1e:	f50d 7c41 	add.w	ip, sp, #772	; 0x304
 800db22:	f89d 5698 	ldrb.w	r5, [sp, #1688]	; 0x698
 800db26:	afce      	add	r7, sp, #824	; 0x338
 800db28:	aedb      	add	r6, sp, #876	; 0x36c
 800db2a:	f50d 7b16 	add.w	fp, sp, #600	; 0x258
 800db2e:	951c      	str	r5, [sp, #112]	; 0x70
 800db30:	f50d 7920 	add.w	r9, sp, #640	; 0x280
 800db34:	f89d 569c 	ldrb.w	r5, [sp, #1692]	; 0x69c
 800db38:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 800db3c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
 800db40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db42:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800db46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db48:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800db4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db4e:	9510      	str	r5, [sp, #64]	; 0x40
 800db50:	4625      	mov	r5, r4
 800db52:	f104 0e38 	add.w	lr, r4, #56	; 0x38
 800db56:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800db5a:	f855 ab04 	ldr.w	sl, [r5], #4
 800db5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800db74:	f8c8 a000 	str.w	sl, [r8]
 800db78:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800db7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800db7e:	682d      	ldr	r5, [r5, #0]
 800db80:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800db82:	f8cc 5000 	str.w	r5, [ip]
 800db86:	f104 056c 	add.w	r5, r4, #108	; 0x6c
 800db8a:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
 800db8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800db92:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800db94:	f8de e000 	ldr.w	lr, [lr]
 800db98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db9a:	f8c7 e000 	str.w	lr, [r7]
 800db9e:	f104 0ea0 	add.w	lr, r4, #160	; 0xa0
 800dba2:	f104 07c8 	add.w	r7, r4, #200	; 0xc8
 800dba6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbaa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dbac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	6033      	str	r3, [r6, #0]
 800dbb4:	aeaa      	add	r6, sp, #680	; 0x2a8
 800dbb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbba:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 800dbbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dbc2:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
 800dbc6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dbca:	4635      	mov	r5, r6
 800dbcc:	f504 768c 	add.w	r6, r4, #280	; 0x118
 800dbd0:	f504 749a 	add.w	r4, r4, #308	; 0x134
 800dbd4:	e88b 0003 	stmia.w	fp, {r0, r1}
 800dbd8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dbda:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800dbde:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dbe0:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800dbe4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800dbe8:	2700      	movs	r7, #0
 800dbea:	e889 0003 	stmia.w	r9, {r0, r1}
 800dbee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dbf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dbf4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dbf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dbfa:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800dbfe:	f50d 7cb6 	add.w	ip, sp, #364	; 0x16c
 800dc02:	e885 0003 	stmia.w	r5, {r0, r1}
 800dc06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc0c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800dc10:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800dc14:	f8dd 06cc 	ldr.w	r0, [sp, #1740]	; 0x6cc
 800dc18:	7007      	strb	r7, [r0, #0]
 800dc1a:	a862      	add	r0, sp, #392	; 0x188
 800dc1c:	4605      	mov	r5, r0
 800dc1e:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800dc22:	7007      	strb	r7, [r0, #0]
 800dc24:	f8dd 06d4 	ldr.w	r0, [sp, #1748]	; 0x6d4
 800dc28:	7007      	strb	r7, [r0, #0]
 800dc2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc2c:	ed8d 1a0f 	vstr	s2, [sp, #60]	; 0x3c
 800dc30:	ed93 ba01 	vldr	s22, [r3, #4]
 800dc34:	edd3 ba00 	vldr	s23, [r3]
 800dc38:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 800dc3c:	ed93 ca02 	vldr	s24, [r3, #8]
 800dc40:	ed8d 0a15 	vstr	s0, [sp, #84]	; 0x54
 800dc44:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 800dc48:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800dc4c:	ed8d ba33 	vstr	s22, [sp, #204]	; 0xcc
 800dc50:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
 800dc54:	ed8d ca34 	vstr	s24, [sp, #208]	; 0xd0
 800dc58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc5a:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800dc5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc60:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800dc64:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800dc68:	ee17 0a90 	vmov	r0, s15
 800dc6c:	f7f2 fc8c 	bl	8000588 <__aeabi_f2d>
 800dc70:	ec41 0b10 	vmov	d0, r0, r1
 800dc74:	f00c feea 	bl	801aa4c <sqrt>
 800dc78:	ec51 0b10 	vmov	r0, r1, d0
 800dc7c:	f7f2 ffd4 	bl	8000c28 <__aeabi_d2f>
 800dc80:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800dc82:	4b7e      	ldr	r3, [pc, #504]	; (800de7c <m_kalman_3gyro.isra.0.constprop.0+0x37c>)
 800dc84:	ee0c 0a90 	vmov	s25, r0
 800dc88:	edd5 8a01 	vldr	s17, [r5, #4]
 800dc8c:	ed95 9a00 	vldr	s18, [r5]
 800dc90:	eeca daac 	vdiv.f32	s27, s21, s25
 800dc94:	ed95 8a02 	vldr	s16, [r5, #8]
 800dc98:	f8c3 019c 	str.w	r0, [r3, #412]	; 0x19c
 800dc9c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800dca0:	eee9 7a09 	vfma.f32	s15, s18, s18
 800dca4:	eee8 7a08 	vfma.f32	s15, s16, s16
 800dca8:	ee2d ea8b 	vmul.f32	s28, s27, s22
 800dcac:	ee6b eaad 	vmul.f32	s29, s23, s27
 800dcb0:	ee6d da8c 	vmul.f32	s27, s27, s24
 800dcb4:	ee17 0a90 	vmov	r0, s15
 800dcb8:	f7f2 fc66 	bl	8000588 <__aeabi_f2d>
 800dcbc:	ec41 0b10 	vmov	d0, r0, r1
 800dcc0:	f00c fec4 	bl	801aa4c <sqrt>
 800dcc4:	ec51 0b10 	vmov	r0, r1, d0
 800dcc8:	f7f2 ffae 	bl	8000c28 <__aeabi_d2f>
 800dccc:	ee0a 0a10 	vmov	s20, r0
 800dcd0:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800dcd4:	ab58      	add	r3, sp, #352	; 0x160
 800dcd6:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 800dcda:	edcd ba55 	vstr	s23, [sp, #340]	; 0x154
 800dcde:	f892 48cd 	ldrb.w	r4, [r2, #2253]	; 0x8cd
 800dce2:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800dce6:	ed8d ca57 	vstr	s24, [sp, #348]	; 0x15c
 800dcea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dcee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dcf2:	ed8d ea40 	vstr	s28, [sp, #256]	; 0x100
 800dcf6:	edcd ea3f 	vstr	s29, [sp, #252]	; 0xfc
 800dcfa:	edcd da41 	vstr	s27, [sp, #260]	; 0x104
 800dcfe:	ee67 8aa8 	vmul.f32	s17, s15, s17
 800dd02:	ee27 9a89 	vmul.f32	s18, s15, s18
 800dd06:	ee27 8a88 	vmul.f32	s16, s15, s16
 800dd0a:	ee2e da28 	vmul.f32	s26, s28, s17
 800dd0e:	eeae da89 	vfma.f32	s26, s29, s18
 800dd12:	eea8 da2d 	vfma.f32	s26, s16, s27
 800dd16:	2c00      	cmp	r4, #0
 800dd18:	f001 8020 	beq.w	800ed5c <m_kalman_3gyro.isra.0.constprop.0+0x125c>
 800dd1c:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd20:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 800dd24:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800dd28:	9312      	str	r3, [sp, #72]	; 0x48
 800dd2a:	ab45      	add	r3, sp, #276	; 0x114
 800dd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd2e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dd36:	9327      	str	r3, [sp, #156]	; 0x9c
 800dd38:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd3c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dd4a:	9302      	str	r3, [sp, #8]
 800dd4c:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd50:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800dd54:	9336      	str	r3, [sp, #216]	; 0xd8
 800dd56:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd5a:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800dd5e:	9329      	str	r3, [sp, #164]	; 0xa4
 800dd60:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd64:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800dd68:	932a      	str	r3, [sp, #168]	; 0xa8
 800dd6a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd6e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800dd72:	9337      	str	r3, [sp, #220]	; 0xdc
 800dd74:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd78:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800dd7c:	9338      	str	r3, [sp, #224]	; 0xe0
 800dd7e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd82:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800dd86:	9339      	str	r3, [sp, #228]	; 0xe4
 800dd88:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd8c:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800dd90:	933a      	str	r3, [sp, #232]	; 0xe8
 800dd92:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dd96:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800dd9a:	931d      	str	r3, [sp, #116]	; 0x74
 800dd9c:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800dda0:	f203 4334 	addw	r3, r3, #1076	; 0x434
 800dda4:	9328      	str	r3, [sp, #160]	; 0xa0
 800dda6:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ddaa:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800ddae:	933b      	str	r3, [sp, #236]	; 0xec
 800ddb0:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ddb4:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800ddb8:	9311      	str	r3, [sp, #68]	; 0x44
 800ddba:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ddbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ddc2:	9316      	str	r3, [sp, #88]	; 0x58
 800ddc4:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ddc8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800ddcc:	931e      	str	r3, [sp, #120]	; 0x78
 800ddce:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ddd2:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800ddd6:	931f      	str	r3, [sp, #124]	; 0x7c
 800ddd8:	f50d 63d6 	add.w	r3, sp, #1712	; 0x6b0
 800dddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dde0:	f7f2 ff22 	bl	8000c28 <__aeabi_d2f>
 800dde4:	eddf 7a26 	vldr	s15, [pc, #152]	; 800de80 <m_kalman_3gyro.isra.0.constprop.0+0x380>
 800dde8:	ee0a 0a90 	vmov	s21, r0
 800ddec:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ddf0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800ddf4:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 800ddf8:	9320      	str	r3, [sp, #128]	; 0x80
 800ddfa:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ddfe:	f50d 66d6 	add.w	r6, sp, #1712	; 0x6b0
 800de02:	ed9f 5a20 	vldr	s10, [pc, #128]	; 800de84 <m_kalman_3gyro.isra.0.constprop.0+0x384>
 800de06:	ee6d bac9 	vnmul.f32	s23, s27, s18
 800de0a:	f203 4384 	addw	r3, r3, #1156	; 0x484
 800de0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de10:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800de88 <m_kalman_3gyro.isra.0.constprop.0+0x388>
 800de14:	ee2e ca48 	vnmul.f32	s24, s28, s16
 800de18:	edd3 4a00 	vldr	s9, [r3]
 800de1c:	eee8 ba2e 	vfma.f32	s23, s16, s29
 800de20:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800de24:	ee64 4a85 	vmul.f32	s9, s9, s10
 800de28:	edd2 6a00 	vldr	s13, [r2]
 800de2c:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 800de30:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800de34:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800de38:	eea8 caad 	vfma.f32	s24, s17, s27
 800de3c:	eee6 4aa5 	vfma.f32	s9, s13, s11
 800de40:	ed93 7a00 	vldr	s14, [r3]
 800de44:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800de48:	f202 42cc 	addw	r2, r2, #1228	; 0x4cc
 800de4c:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 800de8c <m_kalman_3gyro.isra.0.constprop.0+0x38c>
 800de50:	f501 6191 	add.w	r1, r1, #1160	; 0x488
 800de54:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 800de58:	ed92 4a00 	vldr	s8, [r2]
 800de5c:	9103      	str	r1, [sp, #12]
 800de5e:	9304      	str	r3, [sp, #16]
 800de60:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800de64:	eee4 4a06 	vfma.f32	s9, s8, s12
 800de68:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800de6c:	f203 47f4 	addw	r7, r3, #1268	; 0x4f4
 800de70:	f203 4c8c 	addw	ip, r3, #1164	; 0x48c
 800de74:	e00e      	b.n	800de94 <m_kalman_3gyro.isra.0.constprop.0+0x394>
 800de76:	bf00      	nop
 800de78:	0801c6ec 	.word	0x0801c6ec
 800de7c:	20001448 	.word	0x20001448
 800de80:	3ca3d70a 	.word	0x3ca3d70a
 800de84:	bdcccccd 	.word	0xbdcccccd
 800de88:	be4ccccd 	.word	0xbe4ccccd
 800de8c:	3dcccccd 	.word	0x3dcccccd
 800de90:	3e4ccccd 	.word	0x3e4ccccd
 800de94:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800de98:	f201 4ed4 	addw	lr, r1, #1236	; 0x4d4
 800de9c:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 800dea0:	f501 689f 	add.w	r8, r1, #1272	; 0x4f8
 800dea4:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800dea8:	f501 6992 	add.w	r9, r1, #1168	; 0x490
 800deac:	9322      	str	r3, [sp, #136]	; 0x88
 800deae:	f201 416c 	addw	r1, r1, #1132	; 0x46c
 800deb2:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800deb6:	f202 4264 	addw	r2, r2, #1124	; 0x464
 800deba:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 800de90 <m_kalman_3gyro.isra.0.constprop.0+0x390>
 800debe:	f500 6a9b 	add.w	sl, r0, #1240	; 0x4d8
 800dec2:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800dec6:	f200 4bfc 	addw	fp, r0, #1276	; 0x4fc
 800deca:	f203 4374 	addw	r3, r3, #1140	; 0x474
 800dece:	f500 608e 	add.w	r0, r0, #1136	; 0x470
 800ded2:	9123      	str	r1, [sp, #140]	; 0x8c
 800ded4:	eee7 4a26 	vfma.f32	s9, s14, s13
 800ded8:	9900      	ldr	r1, [sp, #0]
 800deda:	9221      	str	r2, [sp, #132]	; 0x84
 800dedc:	9024      	str	r0, [sp, #144]	; 0x90
 800dede:	9325      	str	r3, [sp, #148]	; 0x94
 800dee0:	ed96 3b00 	vldr	d3, [r6]
 800dee4:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800dee6:	ed85 3b0e 	vstr	d3, [r5, #56]	; 0x38
 800deea:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800deec:	edc5 7a00 	vstr	s15, [r5]
 800def0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800def2:	9e03      	ldr	r6, [sp, #12]
 800def4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800def8:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800defc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800defe:	edc5 4af8 	vstr	s9, [r5, #992]	; 0x3e0
 800df02:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
 800df06:	edd6 7a00 	vldr	s15, [r6]
 800df0a:	f205 5104 	addw	r1, r5, #1284	; 0x504
 800df0e:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800df12:	ee67 7a85 	vmul.f32	s15, s15, s10
 800df16:	edd2 3a00 	vldr	s7, [r2]
 800df1a:	f205 469c 	addw	r6, r5, #1180	; 0x49c
 800df1e:	9d04      	ldr	r5, [sp, #16]
 800df20:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 800df24:	ed95 4a00 	vldr	s8, [r5]
 800df28:	eee3 7aa5 	vfma.f32	s15, s7, s11
 800df2c:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800df30:	f200 40e4 	addw	r0, r0, #1252	; 0x4e4
 800df34:	ed97 7a00 	vldr	s14, [r7]
 800df38:	f505 658f 	add.w	r5, r5, #1144	; 0x478
 800df3c:	902d      	str	r0, [sp, #180]	; 0xb4
 800df3e:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 800df42:	9518      	str	r5, [sp, #96]	; 0x60
 800df44:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800df48:	eee4 7a06 	vfma.f32	s15, s8, s12
 800df4c:	f200 407c 	addw	r0, r0, #1148	; 0x47c
 800df50:	f8dd 76d8 	ldr.w	r7, [sp, #1752]	; 0x6d8
 800df54:	f505 6594 	add.w	r5, r5, #1184	; 0x4a0
 800df58:	963c      	str	r6, [sp, #240]	; 0xf0
 800df5a:	9019      	str	r0, [sp, #100]	; 0x64
 800df5c:	f507 67a1 	add.w	r7, r7, #1288	; 0x508
 800df60:	952b      	str	r5, [sp, #172]	; 0xac
 800df62:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800df66:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 800df6a:	eee7 7a26 	vfma.f32	s15, s14, s13
 800df6e:	f505 659d 	add.w	r5, r5, #1256	; 0x4e8
 800df72:	973d      	str	r7, [sp, #244]	; 0xf4
 800df74:	f200 500c 	addw	r0, r0, #1292	; 0x50c
 800df78:	952e      	str	r5, [sp, #184]	; 0xb8
 800df7a:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800df7e:	9030      	str	r0, [sp, #192]	; 0xc0
 800df80:	f205 45a4 	addw	r5, r5, #1188	; 0x4a4
 800df84:	952c      	str	r5, [sp, #176]	; 0xb0
 800df86:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800df8a:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 800df8e:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 800df92:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800df96:	edc0 7af9 	vstr	s15, [r0, #996]	; 0x3e4
 800df9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800df9e:	ed9c 7a00 	vldr	s14, [ip]
 800dfa2:	f200 4cec 	addw	ip, r0, #1260	; 0x4ec
 800dfa6:	921a      	str	r2, [sp, #104]	; 0x68
 800dfa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dfaa:	ee27 7a05 	vmul.f32	s14, s14, s10
 800dfae:	ed9e 4a00 	vldr	s8, [lr]
 800dfb2:	eee4 7aa4 	vfma.f32	s15, s9, s9
 800dfb6:	edd2 3a00 	vldr	s7, [r2]
 800dfba:	edd8 4a00 	vldr	s9, [r8]
 800dfbe:	eea3 7aa5 	vfma.f32	s14, s7, s11
 800dfc2:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800dfc6:	f8cd c0bc 	str.w	ip, [sp, #188]	; 0xbc
 800dfca:	f505 6ca2 	add.w	ip, r5, #1296	; 0x510
 800dfce:	f502 6580 	add.w	r5, r2, #1024	; 0x400
 800dfd2:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
 800dfd6:	eea4 7a06 	vfma.f32	s14, s8, s12
 800dfda:	eea4 7aa6 	vfma.f32	s14, s9, s13
 800dfde:	eee7 7a07 	vfma.f32	s15, s14, s14
 800dfe2:	ed82 7afa 	vstr	s14, [r2, #1000]	; 0x3e8
 800dfe6:	edd9 4a00 	vldr	s9, [r9]
 800dfea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800dfec:	ee64 4a85 	vmul.f32	s9, s9, s10
 800dff0:	edda 3a00 	vldr	s7, [sl]
 800dff4:	ed92 3a00 	vldr	s6, [r2]
 800dff8:	ed9b 4a00 	vldr	s8, [fp]
 800dffc:	ee17 0a90 	vmov	r0, s15
 800e000:	eef0 7a64 	vmov.f32	s15, s9
 800e004:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800e008:	eee3 7a25 	vfma.f32	s15, s6, s11
 800e00c:	f502 7c0e 	add.w	ip, r2, #568	; 0x238
 800e010:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800e014:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800e018:	f202 4294 	addw	r2, r2, #1172	; 0x494
 800e01c:	eee3 7a86 	vfma.f32	s15, s7, s12
 800e020:	eee4 7a26 	vfma.f32	s15, s8, s13
 800e024:	ed42 7a2a 	vstr	s15, [r2, #-168]	; 0xffffff58
 800e028:	edd2 7a00 	vldr	s15, [r2]
 800e02c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e02e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e032:	ed92 4a00 	vldr	s8, [r2]
 800e036:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800e03a:	eee4 7a25 	vfma.f32	s15, s8, s11
 800e03e:	4694      	mov	ip, r2
 800e040:	f202 42dc 	addw	r2, r2, #1244	; 0x4dc
 800e044:	edd2 4a00 	vldr	s9, [r2]
 800e048:	f50c 62a0 	add.w	r2, ip, #1280	; 0x500
 800e04c:	f50c 7c05 	add.w	ip, ip, #532	; 0x214
 800e050:	ed92 7a00 	vldr	s14, [r2]
 800e054:	eee4 7a86 	vfma.f32	s15, s9, s12
 800e058:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800e05c:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
 800e060:	f502 6293 	add.w	r2, r2, #1176	; 0x498
 800e064:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e068:	ed42 7a2a 	vstr	s15, [r2, #-168]	; 0xffffff58
 800e06c:	edd2 7a00 	vldr	s15, [r2]
 800e070:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e072:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e076:	edd3 4a00 	vldr	s9, [r3]
 800e07a:	ed92 4a00 	vldr	s8, [r2]
 800e07e:	ed91 7a00 	vldr	s14, [r1]
 800e082:	eee4 7a25 	vfma.f32	s15, s8, s11
 800e086:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800e08a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e08c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e08e:	eee4 7a86 	vfma.f32	s15, s9, s12
 800e092:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e096:	edc1 7afd 	vstr	s15, [r1, #1012]	; 0x3f4
 800e09a:	edd6 7a00 	vldr	s15, [r6]
 800e09e:	ed93 4a00 	vldr	s8, [r3]
 800e0a2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e0a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0a8:	ed97 7a00 	vldr	s14, [r7]
 800e0ac:	edd3 4a00 	vldr	s9, [r3]
 800e0b0:	eee4 7a25 	vfma.f32	s15, s8, s11
 800e0b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800e0b6:	eee4 7a86 	vfma.f32	s15, s9, s12
 800e0ba:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e0be:	edc1 7afe 	vstr	s15, [r1, #1016]	; 0x3f8
 800e0c2:	edd3 7a00 	vldr	s15, [r3]
 800e0c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e0c8:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e0cc:	ed93 4a00 	vldr	s8, [r3]
 800e0d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e0d2:	eee4 7a25 	vfma.f32	s15, s8, s11
 800e0d6:	edd3 4a00 	vldr	s9, [r3]
 800e0da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800e0dc:	ed93 7a00 	vldr	s14, [r3]
 800e0e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800e0e2:	eee4 7a86 	vfma.f32	s15, s9, s12
 800e0e6:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e0ea:	edc1 7aff 	vstr	s15, [r1, #1020]	; 0x3fc
 800e0ee:	ed93 ba00 	vldr	s22, [r3]
 800e0f2:	edd2 4a00 	vldr	s9, [r2]
 800e0f6:	ee2b ba05 	vmul.f32	s22, s22, s10
 800e0fa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800e0fc:	ed93 7a00 	vldr	s14, [r3]
 800e100:	eea4 baa5 	vfma.f32	s22, s9, s11
 800e104:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800e106:	edd3 7a00 	vldr	s15, [r3]
 800e10a:	eea7 ba06 	vfma.f32	s22, s14, s12
 800e10e:	eea7 baa6 	vfma.f32	s22, s15, s13
 800e112:	ed85 ba00 	vstr	s22, [r5]
 800e116:	f7f2 fa37 	bl	8000588 <__aeabi_f2d>
 800e11a:	4de2      	ldr	r5, [pc, #904]	; (800e4a4 <m_kalman_3gyro.isra.0.constprop.0+0x9a4>)
 800e11c:	ec41 0b10 	vmov	d0, r0, r1
 800e120:	f00c fc94 	bl	801aa4c <sqrt>
 800e124:	ec51 0b10 	vmov	r0, r1, d0
 800e128:	f7f2 fd7e 	bl	8000c28 <__aeabi_d2f>
 800e12c:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e130:	ee0f 0a10 	vmov	s30, r0
 800e134:	9014      	str	r0, [sp, #80]	; 0x50
 800e136:	edd3 7afc 	vldr	s15, [r3, #1008]	; 0x3f0
 800e13a:	edd3 6afb 	vldr	s13, [r3, #1004]	; 0x3ec
 800e13e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e142:	ed93 7afd 	vldr	s14, [r3, #1012]	; 0x3f4
 800e146:	f8c5 01a0 	str.w	r0, [r5, #416]	; 0x1a0
 800e14a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800e14e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800e152:	ee17 0a90 	vmov	r0, s15
 800e156:	f7f2 fa17 	bl	8000588 <__aeabi_f2d>
 800e15a:	ec41 0b10 	vmov	d0, r0, r1
 800e15e:	f00c fc75 	bl	801aa4c <sqrt>
 800e162:	ec51 0b10 	vmov	r0, r1, d0
 800e166:	f7f2 fd5f 	bl	8000c28 <__aeabi_d2f>
 800e16a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e16e:	900a      	str	r0, [sp, #40]	; 0x28
 800e170:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
 800e174:	ed93 7afe 	vldr	s14, [r3, #1016]	; 0x3f8
 800e178:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e17c:	f8c5 01a4 	str.w	r0, [r5, #420]	; 0x1a4
 800e180:	eee7 7a07 	vfma.f32	s15, s14, s14
 800e184:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 800e188:	ee28 baee 	vnmul.f32	s22, s17, s29
 800e18c:	eeae ba09 	vfma.f32	s22, s28, s18
 800e190:	ee17 0a90 	vmov	r0, s15
 800e194:	f7f2 f9f8 	bl	8000588 <__aeabi_f2d>
 800e198:	ec41 0b10 	vmov	d0, r0, r1
 800e19c:	f00c fc56 	bl	801aa4c <sqrt>
 800e1a0:	ec51 0b10 	vmov	r0, r1, d0
 800e1a4:	f7f2 fd40 	bl	8000c28 <__aeabi_d2f>
 800e1a8:	ee6b 7aab 	vmul.f32	s15, s23, s23
 800e1ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800e1ae:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 800e1b2:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800e1b6:	ed83 fa00 	vstr	s30, [r3]
 800e1ba:	9b01      	ldr	r3, [sp, #4]
 800e1bc:	9013      	str	r0, [sp, #76]	; 0x4c
 800e1be:	edc3 6a00 	vstr	s13, [r3]
 800e1c2:	9b02      	ldr	r3, [sp, #8]
 800e1c4:	f8c5 01a8 	str.w	r0, [r5, #424]	; 0x1a8
 800e1c8:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 800e1cc:	6018      	str	r0, [r3, #0]
 800e1ce:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e1d2:	ed83 9a90 	vstr	s18, [r3, #576]	; 0x240
 800e1d6:	edc3 8a93 	vstr	s17, [r3, #588]	; 0x24c
 800e1da:	ed83 8a96 	vstr	s16, [r3, #600]	; 0x258
 800e1de:	ee17 0a90 	vmov	r0, s15
 800e1e2:	f7f2 f9d1 	bl	8000588 <__aeabi_f2d>
 800e1e6:	ec41 0b10 	vmov	d0, r0, r1
 800e1ea:	f00c fc2f 	bl	801aa4c <sqrt>
 800e1ee:	ec51 0b10 	vmov	r0, r1, d0
 800e1f2:	f7f2 fd19 	bl	8000c28 <__aeabi_d2f>
 800e1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1fa:	ee07 0a10 	vmov	s14, r0
 800e1fe:	ab7b      	add	r3, sp, #492	; 0x1ec
 800e200:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e206:	461a      	mov	r2, r3
 800e208:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e20c:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e20e:	ee2c ca27 	vmul.f32	s24, s24, s15
 800e212:	ee6b baa7 	vmul.f32	s23, s23, s15
 800e216:	ee2b ba27 	vmul.f32	s22, s22, s15
 800e21a:	ee6c ea48 	vnmul.f32	s29, s24, s16
 800e21e:	ed83 ca8f 	vstr	s24, [r3, #572]	; 0x23c
 800e222:	ee2b eac9 	vnmul.f32	s28, s23, s18
 800e226:	edc3 ba92 	vstr	s23, [r3, #584]	; 0x248
 800e22a:	ee2b fa68 	vnmul.f32	s30, s22, s17
 800e22e:	ed83 ba95 	vstr	s22, [r3, #596]	; 0x254
 800e232:	eee9 ea0b 	vfma.f32	s29, s18, s22
 800e236:	eea8 ea8c 	vfma.f32	s28, s17, s24
 800e23a:	eea8 fa2b 	vfma.f32	s30, s16, s23
 800e23e:	edc3 ea91 	vstr	s29, [r3, #580]	; 0x244
 800e242:	ed83 ea94 	vstr	s28, [r3, #592]	; 0x250
 800e246:	ed83 fa8e 	vstr	s30, [r3, #568]	; 0x238
 800e24a:	f7fd f9d7 	bl	800b5fc <m_mldivide>
 800e24e:	a87b      	add	r0, sp, #492	; 0x1ec
 800e250:	a949      	add	r1, sp, #292	; 0x124
 800e252:	f7fd ffe7 	bl	800c224 <m_dcm2q_eml>
 800e256:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e25a:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 800e25e:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 800e262:	3b0c      	subs	r3, #12
 800e264:	f8d3 13bc 	ldr.w	r1, [r3, #956]	; 0x3bc
 800e268:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 800e26c:	f8d3 23c0 	ldr.w	r2, [r3, #960]	; 0x3c0
 800e270:	f8c3 13c8 	str.w	r1, [r3, #968]	; 0x3c8
 800e274:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 800e278:	4298      	cmp	r0, r3
 800e27a:	d1f0      	bne.n	800e25e <m_kalman_3gyro.isra.0.constprop.0+0x75e>
 800e27c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e280:	eddd 6a49 	vldr	s13, [sp, #292]	; 0x124
 800e284:	ed9d 7a4a 	vldr	s14, [sp, #296]	; 0x128
 800e288:	f504 72ae 	add.w	r2, r4, #348	; 0x15c
 800e28c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e290:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e294:	ee87 5aa9 	vdiv.f32	s10, s15, s19
 800e298:	eddd 7a4b 	vldr	s15, [sp, #300]	; 0x12c
 800e29c:	ad42      	add	r5, sp, #264	; 0x108
 800e29e:	4621      	mov	r1, r4
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	eddf 5a81 	vldr	s11, [pc, #516]	; 800e4a8 <m_kalman_3gyro.isra.0.constprop.0+0x9a8>
 800e2a6:	ed9f 6a81 	vldr	s12, [pc, #516]	; 800e4ac <m_kalman_3gyro.isra.0.constprop.0+0x9ac>
 800e2aa:	9435      	str	r4, [sp, #212]	; 0xd4
 800e2ac:	ee37 7a07 	vadd.f32	s14, s14, s14
 800e2b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e2b4:	ee66 6a85 	vmul.f32	s13, s13, s10
 800e2b8:	ee27 7a05 	vmul.f32	s14, s14, s10
 800e2bc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e2c0:	edc3 6a97 	vstr	s13, [r3, #604]	; 0x25c
 800e2c4:	ed83 7a98 	vstr	s14, [r3, #608]	; 0x260
 800e2c8:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
 800e2cc:	edd1 6a00 	vldr	s13, [r1]
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	eef0 7a66 	vmov.f32	s15, s13
 800e2d8:	330c      	adds	r3, #12
 800e2da:	ed93 7a00 	vldr	s14, [r3]
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2e4:	d1f8      	bne.n	800e2d8 <m_kalman_3gyro.isra.0.constprop.0+0x7d8>
 800e2e6:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800e2f0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800e2f4:	edd3 7a03 	vldr	s15, [r3, #12]
 800e2f8:	330c      	adds	r3, #12
 800e2fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2fe:	4293      	cmp	r3, r2
 800e300:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800e304:	d1f6      	bne.n	800e2f4 <m_kalman_3gyro.isra.0.constprop.0+0x7f4>
 800e306:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e30a:	2803      	cmp	r0, #3
 800e30c:	f101 0104 	add.w	r1, r1, #4
 800e310:	f103 0204 	add.w	r2, r3, #4
 800e314:	ece5 6a01 	vstmia	r5!, {s13}
 800e318:	d1d8      	bne.n	800e2cc <m_kalman_3gyro.isra.0.constprop.0+0x7cc>
 800e31a:	9842      	ldr	r0, [sp, #264]	; 0x108
 800e31c:	f20d 4ae4 	addw	sl, sp, #1252	; 0x4e4
 800e320:	f7f2 f932 	bl	8000588 <__aeabi_f2d>
 800e324:	f50d 7b68 	add.w	fp, sp, #928	; 0x3a0
 800e328:	ec41 0b10 	vmov	d0, r0, r1
 800e32c:	f00c fb8e 	bl	801aa4c <sqrt>
 800e330:	ec51 0b10 	vmov	r0, r1, d0
 800e334:	f7f2 fc78 	bl	8000c28 <__aeabi_d2f>
 800e338:	4603      	mov	r3, r0
 800e33a:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800e33c:	ee0d 3a90 	vmov	s27, r3
 800e340:	f20d 339f 	addw	r3, sp, #927	; 0x39f
 800e344:	9406      	str	r4, [sp, #24]
 800e346:	f1c3 0301 	rsb	r3, r3, #1
 800e34a:	edcd da42 	vstr	s27, [sp, #264]	; 0x108
 800e34e:	930d      	str	r3, [sp, #52]	; 0x34
 800e350:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e354:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800e358:	9308      	str	r3, [sp, #32]
 800e35a:	2300      	movs	r3, #0
 800e35c:	9307      	str	r3, [sp, #28]
 800e35e:	f7f2 f913 	bl	8000588 <__aeabi_f2d>
 800e362:	ec41 0b10 	vmov	d0, r0, r1
 800e366:	f00c fb71 	bl	801aa4c <sqrt>
 800e36a:	ec51 0b10 	vmov	r0, r1, d0
 800e36e:	f7f2 fc5b 	bl	8000c28 <__aeabi_d2f>
 800e372:	4603      	mov	r3, r0
 800e374:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e376:	ee09 3a90 	vmov	s19, r3
 800e37a:	9343      	str	r3, [sp, #268]	; 0x10c
 800e37c:	f7f2 f904 	bl	8000588 <__aeabi_f2d>
 800e380:	ee69 9aa9 	vmul.f32	s19, s19, s19
 800e384:	ec41 0b10 	vmov	d0, r0, r1
 800e388:	eeed 9aad 	vfma.f32	s19, s27, s27
 800e38c:	f00c fb5e 	bl	801aa4c <sqrt>
 800e390:	ec51 0b10 	vmov	r0, r1, d0
 800e394:	f7f2 fc48 	bl	8000c28 <__aeabi_d2f>
 800e398:	ee07 0a90 	vmov	s15, r0
 800e39c:	9044      	str	r0, [sp, #272]	; 0x110
 800e39e:	eee7 9aa7 	vfma.f32	s19, s15, s15
 800e3a2:	ee19 0a90 	vmov	r0, s19
 800e3a6:	f7f2 f8ef 	bl	8000588 <__aeabi_f2d>
 800e3aa:	ec41 0b10 	vmov	d0, r0, r1
 800e3ae:	f00c fb4d 	bl	801aa4c <sqrt>
 800e3b2:	ec51 0b10 	vmov	r0, r1, d0
 800e3b6:	f7f2 fc37 	bl	8000c28 <__aeabi_d2f>
 800e3ba:	4b3a      	ldr	r3, [pc, #232]	; (800e4a4 <m_kalman_3gyro.isra.0.constprop.0+0x9a4>)
 800e3bc:	edd3 9a27 	vldr	s19, [r3, #156]	; 0x9c
 800e3c0:	edd3 da28 	vldr	s27, [r3, #160]	; 0xa0
 800e3c4:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e3c8:	f8c3 03c4 	str.w	r0, [r3, #964]	; 0x3c4
 800e3cc:	9b07      	ldr	r3, [sp, #28]
 800e3ce:	9a06      	ldr	r2, [sp, #24]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	9307      	str	r3, [sp, #28]
 800e3d4:	4653      	mov	r3, sl
 800e3d6:	f852 1b0c 	ldr.w	r1, [r2], #12
 800e3da:	f843 1b04 	str.w	r1, [r3], #4
 800e3de:	f20d 515c 	addw	r1, sp, #1372	; 0x55c
 800e3e2:	428b      	cmp	r3, r1
 800e3e4:	d1f7      	bne.n	800e3d6 <m_kalman_3gyro.isra.0.constprop.0+0x8d6>
 800e3e6:	2101      	movs	r1, #1
 800e3e8:	221e      	movs	r2, #30
 800e3ea:	a88d      	add	r0, sp, #564	; 0x234
 800e3ec:	f007 fd22 	bl	8015e34 <memset>
 800e3f0:	f20d 339f 	addw	r3, sp, #927	; 0x39f
 800e3f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e3f6:	18ca      	adds	r2, r1, r3
 800e3f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3fc:	f20d 32bd 	addw	r2, sp, #957	; 0x3bd
 800e400:	429a      	cmp	r2, r3
 800e402:	d1f8      	bne.n	800e3f6 <m_kalman_3gyro.isra.0.constprop.0+0x8f6>
 800e404:	ed9a 7a00 	vldr	s14, [sl]
 800e408:	edda 7a01 	vldr	s15, [sl, #4]
 800e40c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e414:	d903      	bls.n	800e41e <m_kalman_3gyro.isra.0.constprop.0+0x91e>
 800e416:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e41a:	f8ab 3000 	strh.w	r3, [fp]
 800e41e:	ed9a 7a02 	vldr	s14, [sl, #8]
 800e422:	edda 7a03 	vldr	s15, [sl, #12]
 800e426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42e:	d903      	bls.n	800e438 <m_kalman_3gyro.isra.0.constprop.0+0x938>
 800e430:	f44f 7341 	mov.w	r3, #772	; 0x304
 800e434:	f8ab 3002 	strh.w	r3, [fp, #2]
 800e438:	ed9a 7a04 	vldr	s14, [sl, #16]
 800e43c:	edda 7a05 	vldr	s15, [sl, #20]
 800e440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e448:	d903      	bls.n	800e452 <m_kalman_3gyro.isra.0.constprop.0+0x952>
 800e44a:	f240 5306 	movw	r3, #1286	; 0x506
 800e44e:	f8ab 3004 	strh.w	r3, [fp, #4]
 800e452:	ed9a 7a06 	vldr	s14, [sl, #24]
 800e456:	edda 7a07 	vldr	s15, [sl, #28]
 800e45a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	d903      	bls.n	800e46c <m_kalman_3gyro.isra.0.constprop.0+0x96c>
 800e464:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800e468:	f8ab 3006 	strh.w	r3, [fp, #6]
 800e46c:	ed9a 7a08 	vldr	s14, [sl, #32]
 800e470:	edda 7a09 	vldr	s15, [sl, #36]	; 0x24
 800e474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47c:	d903      	bls.n	800e486 <m_kalman_3gyro.isra.0.constprop.0+0x986>
 800e47e:	f640 130a 	movw	r3, #2314	; 0x90a
 800e482:	f8ab 3008 	strh.w	r3, [fp, #8]
 800e486:	ed9a 7a0a 	vldr	s14, [sl, #40]	; 0x28
 800e48a:	edda 7a0b 	vldr	s15, [sl, #44]	; 0x2c
 800e48e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e496:	d90f      	bls.n	800e4b8 <m_kalman_3gyro.isra.0.constprop.0+0x9b8>
 800e498:	f640 330c 	movw	r3, #2828	; 0xb0c
 800e49c:	f8ab 300a 	strh.w	r3, [fp, #10]
 800e4a0:	e00a      	b.n	800e4b8 <m_kalman_3gyro.isra.0.constprop.0+0x9b8>
 800e4a2:	bf00      	nop
 800e4a4:	20001448 	.word	0x20001448
 800e4a8:	3d088889 	.word	0x3d088889
 800e4ac:	3d0d3dcb 	.word	0x3d0d3dcb
 800e4b0:	3f333333 	.word	0x3f333333
 800e4b4:	3f4ccccd 	.word	0x3f4ccccd
 800e4b8:	ed9a 7a0c 	vldr	s14, [sl, #48]	; 0x30
 800e4bc:	edda 7a0d 	vldr	s15, [sl, #52]	; 0x34
 800e4c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c8:	d903      	bls.n	800e4d2 <m_kalman_3gyro.isra.0.constprop.0+0x9d2>
 800e4ca:	f640 530e 	movw	r3, #3342	; 0xd0e
 800e4ce:	f8ab 300c 	strh.w	r3, [fp, #12]
 800e4d2:	ed9a 7a0e 	vldr	s14, [sl, #56]	; 0x38
 800e4d6:	edda 7a0f 	vldr	s15, [sl, #60]	; 0x3c
 800e4da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e2:	d903      	bls.n	800e4ec <m_kalman_3gyro.isra.0.constprop.0+0x9ec>
 800e4e4:	f44f 6371 	mov.w	r3, #3856	; 0xf10
 800e4e8:	f8ab 300e 	strh.w	r3, [fp, #14]
 800e4ec:	ed9a 7a10 	vldr	s14, [sl, #64]	; 0x40
 800e4f0:	edda 7a11 	vldr	s15, [sl, #68]	; 0x44
 800e4f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fc:	d903      	bls.n	800e506 <m_kalman_3gyro.isra.0.constprop.0+0xa06>
 800e4fe:	f241 1312 	movw	r3, #4370	; 0x1112
 800e502:	f8ab 3010 	strh.w	r3, [fp, #16]
 800e506:	ed9a 7a12 	vldr	s14, [sl, #72]	; 0x48
 800e50a:	edda 7a13 	vldr	s15, [sl, #76]	; 0x4c
 800e50e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e516:	d903      	bls.n	800e520 <m_kalman_3gyro.isra.0.constprop.0+0xa20>
 800e518:	f241 3314 	movw	r3, #4884	; 0x1314
 800e51c:	f8ab 3012 	strh.w	r3, [fp, #18]
 800e520:	ed9a 7a14 	vldr	s14, [sl, #80]	; 0x50
 800e524:	edda 7a15 	vldr	s15, [sl, #84]	; 0x54
 800e528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e530:	d903      	bls.n	800e53a <m_kalman_3gyro.isra.0.constprop.0+0xa3a>
 800e532:	f241 5316 	movw	r3, #5398	; 0x1516
 800e536:	f8ab 3014 	strh.w	r3, [fp, #20]
 800e53a:	ed9a 7a16 	vldr	s14, [sl, #88]	; 0x58
 800e53e:	edda 7a17 	vldr	s15, [sl, #92]	; 0x5c
 800e542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e54a:	d903      	bls.n	800e554 <m_kalman_3gyro.isra.0.constprop.0+0xa54>
 800e54c:	f241 7318 	movw	r3, #5912	; 0x1718
 800e550:	f8ab 3016 	strh.w	r3, [fp, #22]
 800e554:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 800e558:	edda 7a19 	vldr	s15, [sl, #100]	; 0x64
 800e55c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e564:	d903      	bls.n	800e56e <m_kalman_3gyro.isra.0.constprop.0+0xa6e>
 800e566:	f641 131a 	movw	r3, #6426	; 0x191a
 800e56a:	f8ab 3018 	strh.w	r3, [fp, #24]
 800e56e:	ed9a 7a1a 	vldr	s14, [sl, #104]	; 0x68
 800e572:	edda 7a1b 	vldr	s15, [sl, #108]	; 0x6c
 800e576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57e:	d903      	bls.n	800e588 <m_kalman_3gyro.isra.0.constprop.0+0xa88>
 800e580:	f641 331c 	movw	r3, #6940	; 0x1b1c
 800e584:	f8ab 301a 	strh.w	r3, [fp, #26]
 800e588:	ed9a 7a1c 	vldr	s14, [sl, #112]	; 0x70
 800e58c:	edda 7a1d 	vldr	s15, [sl, #116]	; 0x74
 800e590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e598:	d903      	bls.n	800e5a2 <m_kalman_3gyro.isra.0.constprop.0+0xaa2>
 800e59a:	f641 531e 	movw	r3, #7454	; 0x1d1e
 800e59e:	f8ab 301c 	strh.w	r3, [fp, #28]
 800e5a2:	2304      	movs	r3, #4
 800e5a4:	9305      	str	r3, [sp, #20]
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	9303      	str	r3, [sp, #12]
 800e5aa:	9a03      	ldr	r2, [sp, #12]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	9204      	str	r2, [sp, #16]
 800e5b0:	0052      	lsls	r2, r2, #1
 800e5b2:	2b1e      	cmp	r3, #30
 800e5b4:	f103 0901 	add.w	r9, r3, #1
 800e5b8:	9203      	str	r2, [sp, #12]
 800e5ba:	d056      	beq.n	800e66a <m_kalman_3gyro.isra.0.constprop.0+0xb6a>
 800e5bc:	f04f 0801 	mov.w	r8, #1
 800e5c0:	9b03      	ldr	r3, [sp, #12]
 800e5c2:	4642      	mov	r2, r8
 800e5c4:	f8cd 8008 	str.w	r8, [sp, #8]
 800e5c8:	4443      	add	r3, r8
 800e5ca:	2b1f      	cmp	r3, #31
 800e5cc:	bfa8      	it	ge
 800e5ce:	231f      	movge	r3, #31
 800e5d0:	4698      	mov	r8, r3
 800e5d2:	1a9b      	subs	r3, r3, r2
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	9300      	str	r3, [sp, #0]
 800e5d8:	dd41      	ble.n	800e65e <m_kalman_3gyro.isra.0.constprop.0+0xb5e>
 800e5da:	4615      	mov	r5, r2
 800e5dc:	464e      	mov	r6, r9
 800e5de:	2401      	movs	r4, #1
 800e5e0:	e009      	b.n	800e5f6 <m_kalman_3gyro.isra.0.constprop.0+0xaf6>
 800e5e2:	3601      	adds	r6, #1
 800e5e4:	f807 2c01 	strb.w	r2, [r7, #-1]
 800e5e8:	45b0      	cmp	r8, r6
 800e5ea:	f000 82f6 	beq.w	800ebda <m_kalman_3gyro.isra.0.constprop.0+0x10da>
 800e5ee:	3401      	adds	r4, #1
 800e5f0:	9b00      	ldr	r3, [sp, #0]
 800e5f2:	42a3      	cmp	r3, r4
 800e5f4:	db2c      	blt.n	800e650 <m_kalman_3gyro.isra.0.constprop.0+0xb50>
 800e5f6:	1e72      	subs	r2, r6, #1
 800e5f8:	ab8d      	add	r3, sp, #564	; 0x234
 800e5fa:	f105 3cff 	add.w	ip, r5, #4294967295
 800e5fe:	191f      	adds	r7, r3, r4
 800e600:	9201      	str	r2, [sp, #4]
 800e602:	f91b 300c 	ldrsb.w	r3, [fp, ip]
 800e606:	f91b 2002 	ldrsb.w	r2, [fp, r2]
 800e60a:	4638      	mov	r0, r7
 800e60c:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
 800e610:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 800e614:	ed11 7a01 	vldr	s14, [r1, #-4]
 800e618:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800e61c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e624:	d8dd      	bhi.n	800e5e2 <m_kalman_3gyro.isra.0.constprop.0+0xae2>
 800e626:	3501      	adds	r5, #1
 800e628:	f807 3c01 	strb.w	r3, [r7, #-1]
 800e62c:	454d      	cmp	r5, r9
 800e62e:	d1de      	bne.n	800e5ee <m_kalman_3gyro.isra.0.constprop.0+0xaee>
 800e630:	9b01      	ldr	r3, [sp, #4]
 800e632:	45b0      	cmp	r8, r6
 800e634:	eba8 0206 	sub.w	r2, r8, r6
 800e638:	445b      	add	r3, fp
 800e63a:	4619      	mov	r1, r3
 800e63c:	ddd7      	ble.n	800e5ee <m_kalman_3gyro.isra.0.constprop.0+0xaee>
 800e63e:	4444      	add	r4, r8
 800e640:	f007 fbea 	bl	8015e18 <memcpy>
 800e644:	9b00      	ldr	r3, [sp, #0]
 800e646:	1ba4      	subs	r4, r4, r6
 800e648:	4646      	mov	r6, r8
 800e64a:	3401      	adds	r4, #1
 800e64c:	42a3      	cmp	r3, r4
 800e64e:	dad2      	bge.n	800e5f6 <m_kalman_3gyro.isra.0.constprop.0+0xaf6>
 800e650:	461a      	mov	r2, r3
 800e652:	9b02      	ldr	r3, [sp, #8]
 800e654:	a98d      	add	r1, sp, #564	; 0x234
 800e656:	1e58      	subs	r0, r3, #1
 800e658:	4458      	add	r0, fp
 800e65a:	f007 fbdd 	bl	8015e18 <memcpy>
 800e65e:	9b04      	ldr	r3, [sp, #16]
 800e660:	eb08 0903 	add.w	r9, r8, r3
 800e664:	f1b9 0f1e 	cmp.w	r9, #30
 800e668:	ddaa      	ble.n	800e5c0 <m_kalman_3gyro.isra.0.constprop.0+0xac0>
 800e66a:	9b05      	ldr	r3, [sp, #20]
 800e66c:	3b01      	subs	r3, #1
 800e66e:	9305      	str	r3, [sp, #20]
 800e670:	d19b      	bne.n	800e5aa <m_kalman_3gyro.isra.0.constprop.0+0xaaa>
 800e672:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 800e676:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 800e67a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800e67e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800e682:	ed52 7a01 	vldr	s15, [r2, #-4]
 800e686:	ed13 7a01 	vldr	s14, [r3, #-4]
 800e68a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e692:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e696:	bf4c      	ite	mi
 800e698:	2201      	movmi	r2, #1
 800e69a:	2200      	movpl	r2, #0
 800e69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a0:	bf4c      	ite	mi
 800e6a2:	2301      	movmi	r3, #1
 800e6a4:	2300      	movpl	r3, #0
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	f000 82a4 	beq.w	800ebf4 <m_kalman_3gyro.isra.0.constprop.0+0x10f4>
 800e6ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e6b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6b8:	9b08      	ldr	r3, [sp, #32]
 800e6ba:	ece3 7a01 	vstmia	r3!, {s15}
 800e6be:	9308      	str	r3, [sp, #32]
 800e6c0:	9b06      	ldr	r3, [sp, #24]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	9306      	str	r3, [sp, #24]
 800e6c6:	9b07      	ldr	r3, [sp, #28]
 800e6c8:	2b03      	cmp	r3, #3
 800e6ca:	f47f ae7f 	bne.w	800e3cc <m_kalman_3gyro.isra.0.constprop.0+0x8cc>
 800e6ce:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e6d2:	ed5f 9a89 	vldr	s19, [pc, #-548]	; 800e4b0 <m_kalman_3gyro.isra.0.constprop.0+0x9b0>
 800e6d6:	edd3 7af3 	vldr	s15, [r3, #972]	; 0x3cc
 800e6da:	edd3 6af2 	vldr	s13, [r3, #968]	; 0x3c8
 800e6de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e6e2:	ed93 7af4 	vldr	s14, [r3, #976]	; 0x3d0
 800e6e6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800e6ea:	eee7 7a07 	vfma.f32	s15, s14, s14
 800e6ee:	ee17 0a90 	vmov	r0, s15
 800e6f2:	f7f1 ff49 	bl	8000588 <__aeabi_f2d>
 800e6f6:	ec41 0b10 	vmov	d0, r0, r1
 800e6fa:	f00c f9a7 	bl	801aa4c <sqrt>
 800e6fe:	ec51 0b10 	vmov	r0, r1, d0
 800e702:	f7f2 fa91 	bl	8000c28 <__aeabi_d2f>
 800e706:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800e70a:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 800e70e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e712:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 800e716:	ee0d 0a90 	vmov	s27, r0
 800e71a:	ee65 9a29 	vmul.f32	s19, s10, s19
 800e71e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800e720:	ee67 5a26 	vmul.f32	s11, s14, s13
 800e724:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 800e728:	ee25 5a26 	vmul.f32	s10, s10, s13
 800e72c:	eee7 9a27 	vfma.f32	s19, s14, s15
 800e730:	ee27 6a26 	vmul.f32	s12, s14, s13
 800e734:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 800e738:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 800e73c:	ee85 7a87 	vdiv.f32	s14, s11, s14
 800e740:	eddd 5a0e 	vldr	s11, [sp, #56]	; 0x38
 800e744:	eec6 5a25 	vdiv.f32	s11, s12, s11
 800e748:	ed9d 6a0f 	vldr	s12, [sp, #60]	; 0x3c
 800e74c:	ee85 6a06 	vdiv.f32	s12, s10, s12
 800e750:	ed1f 5aa8 	vldr	s10, [pc, #-672]	; 800e4b4 <m_kalman_3gyro.isra.0.constprop.0+0x9b4>
 800e754:	ee69 9a85 	vmul.f32	s19, s19, s10
 800e758:	ed83 7a00 	vstr	s14, [r3]
 800e75c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800e75e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800e762:	edc3 5a00 	vstr	s11, [r3]
 800e766:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800e768:	ee36 7a07 	vadd.f32	s14, s12, s14
 800e76c:	ed83 6a00 	vstr	s12, [r3]
 800e770:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e772:	edc3 7a00 	vstr	s15, [r3]
 800e776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e77a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800e77c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e780:	edc3 7a00 	vstr	s15, [r3]
 800e784:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e786:	edc3 9a00 	vstr	s19, [r3]
 800e78a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e78e:	f893 38ce 	ldrb.w	r3, [r3, #2254]	; 0x8ce
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 8268 	beq.w	800ec68 <m_kalman_3gyro.isra.0.constprop.0+0x1168>
 800e798:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e79c:	f603 06c4 	addw	r6, r3, #2244	; 0x8c4
 800e7a0:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e7aa:	f503 690c 	add.w	r9, r3, #2240	; 0x8c0
 800e7ae:	f603 08bc 	addw	r8, r3, #2236	; 0x8bc
 800e7b2:	f603 07b8 	addw	r7, r3, #2232	; 0x8b8
 800e7b6:	ed96 7a00 	vldr	s14, [r6]
 800e7ba:	9b00      	ldr	r3, [sp, #0]
 800e7bc:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e7c0:	ed83 7a00 	vstr	s14, [r3]
 800e7c4:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e7c8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800e7cc:	f7f2 fa2c 	bl	8000c28 <__aeabi_d2f>
 800e7d0:	ed99 6a00 	vldr	s12, [r9]
 800e7d4:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e7d8:	ed86 6a00 	vstr	s12, [r6]
 800e7dc:	9001      	str	r0, [sp, #4]
 800e7de:	ed8d 6a03 	vstr	s12, [sp, #12]
 800e7e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800e7e6:	f7f2 fa1f 	bl	8000c28 <__aeabi_d2f>
 800e7ea:	edd8 7a00 	vldr	s15, [r8]
 800e7ee:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e7f2:	edc9 7a00 	vstr	s15, [r9]
 800e7f6:	9000      	str	r0, [sp, #0]
 800e7f8:	edcd 7a02 	vstr	s15, [sp, #8]
 800e7fc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800e800:	f7f2 fa12 	bl	8000c28 <__aeabi_d2f>
 800e804:	eddd 7a02 	vldr	s15, [sp, #8]
 800e808:	ee07 0a10 	vmov	s14, r0
 800e80c:	ed9d 6a03 	vldr	s12, [sp, #12]
 800e810:	edd7 6a00 	vldr	s13, [r7]
 800e814:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e818:	ed9d 7a00 	vldr	s14, [sp]
 800e81c:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e820:	edc8 6a00 	vstr	s13, [r8]
 800e824:	eee7 7a06 	vfma.f32	s15, s14, s12
 800e828:	edcd 6a02 	vstr	s13, [sp, #8]
 800e82c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e830:	edcd 7a00 	vstr	s15, [sp]
 800e834:	f7f2 f9f8 	bl	8000c28 <__aeabi_d2f>
 800e838:	eddd 7a00 	vldr	s15, [sp]
 800e83c:	ee07 0a10 	vmov	s14, r0
 800e840:	eddd 6a02 	vldr	s13, [sp, #8]
 800e844:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800e848:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e84c:	ed9d 7a04 	vldr	s14, [sp, #16]
 800e850:	eddd 6a01 	vldr	s13, [sp, #4]
 800e854:	edc7 9a00 	vstr	s19, [r7]
 800e858:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e85c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e860:	edcd 7a00 	vstr	s15, [sp]
 800e864:	f7f2 f9e0 	bl	8000c28 <__aeabi_d2f>
 800e868:	eddd 7a00 	vldr	s15, [sp]
 800e86c:	ee07 0a10 	vmov	s14, r0
 800e870:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 800e874:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 800e876:	eee9 7a87 	vfma.f32	s15, s19, s14
 800e87a:	2200      	movs	r2, #0
 800e87c:	2300      	movs	r3, #0
 800e87e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e882:	edc4 7a00 	vstr	s15, [r4]
 800e886:	eef0 9a67 	vmov.f32	s19, s15
 800e88a:	f7f2 f951 	bl	8000b30 <__aeabi_dcmple>
 800e88e:	2800      	cmp	r0, #0
 800e890:	f040 8584 	bne.w	800f39c <m_kalman_3gyro.isra.0.constprop.0+0x189c>
 800e894:	f50d 61d6 	add.w	r1, sp, #1712	; 0x6b0
 800e898:	2200      	movs	r2, #0
 800e89a:	4beb      	ldr	r3, [pc, #940]	; (800ec48 <m_kalman_3gyro.isra.0.constprop.0+0x1148>)
 800e89c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8a0:	f7f2 f932 	bl	8000b08 <__aeabi_dcmpeq>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	f042 84b7 	bne.w	8011218 <m_kalman_3gyro.isra.0.constprop.0+0x3718>
 800e8aa:	eddd 7ab4 	vldr	s15, [sp, #720]	; 0x2d0
 800e8ae:	a9c1      	add	r1, sp, #772	; 0x304
 800e8b0:	eddd 5ace 	vldr	s11, [sp, #824]	; 0x338
 800e8b4:	a8b4      	add	r0, sp, #720	; 0x2d0
 800e8b6:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800e8ba:	ed9d 6ab5 	vldr	s12, [sp, #724]	; 0x2d4
 800e8be:	eddd 6acf 	vldr	s13, [sp, #828]	; 0x33c
 800e8c2:	ee65 5aaa 	vmul.f32	s11, s11, s21
 800e8c6:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 800e8ca:	ee26 6a2a 	vmul.f32	s12, s12, s21
 800e8ce:	edcd 7ab4 	vstr	s15, [sp, #720]	; 0x2d0
 800e8d2:	ee66 6aaa 	vmul.f32	s13, s13, s21
 800e8d6:	eddd 7ad0 	vldr	s15, [sp, #832]	; 0x340
 800e8da:	ee27 7a2a 	vmul.f32	s14, s14, s21
 800e8de:	edcd 5ace 	vstr	s11, [sp, #824]	; 0x338
 800e8e2:	eeb0 0a69 	vmov.f32	s0, s19
 800e8e6:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800e8ea:	eddd 5ab7 	vldr	s11, [sp, #732]	; 0x2dc
 800e8ee:	ed8d 6ab5 	vstr	s12, [sp, #724]	; 0x2d4
 800e8f2:	edcd 6acf 	vstr	s13, [sp, #828]	; 0x33c
 800e8f6:	ee65 5aaa 	vmul.f32	s11, s11, s21
 800e8fa:	ed9d 6ad1 	vldr	s12, [sp, #836]	; 0x344
 800e8fe:	eddd 6ab8 	vldr	s13, [sp, #736]	; 0x2e0
 800e902:	ed8d 7ab6 	vstr	s14, [sp, #728]	; 0x2d8
 800e906:	ee26 6a2a 	vmul.f32	s12, s12, s21
 800e90a:	ed9d 7ad2 	vldr	s14, [sp, #840]	; 0x348
 800e90e:	ee66 6aaa 	vmul.f32	s13, s13, s21
 800e912:	edcd 7ad0 	vstr	s15, [sp, #832]	; 0x340
 800e916:	eddd 7ab9 	vldr	s15, [sp, #740]	; 0x2e4
 800e91a:	ee27 7a2a 	vmul.f32	s14, s14, s21
 800e91e:	edcd 5ab7 	vstr	s11, [sp, #732]	; 0x2dc
 800e922:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800e926:	eddd 5ad3 	vldr	s11, [sp, #844]	; 0x34c
 800e92a:	ed8d 6ad1 	vstr	s12, [sp, #836]	; 0x344
 800e92e:	edcd 6ab8 	vstr	s13, [sp, #736]	; 0x2e0
 800e932:	ee65 5aaa 	vmul.f32	s11, s11, s21
 800e936:	ed9d 6aba 	vldr	s12, [sp, #744]	; 0x2e8
 800e93a:	eddd 6ad4 	vldr	s13, [sp, #848]	; 0x350
 800e93e:	ed8d 7ad2 	vstr	s14, [sp, #840]	; 0x348
 800e942:	ee26 6a2a 	vmul.f32	s12, s12, s21
 800e946:	ed9d 7abb 	vldr	s14, [sp, #748]	; 0x2ec
 800e94a:	ee66 6aaa 	vmul.f32	s13, s13, s21
 800e94e:	edcd 7ab9 	vstr	s15, [sp, #740]	; 0x2e4
 800e952:	eddd 7ad5 	vldr	s15, [sp, #852]	; 0x354
 800e956:	ee27 7a2a 	vmul.f32	s14, s14, s21
 800e95a:	edcd 5ad3 	vstr	s11, [sp, #844]	; 0x34c
 800e95e:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800e962:	ed8d 6aba 	vstr	s12, [sp, #744]	; 0x2e8
 800e966:	edcd 6ad4 	vstr	s13, [sp, #848]	; 0x350
 800e96a:	ed8d 7abb 	vstr	s14, [sp, #748]	; 0x2ec
 800e96e:	edcd 7ad5 	vstr	s15, [sp, #852]	; 0x354
 800e972:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 800e976:	eddd 7ad6 	vldr	s15, [sp, #856]	; 0x358
 800e97a:	ee27 7a2a 	vmul.f32	s14, s14, s21
 800e97e:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 800e982:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800e986:	eddd 6ad7 	vldr	s13, [sp, #860]	; 0x35c
 800e98a:	ee26 6a2a 	vmul.f32	s12, s12, s21
 800e98e:	ed8d 7abc 	vstr	s14, [sp, #752]	; 0x2f0
 800e992:	ee66 6aaa 	vmul.f32	s13, s13, s21
 800e996:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 800e99a:	edcd 7ad6 	vstr	s15, [sp, #856]	; 0x358
 800e99e:	eddd 7ad8 	vldr	s15, [sp, #864]	; 0x360
 800e9a2:	ee27 7a2a 	vmul.f32	s14, s14, s21
 800e9a6:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 800e9aa:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800e9ae:	ed9d 6abf 	vldr	s12, [sp, #764]	; 0x2fc
 800e9b2:	edcd 6ad7 	vstr	s13, [sp, #860]	; 0x35c
 800e9b6:	ed8d 7abe 	vstr	s14, [sp, #760]	; 0x2f8
 800e9ba:	ee26 6a2a 	vmul.f32	s12, s12, s21
 800e9be:	eddd 6ad9 	vldr	s13, [sp, #868]	; 0x364
 800e9c2:	ed9d 7ac0 	vldr	s14, [sp, #768]	; 0x300
 800e9c6:	edcd 7ad8 	vstr	s15, [sp, #864]	; 0x360
 800e9ca:	ee66 6aaa 	vmul.f32	s13, s13, s21
 800e9ce:	eddd 7ada 	vldr	s15, [sp, #872]	; 0x368
 800e9d2:	ee27 7a2a 	vmul.f32	s14, s14, s21
 800e9d6:	ed8d 6abf 	vstr	s12, [sp, #764]	; 0x2fc
 800e9da:	ee67 aaaa 	vmul.f32	s21, s15, s21
 800e9de:	edcd 6ad9 	vstr	s13, [sp, #868]	; 0x364
 800e9e2:	ed8d 7ac0 	vstr	s14, [sp, #768]	; 0x300
 800e9e6:	edcd aada 	vstr	s21, [sp, #872]	; 0x368
 800e9ea:	f7fd ff21 	bl	800c830 <m_interp1q_constrain>
 800e9ee:	eef0 5a40 	vmov.f32	s11, s0
 800e9f2:	a9db      	add	r1, sp, #876	; 0x36c
 800e9f4:	a8ce      	add	r0, sp, #824	; 0x338
 800e9f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e9f8:	eeb0 0a69 	vmov.f32	s0, s19
 800e9fc:	edc3 5a00 	vstr	s11, [r3]
 800ea00:	f7fd ff16 	bl	800c830 <m_interp1q_constrain>
 800ea04:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ea06:	ed83 0a00 	vstr	s0, [r3]
 800ea0a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ea0e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800ea12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea14:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 800ea18:	edc3 5a00 	vstr	s11, [r3]
 800ea1c:	eef0 7ae7 	vabs.f32	s15, s15
 800ea20:	ee17 0a90 	vmov	r0, s15
 800ea24:	f7f1 fdb0 	bl	8000588 <__aeabi_f2d>
 800ea28:	ec41 0b10 	vmov	d0, r0, r1
 800ea2c:	f00b fe58 	bl	801a6e0 <floor>
 800ea30:	ec51 0b10 	vmov	r0, r1, d0
 800ea34:	f7f2 f8b0 	bl	8000b98 <__aeabi_d2iz>
 800ea38:	f8dd 36cc 	ldr.w	r3, [sp, #1740]	; 0x6cc
 800ea3c:	7018      	strb	r0, [r3, #0]
 800ea3e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ea42:	edd3 aa2d 	vldr	s21, [r3, #180]	; 0xb4
 800ea46:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800ea4a:	ee7c aaea 	vsub.f32	s21, s25, s21
 800ea4e:	4b7f      	ldr	r3, [pc, #508]	; (800ec4c <m_kalman_3gyro.isra.0.constprop.0+0x114c>)
 800ea50:	ee7d 7a67 	vsub.f32	s15, s26, s15
 800ea54:	eef0 aaea 	vabs.f32	s21, s21
 800ea58:	eef0 7ae7 	vabs.f32	s15, s15
 800ea5c:	edc3 aa6b 	vstr	s21, [r3, #428]	; 0x1ac
 800ea60:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800ea64:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800ea66:	ee17 0a90 	vmov	r0, s15
 800ea6a:	edc3 7a00 	vstr	s15, [r3]
 800ea6e:	edcd 7a00 	vstr	s15, [sp]
 800ea72:	f7f1 fd89 	bl	8000588 <__aeabi_f2d>
 800ea76:	a372      	add	r3, pc, #456	; (adr r3, 800ec40 <m_kalman_3gyro.isra.0.constprop.0+0x1140>)
 800ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7c:	f7f2 f86c 	bl	8000b58 <__aeabi_dcmpgt>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	f000 8487 	beq.w	800f394 <m_kalman_3gyro.isra.0.constprop.0+0x1894>
 800ea86:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800ec50 <m_kalman_3gyro.isra.0.constprop.0+0x1150>
 800ea8a:	eddd 7a00 	vldr	s15, [sp]
 800ea8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea96:	f302 82e3 	bgt.w	8011060 <m_kalman_3gyro.isra.0.constprop.0+0x3560>
 800ea9a:	ed9f 6a6e 	vldr	s12, [pc, #440]	; 800ec54 <m_kalman_3gyro.isra.0.constprop.0+0x1154>
 800ea9e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800eaa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eaa6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800eaaa:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800eaae:	ee17 0a10 	vmov	r0, s14
 800eab2:	f7f1 fd69 	bl	8000588 <__aeabi_f2d>
 800eab6:	4606      	mov	r6, r0
 800eab8:	460f      	mov	r7, r1
 800eaba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eabe:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 800eac2:	eef0 7ae7 	vabs.f32	s15, s15
 800eac6:	ee17 0a90 	vmov	r0, s15
 800eaca:	f7f1 fd5d 	bl	8000588 <__aeabi_f2d>
 800eace:	2200      	movs	r2, #0
 800ead0:	4b61      	ldr	r3, [pc, #388]	; (800ec58 <m_kalman_3gyro.isra.0.constprop.0+0x1158>)
 800ead2:	f7f1 fbf9 	bl	80002c8 <__aeabi_dsub>
 800ead6:	4632      	mov	r2, r6
 800ead8:	463b      	mov	r3, r7
 800eada:	4604      	mov	r4, r0
 800eadc:	460d      	mov	r5, r1
 800eade:	f7f2 f831 	bl	8000b44 <__aeabi_dcmpge>
 800eae2:	b908      	cbnz	r0, 800eae8 <m_kalman_3gyro.isra.0.constprop.0+0xfe8>
 800eae4:	4634      	mov	r4, r6
 800eae6:	463d      	mov	r5, r7
 800eae8:	4620      	mov	r0, r4
 800eaea:	4629      	mov	r1, r5
 800eaec:	f7f2 f89c 	bl	8000c28 <__aeabi_d2f>
 800eaf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800eaf2:	6018      	str	r0, [r3, #0]
 800eaf4:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800eaf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	f000 82f3 	beq.w	800f0e8 <m_kalman_3gyro.isra.0.constprop.0+0x15e8>
 800eb02:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800eb06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f040 82ec 	bne.w	800f0e8 <m_kalman_3gyro.isra.0.constprop.0+0x15e8>
 800eb10:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eb14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800eb16:	ed93 7a00 	vldr	s14, [r3]
 800eb1a:	ee6f 7aa7 	vmul.f32	s15, s31, s15
 800eb1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb26:	f140 82df 	bpl.w	800f0e8 <m_kalman_3gyro.isra.0.constprop.0+0x15e8>
 800eb2a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800eb2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb30:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800eb34:	ed83 9a12 	vstr	s18, [r3, #72]	; 0x48
 800eb38:	edc3 8a15 	vstr	s17, [r3, #84]	; 0x54
 800eb3c:	ed83 8a18 	vstr	s16, [r3, #96]	; 0x60
 800eb40:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 800eb44:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 800eb48:	ed83 ba17 	vstr	s22, [r3, #92]	; 0x5c
 800eb4c:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 800eb50:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 800eb54:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 800eb58:	9006      	str	r0, [sp, #24]
 800eb5a:	f7fd fb63 	bl	800c224 <m_dcm2q_eml>
 800eb5e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800ec5c <m_kalman_3gyro.isra.0.constprop.0+0x115c>
 800eb62:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800eb66:	eeb4 aa67 	vcmp.f32	s20, s15
 800eb6a:	ed83 da2b 	vstr	s26, [r3, #172]	; 0xac
 800eb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb72:	f142 847d 	bpl.w	8011470 <m_kalman_3gyro.isra.0.constprop.0+0x3970>
 800eb76:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800ec60 <m_kalman_3gyro.isra.0.constprop.0+0x1160>
 800eb7a:	eeb4 aae7 	vcmpe.f32	s20, s15
 800eb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb82:	f342 8475 	ble.w	8011470 <m_kalman_3gyro.isra.0.constprop.0+0x3970>
 800eb86:	eef0 7a4a 	vmov.f32	s15, s20
 800eb8a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800eb8e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800eb92:	2100      	movs	r1, #0
 800eb94:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 800eb98:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800eb9c:	f007 f94a 	bl	8015e34 <memset>
 800eba0:	4b30      	ldr	r3, [pc, #192]	; (800ec64 <m_kalman_3gyro.isra.0.constprop.0+0x1164>)
 800eba2:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 800eba6:	2100      	movs	r1, #0
 800eba8:	2201      	movs	r2, #1
 800ebaa:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800ebae:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 800ebb2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800ebb6:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800ebba:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
 800ebbe:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 800ebc2:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
 800ebc6:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
 800ebca:	f8c0 31f8 	str.w	r3, [r0, #504]	; 0x1f8
 800ebce:	f8dd 36d4 	ldr.w	r3, [sp, #1748]	; 0x6d4
 800ebd2:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 800ebd6:	701a      	strb	r2, [r3, #0]
 800ebd8:	e28a      	b.n	800f0f0 <m_kalman_3gyro.isra.0.constprop.0+0x15f0>
 800ebda:	454d      	cmp	r5, r9
 800ebdc:	eba9 0205 	sub.w	r2, r9, r5
 800ebe0:	eb0b 010c 	add.w	r1, fp, ip
 800ebe4:	f6bf ad03 	bge.w	800e5ee <m_kalman_3gyro.isra.0.constprop.0+0xaee>
 800ebe8:	444c      	add	r4, r9
 800ebea:	f007 f915 	bl	8015e18 <memcpy>
 800ebee:	1b64      	subs	r4, r4, r5
 800ebf0:	464d      	mov	r5, r9
 800ebf2:	e4fc      	b.n	800e5ee <m_kalman_3gyro.isra.0.constprop.0+0xaee>
 800ebf4:	eef4 7a69 	vcmp.f32	s15, s19
 800ebf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebfc:	f43f ad56 	beq.w	800e6ac <m_kalman_3gyro.isra.0.constprop.0+0xbac>
 800ec00:	eef4 7a6d 	vcmp.f32	s15, s27
 800ec04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec08:	eeb4 7a69 	vcmp.f32	s14, s19
 800ec0c:	bf0c      	ite	eq
 800ec0e:	2301      	moveq	r3, #1
 800ec10:	2300      	movne	r3, #0
 800ec12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec16:	bf08      	it	eq
 800ec18:	2301      	moveq	r3, #1
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f47f ad46 	bne.w	800e6ac <m_kalman_3gyro.isra.0.constprop.0+0xbac>
 800ec20:	eeb4 7a6d 	vcmp.f32	s14, s27
 800ec24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec28:	f43f ad40 	beq.w	800e6ac <m_kalman_3gyro.isra.0.constprop.0+0xbac>
 800ec2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec30:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ec34:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ec38:	e53e      	b.n	800e6b8 <m_kalman_3gyro.isra.0.constprop.0+0xbb8>
 800ec3a:	bf00      	nop
 800ec3c:	f3af 8000 	nop.w
 800ec40:	9999999a 	.word	0x9999999a
 800ec44:	3fb99999 	.word	0x3fb99999
 800ec48:	3ff00000 	.word	0x3ff00000
 800ec4c:	20001448 	.word	0x20001448
 800ec50:	3fb77778 	.word	0x3fb77778
 800ec54:	3dcccccd 	.word	0x3dcccccd
 800ec58:	3fe00000 	.word	0x3fe00000
 800ec5c:	3f99999a 	.word	0x3f99999a
 800ec60:	3f4ccccd 	.word	0x3f4ccccd
 800ec64:	40a00000 	.word	0x40a00000
 800ec68:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ec6c:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800ec70:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ec74:	2301      	movs	r3, #1
 800ec76:	f602 07b8 	addw	r7, r2, #2232	; 0x8b8
 800ec7a:	f602 08bc 	addw	r8, r2, #2236	; 0x8bc
 800ec7e:	f502 690c 	add.w	r9, r2, #2240	; 0x8c0
 800ec82:	f882 38ce 	strb.w	r3, [r2, #2254]	; 0x8ce
 800ec86:	f602 03c8 	addw	r3, r2, #2248	; 0x8c8
 800ec8a:	edc7 9a00 	vstr	s19, [r7]
 800ec8e:	f602 06c4 	addw	r6, r2, #2244	; 0x8c4
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800ec98:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800ec9c:	edc8 9a00 	vstr	s19, [r8]
 800eca0:	edc9 9a00 	vstr	s19, [r9]
 800eca4:	f7f1 fb12 	bl	80002cc <__adddf3>
 800eca8:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800ecac:	edc6 9a00 	vstr	s19, [r6]
 800ecb0:	e9d2 2308 	ldrd	r2, r3, [r2, #32]
 800ecb4:	f7f1 fb0a 	bl	80002cc <__adddf3>
 800ecb8:	9b00      	ldr	r3, [sp, #0]
 800ecba:	edc3 9a00 	vstr	s19, [r3]
 800ecbe:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ecc2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800ecc6:	f7f1 fb01 	bl	80002cc <__adddf3>
 800ecca:	4622      	mov	r2, r4
 800eccc:	462b      	mov	r3, r5
 800ecce:	f7f1 fafd 	bl	80002cc <__adddf3>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	491f      	ldr	r1, [pc, #124]	; (800ed58 <m_kalman_3gyro.isra.0.constprop.0+0x1258>)
 800ecda:	f7f1 fdd7 	bl	800088c <__aeabi_ddiv>
 800ecde:	460d      	mov	r5, r1
 800ece0:	460b      	mov	r3, r1
 800ece2:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800ece6:	4604      	mov	r4, r0
 800ece8:	4602      	mov	r2, r0
 800ecea:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800ecee:	f7f1 fca3 	bl	8000638 <__aeabi_dmul>
 800ecf2:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ecf6:	4622      	mov	r2, r4
 800ecf8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ecfc:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800ed00:	462b      	mov	r3, r5
 800ed02:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800ed06:	f7f1 fc97 	bl	8000638 <__aeabi_dmul>
 800ed0a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ed0e:	4622      	mov	r2, r4
 800ed10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ed14:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800ed18:	462b      	mov	r3, r5
 800ed1a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800ed1e:	f7f1 fc8b 	bl	8000638 <__aeabi_dmul>
 800ed22:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ed26:	4622      	mov	r2, r4
 800ed28:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800ed2c:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800ed30:	462b      	mov	r3, r5
 800ed32:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800ed36:	f7f1 fc7f 	bl	8000638 <__aeabi_dmul>
 800ed3a:	4622      	mov	r2, r4
 800ed3c:	f8dd 46d8 	ldr.w	r4, [sp, #1752]	; 0x6d8
 800ed40:	462b      	mov	r3, r5
 800ed42:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800ed46:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 800ed4a:	f7f1 fc75 	bl	8000638 <__aeabi_dmul>
 800ed4e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ed52:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 800ed56:	e52e      	b.n	800e7b6 <m_kalman_3gyro.isra.0.constprop.0+0xcb6>
 800ed58:	3ff00000 	.word	0x3ff00000
 800ed5c:	f50d 67d6 	add.w	r7, sp, #1712	; 0x6b0
 800ed60:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ed64:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ed68:	2101      	movs	r1, #1
 800ed6a:	2500      	movs	r5, #0
 800ed6c:	ae45      	add	r6, sp, #276	; 0x114
 800ed6e:	8618      	strh	r0, [r3, #48]	; 0x30
 800ed70:	4618      	mov	r0, r3
 800ed72:	645c      	str	r4, [r3, #68]	; 0x44
 800ed74:	2230      	movs	r2, #48	; 0x30
 800ed76:	f883 18cd 	strb.w	r1, [r3, #2253]	; 0x8cd
 800ed7a:	3064      	adds	r0, #100	; 0x64
 800ed7c:	4621      	mov	r1, r4
 800ed7e:	65dc      	str	r4, [r3, #92]	; 0x5c
 800ed80:	edc3 aa18 	vstr	s21, [r3, #96]	; 0x60
 800ed84:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800ed88:	edc3 aa14 	vstr	s21, [r3, #80]	; 0x50
 800ed8c:	f04f 0a00 	mov.w	sl, #0
 800ed90:	edc3 aa10 	vstr	s21, [r3, #64]	; 0x40
 800ed94:	f04f 0832 	mov.w	r8, #50	; 0x32
 800ed98:	9545      	str	r5, [sp, #276]	; 0x114
 800ed9a:	f04f 0900 	mov.w	r9, #0
 800ed9e:	9546      	str	r5, [sp, #280]	; 0x118
 800eda0:	9547      	str	r5, [sp, #284]	; 0x11c
 800eda2:	9548      	str	r5, [sp, #288]	; 0x120
 800eda4:	9609      	str	r6, [sp, #36]	; 0x24
 800eda6:	f04f 3601 	mov.w	r6, #16843009	; 0x1010101
 800edaa:	ed97 7b00 	vldr	d7, [r7]
 800edae:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800edb2:	e9c3 4415 	strd	r4, r4, [r3, #84]	; 0x54
 800edb6:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 800edba:	f007 f83b 	bl	8015e34 <memset>
 800edbe:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800edc2:	4bc4      	ldr	r3, [pc, #784]	; (800f0d4 <m_kalman_3gyro.isra.0.constprop.0+0x15d4>)
 800edc4:	4621      	mov	r1, r4
 800edc6:	f8c2 5094 	str.w	r5, [r2, #148]	; 0x94
 800edca:	2700      	movs	r7, #0
 800edcc:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 800edd0:	4613      	mov	r3, r2
 800edd2:	f8c2 5098 	str.w	r5, [r2, #152]	; 0x98
 800edd6:	f8c2 509c 	str.w	r5, [r2, #156]	; 0x9c
 800edda:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 800edde:	edc2 aa2c 	vstr	s21, [r2, #176]	; 0xb0
 800ede2:	edc2 aa2d 	vstr	s21, [r2, #180]	; 0xb4
 800ede6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800edea:	f007 f823 	bl	8015e34 <memset>
 800edee:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800edf2:	4bb9      	ldr	r3, [pc, #740]	; (800f0d8 <m_kalman_3gyro.isra.0.constprop.0+0x15d8>)
 800edf4:	4639      	mov	r1, r7
 800edf6:	f8c2 61fc 	str.w	r6, [r2, #508]	; 0x1fc
 800edfa:	f502 7506 	add.w	r5, r2, #536	; 0x218
 800edfe:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 800ee02:	f502 7e0f 	add.w	lr, r2, #572	; 0x23c
 800ee06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee0a:	f502 7417 	add.w	r4, r2, #604	; 0x25c
 800ee0e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 800ee12:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 800ee16:	4620      	mov	r0, r4
 800ee18:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 800ee1c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 800ee20:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800ee24:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 800ee28:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	f8c2 6200 	str.w	r6, [r2, #512]	; 0x200
 800ee32:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ee36:	f8c3 6204 	str.w	r6, [r3, #516]	; 0x204
 800ee3a:	f203 4604 	addw	r6, r3, #1028	; 0x404
 800ee3e:	f8c3 7218 	str.w	r7, [r3, #536]	; 0x218
 800ee42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ee46:	606f      	str	r7, [r5, #4]
 800ee48:	9301      	str	r3, [sp, #4]
 800ee4a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ee4e:	60af      	str	r7, [r5, #8]
 800ee50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ee54:	612f      	str	r7, [r5, #16]
 800ee56:	616f      	str	r7, [r5, #20]
 800ee58:	9302      	str	r3, [sp, #8]
 800ee5a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ee5e:	61af      	str	r7, [r5, #24]
 800ee60:	f503 6c82 	add.w	ip, r3, #1040	; 0x410
 800ee64:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800ee68:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ee6c:	f205 451c 	addw	r5, r5, #1052	; 0x41c
 800ee70:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 800ee74:	f203 4c14 	addw	ip, r3, #1044	; 0x414
 800ee78:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800ee7c:	9537      	str	r5, [sp, #220]	; 0xdc
 800ee7e:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800ee82:	f503 6c83 	add.w	ip, r3, #1048	; 0x418
 800ee86:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800ee8a:	9627      	str	r6, [sp, #156]	; 0x9c
 800ee8c:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
 800ee90:	f8c5 723c 	str.w	r7, [r5, #572]	; 0x23c
 800ee94:	f205 4524 	addw	r5, r5, #1060	; 0x424
 800ee98:	9538      	str	r5, [sp, #224]	; 0xe0
 800ee9a:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800ee9e:	f8c5 b234 	str.w	fp, [r5, #564]	; 0x234
 800eea2:	f505 6585 	add.w	r5, r5, #1064	; 0x428
 800eea6:	9539      	str	r5, [sp, #228]	; 0xe4
 800eea8:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800eeac:	f8c5 b224 	str.w	fp, [r5, #548]	; 0x224
 800eeb0:	f205 452c 	addw	r5, r5, #1068	; 0x42c
 800eeb4:	953a      	str	r5, [sp, #232]	; 0xe8
 800eeb6:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800eeba:	f8c5 b214 	str.w	fp, [r5, #532]	; 0x214
 800eebe:	f505 6586 	add.w	r5, r5, #1072	; 0x430
 800eec2:	f8ce 7004 	str.w	r7, [lr, #4]
 800eec6:	951d      	str	r5, [sp, #116]	; 0x74
 800eec8:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800eecc:	f8ce 7008 	str.w	r7, [lr, #8]
 800eed0:	f205 4534 	addw	r5, r5, #1076	; 0x434
 800eed4:	f8ce 7010 	str.w	r7, [lr, #16]
 800eed8:	f8ce 7014 	str.w	r7, [lr, #20]
 800eedc:	9528      	str	r5, [sp, #160]	; 0xa0
 800eede:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800eee2:	f8ce 7018 	str.w	r7, [lr, #24]
 800eee6:	f505 6c87 	add.w	ip, r5, #1080	; 0x438
 800eeea:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800eeee:	f8cd c0ec 	str.w	ip, [sp, #236]	; 0xec
 800eef2:	f205 4c3c 	addw	ip, r5, #1084	; 0x43c
 800eef6:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800eefa:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 800eefe:	f505 6c88 	add.w	ip, r5, #1088	; 0x440
 800ef02:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800ef06:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 800ef0a:	f205 4c44 	addw	ip, r5, #1092	; 0x444
 800ef0e:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800ef12:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800ef16:	f8c5 b258 	str.w	fp, [r5, #600]	; 0x258
 800ef1a:	f505 6c89 	add.w	ip, r5, #1096	; 0x448
 800ef1e:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800ef22:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800ef26:	f8c5 b248 	str.w	fp, [r5, #584]	; 0x248
 800ef2a:	f205 4c4c 	addw	ip, r5, #1100	; 0x44c
 800ef2e:	f8dd 56d8 	ldr.w	r5, [sp, #1752]	; 0x6d8
 800ef32:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
 800ef36:	f505 6c8c 	add.w	ip, r5, #1120	; 0x460
 800ef3a:	f8c5 b238 	str.w	fp, [r5, #568]	; 0x238
 800ef3e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800ef42:	f006 ff77 	bl	8015e34 <memset>
 800ef46:	4639      	mov	r1, r7
 800ef48:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800ef4c:	f8dd 76d8 	ldr.w	r7, [sp, #1752]	; 0x6d8
 800ef50:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 800ef54:	f8c2 a3c4 	str.w	sl, [r2, #964]	; 0x3c4
 800ef58:	2230      	movs	r2, #48	; 0x30
 800ef5a:	f8c0 a3c8 	str.w	sl, [r0, #968]	; 0x3c8
 800ef5e:	f500 7075 	add.w	r0, r0, #980	; 0x3d4
 800ef62:	f8c7 a3cc 	str.w	sl, [r7, #972]	; 0x3cc
 800ef66:	f8c7 a3d0 	str.w	sl, [r7, #976]	; 0x3d0
 800ef6a:	af75      	add	r7, sp, #468	; 0x1d4
 800ef6c:	f006 ff62 	bl	8015e34 <memset>
 800ef70:	9901      	ldr	r1, [sp, #4]
 800ef72:	f8c6 a000 	str.w	sl, [r6]
 800ef76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ef7a:	f8c1 a000 	str.w	sl, [r1]
 800ef7e:	9902      	ldr	r1, [sp, #8]
 800ef80:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 800ef84:	f8c1 a000 	str.w	sl, [r1]
 800ef88:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800ef8a:	f500 6384 	add.w	r3, r0, #1056	; 0x420
 800ef8e:	9d37      	ldr	r5, [sp, #220]	; 0xdc
 800ef90:	f8c1 a000 	str.w	sl, [r1]
 800ef94:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800ef96:	f8c1 a000 	str.w	sl, [r1]
 800ef9a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800ef9c:	f8c1 a000 	str.w	sl, [r1]
 800efa0:	f8c5 a000 	str.w	sl, [r5]
 800efa4:	601a      	str	r2, [r3, #0]
 800efa6:	f50d 62d6 	add.w	r2, sp, #1712	; 0x6b0
 800efaa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800efac:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800efae:	f8c3 a000 	str.w	sl, [r3]
 800efb2:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800efb4:	f8c3 a000 	str.w	sl, [r3]
 800efb8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800efba:	f8c3 a000 	str.w	sl, [r3]
 800efbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800efc0:	f8c3 a000 	str.w	sl, [r3]
 800efc4:	f8c5 a000 	str.w	sl, [r5]
 800efc8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800efca:	f8c5 a000 	str.w	sl, [r5]
 800efce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800efd0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800efd4:	f8c5 b000 	str.w	fp, [r5]
 800efd8:	ad72      	add	r5, sp, #456	; 0x1c8
 800efda:	f7f1 fe25 	bl	8000c28 <__aeabi_d2f>
 800efde:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800f0dc <m_kalman_3gyro.isra.0.constprop.0+0x15dc>
 800efe2:	ee0a 0a90 	vmov	s21, r0
 800efe6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800efe8:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800efec:	2000      	movs	r0, #0
 800efee:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800eff2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eff4:	f502 668a 	add.w	r6, r2, #1104	; 0x450
 800eff8:	f502 628b 	add.w	r2, r2, #1112	; 0x458
 800effc:	f50d 7cf0 	add.w	ip, sp, #480	; 0x1e0
 800f000:	edc1 7a00 	vstr	s15, [r1]
 800f004:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f006:	f8c1 a000 	str.w	sl, [r1]
 800f00a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800f00c:	f8c1 b000 	str.w	fp, [r1]
 800f010:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f012:	f8c1 a000 	str.w	sl, [r1]
 800f016:	2100      	movs	r1, #0
 800f018:	e9c6 0100 	strd	r0, r1, [r6]
 800f01c:	e9c2 8900 	strd	r8, r9, [r2]
 800f020:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f022:	ca07      	ldmia	r2, {r0, r1, r2}
 800f024:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f028:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f02a:	f8d5 b000 	ldr.w	fp, [r5]
 800f02e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800f032:	f8d5 9008 	ldr.w	r9, [r5, #8]
 800f036:	ca07      	ldmia	r2, {r0, r1, r2}
 800f038:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f03c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f03e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800f042:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800f046:	696f      	ldr	r7, [r5, #20]
 800f048:	ca07      	ldmia	r2, {r0, r1, r2}
 800f04a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800f04e:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f052:	69a8      	ldr	r0, [r5, #24]
 800f054:	f602 0698 	addw	r6, r2, #2200	; 0x898
 800f058:	69e9      	ldr	r1, [r5, #28]
 800f05a:	6a2a      	ldr	r2, [r5, #32]
 800f05c:	f8c3 b000 	str.w	fp, [r3]
 800f060:	3324      	adds	r3, #36	; 0x24
 800f062:	f843 ac20 	str.w	sl, [r3, #-32]
 800f066:	f843 9c1c 	str.w	r9, [r3, #-28]
 800f06a:	f843 8c18 	str.w	r8, [r3, #-24]
 800f06e:	f843 ec14 	str.w	lr, [r3, #-20]
 800f072:	f843 7c10 	str.w	r7, [r3, #-16]
 800f076:	f843 0c0c 	str.w	r0, [r3, #-12]
 800f07a:	f843 1c08 	str.w	r1, [r3, #-8]
 800f07e:	f843 2c04 	str.w	r2, [r3, #-4]
 800f082:	42b3      	cmp	r3, r6
 800f084:	d1ea      	bne.n	800f05c <m_kalman_3gyro.isra.0.constprop.0+0x155c>
 800f086:	f8dd 26b8 	ldr.w	r2, [sp, #1720]	; 0x6b8
 800f08a:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800f08e:	6812      	ldr	r2, [r2, #0]
 800f090:	f601 019c 	addw	r1, r1, #2204	; 0x89c
 800f094:	601a      	str	r2, [r3, #0]
 800f096:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800f09a:	f503 620a 	add.w	r2, r3, #2208	; 0x8a0
 800f09e:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 800f0a2:	6858      	ldr	r0, [r3, #4]
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	6008      	str	r0, [r1, #0]
 800f0a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f0ac:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 800f0b0:	6880      	ldr	r0, [r0, #8]
 800f0b2:	6010      	str	r0, [r2, #0]
 800f0b4:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f0b8:	f882 38a4 	strb.w	r3, [r2, #2212]	; 0x8a4
 800f0bc:	f8c2 38a6 	str.w	r3, [r2, #2214]	; 0x8a6
 800f0c0:	f882 38ad 	strb.w	r3, [r2, #2221]	; 0x8ad
 800f0c4:	f882 38ae 	strb.w	r3, [r2, #2222]	; 0x8ae
 800f0c8:	f8c2 38b0 	str.w	r3, [r2, #2224]	; 0x8b0
 800f0cc:	f8a2 18aa 	strh.w	r1, [r2, #2218]	; 0x8aa
 800f0d0:	f7fe be93 	b.w	800ddfa <m_kalman_3gyro.isra.0.constprop.0+0x2fa>
 800f0d4:	3f666666 	.word	0x3f666666
 800f0d8:	40a00000 	.word	0x40a00000
 800f0dc:	3ca3d70a 	.word	0x3ca3d70a
 800f0e0:	3f99999a 	.word	0x3f99999a
 800f0e4:	3f4ccccd 	.word	0x3f4ccccd
 800f0e8:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800f0ec:	3340      	adds	r3, #64	; 0x40
 800f0ee:	9306      	str	r3, [sp, #24]
 800f0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0f2:	2400      	movs	r4, #0
 800f0f4:	edd3 7a00 	vldr	s15, [r3]
 800f0f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f100:	d10f      	bne.n	800f122 <m_kalman_3gyro.isra.0.constprop.0+0x1622>
 800f102:	edd3 7a01 	vldr	s15, [r3, #4]
 800f106:	4619      	mov	r1, r3
 800f108:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f110:	d107      	bne.n	800f122 <m_kalman_3gyro.isra.0.constprop.0+0x1622>
 800f112:	edd3 7a02 	vldr	s15, [r3, #8]
 800f116:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11e:	f002 80e1 	beq.w	80112e4 <m_kalman_3gyro.isra.0.constprop.0+0x37e4>
 800f122:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 800f126:	2200      	movs	r2, #0
 800f128:	2300      	movs	r3, #0
 800f12a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f12e:	f7f1 fceb 	bl	8000b08 <__aeabi_dcmpeq>
 800f132:	2800      	cmp	r0, #0
 800f134:	d142      	bne.n	800f1bc <m_kalman_3gyro.isra.0.constprop.0+0x16bc>
 800f136:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800f138:	ee7f faaf 	vadd.f32	s31, s31, s31
 800f13c:	edd3 7a00 	vldr	s15, [r3]
 800f140:	eef4 7aef 	vcmpe.f32	s15, s31
 800f144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f148:	d538      	bpl.n	800f1bc <m_kalman_3gyro.isra.0.constprop.0+0x16bc>
 800f14a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800f14e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f150:	ed83 9a12 	vstr	s18, [r3, #72]	; 0x48
 800f154:	edc3 8a15 	vstr	s17, [r3, #84]	; 0x54
 800f158:	ed83 8a18 	vstr	s16, [r3, #96]	; 0x60
 800f15c:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 800f160:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 800f164:	ed83 ba17 	vstr	s22, [r3, #92]	; 0x5c
 800f168:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 800f16c:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 800f170:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 800f174:	9806      	ldr	r0, [sp, #24]
 800f176:	f7fd f855 	bl	800c224 <m_dcm2q_eml>
 800f17a:	2201      	movs	r2, #1
 800f17c:	f8dd 16d4 	ldr.w	r1, [sp, #1748]	; 0x6d4
 800f180:	2300      	movs	r3, #0
 800f182:	700a      	strb	r2, [r1, #0]
 800f184:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f188:	ed82 da2b 	vstr	s26, [r2, #172]	; 0xac
 800f18c:	edc2 ca2d 	vstr	s25, [r2, #180]	; 0xb4
 800f190:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 800f194:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 800f198:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800f19c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800f1a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f1a4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800f1a8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 800f1ac:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 800f1b0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 800f1b4:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800f1b8:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 800f1bc:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	9906      	ldr	r1, [sp, #24]
 800f1c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800f1c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800f1cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800f1d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1d2:	f7fc fbf9 	bl	800b9c8 <m_q2dcm_eml>
 800f1d6:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800f1da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f1de:	ed93 8a2b 	vldr	s16, [r3, #172]	; 0xac
 800f1e2:	eee8 7a48 	vfms.f32	s15, s16, s16
 800f1e6:	ee17 0a90 	vmov	r0, s15
 800f1ea:	f7f1 f9cd 	bl	8000588 <__aeabi_f2d>
 800f1ee:	ec41 0b10 	vmov	d0, r0, r1
 800f1f2:	f00b fc2b 	bl	801aa4c <sqrt>
 800f1f6:	ec51 0b10 	vmov	r0, r1, d0
 800f1fa:	f7f1 fd15 	bl	8000c28 <__aeabi_d2f>
 800f1fe:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800f202:	ee07 0a90 	vmov	s15, r0
 800f206:	ed9d ba59 	vldr	s22, [sp, #356]	; 0x164
 800f20a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f20e:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 800f212:	ee28 5a07 	vmul.f32	s10, s16, s14
 800f216:	edd3 4a10 	vldr	s9, [r3, #64]	; 0x40
 800f21a:	ee68 5a06 	vmul.f32	s11, s16, s12
 800f21e:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800f222:	ee3b 6a46 	vsub.f32	s12, s22, s12
 800f226:	ed9d 4a55 	vldr	s8, [sp, #340]	; 0x154
 800f22a:	eea7 5aa4 	vfma.f32	s10, s15, s9
 800f22e:	edd3 4a13 	vldr	s9, [r3, #76]	; 0x4c
 800f232:	ee28 8a26 	vmul.f32	s16, s16, s13
 800f236:	eddd ba5a 	vldr	s23, [sp, #360]	; 0x168
 800f23a:	eee7 5aa4 	vfma.f32	s11, s15, s9
 800f23e:	edd3 4a16 	vldr	s9, [r3, #88]	; 0x58
 800f242:	ed83 6a1d 	vstr	s12, [r3, #116]	; 0x74
 800f246:	ee7b 6ae6 	vsub.f32	s13, s23, s13
 800f24a:	eea7 8aa4 	vfma.f32	s16, s15, s9
 800f24e:	eddd 7a57 	vldr	s15, [sp, #348]	; 0x15c
 800f252:	ed1f 6a5d 	vldr	s12, [pc, #-372]	; 800f0e0 <m_kalman_3gyro.isra.0.constprop.0+0x15e0>
 800f256:	eddd 4a56 	vldr	s9, [sp, #344]	; 0x158
 800f25a:	ee34 4a45 	vsub.f32	s8, s8, s10
 800f25e:	ed9d 9a58 	vldr	s18, [sp, #352]	; 0x160
 800f262:	ed83 5a82 	vstr	s10, [r3, #520]	; 0x208
 800f266:	ee34 5ae5 	vsub.f32	s10, s9, s11
 800f26a:	ee39 7a47 	vsub.f32	s14, s18, s14
 800f26e:	ed83 da22 	vstr	s26, [r3, #136]	; 0x88
 800f272:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f276:	ed83 aa23 	vstr	s20, [r3, #140]	; 0x8c
 800f27a:	edc3 ca24 	vstr	s25, [r3, #144]	; 0x90
 800f27e:	edc3 5a83 	vstr	s11, [r3, #524]	; 0x20c
 800f282:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 800f286:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800f28a:	ed83 4a19 	vstr	s8, [r3, #100]	; 0x64
 800f28e:	eef4 7a46 	vcmp.f32	s15, s12
 800f292:	ed83 5a1a 	vstr	s10, [r3, #104]	; 0x68
 800f296:	ed83 8a84 	vstr	s16, [r3, #528]	; 0x210
 800f29a:	edc3 6a1e 	vstr	s13, [r3, #120]	; 0x78
 800f29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2a2:	ed83 7a1c 	vstr	s14, [r3, #112]	; 0x70
 800f2a6:	d506      	bpl.n	800f2b6 <m_kalman_3gyro.isra.0.constprop.0+0x17b6>
 800f2a8:	ed1f 7a72 	vldr	s14, [pc, #-456]	; 800f0e4 <m_kalman_3gyro.isra.0.constprop.0+0x15e4>
 800f2ac:	eef4 7a47 	vcmp.f32	s15, s14
 800f2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2b4:	dc01      	bgt.n	800f2ba <m_kalman_3gyro.isra.0.constprop.0+0x17ba>
 800f2b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f2ba:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800f2be:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 800f2c2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800f2c4:	a9a0      	add	r1, sp, #640	; 0x280
 800f2c6:	a896      	add	r0, sp, #600	; 0x258
 800f2c8:	eef0 7ae7 	vabs.f32	s15, s15
 800f2cc:	ee77 5a27 	vadd.f32	s11, s14, s15
 800f2d0:	edc3 7a00 	vstr	s15, [r3]
 800f2d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800f2d6:	eeb0 0a65 	vmov.f32	s0, s11
 800f2da:	edc3 5a00 	vstr	s11, [r3]
 800f2de:	f7fd fa5b 	bl	800c798 <m_b_interp1q_constrain>
 800f2e2:	a9aa      	add	r1, sp, #680	; 0x2a8
 800f2e4:	eeb0 8a40 	vmov.f32	s16, s0
 800f2e8:	a896      	add	r0, sp, #600	; 0x258
 800f2ea:	eeb0 0a65 	vmov.f32	s0, s11
 800f2ee:	f7fd fa53 	bl	800c798 <m_b_interp1q_constrain>
 800f2f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f2f4:	eef0 8a40 	vmov.f32	s17, s0
 800f2f8:	edd3 7a00 	vldr	s15, [r3]
 800f2fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f304:	dd60      	ble.n	800f3c8 <m_kalman_3gyro.isra.0.constprop.0+0x18c8>
 800f306:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800f30a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f312:	f141 86a9 	bpl.w	8011068 <m_kalman_3gyro.isra.0.constprop.0+0x3568>
 800f316:	2107      	movs	r1, #7
 800f318:	2402      	movs	r4, #2
 800f31a:	2301      	movs	r3, #1
 800f31c:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 800f320:	4618      	mov	r0, r3
 800f322:	e00a      	b.n	800f33a <m_kalman_3gyro.isra.0.constprop.0+0x183a>
 800f324:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800f328:	ed92 7a00 	vldr	s14, [r2]
 800f32c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f334:	f282 8038 	bge.w	80113a8 <m_kalman_3gyro.isra.0.constprop.0+0x38a8>
 800f338:	4619      	mov	r1, r3
 800f33a:	180b      	adds	r3, r1, r0
 800f33c:	f50d 66c5 	add.w	r6, sp, #1576	; 0x628
 800f340:	42a1      	cmp	r1, r4
 800f342:	eb05 0253 	add.w	r2, r5, r3, lsr #1
 800f346:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800f34a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800f34e:	d8e9      	bhi.n	800f324 <m_kalman_3gyro.isra.0.constprop.0+0x1824>
 800f350:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f354:	aa5b      	add	r2, sp, #364	; 0x16c
 800f356:	a962      	add	r1, sp, #392	; 0x188
 800f358:	4403      	add	r3, r0
 800f35a:	0098      	lsls	r0, r3, #2
 800f35c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f360:	3004      	adds	r0, #4
 800f362:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800f366:	ab5b      	add	r3, sp, #364	; 0x16c
 800f368:	ed92 7a00 	vldr	s14, [r2]
 800f36c:	ed91 ca00 	vldr	s24, [r1]
 800f370:	181a      	adds	r2, r3, r0
 800f372:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f376:	ab62      	add	r3, sp, #392	; 0x188
 800f378:	edd2 6a00 	vldr	s13, [r2]
 800f37c:	4403      	add	r3, r0
 800f37e:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800f382:	ed93 7a00 	vldr	s14, [r3]
 800f386:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800f38a:	ee37 7a4c 	vsub.f32	s14, s14, s24
 800f38e:	eea6 ca07 	vfma.f32	s24, s12, s14
 800f392:	e01b      	b.n	800f3cc <m_kalman_3gyro.isra.0.constprop.0+0x18cc>
 800f394:	2600      	movs	r6, #0
 800f396:	4f07      	ldr	r7, [pc, #28]	; (800f3b4 <m_kalman_3gyro.isra.0.constprop.0+0x18b4>)
 800f398:	f7ff bb8f 	b.w	800eaba <m_kalman_3gyro.isra.0.constprop.0+0xfba>
 800f39c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f3a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f3a2:	edc3 7a00 	vstr	s15, [r3]
 800f3a6:	eef0 5a67 	vmov.f32	s11, s15
 800f3aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f3ac:	edc3 7a00 	vstr	s15, [r3]
 800f3b0:	f7ff bb2b 	b.w	800ea0a <m_kalman_3gyro.isra.0.constprop.0+0xf0a>
 800f3b4:	3ff00000 	.word	0x3ff00000
 800f3b8:	00000000 	.word	0x00000000
 800f3bc:	3d088889 	.word	0x3d088889
 800f3c0:	42480000 	.word	0x42480000
 800f3c4:	3c23d70a 	.word	0x3c23d70a
 800f3c8:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800f3cc:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 800f3b8 <m_kalman_3gyro.isra.0.constprop.0+0x18b8>
 800f3d0:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f3d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3d6:	eeb0 7a67 	vmov.f32	s14, s15
 800f3da:	eef0 6a67 	vmov.f32	s13, s15
 800f3de:	edc2 7af5 	vstr	s15, [r2, #980]	; 0x3d4
 800f3e2:	eeb0 6a67 	vmov.f32	s12, s15
 800f3e6:	edc2 7af6 	vstr	s15, [r2, #984]	; 0x3d8
 800f3ea:	edc2 7af7 	vstr	s15, [r2, #988]	; 0x3dc
 800f3ee:	461c      	mov	r4, r3
 800f3f0:	f503 6587 	add.w	r5, r3, #1080	; 0x438
 800f3f4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800f3f6:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800f3fa:	edd3 7a06 	vldr	s15, [r3, #24]
 800f3fe:	3324      	adds	r3, #36	; 0x24
 800f400:	edd2 5a00 	vldr	s11, [r2]
 800f404:	320c      	adds	r2, #12
 800f406:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f40a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800f40e:	ed81 6af5 	vstr	s12, [r1, #980]	; 0x3d4
 800f412:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f416:	ed52 5a02 	vldr	s11, [r2, #-8]
 800f41a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f41e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f422:	edc1 6af6 	vstr	s13, [r1, #984]	; 0x3d8
 800f426:	ed53 7a01 	vldr	s15, [r3, #-4]
 800f42a:	42ab      	cmp	r3, r5
 800f42c:	ed52 5a01 	vldr	s11, [r2, #-4]
 800f430:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f434:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f438:	ed81 7af7 	vstr	s14, [r1, #988]	; 0x3dc
 800f43c:	d1dd      	bne.n	800f3fa <m_kalman_3gyro.isra.0.constprop.0+0x18fa>
 800f43e:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 800f3bc <m_kalman_3gyro.isra.0.constprop.0+0x18bc>
 800f442:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800f446:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f44a:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f44e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f452:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800f456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f45a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f45c:	ed82 6af5 	vstr	s12, [r2, #980]	; 0x3d4
 800f460:	edc2 6af6 	vstr	s13, [r2, #984]	; 0x3d8
 800f464:	ed82 7af7 	vstr	s14, [r2, #988]	; 0x3dc
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	3b24      	subs	r3, #36	; 0x24
 800f46c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800f46e:	649a      	str	r2, [r3, #72]	; 0x48
 800f470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f472:	64d9      	str	r1, [r3, #76]	; 0x4c
 800f474:	651a      	str	r2, [r3, #80]	; 0x50
 800f476:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f47a:	6559      	str	r1, [r3, #84]	; 0x54
 800f47c:	659a      	str	r2, [r3, #88]	; 0x58
 800f47e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800f480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f482:	65d9      	str	r1, [r3, #92]	; 0x5c
 800f484:	661a      	str	r2, [r3, #96]	; 0x60
 800f486:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800f488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f48a:	6659      	str	r1, [r3, #100]	; 0x64
 800f48c:	669a      	str	r2, [r3, #104]	; 0x68
 800f48e:	4298      	cmp	r0, r3
 800f490:	d1ea      	bne.n	800f468 <m_kalman_3gyro.isra.0.constprop.0+0x1968>
 800f492:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f494:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f496:	6813      	ldr	r3, [r2, #0]
 800f498:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800f49a:	600b      	str	r3, [r1, #0]
 800f49c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f49e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f4a0:	680b      	ldr	r3, [r1, #0]
 800f4a2:	6003      	str	r3, [r0, #0]
 800f4a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f4a6:	6803      	ldr	r3, [r0, #0]
 800f4a8:	6033      	str	r3, [r6, #0]
 800f4aa:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800f4ac:	6853      	ldr	r3, [r2, #4]
 800f4ae:	6033      	str	r3, [r6, #0]
 800f4b0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800f4b2:	684b      	ldr	r3, [r1, #4]
 800f4b4:	6033      	str	r3, [r6, #0]
 800f4b6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800f4b8:	6843      	ldr	r3, [r0, #4]
 800f4ba:	6033      	str	r3, [r6, #0]
 800f4bc:	6893      	ldr	r3, [r2, #8]
 800f4be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f4c0:	6013      	str	r3, [r2, #0]
 800f4c2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800f4c4:	688b      	ldr	r3, [r1, #8]
 800f4c6:	6013      	str	r3, [r2, #0]
 800f4c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f4ca:	6883      	ldr	r3, [r0, #8]
 800f4cc:	6013      	str	r3, [r2, #0]
 800f4ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4d0:	2b02      	cmp	r3, #2
 800f4d2:	f001 82c9 	beq.w	8010a68 <m_kalman_3gyro.isra.0.constprop.0+0x2f68>
 800f4d6:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800f4da:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 800f4de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4e2:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800f4e6:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 800f4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4f2:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 800f4f6:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 800f4fa:	bfcc      	ite	gt
 800f4fc:	2301      	movgt	r3, #1
 800f4fe:	2300      	movle	r3, #0
 800f500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f504:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f508:	f003 0301 	and.w	r3, r3, #1
 800f50c:	bfd8      	it	le
 800f50e:	2300      	movle	r3, #0
 800f510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f514:	f003 0301 	and.w	r3, r3, #1
 800f518:	bfd8      	it	le
 800f51a:	2300      	movle	r3, #0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f041 80bf 	bne.w	80106a0 <m_kalman_3gyro.isra.0.constprop.0+0x2ba0>
 800f522:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f524:	2a00      	cmp	r2, #0
 800f526:	f041 8236 	bne.w	8010996 <m_kalman_3gyro.isra.0.constprop.0+0x2e96>
 800f52a:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f52e:	2300      	movs	r3, #0
 800f530:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 800f534:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800f538:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800f53c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 800f540:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800f544:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
 800f548:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800f54c:	f8a0 3202 	strh.w	r3, [r0, #514]	; 0x202
 800f550:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 800f554:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 800f558:	67c1      	str	r1, [r0, #124]	; 0x7c
 800f55a:	2a00      	cmp	r2, #0
 800f55c:	f001 8570 	beq.w	8011040 <m_kalman_3gyro.isra.0.constprop.0+0x3540>
 800f560:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 800f564:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800f568:	ed5f 7a6b 	vldr	s15, [pc, #-428]	; 800f3c0 <m_kalman_3gyro.isra.0.constprop.0+0x18c0>
 800f56c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f574:	f2c1 8233 	blt.w	80109de <m_kalman_3gyro.isra.0.constprop.0+0x2ede>
 800f578:	2300      	movs	r3, #0
 800f57a:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f57e:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800f582:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 800f586:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
 800f58a:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 800f58e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f592:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f594:	ed93 7a08 	vldr	s14, [r3, #32]
 800f598:	ed93 6a06 	vldr	s12, [r3, #24]
 800f59c:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f5a0:	edd3 6a07 	vldr	s13, [r3, #28]
 800f5a4:	ee26 6a28 	vmul.f32	s12, s12, s17
 800f5a8:	f8dd 1690 	ldr.w	r1, [sp, #1680]	; 0x690
 800f5ac:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800f5b0:	ee67 8a28 	vmul.f32	s17, s14, s17
 800f5b4:	ed83 6a06 	vstr	s12, [r3, #24]
 800f5b8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800f5bc:	edc3 6a07 	vstr	s13, [r3, #28]
 800f5c0:	edc3 8a08 	vstr	s17, [r3, #32]
 800f5c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5c6:	ee86 5a27 	vdiv.f32	s10, s12, s15
 800f5ca:	edd2 6a00 	vldr	s13, [r2]
 800f5ce:	ed93 7a00 	vldr	s14, [r3]
 800f5d2:	ed91 6a00 	vldr	s12, [r1]
 800f5d6:	edd1 7a01 	vldr	s15, [r1, #4]
 800f5da:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f5de:	edd1 6a02 	vldr	s13, [r1, #8]
 800f5e2:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f5e6:	ed91 7a03 	vldr	s14, [r1, #12]
 800f5ea:	ed81 6a00 	vstr	s12, [r1]
 800f5ee:	4611      	mov	r1, r2
 800f5f0:	ed93 6a00 	vldr	s12, [r3]
 800f5f4:	edd2 5a00 	vldr	s11, [r2]
 800f5f8:	f8dd 2690 	ldr.w	r2, [sp, #1680]	; 0x690
 800f5fc:	ee65 5a86 	vmul.f32	s11, s11, s12
 800f600:	ed92 6a04 	vldr	s12, [r2, #16]
 800f604:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f608:	edc2 7a01 	vstr	s15, [r2, #4]
 800f60c:	edd3 7a00 	vldr	s15, [r3]
 800f610:	edd1 5a00 	vldr	s11, [r1]
 800f614:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f616:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f61a:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800f61e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f622:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800f626:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f62a:	edc2 6a02 	vstr	s13, [r2, #8]
 800f62e:	edd3 6a00 	vldr	s13, [r3]
 800f632:	f8dd 2690 	ldr.w	r2, [sp, #1680]	; 0x690
 800f636:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f63a:	edd2 6a05 	vldr	s13, [r2, #20]
 800f63e:	ed82 7a03 	vstr	s14, [r2, #12]
 800f642:	ed93 7a00 	vldr	s14, [r3]
 800f646:	f8dd 2690 	ldr.w	r2, [sp, #1680]	; 0x690
 800f64a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f64e:	ed1f 7aa3 	vldr	s14, [pc, #-652]	; 800f3c4 <m_kalman_3gyro.isra.0.constprop.0+0x18c4>
 800f652:	fe85 7a07 	vmaxnm.f32	s14, s10, s14
 800f656:	ed82 6a04 	vstr	s12, [r2, #16]
 800f65a:	ed93 6a00 	vldr	s12, [r3]
 800f65e:	edc2 7a09 	vstr	s15, [r2, #36]	; 0x24
 800f662:	ee66 7a86 	vmul.f32	s15, s13, s12
 800f666:	f8dd 3694 	ldr.w	r3, [sp, #1684]	; 0x694
 800f66a:	edc2 7a05 	vstr	s15, [r2, #20]
 800f66e:	edd3 7a06 	vldr	s15, [r3, #24]
 800f672:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f676:	edc3 7a06 	vstr	s15, [r3, #24]
 800f67a:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800f67e:	f8dd 3694 	ldr.w	r3, [sp, #1684]	; 0x694
 800f682:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f686:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f68a:	edc2 7a0a 	vstr	s15, [r2, #40]	; 0x28
 800f68e:	edd3 7a07 	vldr	s15, [r3, #28]
 800f692:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f696:	edc3 7a07 	vstr	s15, [r3, #28]
 800f69a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f69c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800f6a0:	edd3 6a00 	vldr	s13, [r3]
 800f6a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f6a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f6aa:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 800f6ae:	b3cb      	cbz	r3, 800f724 <m_kalman_3gyro.isra.0.constprop.0+0x1c24>
 800f6b0:	edd2 7a03 	vldr	s15, [r2, #12]
 800f6b4:	f8dd 3694 	ldr.w	r3, [sp, #1684]	; 0x694
 800f6b8:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f6bc:	edc2 7a03 	vstr	s15, [r2, #12]
 800f6c0:	edd3 7a00 	vldr	s15, [r3]
 800f6c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6c8:	edc3 7a00 	vstr	s15, [r3]
 800f6cc:	edd2 7a04 	vldr	s15, [r2, #16]
 800f6d0:	f8dd 3694 	ldr.w	r3, [sp, #1684]	; 0x694
 800f6d4:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f6d8:	edc2 7a04 	vstr	s15, [r2, #16]
 800f6dc:	edd3 7a01 	vldr	s15, [r3, #4]
 800f6e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6e4:	edc3 7a01 	vstr	s15, [r3, #4]
 800f6e8:	edd2 7a05 	vldr	s15, [r2, #20]
 800f6ec:	f8dd 3694 	ldr.w	r3, [sp, #1684]	; 0x694
 800f6f0:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f6f4:	edc2 7a05 	vstr	s15, [r2, #20]
 800f6f8:	edd3 7a02 	vldr	s15, [r3, #8]
 800f6fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f700:	edc3 7a02 	vstr	s15, [r3, #8]
 800f704:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800f708:	f8dd 3694 	ldr.w	r3, [sp, #1684]	; 0x694
 800f70c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f710:	ee27 8a88 	vmul.f32	s16, s15, s16
 800f714:	ed82 8a0a 	vstr	s16, [r2, #40]	; 0x28
 800f718:	edd3 7a07 	vldr	s15, [r3, #28]
 800f71c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f720:	ed83 7a07 	vstr	s14, [r3, #28]
 800f724:	f8dd 3694 	ldr.w	r3, [sp, #1684]	; 0x694
 800f728:	eef1 4a4b 	vneg.f32	s9, s22
 800f72c:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f730:	eeb1 5a6b 	vneg.f32	s10, s23
 800f734:	edd3 7a00 	vldr	s15, [r3]
 800f738:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800f73c:	ed9d 6a34 	vldr	s12, [sp, #208]	; 0xd0
 800f740:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 800f744:	eef1 6a46 	vneg.f32	s13, s12
 800f748:	ed88 6a01 	vstr	s12, [r8, #4]
 800f74c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f750:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800f754:	eddd 5a33 	vldr	s11, [sp, #204]	; 0xcc
 800f758:	2300      	movs	r3, #0
 800f75a:	edc8 6a03 	vstr	s13, [r8, #12]
 800f75e:	ed9d 3a32 	vldr	s6, [sp, #200]	; 0xc8
 800f762:	eeb1 4a65 	vneg.f32	s8, s11
 800f766:	edc8 5a06 	vstr	s11, [r8, #24]
 800f76a:	eef1 5a49 	vneg.f32	s11, s18
 800f76e:	f8c8 3000 	str.w	r3, [r8]
 800f772:	eef1 3a43 	vneg.f32	s7, s6
 800f776:	ed82 7a2e 	vstr	s14, [r2, #184]	; 0xb8
 800f77a:	f8dd 2694 	ldr.w	r2, [sp, #1684]	; 0x694
 800f77e:	f8c8 3010 	str.w	r3, [r8, #16]
 800f782:	ed92 7a01 	vldr	s14, [r2, #4]
 800f786:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f78a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f78e:	edd2 6a42 	vldr	s13, [r2, #264]	; 0x108
 800f792:	ed92 7a4c 	vldr	s14, [r2, #304]	; 0x130
 800f796:	edc2 7a38 	vstr	s15, [r2, #224]	; 0xe0
 800f79a:	f8dd 2694 	ldr.w	r2, [sp, #1684]	; 0x694
 800f79e:	edd2 7a02 	vldr	s15, [r2, #8]
 800f7a2:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f7a6:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800f7aa:	ed92 6a60 	vldr	s12, [r2, #384]	; 0x180
 800f7ae:	edd2 7a56 	vldr	s15, [r2, #344]	; 0x158
 800f7b2:	edc2 6a42 	vstr	s13, [r2, #264]	; 0x108
 800f7b6:	f8dd 2694 	ldr.w	r2, [sp, #1684]	; 0x694
 800f7ba:	edd2 6a03 	vldr	s13, [r2, #12]
 800f7be:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f7c2:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800f7c6:	edd2 6a6a 	vldr	s13, [r2, #424]	; 0x1a8
 800f7ca:	ed82 7a4c 	vstr	s14, [r2, #304]	; 0x130
 800f7ce:	f8dd 2694 	ldr.w	r2, [sp, #1684]	; 0x694
 800f7d2:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 800f7d6:	ed92 7a04 	vldr	s14, [r2, #16]
 800f7da:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f7de:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f7e2:	f8c8 3020 	str.w	r3, [r8, #32]
 800f7e6:	ed92 7a74 	vldr	s14, [r2, #464]	; 0x1d0
 800f7ea:	edc8 3a07 	vstr	s7, [r8, #28]
 800f7ee:	ed88 4a02 	vstr	s8, [r8, #8]
 800f7f2:	edc2 7a56 	vstr	s15, [r2, #344]	; 0x158
 800f7f6:	f8dd 2694 	ldr.w	r2, [sp, #1684]	; 0x694
 800f7fa:	edd2 7a05 	vldr	s15, [r2, #20]
 800f7fe:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f802:	eea7 6aa7 	vfma.f32	s12, s15, s15
 800f806:	edd2 7a7e 	vldr	s15, [r2, #504]	; 0x1f8
 800f80a:	ed82 6a60 	vstr	s12, [r2, #384]	; 0x180
 800f80e:	f8dd 2694 	ldr.w	r2, [sp, #1684]	; 0x694
 800f812:	ed92 6a06 	vldr	s12, [r2, #24]
 800f816:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f81a:	eee6 6a06 	vfma.f32	s13, s12, s12
 800f81e:	edc2 6a6a 	vstr	s13, [r2, #424]	; 0x1a8
 800f822:	f8dd 2694 	ldr.w	r2, [sp, #1684]	; 0x694
 800f826:	edd2 6a07 	vldr	s13, [r2, #28]
 800f82a:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f82e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800f832:	ed82 7a74 	vstr	s14, [r2, #464]	; 0x1d0
 800f836:	f8dd 2694 	ldr.w	r2, [sp, #1684]	; 0x694
 800f83a:	ed92 7a08 	vldr	s14, [r2, #32]
 800f83e:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f842:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f846:	edc2 7a7e 	vstr	s15, [r2, #504]	; 0x1f8
 800f84a:	f8dd 26a0 	ldr.w	r2, [sp, #1696]	; 0x6a0
 800f84e:	7812      	ldrb	r2, [r2, #0]
 800f850:	f881 21fc 	strb.w	r2, [r1, #508]	; 0x1fc
 800f854:	f8dd 26a0 	ldr.w	r2, [sp, #1696]	; 0x6a0
 800f858:	7812      	ldrb	r2, [r2, #0]
 800f85a:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 800f85e:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 800f862:	f8dd 26a0 	ldr.w	r2, [sp, #1696]	; 0x6a0
 800f866:	938d      	str	r3, [sp, #564]	; 0x234
 800f868:	7852      	ldrb	r2, [r2, #1]
 800f86a:	9391      	str	r3, [sp, #580]	; 0x244
 800f86c:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 800f870:	f881 2200 	strb.w	r2, [r1, #512]	; 0x200
 800f874:	f8dd 26a0 	ldr.w	r2, [sp, #1696]	; 0x6a0
 800f878:	9395      	str	r3, [sp, #596]	; 0x254
 800f87a:	7852      	ldrb	r2, [r2, #1]
 800f87c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f87e:	ed88 3a05 	vstr	s6, [r8, #20]
 800f882:	ed8d ba93 	vstr	s22, [sp, #588]	; 0x24c
 800f886:	edcd 4a8f 	vstr	s9, [sp, #572]	; 0x23c
 800f88a:	edcd ba8e 	vstr	s23, [sp, #568]	; 0x238
 800f88e:	ed8d 5a90 	vstr	s10, [sp, #576]	; 0x240
 800f892:	ed8d 9a92 	vstr	s18, [sp, #584]	; 0x248
 800f896:	edcd 5a94 	vstr	s11, [sp, #592]	; 0x250
 800f89a:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
 800f89e:	b113      	cbz	r3, 800f8a6 <m_kalman_3gyro.isra.0.constprop.0+0x1da6>
 800f8a0:	2a00      	cmp	r2, #0
 800f8a2:	f041 83e5 	bne.w	8011070 <m_kalman_3gyro.isra.0.constprop.0+0x3570>
 800f8a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f8a8:	edd3 7a00 	vldr	s15, [r3]
 800f8ac:	eef4 7a69 	vcmp.f32	s15, s19
 800f8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b4:	db0a      	blt.n	800f8cc <m_kalman_3gyro.isra.0.constprop.0+0x1dcc>
 800f8b6:	f50d 63d6 	add.w	r3, sp, #1712	; 0x6b0
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	f7f1 f949 	bl	8000b58 <__aeabi_dcmpgt>
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	f041 83be 	bne.w	8011048 <m_kalman_3gyro.isra.0.constprop.0+0x3548>
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f8d2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800f8d6:	edd2 7a24 	vldr	s15, [r2, #144]	; 0x90
 800f8da:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800f8de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f8e2:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800f8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ea:	dc06      	bgt.n	800f8fa <m_kalman_3gyro.isra.0.constprop.0+0x1dfa>
 800f8ec:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 800fc48 <m_kalman_3gyro.isra.0.constprop.0+0x2148>
 800f8f0:	eef4 7a47 	vcmp.f32	s15, s14
 800f8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f8:	d50a      	bpl.n	800f910 <m_kalman_3gyro.isra.0.constprop.0+0x1e10>
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f900:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800f904:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800f908:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800f90c:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800f910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f918:	eef0 7ae7 	vabs.f32	s15, s15
 800f91c:	ee17 0a90 	vmov	r0, s15
 800f920:	f7f0 fe32 	bl	8000588 <__aeabi_f2d>
 800f924:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 800f928:	4604      	mov	r4, r0
 800f92a:	460d      	mov	r5, r1
 800f92c:	6818      	ldr	r0, [r3, #0]
 800f92e:	f7f0 fe2b 	bl	8000588 <__aeabi_f2d>
 800f932:	4606      	mov	r6, r0
 800f934:	460f      	mov	r7, r1
 800f936:	4620      	mov	r0, r4
 800f938:	4629      	mov	r1, r5
 800f93a:	4632      	mov	r2, r6
 800f93c:	463b      	mov	r3, r7
 800f93e:	f7f1 f901 	bl	8000b44 <__aeabi_dcmpge>
 800f942:	b908      	cbnz	r0, 800f948 <m_kalman_3gyro.isra.0.constprop.0+0x1e48>
 800f944:	4634      	mov	r4, r6
 800f946:	463d      	mov	r5, r7
 800f948:	4620      	mov	r0, r4
 800f94a:	4629      	mov	r1, r5
 800f94c:	f7f1 f96c 	bl	8000c28 <__aeabi_d2f>
 800f950:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 800f954:	ed9f 7abd 	vldr	s14, [pc, #756]	; 800fc4c <m_kalman_3gyro.isra.0.constprop.0+0x214c>
 800f958:	6018      	str	r0, [r3, #0]
 800f95a:	6058      	str	r0, [r3, #4]
 800f95c:	6098      	str	r0, [r3, #8]
 800f95e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800f962:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800f966:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f96e:	d407      	bmi.n	800f980 <m_kalman_3gyro.isra.0.constprop.0+0x1e80>
 800f970:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800fc50 <m_kalman_3gyro.isra.0.constprop.0+0x2150>
 800f974:	eef4 7a47 	vcmp.f32	s15, s14
 800f978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97c:	f341 83a2 	ble.w	80110c4 <m_kalman_3gyro.isra.0.constprop.0+0x35c4>
 800f980:	2300      	movs	r3, #0
 800f982:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f986:	f882 31ff 	strb.w	r3, [r2, #511]	; 0x1ff
 800f98a:	f8a2 3200 	strh.w	r3, [r2, #512]	; 0x200
 800f98e:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800f992:	f882 3206 	strb.w	r3, [r2, #518]	; 0x206
 800f996:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f99a:	eef4 aae7 	vcmpe.f32	s21, s15
 800f99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a2:	f340 8606 	ble.w	80105b2 <m_kalman_3gyro.isra.0.constprop.0+0x2ab2>
 800f9a6:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f9b0:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800f9b4:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800f9b8:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800f9bc:	f8dd 2690 	ldr.w	r2, [sp, #1680]	; 0x690
 800f9c0:	ee7a 6aa7 	vadd.f32	s13, s21, s15
 800f9c4:	eef4 aac6 	vcmpe.f32	s21, s12
 800f9c8:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 800f9cc:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800f9d0:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f9d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f9e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f9e4:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 800f9e8:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 800f9ec:	dd05      	ble.n	800f9fa <m_kalman_3gyro.isra.0.constprop.0+0x1efa>
 800f9ee:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800f9f2:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800f9f6:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800f9fa:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800f9fe:	f893 38ae 	ldrb.w	r3, [r3, #2222]	; 0x8ae
 800fa02:	2b0e      	cmp	r3, #14
 800fa04:	d804      	bhi.n	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 800fa06:	3305      	adds	r3, #5
 800fa08:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 800fa0c:	f882 38ae 	strb.w	r3, [r2, #2222]	; 0x8ae
 800fa10:	ab7b      	add	r3, sp, #492	; 0x1ec
 800fa12:	4647      	mov	r7, r8
 800fa14:	f50d 790d 	add.w	r9, sp, #564	; 0x234
 800fa18:	eddf ca8e 	vldr	s25, [pc, #568]	; 800fc54 <m_kalman_3gyro.isra.0.constprop.0+0x2154>
 800fa1c:	4698      	mov	r8, r3
 800fa1e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fa22:	9d05      	ldr	r5, [sp, #20]
 800fa24:	3364      	adds	r3, #100	; 0x64
 800fa26:	f8dd 66d8 	ldr.w	r6, [sp, #1752]	; 0x6d8
 800fa2a:	9300      	str	r3, [sp, #0]
 800fa2c:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fa30:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800fa34:	9301      	str	r3, [sp, #4]
 800fa36:	e01f      	b.n	800fa78 <m_kalman_3gyro.isra.0.constprop.0+0x1f78>
 800fa38:	ed19 da03 	vldr	s26, [r9, #-12]
 800fa3c:	edd9 da00 	vldr	s27, [r9]
 800fa40:	ed99 ea03 	vldr	s28, [r9, #12]
 800fa44:	9b01      	ldr	r3, [sp, #4]
 800fa46:	ee3d da0d 	vadd.f32	s26, s26, s26
 800fa4a:	ee7d daad 	vadd.f32	s27, s27, s27
 800fa4e:	ee3e ea0e 	vadd.f32	s28, s28, s28
 800fa52:	5d5b      	ldrb	r3, [r3, r5]
 800fa54:	ed8d da7b 	vstr	s26, [sp, #492]	; 0x1ec
 800fa58:	edcd da7c 	vstr	s27, [sp, #496]	; 0x1f0
 800fa5c:	ed8d ea7d 	vstr	s28, [sp, #500]	; 0x1f4
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f040 80f9 	bne.w	800fc58 <m_kalman_3gyro.isra.0.constprop.0+0x2158>
 800fa66:	9b00      	ldr	r3, [sp, #0]
 800fa68:	3501      	adds	r5, #1
 800fa6a:	f108 0804 	add.w	r8, r8, #4
 800fa6e:	f109 0904 	add.w	r9, r9, #4
 800fa72:	3304      	adds	r3, #4
 800fa74:	3704      	adds	r7, #4
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	2d02      	cmp	r5, #2
 800fa7a:	edcd ca7b 	vstr	s25, [sp, #492]	; 0x1ec
 800fa7e:	edcd ca7c 	vstr	s25, [sp, #496]	; 0x1f0
 800fa82:	edcd ca7d 	vstr	s25, [sp, #500]	; 0x1f4
 800fa86:	edcd ca7e 	vstr	s25, [sp, #504]	; 0x1f8
 800fa8a:	edcd ca7f 	vstr	s25, [sp, #508]	; 0x1fc
 800fa8e:	edcd ca80 	vstr	s25, [sp, #512]	; 0x200
 800fa92:	edcd ca81 	vstr	s25, [sp, #516]	; 0x204
 800fa96:	edcd ca82 	vstr	s25, [sp, #520]	; 0x208
 800fa9a:	edcd ca83 	vstr	s25, [sp, #524]	; 0x20c
 800fa9e:	f240 80cb 	bls.w	800fc38 <m_kalman_3gyro.isra.0.constprop.0+0x2138>
 800faa2:	2d05      	cmp	r5, #5
 800faa4:	ddc8      	ble.n	800fa38 <m_kalman_3gyro.isra.0.constprop.0+0x1f38>
 800faa6:	9b01      	ldr	r3, [sp, #4]
 800faa8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800faac:	5d5b      	ldrb	r3, [r3, r5]
 800faae:	f848 2c0c 	str.w	r2, [r8, #-12]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f040 8534 	bne.w	8010520 <m_kalman_3gyro.isra.0.constprop.0+0x2a20>
 800fab8:	2d0b      	cmp	r5, #11
 800faba:	d1d4      	bne.n	800fa66 <m_kalman_3gyro.isra.0.constprop.0+0x1f66>
 800fabc:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fac0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fac4:	edd3 8a26 	vldr	s17, [r3, #152]	; 0x98
 800fac8:	ed93 9a25 	vldr	s18, [r3, #148]	; 0x94
 800facc:	ee68 9aa8 	vmul.f32	s19, s17, s17
 800fad0:	ed93 8a27 	vldr	s16, [r3, #156]	; 0x9c
 800fad4:	eee9 9a09 	vfma.f32	s19, s18, s18
 800fad8:	eee8 9a08 	vfma.f32	s19, s16, s16
 800fadc:	eef4 9ae7 	vcmpe.f32	s19, s15
 800fae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae4:	f100 87a9 	bmi.w	8010a3a <m_kalman_3gyro.isra.0.constprop.0+0x2f3a>
 800fae8:	ed9f aa5a 	vldr	s20, [pc, #360]	; 800fc54 <m_kalman_3gyro.isra.0.constprop.0+0x2154>
 800faec:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800faf0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	f000 8574 	beq.w	80105e0 <m_kalman_3gyro.isra.0.constprop.0+0x2ae0>
 800faf8:	2300      	movs	r3, #0
 800fafa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fafc:	f8dd 06c0 	ldr.w	r0, [sp, #1728]	; 0x6c0
 800fb00:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fb04:	600b      	str	r3, [r1, #0]
 800fb06:	60ca      	str	r2, [r1, #12]
 800fb08:	60c2      	str	r2, [r0, #12]
 800fb0a:	6003      	str	r3, [r0, #0]
 800fb0c:	604b      	str	r3, [r1, #4]
 800fb0e:	6043      	str	r3, [r0, #4]
 800fb10:	608b      	str	r3, [r1, #8]
 800fb12:	6083      	str	r3, [r0, #8]
 800fb14:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fb16:	9906      	ldr	r1, [sp, #24]
 800fb18:	4638      	mov	r0, r7
 800fb1a:	f7fb ff55 	bl	800b9c8 <m_q2dcm_eml>
 800fb1e:	ed97 9a01 	vldr	s18, [r7, #4]
 800fb22:	edd7 9a00 	vldr	s19, [r7]
 800fb26:	ee69 7a09 	vmul.f32	s15, s18, s18
 800fb2a:	edd7 8a02 	vldr	s17, [r7, #8]
 800fb2e:	ed97 8a03 	vldr	s16, [r7, #12]
 800fb32:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800fb36:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800fb3a:	eee8 7a08 	vfma.f32	s15, s16, s16
 800fb3e:	ee17 0a90 	vmov	r0, s15
 800fb42:	f7f0 fd21 	bl	8000588 <__aeabi_f2d>
 800fb46:	ec41 0b10 	vmov	d0, r0, r1
 800fb4a:	f00a ff7f 	bl	801aa4c <sqrt>
 800fb4e:	ec51 0b10 	vmov	r0, r1, d0
 800fb52:	f7f1 f869 	bl	8000c28 <__aeabi_d2f>
 800fb56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fb5a:	ee07 0a90 	vmov	s15, r0
 800fb5e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fb62:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800fb64:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800fb68:	f503 7616 	add.w	r6, r3, #600	; 0x258
 800fb6c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800fb6e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800fb72:	ee29 9a27 	vmul.f32	s18, s18, s15
 800fb76:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800fb7a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fb7e:	edc7 9a00 	vstr	s19, [r7]
 800fb82:	ed87 9a01 	vstr	s18, [r7, #4]
 800fb86:	edc7 8a02 	vstr	s17, [r7, #8]
 800fb8a:	ed87 8a03 	vstr	s16, [r7, #12]
 800fb8e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800fb92:	f8dd 76bc 	ldr.w	r7, [sp, #1724]	; 0x6bc
 800fb96:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800fb9a:	6820      	ldr	r0, [r4, #0]
 800fb9c:	3410      	adds	r4, #16
 800fb9e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 800fba2:	3510      	adds	r5, #16
 800fba4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800fba8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fbac:	42b4      	cmp	r4, r6
 800fbae:	f845 0c10 	str.w	r0, [r5, #-16]
 800fbb2:	f845 1c0c 	str.w	r1, [r5, #-12]
 800fbb6:	f845 2c08 	str.w	r2, [r5, #-8]
 800fbba:	f845 3c04 	str.w	r3, [r5, #-4]
 800fbbe:	d1ec      	bne.n	800fb9a <m_kalman_3gyro.isra.0.constprop.0+0x209a>
 800fbc0:	6823      	ldr	r3, [r4, #0]
 800fbc2:	602b      	str	r3, [r5, #0]
 800fbc4:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fbc8:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 800fbcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbd0:	6013      	str	r3, [r2, #0]
 800fbd2:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fbd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fbda:	6053      	str	r3, [r2, #4]
 800fbdc:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fbe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fbe4:	6093      	str	r3, [r2, #8]
 800fbe6:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fbea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fbee:	60d3      	str	r3, [r2, #12]
 800fbf0:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fbf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fbf8:	6113      	str	r3, [r2, #16]
 800fbfa:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fbfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fc02:	6153      	str	r3, [r2, #20]
 800fc04:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fc08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fc0c:	6193      	str	r3, [r2, #24]
 800fc0e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fc12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fc16:	61d3      	str	r3, [r2, #28]
 800fc18:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 800fc1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fc20:	6213      	str	r3, [r2, #32]
 800fc22:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f8dd 26c4 	ldr.w	r2, [sp, #1732]	; 0x6c4
 800fc2a:	6013      	str	r3, [r2, #0]
 800fc2c:	f20d 6d2c 	addw	sp, sp, #1580	; 0x62c
 800fc30:	ecbd 8b10 	vpop	{d8-d15}
 800fc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc38:	ed97 da00 	vldr	s26, [r7]
 800fc3c:	edd7 da03 	vldr	s27, [r7, #12]
 800fc40:	ed97 ea06 	vldr	s28, [r7, #24]
 800fc44:	e6fe      	b.n	800fa44 <m_kalman_3gyro.isra.0.constprop.0+0x1f44>
 800fc46:	bf00      	nop
 800fc48:	3e4ccccd 	.word	0x3e4ccccd
 800fc4c:	3f59999a 	.word	0x3f59999a
 800fc50:	3f8f5c29 	.word	0x3f8f5c29
 800fc54:	00000000 	.word	0x00000000
 800fc58:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fc5c:	ed5f ea03 	vldr	s29, [pc, #-12]	; 800fc54 <m_kalman_3gyro.isra.0.constprop.0+0x2154>
 800fc60:	2300      	movs	r3, #0
 800fc62:	eef0 5a6c 	vmov.f32	s11, s25
 800fc66:	eeb0 6a6e 	vmov.f32	s12, s29
 800fc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6e:	9308      	str	r3, [sp, #32]
 800fc70:	eef4 da6e 	vcmp.f32	s27, s29
 800fc74:	9303      	str	r3, [sp, #12]
 800fc76:	eef0 6a6e 	vmov.f32	s13, s29
 800fc7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc7c:	bf14      	ite	ne
 800fc7e:	2201      	movne	r2, #1
 800fc80:	461a      	moveq	r2, r3
 800fc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc86:	eeb4 ea6e 	vcmp.f32	s28, s29
 800fc8a:	9211      	str	r2, [sp, #68]	; 0x44
 800fc8c:	eef0 fa6e 	vmov.f32	s31, s29
 800fc90:	bf14      	ite	ne
 800fc92:	2201      	movne	r2, #1
 800fc94:	461a      	moveq	r2, r3
 800fc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9a:	eeb0 fa6e 	vmov.f32	s30, s29
 800fc9e:	9207      	str	r2, [sp, #28]
 800fca0:	bf14      	ite	ne
 800fca2:	2201      	movne	r2, #1
 800fca4:	461a      	moveq	r2, r3
 800fca6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800fcaa:	920a      	str	r2, [sp, #40]	; 0x28
 800fcac:	f106 02b8 	add.w	r2, r6, #184	; 0xb8
 800fcb0:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
 800fcb4:	a972      	add	r1, sp, #456	; 0x1c8
 800fcb6:	edcd ca72 	vstr	s25, [sp, #456]	; 0x1c8
 800fcba:	9204      	str	r2, [sp, #16]
 800fcbc:	edcd ca73 	vstr	s25, [sp, #460]	; 0x1cc
 800fcc0:	edcd ca74 	vstr	s25, [sp, #464]	; 0x1d0
 800fcc4:	edcd ca75 	vstr	s25, [sp, #468]	; 0x1d4
 800fcc8:	edcd ca76 	vstr	s25, [sp, #472]	; 0x1d8
 800fccc:	edcd ca77 	vstr	s25, [sp, #476]	; 0x1dc
 800fcd0:	edcd ca78 	vstr	s25, [sp, #480]	; 0x1e0
 800fcd4:	edcd ca79 	vstr	s25, [sp, #484]	; 0x1e4
 800fcd8:	edcd ca7a 	vstr	s25, [sp, #488]	; 0x1e8
 800fcdc:	ecb2 7a01 	vldmia	r2!, {s14}
 800fce0:	ecf1 7a01 	vldmia	r1!, {s15}
 800fce4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcec:	d006      	beq.n	800fcfc <m_kalman_3gyro.isra.0.constprop.0+0x21fc>
 800fcee:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf6:	bf18      	it	ne
 800fcf8:	eeed 7a07 	vfmane.f32	s15, s26, s14
 800fcfc:	ed92 7a08 	vldr	s14, [r2, #32]
 800fd00:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd08:	d006      	beq.n	800fd18 <m_kalman_3gyro.isra.0.constprop.0+0x2218>
 800fd0a:	eef5 da40 	vcmp.f32	s27, #0.0
 800fd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd12:	bf18      	it	ne
 800fd14:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800fd18:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 800fd1c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd24:	d006      	beq.n	800fd34 <m_kalman_3gyro.isra.0.constprop.0+0x2234>
 800fd26:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800fd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd2e:	bf18      	it	ne
 800fd30:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800fd34:	ed92 7a1a 	vldr	s14, [r2, #104]	; 0x68
 800fd38:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd40:	d006      	beq.n	800fd50 <m_kalman_3gyro.isra.0.constprop.0+0x2250>
 800fd42:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800fd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd4a:	bf18      	it	ne
 800fd4c:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800fd50:	ed92 7a23 	vldr	s14, [r2, #140]	; 0x8c
 800fd54:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd5c:	d006      	beq.n	800fd6c <m_kalman_3gyro.isra.0.constprop.0+0x226c>
 800fd5e:	eef5 fa40 	vcmp.f32	s31, #0.0
 800fd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd66:	bf18      	it	ne
 800fd68:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800fd6c:	ed92 7a2c 	vldr	s14, [r2, #176]	; 0xb0
 800fd70:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd78:	d006      	beq.n	800fd88 <m_kalman_3gyro.isra.0.constprop.0+0x2288>
 800fd7a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd82:	bf18      	it	ne
 800fd84:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800fd88:	ed92 7a35 	vldr	s14, [r2, #212]	; 0xd4
 800fd8c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd94:	d006      	beq.n	800fda4 <m_kalman_3gyro.isra.0.constprop.0+0x22a4>
 800fd96:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9e:	bf18      	it	ne
 800fda0:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800fda4:	ed92 7a3e 	vldr	s14, [r2, #248]	; 0xf8
 800fda8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fdac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb0:	d006      	beq.n	800fdc0 <m_kalman_3gyro.isra.0.constprop.0+0x22c0>
 800fdb2:	eef5 ea40 	vcmp.f32	s29, #0.0
 800fdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdba:	bf18      	it	ne
 800fdbc:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800fdc0:	ed92 7a47 	vldr	s14, [r2, #284]	; 0x11c
 800fdc4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdcc:	d006      	beq.n	800fddc <m_kalman_3gyro.isra.0.constprop.0+0x22dc>
 800fdce:	eef5 5a40 	vcmp.f32	s11, #0.0
 800fdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd6:	bf18      	it	ne
 800fdd8:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800fddc:	4282      	cmp	r2, r0
 800fdde:	ed41 7a01 	vstr	s15, [r1, #-4]
 800fde2:	f47f af7b 	bne.w	800fcdc <m_kalman_3gyro.isra.0.constprop.0+0x21dc>
 800fde6:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdee:	f000 8394 	beq.w	801051a <m_kalman_3gyro.isra.0.constprop.0+0x2a1a>
 800fdf2:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 800fdf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfe:	d001      	beq.n	800fe04 <m_kalman_3gyro.isra.0.constprop.0+0x2304>
 800fe00:	ee67 7a8d 	vmul.f32	s15, s15, s26
 800fe04:	eef5 da40 	vcmp.f32	s27, #0.0
 800fe08:	ed9d 9a73 	vldr	s18, [sp, #460]	; 0x1cc
 800fe0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe10:	d006      	beq.n	800fe20 <m_kalman_3gyro.isra.0.constprop.0+0x2320>
 800fe12:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fe16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1a:	bf18      	it	ne
 800fe1c:	eee9 7a2d 	vfmane.f32	s15, s18, s27
 800fe20:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800fe24:	eddd 8a74 	vldr	s17, [sp, #464]	; 0x1d0
 800fe28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2c:	d006      	beq.n	800fe3c <m_kalman_3gyro.isra.0.constprop.0+0x233c>
 800fe2e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fe32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe36:	bf18      	it	ne
 800fe38:	eee8 7a8e 	vfmane.f32	s15, s17, s28
 800fe3c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800fe40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe44:	d008      	beq.n	800fe58 <m_kalman_3gyro.isra.0.constprop.0+0x2358>
 800fe46:	ed9d 7a75 	vldr	s14, [sp, #468]	; 0x1d4
 800fe4a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fe4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe52:	bf18      	it	ne
 800fe54:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800fe58:	eef5 fa40 	vcmp.f32	s31, #0.0
 800fe5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe60:	d008      	beq.n	800fe74 <m_kalman_3gyro.isra.0.constprop.0+0x2374>
 800fe62:	ed9d 7a76 	vldr	s14, [sp, #472]	; 0x1d8
 800fe66:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fe6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6e:	bf18      	it	ne
 800fe70:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800fe74:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fe78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe7c:	d008      	beq.n	800fe90 <m_kalman_3gyro.isra.0.constprop.0+0x2390>
 800fe7e:	ed9d 7a77 	vldr	s14, [sp, #476]	; 0x1dc
 800fe82:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fe86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8a:	bf18      	it	ne
 800fe8c:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800fe90:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fe94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe98:	d008      	beq.n	800feac <m_kalman_3gyro.isra.0.constprop.0+0x23ac>
 800fe9a:	ed9d 7a78 	vldr	s14, [sp, #480]	; 0x1e0
 800fe9e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea6:	bf18      	it	ne
 800fea8:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800feac:	eef5 ea40 	vcmp.f32	s29, #0.0
 800feb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb4:	d008      	beq.n	800fec8 <m_kalman_3gyro.isra.0.constprop.0+0x23c8>
 800feb6:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800feba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800febe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec2:	bf18      	it	ne
 800fec4:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800fec8:	eef5 5a40 	vcmp.f32	s11, #0.0
 800fecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed0:	d008      	beq.n	800fee4 <m_kalman_3gyro.isra.0.constprop.0+0x23e4>
 800fed2:	ed9d 7a7a 	vldr	s14, [sp, #488]	; 0x1e8
 800fed6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800feda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fede:	bf18      	it	ne
 800fee0:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800fee4:	f8dd 2690 	ldr.w	r2, [sp, #1680]	; 0x690
 800fee8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800feec:	ed9d ca72 	vldr	s24, [sp, #456]	; 0x1c8
 800fef0:	2d05      	cmp	r5, #5
 800fef2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800fef6:	eddd ba75 	vldr	s23, [sp, #468]	; 0x1d4
 800fefa:	ed9d ba76 	vldr	s22, [sp, #472]	; 0x1d8
 800fefe:	ed92 7a00 	vldr	s14, [r2]
 800ff02:	eddd aa77 	vldr	s21, [sp, #476]	; 0x1dc
 800ff06:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ff0a:	ed9d aa78 	vldr	s20, [sp, #480]	; 0x1e0
 800ff0e:	eddd 9a79 	vldr	s19, [sp, #484]	; 0x1e4
 800ff12:	ed9d 7a7a 	vldr	s14, [sp, #488]	; 0x1e8
 800ff16:	ee85 8a27 	vdiv.f32	s16, s10, s15
 800ff1a:	ee28 9a09 	vmul.f32	s18, s16, s18
 800ff1e:	ee68 8a28 	vmul.f32	s17, s16, s17
 800ff22:	ee28 ca0c 	vmul.f32	s24, s16, s24
 800ff26:	ee68 ba2b 	vmul.f32	s23, s16, s23
 800ff2a:	ed8d 9a6a 	vstr	s18, [sp, #424]	; 0x1a8
 800ff2e:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800ff32:	edcd 8a6b 	vstr	s17, [sp, #428]	; 0x1ac
 800ff36:	ee68 aa2a 	vmul.f32	s21, s16, s21
 800ff3a:	ed8d ca69 	vstr	s24, [sp, #420]	; 0x1a4
 800ff3e:	ee28 aa0a 	vmul.f32	s20, s16, s20
 800ff42:	edcd ba6c 	vstr	s23, [sp, #432]	; 0x1b0
 800ff46:	ee68 9a29 	vmul.f32	s19, s16, s19
 800ff4a:	ed8d ba6d 	vstr	s22, [sp, #436]	; 0x1b4
 800ff4e:	ee28 8a07 	vmul.f32	s16, s16, s14
 800ff52:	edcd aa6e 	vstr	s21, [sp, #440]	; 0x1b8
 800ff56:	ed8d aa6f 	vstr	s20, [sp, #444]	; 0x1bc
 800ff5a:	edcd 9a70 	vstr	s19, [sp, #448]	; 0x1c0
 800ff5e:	ed8d 8a71 	vstr	s16, [sp, #452]	; 0x1c4
 800ff62:	f240 8087 	bls.w	8010074 <m_kalman_3gyro.isra.0.constprop.0+0x2574>
 800ff66:	eeb5 da40 	vcmp.f32	s26, #0.0
 800ff6a:	9a00      	ldr	r2, [sp, #0]
 800ff6c:	ed92 7a00 	vldr	s14, [r2]
 800ff70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff74:	f000 831a 	beq.w	80105ac <m_kalman_3gyro.isra.0.constprop.0+0x2aac>
 800ff78:	edd6 7a25 	vldr	s15, [r6, #148]	; 0x94
 800ff7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ff80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff84:	d001      	beq.n	800ff8a <m_kalman_3gyro.isra.0.constprop.0+0x248a>
 800ff86:	ee67 7a8d 	vmul.f32	s15, s15, s26
 800ff8a:	eef5 da40 	vcmp.f32	s27, #0.0
 800ff8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff92:	d008      	beq.n	800ffa6 <m_kalman_3gyro.isra.0.constprop.0+0x24a6>
 800ff94:	ed96 5a26 	vldr	s10, [r6, #152]	; 0x98
 800ff98:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ff9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa0:	bf18      	it	ne
 800ffa2:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 800ffa6:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800ffaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffae:	d008      	beq.n	800ffc2 <m_kalman_3gyro.isra.0.constprop.0+0x24c2>
 800ffb0:	ed96 5a27 	vldr	s10, [r6, #156]	; 0x9c
 800ffb4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ffb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffbc:	bf18      	it	ne
 800ffbe:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 800ffc2:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ffc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffca:	d008      	beq.n	800ffde <m_kalman_3gyro.isra.0.constprop.0+0x24de>
 800ffcc:	ed96 5a28 	vldr	s10, [r6, #160]	; 0xa0
 800ffd0:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ffd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd8:	bf18      	it	ne
 800ffda:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 800ffde:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ffe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe6:	d008      	beq.n	800fffa <m_kalman_3gyro.isra.0.constprop.0+0x24fa>
 800ffe8:	ed96 5a29 	vldr	s10, [r6, #164]	; 0xa4
 800ffec:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800fff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff4:	bf18      	it	ne
 800fff6:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 800fffa:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010002:	d008      	beq.n	8010016 <m_kalman_3gyro.isra.0.constprop.0+0x2516>
 8010004:	ed96 5a2a 	vldr	s10, [r6, #168]	; 0xa8
 8010008:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801000c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010010:	bf18      	it	ne
 8010012:	eee5 7a26 	vfmane.f32	s15, s10, s13
 8010016:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801001a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801001e:	d008      	beq.n	8010032 <m_kalman_3gyro.isra.0.constprop.0+0x2532>
 8010020:	ed96 5a2b 	vldr	s10, [r6, #172]	; 0xac
 8010024:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8010028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801002c:	bf18      	it	ne
 801002e:	eee5 7a06 	vfmane.f32	s15, s10, s12
 8010032:	eef5 ea40 	vcmp.f32	s29, #0.0
 8010036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003a:	d008      	beq.n	801004e <m_kalman_3gyro.isra.0.constprop.0+0x254e>
 801003c:	ed96 5a2c 	vldr	s10, [r6, #176]	; 0xb0
 8010040:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8010044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010048:	bf18      	it	ne
 801004a:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 801004e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8010052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010056:	d008      	beq.n	801006a <m_kalman_3gyro.isra.0.constprop.0+0x256a>
 8010058:	ed96 5a2d 	vldr	s10, [r6, #180]	; 0xb4
 801005c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8010060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010064:	bf18      	it	ne
 8010066:	eee5 7a25 	vfmane.f32	s15, s10, s11
 801006a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801006e:	9a00      	ldr	r2, [sp, #0]
 8010070:	edc2 7a00 	vstr	s15, [r2]
 8010074:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010078:	2100      	movs	r1, #0
 801007a:	4658      	mov	r0, fp
 801007c:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8010080:	edcd 5a0d 	vstr	s11, [sp, #52]	; 0x34
 8010084:	ed8d 6a0c 	vstr	s12, [sp, #48]	; 0x30
 8010088:	9302      	str	r3, [sp, #8]
 801008a:	f005 fed3 	bl	8015e34 <memset>
 801008e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8010092:	a869      	add	r0, sp, #420	; 0x1a4
 8010094:	9507      	str	r5, [sp, #28]
 8010096:	f50d 7c71 	add.w	ip, sp, #964	; 0x3c4
 801009a:	9d08      	ldr	r5, [sp, #32]
 801009c:	465a      	mov	r2, fp
 801009e:	f8cd 8020 	str.w	r8, [sp, #32]
 80100a2:	f8cd 66d8 	str.w	r6, [sp, #1752]	; 0x6d8
 80100a6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80100aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80100ac:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80100b0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80100b2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80100b6:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 80100ba:	970b      	str	r7, [sp, #44]	; 0x2c
 80100bc:	eddd 5a0d 	vldr	s11, [sp, #52]	; 0x34
 80100c0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80100c2:	ed9d 6a0c 	vldr	s12, [sp, #48]	; 0x30
 80100c6:	f8cd b014 	str.w	fp, [sp, #20]
 80100ca:	ecf0 7a01 	vldmia	r0!, {s15}
 80100ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80100d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d6:	bf14      	ite	ne
 80100d8:	2101      	movne	r1, #1
 80100da:	2100      	moveq	r1, #0
 80100dc:	d02c      	beq.n	8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 80100de:	2c00      	cmp	r4, #0
 80100e0:	f040 81f9 	bne.w	80104d6 <m_kalman_3gyro.isra.0.constprop.0+0x29d6>
 80100e4:	b341      	cbz	r1, 8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 80100e6:	f1be 0f00 	cmp.w	lr, #0
 80100ea:	f040 8207 	bne.w	80104fc <m_kalman_3gyro.isra.0.constprop.0+0x29fc>
 80100ee:	b319      	cbz	r1, 8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 80100f0:	f1b8 0f00 	cmp.w	r8, #0
 80100f4:	f040 81e8 	bne.w	80104c8 <m_kalman_3gyro.isra.0.constprop.0+0x29c8>
 80100f8:	b1f1      	cbz	r1, 8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 80100fa:	9b03      	ldr	r3, [sp, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f040 81dc 	bne.w	80104ba <m_kalman_3gyro.isra.0.constprop.0+0x29ba>
 8010102:	b1c9      	cbz	r1, 8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 8010104:	2d00      	cmp	r5, #0
 8010106:	f040 81d1 	bne.w	80104ac <m_kalman_3gyro.isra.0.constprop.0+0x29ac>
 801010a:	b1a9      	cbz	r1, 8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 801010c:	2e00      	cmp	r6, #0
 801010e:	f040 81c6 	bne.w	801049e <m_kalman_3gyro.isra.0.constprop.0+0x299e>
 8010112:	b189      	cbz	r1, 8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 8010114:	2f00      	cmp	r7, #0
 8010116:	f040 81bb 	bne.w	8010490 <m_kalman_3gyro.isra.0.constprop.0+0x2990>
 801011a:	b169      	cbz	r1, 8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 801011c:	9b02      	ldr	r3, [sp, #8]
 801011e:	2b00      	cmp	r3, #0
 8010120:	f040 81af 	bne.w	8010482 <m_kalman_3gyro.isra.0.constprop.0+0x2982>
 8010124:	b141      	cbz	r1, 8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 8010126:	f1b9 0f00 	cmp.w	r9, #0
 801012a:	d005      	beq.n	8010138 <m_kalman_3gyro.isra.0.constprop.0+0x2638>
 801012c:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 8010130:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8010134:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 8010138:	3204      	adds	r2, #4
 801013a:	4562      	cmp	r2, ip
 801013c:	d1c5      	bne.n	80100ca <m_kalman_3gyro.isra.0.constprop.0+0x25ca>
 801013e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010142:	9c05      	ldr	r4, [sp, #20]
 8010144:	f8dd 66d8 	ldr.w	r6, [sp, #1752]	; 0x6d8
 8010148:	f50b 7ea2 	add.w	lr, fp, #324	; 0x144
 801014c:	465b      	mov	r3, fp
 801014e:	2200      	movs	r2, #0
 8010150:	f8df c394 	ldr.w	ip, [pc, #916]	; 80104e8 <m_kalman_3gyro.isra.0.constprop.0+0x29e8>
 8010154:	48e3      	ldr	r0, [pc, #908]	; (80104e4 <m_kalman_3gyro.isra.0.constprop.0+0x29e4>)
 8010156:	e9dd 5807 	ldrd	r5, r8, [sp, #28]
 801015a:	e9dd 970a 	ldrd	r9, r7, [sp, #40]	; 0x28
 801015e:	fb0c f102 	mul.w	r1, ip, r2
 8010162:	edd3 7a00 	vldr	s15, [r3]
 8010166:	3201      	adds	r2, #1
 8010168:	ebb0 0f71 	cmp.w	r0, r1, ror #1
 801016c:	f0c0 81cd 	bcc.w	801050a <m_kalman_3gyro.isra.0.constprop.0+0x2a0a>
 8010170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010174:	ece3 7a01 	vstmia	r3!, {s15}
 8010178:	459e      	cmp	lr, r3
 801017a:	d1f0      	bne.n	801015e <m_kalman_3gyro.isra.0.constprop.0+0x265e>
 801017c:	ed9d da04 	vldr	s26, [sp, #16]
 8010180:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010184:	4650      	mov	r0, sl
 8010186:	ee1d 1a10 	vmov	r1, s26
 801018a:	f005 fe45 	bl	8015e18 <memcpy>
 801018e:	2100      	movs	r1, #0
 8010190:	ee1d 0a10 	vmov	r0, s26
 8010194:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010198:	f005 fe4c 	bl	8015e34 <memset>
 801019c:	46b4      	mov	ip, r6
 801019e:	2000      	movs	r0, #0
 80101a0:	f50d 61c5 	add.w	r1, sp, #1576	; 0x628
 80101a4:	ecf4 3a01 	vldmia	r4!, {s7}
 80101a8:	4653      	mov	r3, sl
 80101aa:	4662      	mov	r2, ip
 80101ac:	ed94 4a08 	vldr	s8, [r4, #32]
 80101b0:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 80101b4:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 80101b8:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 80101bc:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 80101c0:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 80101c4:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 80101c8:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 80101cc:	eef5 3a40 	vcmp.f32	s7, #0.0
 80101d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d4:	d00c      	beq.n	80101f0 <m_kalman_3gyro.isra.0.constprop.0+0x26f0>
 80101d6:	ed93 3a00 	vldr	s6, [r3]
 80101da:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80101de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101e2:	d005      	beq.n	80101f0 <m_kalman_3gyro.isra.0.constprop.0+0x26f0>
 80101e4:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80101e8:	eee3 2a83 	vfma.f32	s5, s7, s6
 80101ec:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80101f0:	eeb5 4a40 	vcmp.f32	s8, #0.0
 80101f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101f8:	d00c      	beq.n	8010214 <m_kalman_3gyro.isra.0.constprop.0+0x2714>
 80101fa:	ed93 3a01 	vldr	s6, [r3, #4]
 80101fe:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8010202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010206:	d005      	beq.n	8010214 <m_kalman_3gyro.isra.0.constprop.0+0x2714>
 8010208:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 801020c:	eee4 2a03 	vfma.f32	s5, s8, s6
 8010210:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8010214:	eef5 4a40 	vcmp.f32	s9, #0.0
 8010218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021c:	d00c      	beq.n	8010238 <m_kalman_3gyro.isra.0.constprop.0+0x2738>
 801021e:	ed93 3a02 	vldr	s6, [r3, #8]
 8010222:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8010226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801022a:	d005      	beq.n	8010238 <m_kalman_3gyro.isra.0.constprop.0+0x2738>
 801022c:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 8010230:	eee4 2a83 	vfma.f32	s5, s9, s6
 8010234:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8010238:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801023c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010240:	d00c      	beq.n	801025c <m_kalman_3gyro.isra.0.constprop.0+0x275c>
 8010242:	ed93 3a03 	vldr	s6, [r3, #12]
 8010246:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801024a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024e:	d005      	beq.n	801025c <m_kalman_3gyro.isra.0.constprop.0+0x275c>
 8010250:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 8010254:	eee5 2a03 	vfma.f32	s5, s10, s6
 8010258:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 801025c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8010260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010264:	d00c      	beq.n	8010280 <m_kalman_3gyro.isra.0.constprop.0+0x2780>
 8010266:	ed93 3a04 	vldr	s6, [r3, #16]
 801026a:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801026e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010272:	d005      	beq.n	8010280 <m_kalman_3gyro.isra.0.constprop.0+0x2780>
 8010274:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 8010278:	eee5 2a83 	vfma.f32	s5, s11, s6
 801027c:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8010280:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8010284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010288:	d00c      	beq.n	80102a4 <m_kalman_3gyro.isra.0.constprop.0+0x27a4>
 801028a:	ed93 3a05 	vldr	s6, [r3, #20]
 801028e:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8010292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010296:	d005      	beq.n	80102a4 <m_kalman_3gyro.isra.0.constprop.0+0x27a4>
 8010298:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 801029c:	eee6 2a03 	vfma.f32	s5, s12, s6
 80102a0:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80102a4:	eef5 6a40 	vcmp.f32	s13, #0.0
 80102a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ac:	d00c      	beq.n	80102c8 <m_kalman_3gyro.isra.0.constprop.0+0x27c8>
 80102ae:	ed93 3a06 	vldr	s6, [r3, #24]
 80102b2:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80102b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ba:	d005      	beq.n	80102c8 <m_kalman_3gyro.isra.0.constprop.0+0x27c8>
 80102bc:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80102c0:	eee6 2a83 	vfma.f32	s5, s13, s6
 80102c4:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80102c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80102cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d0:	d00c      	beq.n	80102ec <m_kalman_3gyro.isra.0.constprop.0+0x27ec>
 80102d2:	ed93 3a07 	vldr	s6, [r3, #28]
 80102d6:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80102da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102de:	d005      	beq.n	80102ec <m_kalman_3gyro.isra.0.constprop.0+0x27ec>
 80102e0:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 80102e4:	eee7 2a03 	vfma.f32	s5, s14, s6
 80102e8:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 80102ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80102f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f4:	d00c      	beq.n	8010310 <m_kalman_3gyro.isra.0.constprop.0+0x2810>
 80102f6:	ed93 3a08 	vldr	s6, [r3, #32]
 80102fa:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80102fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010302:	d005      	beq.n	8010310 <m_kalman_3gyro.isra.0.constprop.0+0x2810>
 8010304:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 8010308:	eee7 2a83 	vfma.f32	s5, s15, s6
 801030c:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 8010310:	3324      	adds	r3, #36	; 0x24
 8010312:	3224      	adds	r2, #36	; 0x24
 8010314:	4299      	cmp	r1, r3
 8010316:	f47f af59 	bne.w	80101cc <m_kalman_3gyro.isra.0.constprop.0+0x26cc>
 801031a:	3001      	adds	r0, #1
 801031c:	f10c 0c04 	add.w	ip, ip, #4
 8010320:	2809      	cmp	r0, #9
 8010322:	f47f af3f 	bne.w	80101a4 <m_kalman_3gyro.isra.0.constprop.0+0x26a4>
 8010326:	9b00      	ldr	r3, [sp, #0]
 8010328:	edd3 7a00 	vldr	s15, [r3]
 801032c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010334:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8010338:	bf14      	ite	ne
 801033a:	2301      	movne	r3, #1
 801033c:	2300      	moveq	r3, #0
 801033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010342:	d002      	beq.n	801034a <m_kalman_3gyro.isra.0.constprop.0+0x284a>
 8010344:	2b00      	cmp	r3, #0
 8010346:	f040 835d 	bne.w	8010a04 <m_kalman_3gyro.isra.0.constprop.0+0x2f04>
 801034a:	eeb0 ca6c 	vmov.f32	s24, s25
 801034e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010352:	ed8d ca72 	vstr	s24, [sp, #456]	; 0x1c8
 8010356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801035a:	d002      	beq.n	8010362 <m_kalman_3gyro.isra.0.constprop.0+0x2862>
 801035c:	2b00      	cmp	r3, #0
 801035e:	f040 835a 	bne.w	8010a16 <m_kalman_3gyro.isra.0.constprop.0+0x2f16>
 8010362:	eeb0 9a6c 	vmov.f32	s18, s25
 8010366:	eef5 8a40 	vcmp.f32	s17, #0.0
 801036a:	ed8d 9a73 	vstr	s18, [sp, #460]	; 0x1cc
 801036e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010372:	d002      	beq.n	801037a <m_kalman_3gyro.isra.0.constprop.0+0x287a>
 8010374:	2b00      	cmp	r3, #0
 8010376:	f040 8351 	bne.w	8010a1c <m_kalman_3gyro.isra.0.constprop.0+0x2f1c>
 801037a:	eef0 8a6c 	vmov.f32	s17, s25
 801037e:	eef5 ba40 	vcmp.f32	s23, #0.0
 8010382:	edcd 8a74 	vstr	s17, [sp, #464]	; 0x1d0
 8010386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038a:	d002      	beq.n	8010392 <m_kalman_3gyro.isra.0.constprop.0+0x2892>
 801038c:	2b00      	cmp	r3, #0
 801038e:	f040 8348 	bne.w	8010a22 <m_kalman_3gyro.isra.0.constprop.0+0x2f22>
 8010392:	eef0 ba6c 	vmov.f32	s23, s25
 8010396:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801039a:	edcd ba75 	vstr	s23, [sp, #468]	; 0x1d4
 801039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a2:	d002      	beq.n	80103aa <m_kalman_3gyro.isra.0.constprop.0+0x28aa>
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f040 833f 	bne.w	8010a28 <m_kalman_3gyro.isra.0.constprop.0+0x2f28>
 80103aa:	eeb0 ba6c 	vmov.f32	s22, s25
 80103ae:	eef5 aa40 	vcmp.f32	s21, #0.0
 80103b2:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 80103b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ba:	d002      	beq.n	80103c2 <m_kalman_3gyro.isra.0.constprop.0+0x28c2>
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f040 8336 	bne.w	8010a2e <m_kalman_3gyro.isra.0.constprop.0+0x2f2e>
 80103c2:	eef0 aa6c 	vmov.f32	s21, s25
 80103c6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80103ca:	edcd aa77 	vstr	s21, [sp, #476]	; 0x1dc
 80103ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d2:	d002      	beq.n	80103da <m_kalman_3gyro.isra.0.constprop.0+0x28da>
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	f040 832d 	bne.w	8010a34 <m_kalman_3gyro.isra.0.constprop.0+0x2f34>
 80103da:	eeb0 aa6c 	vmov.f32	s20, s25
 80103de:	eef5 9a40 	vcmp.f32	s19, #0.0
 80103e2:	ed8d aa78 	vstr	s20, [sp, #480]	; 0x1e0
 80103e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ea:	d002      	beq.n	80103f2 <m_kalman_3gyro.isra.0.constprop.0+0x28f2>
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f040 830c 	bne.w	8010a0a <m_kalman_3gyro.isra.0.constprop.0+0x2f0a>
 80103f2:	eef0 9a6c 	vmov.f32	s19, s25
 80103f6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80103fa:	edcd 9a79 	vstr	s19, [sp, #484]	; 0x1e4
 80103fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010402:	d002      	beq.n	801040a <m_kalman_3gyro.isra.0.constprop.0+0x290a>
 8010404:	2b00      	cmp	r3, #0
 8010406:	f040 8303 	bne.w	8010a10 <m_kalman_3gyro.isra.0.constprop.0+0x2f10>
 801040a:	eef0 7a6c 	vmov.f32	s15, s25
 801040e:	ed96 6a25 	vldr	s12, [r6, #148]	; 0x94
 8010412:	edd6 6a26 	vldr	s13, [r6, #152]	; 0x98
 8010416:	ed96 7a27 	vldr	s14, [r6, #156]	; 0x9c
 801041a:	ee36 ca0c 	vadd.f32	s24, s12, s24
 801041e:	ee36 9a89 	vadd.f32	s18, s13, s18
 8010422:	ed96 6a28 	vldr	s12, [r6, #160]	; 0xa0
 8010426:	edd6 6a29 	vldr	s13, [r6, #164]	; 0xa4
 801042a:	ee77 8a28 	vadd.f32	s17, s14, s17
 801042e:	ed96 7a2a 	vldr	s14, [r6, #168]	; 0xa8
 8010432:	ee76 ba2b 	vadd.f32	s23, s12, s23
 8010436:	ee36 ba8b 	vadd.f32	s22, s13, s22
 801043a:	ed96 6a2b 	vldr	s12, [r6, #172]	; 0xac
 801043e:	ee77 aa2a 	vadd.f32	s21, s14, s21
 8010442:	edd6 6a2c 	vldr	s13, [r6, #176]	; 0xb0
 8010446:	ed96 7a2d 	vldr	s14, [r6, #180]	; 0xb4
 801044a:	ee36 aa0a 	vadd.f32	s20, s12, s20
 801044e:	ee76 9aa9 	vadd.f32	s19, s13, s19
 8010452:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 8010456:	ee77 7a27 	vadd.f32	s15, s14, s15
 801045a:	ed86 ca25 	vstr	s24, [r6, #148]	; 0x94
 801045e:	ed86 9a26 	vstr	s18, [r6, #152]	; 0x98
 8010462:	edc6 8a27 	vstr	s17, [r6, #156]	; 0x9c
 8010466:	edc6 ba28 	vstr	s23, [r6, #160]	; 0xa0
 801046a:	ed86 ba29 	vstr	s22, [r6, #164]	; 0xa4
 801046e:	edc6 aa2a 	vstr	s21, [r6, #168]	; 0xa8
 8010472:	ed86 aa2b 	vstr	s20, [r6, #172]	; 0xac
 8010476:	edc6 9a2c 	vstr	s19, [r6, #176]	; 0xb0
 801047a:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 801047e:	f7ff bb1b 	b.w	800fab8 <m_kalman_3gyro.isra.0.constprop.0+0x1fb8>
 8010482:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 8010486:	eea7 7aae 	vfma.f32	s14, s15, s29
 801048a:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 801048e:	e649      	b.n	8010124 <m_kalman_3gyro.isra.0.constprop.0+0x2624>
 8010490:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 8010494:	eea7 7a86 	vfma.f32	s14, s15, s12
 8010498:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 801049c:	e63d      	b.n	801011a <m_kalman_3gyro.isra.0.constprop.0+0x261a>
 801049e:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 80104a2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80104a6:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 80104aa:	e632      	b.n	8010112 <m_kalman_3gyro.isra.0.constprop.0+0x2612>
 80104ac:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 80104b0:	eea7 7aaf 	vfma.f32	s14, s15, s31
 80104b4:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 80104b8:	e627      	b.n	801010a <m_kalman_3gyro.isra.0.constprop.0+0x260a>
 80104ba:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 80104be:	eea7 7a8f 	vfma.f32	s14, s15, s30
 80104c2:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 80104c6:	e61c      	b.n	8010102 <m_kalman_3gyro.isra.0.constprop.0+0x2602>
 80104c8:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 80104cc:	eea7 7a8e 	vfma.f32	s14, s15, s28
 80104d0:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 80104d4:	e610      	b.n	80100f8 <m_kalman_3gyro.isra.0.constprop.0+0x25f8>
 80104d6:	ed92 7a00 	vldr	s14, [r2]
 80104da:	eea7 7a8d 	vfma.f32	s14, s15, s26
 80104de:	ed82 7a00 	vstr	s14, [r2]
 80104e2:	e5ff      	b.n	80100e4 <m_kalman_3gyro.isra.0.constprop.0+0x25e4>
 80104e4:	19999999 	.word	0x19999999
 80104e8:	cccccccd 	.word	0xcccccccd
 80104ec:	00000000 	.word	0x00000000
 80104f0:	3e4ccccd 	.word	0x3e4ccccd
 80104f4:	3f99999a 	.word	0x3f99999a
 80104f8:	3be56042 	.word	0x3be56042
 80104fc:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8010500:	eea7 7aad 	vfma.f32	s14, s15, s27
 8010504:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8010508:	e5f1      	b.n	80100ee <m_kalman_3gyro.isra.0.constprop.0+0x25ee>
 801050a:	eef1 7a67 	vneg.f32	s15, s15
 801050e:	ece3 7a01 	vstmia	r3!, {s15}
 8010512:	459e      	cmp	lr, r3
 8010514:	f47f ae23 	bne.w	801015e <m_kalman_3gyro.isra.0.constprop.0+0x265e>
 8010518:	e630      	b.n	801017c <m_kalman_3gyro.isra.0.constprop.0+0x267c>
 801051a:	eef0 7a4d 	vmov.f32	s15, s26
 801051e:	e471      	b.n	800fe04 <m_kalman_3gyro.isra.0.constprop.0+0x2304>
 8010520:	eddd 5a83 	vldr	s11, [sp, #524]	; 0x20c
 8010524:	2300      	movs	r3, #0
 8010526:	ed9d fa7e 	vldr	s30, [sp, #504]	; 0x1f8
 801052a:	eeb0 ea6c 	vmov.f32	s28, s25
 801052e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8010532:	ed5f da12 	vldr	s27, [pc, #-72]	; 80104ec <m_kalman_3gyro.isra.0.constprop.0+0x29ec>
 8010536:	eddd fa7f 	vldr	s31, [sp, #508]	; 0x1fc
 801053a:	930a      	str	r3, [sp, #40]	; 0x28
 801053c:	eeb0 da6d 	vmov.f32	s26, s27
 8010540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010544:	9307      	str	r3, [sp, #28]
 8010546:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801054a:	9311      	str	r3, [sp, #68]	; 0x44
 801054c:	eddd 6a80 	vldr	s13, [sp, #512]	; 0x200
 8010550:	bf18      	it	ne
 8010552:	2301      	movne	r3, #1
 8010554:	ed9d 6a81 	vldr	s12, [sp, #516]	; 0x204
 8010558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055c:	eddd ea82 	vldr	s29, [sp, #520]	; 0x208
 8010560:	eef4 fa6d 	vcmp.f32	s31, s27
 8010564:	930b      	str	r3, [sp, #44]	; 0x2c
 8010566:	bf14      	ite	ne
 8010568:	2301      	movne	r3, #1
 801056a:	2300      	moveq	r3, #0
 801056c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010570:	eef4 6a6d 	vcmp.f32	s13, s27
 8010574:	9303      	str	r3, [sp, #12]
 8010576:	bf14      	ite	ne
 8010578:	2301      	movne	r3, #1
 801057a:	2300      	moveq	r3, #0
 801057c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010580:	eeb4 6a6d 	vcmp.f32	s12, s27
 8010584:	9308      	str	r3, [sp, #32]
 8010586:	bf14      	ite	ne
 8010588:	2301      	movne	r3, #1
 801058a:	2300      	moveq	r3, #0
 801058c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010590:	eef4 ea6d 	vcmp.f32	s29, s27
 8010594:	930f      	str	r3, [sp, #60]	; 0x3c
 8010596:	bf14      	ite	ne
 8010598:	2301      	movne	r3, #1
 801059a:	2300      	moveq	r3, #0
 801059c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105a0:	9310      	str	r3, [sp, #64]	; 0x40
 80105a2:	bf14      	ite	ne
 80105a4:	2301      	movne	r3, #1
 80105a6:	2300      	moveq	r3, #0
 80105a8:	f7ff bb80 	b.w	800fcac <m_kalman_3gyro.isra.0.constprop.0+0x21ac>
 80105ac:	eef0 7a4d 	vmov.f32	s15, s26
 80105b0:	e4eb      	b.n	800ff8a <m_kalman_3gyro.isra.0.constprop.0+0x248a>
 80105b2:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 80105b6:	f893 28ae 	ldrb.w	r2, [r3, #2222]	; 0x8ae
 80105ba:	2a00      	cmp	r2, #0
 80105bc:	f000 856a 	beq.w	8011094 <m_kalman_3gyro.isra.0.constprop.0+0x3594>
 80105c0:	4619      	mov	r1, r3
 80105c2:	3a01      	subs	r2, #1
 80105c4:	2300      	movs	r3, #0
 80105c6:	f881 28ae 	strb.w	r2, [r1, #2222]	; 0x8ae
 80105ca:	460a      	mov	r2, r1
 80105cc:	f8a1 31fc 	strh.w	r3, [r1, #508]	; 0x1fc
 80105d0:	f881 31fe 	strb.w	r3, [r1, #510]	; 0x1fe
 80105d4:	f881 3205 	strb.w	r3, [r1, #517]	; 0x205
 80105d8:	f881 3207 	strb.w	r3, [r1, #519]	; 0x207
 80105dc:	f7ff ba18 	b.w	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 80105e0:	f8dd 36a0 	ldr.w	r3, [sp, #1696]	; 0x6a0
 80105e4:	eeb1 9a49 	vneg.f32	s18, s18
 80105e8:	eef1 8a68 	vneg.f32	s17, s17
 80105ec:	789b      	ldrb	r3, [r3, #2]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 85b1 	beq.w	8011156 <m_kalman_3gyro.isra.0.constprop.0+0x3656>
 80105f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105f6:	eeea 9a0a 	vfma.f32	s19, s20, s20
 80105fa:	eeb1 8a48 	vneg.f32	s16, s16
 80105fe:	a851      	add	r0, sp, #324	; 0x144
 8010600:	461a      	mov	r2, r3
 8010602:	6819      	ldr	r1, [r3, #0]
 8010604:	685c      	ldr	r4, [r3, #4]
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	9149      	str	r1, [sp, #292]	; 0x124
 801060a:	a949      	add	r1, sp, #292	; 0x124
 801060c:	934b      	str	r3, [sp, #300]	; 0x12c
 801060e:	68d3      	ldr	r3, [r2, #12]
 8010610:	ed8d 9a51 	vstr	s18, [sp, #324]	; 0x144
 8010614:	934c      	str	r3, [sp, #304]	; 0x130
 8010616:	edcd 8a52 	vstr	s17, [sp, #328]	; 0x148
 801061a:	ed8d 8a53 	vstr	s16, [sp, #332]	; 0x14c
 801061e:	944a      	str	r4, [sp, #296]	; 0x128
 8010620:	ac4d      	add	r4, sp, #308	; 0x134
 8010622:	ed8d aa54 	vstr	s20, [sp, #336]	; 0x150
 8010626:	f7fb f995 	bl	800b954 <m_qmult_eml>
 801062a:	ee19 0a90 	vmov	r0, s19
 801062e:	ed8d 9a49 	vstr	s18, [sp, #292]	; 0x124
 8010632:	edcd 8a4a 	vstr	s17, [sp, #296]	; 0x128
 8010636:	ed8d 8a4b 	vstr	s16, [sp, #300]	; 0x12c
 801063a:	ed8d 9a51 	vstr	s18, [sp, #324]	; 0x144
 801063e:	edcd 8a52 	vstr	s17, [sp, #328]	; 0x148
 8010642:	ed8d 8a53 	vstr	s16, [sp, #332]	; 0x14c
 8010646:	ed8d aa54 	vstr	s20, [sp, #336]	; 0x150
 801064a:	ed8d aa4c 	vstr	s20, [sp, #304]	; 0x130
 801064e:	f7ef ff9b 	bl	8000588 <__aeabi_f2d>
 8010652:	ec41 0b10 	vmov	d0, r0, r1
 8010656:	f00a f9f9 	bl	801aa4c <sqrt>
 801065a:	ec51 0b10 	vmov	r0, r1, d0
 801065e:	f7f0 fae3 	bl	8000c28 <__aeabi_d2f>
 8010662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010666:	ee07 0a90 	vmov	s15, r0
 801066a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 801066e:	ee29 9a27 	vmul.f32	s18, s18, s15
 8010672:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010676:	ee28 8a27 	vmul.f32	s16, s16, s15
 801067a:	ee6a 7a27 	vmul.f32	s15, s20, s15
 801067e:	ed8d 9a4d 	vstr	s18, [sp, #308]	; 0x134
 8010682:	edcd 8a4e 	vstr	s17, [sp, #312]	; 0x138
 8010686:	ed8d 8a4f 	vstr	s16, [sp, #316]	; 0x13c
 801068a:	edcd 7a50 	vstr	s15, [sp, #320]	; 0x140
 801068e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010690:	f8dd 46c0 	ldr.w	r4, [sp, #1728]	; 0x6c0
 8010694:	6020      	str	r0, [r4, #0]
 8010696:	6061      	str	r1, [r4, #4]
 8010698:	60a2      	str	r2, [r4, #8]
 801069a:	60e3      	str	r3, [r4, #12]
 801069c:	f7ff ba3a 	b.w	800fb14 <m_kalman_3gyro.isra.0.constprop.0+0x2014>
 80106a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80106a2:	ed5f 7a6d 	vldr	s15, [pc, #-436]	; 80104f0 <m_kalman_3gyro.isra.0.constprop.0+0x29f0>
 80106a6:	ed93 7a00 	vldr	s14, [r3]
 80106aa:	eeb0 7ac7 	vabs.f32	s14, s14
 80106ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80106b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b6:	f140 8169 	bpl.w	801098c <m_kalman_3gyro.isra.0.constprop.0+0x2e8c>
 80106ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80106be:	eeb0 7ac7 	vabs.f32	s14, s14
 80106c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80106c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ca:	f140 815f 	bpl.w	801098c <m_kalman_3gyro.isra.0.constprop.0+0x2e8c>
 80106ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80106d2:	eeb0 7ac7 	vabs.f32	s14, s14
 80106d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80106da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106de:	f140 8155 	bpl.w	801098c <m_kalman_3gyro.isra.0.constprop.0+0x2e8c>
 80106e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106e4:	ed5f 7a7d 	vldr	s15, [pc, #-500]	; 80104f4 <m_kalman_3gyro.isra.0.constprop.0+0x29f4>
 80106e8:	ed93 7a00 	vldr	s14, [r3]
 80106ec:	eeb0 7ac7 	vabs.f32	s14, s14
 80106f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80106f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f8:	f140 8148 	bpl.w	801098c <m_kalman_3gyro.isra.0.constprop.0+0x2e8c>
 80106fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8010700:	eeb0 7ac7 	vabs.f32	s14, s14
 8010704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070c:	f140 813e 	bpl.w	801098c <m_kalman_3gyro.isra.0.constprop.0+0x2e8c>
 8010710:	ed93 7a02 	vldr	s14, [r3, #8]
 8010714:	eeb0 7ac7 	vabs.f32	s14, s14
 8010718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010720:	f140 8134 	bpl.w	801098c <m_kalman_3gyro.isra.0.constprop.0+0x2e8c>
 8010724:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8010728:	9918      	ldr	r1, [sp, #96]	; 0x60
 801072a:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 801072e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8010732:	ed91 5a00 	vldr	s10, [r1]
 8010736:	2a09      	cmp	r2, #9
 8010738:	ed93 6a00 	vldr	s12, [r3]
 801073c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801073e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8010740:	edd1 6a00 	vldr	s13, [r1]
 8010744:	edd3 5a00 	vldr	s11, [r3]
 8010748:	bfcc      	ite	gt
 801074a:	230a      	movgt	r3, #10
 801074c:	2305      	movle	r3, #5
 801074e:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8010750:	fec5 7a85 	vmaxnm.f32	s15, s11, s10
 8010754:	fec5 5ac5 	vminnm.f32	s11, s11, s10
 8010758:	ed91 7a00 	vldr	s14, [r1]
 801075c:	2b05      	cmp	r3, #5
 801075e:	fec6 7a27 	vmaxnm.f32	s15, s12, s15
 8010762:	fe86 6a65 	vminnm.f32	s12, s12, s11
 8010766:	fec6 7aa7 	vmaxnm.f32	s15, s13, s15
 801076a:	fec6 6ac6 	vminnm.f32	s13, s13, s12
 801076e:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8010772:	fe87 7a66 	vminnm.f32	s14, s14, s13
 8010776:	d02d      	beq.n	80107d4 <m_kalman_3gyro.isra.0.constprop.0+0x2cd4>
 8010778:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 801077c:	2b0a      	cmp	r3, #10
 801077e:	f201 552c 	addw	r5, r1, #1324	; 0x52c
 8010782:	f501 64aa 	add.w	r4, r1, #1360	; 0x550
 8010786:	f201 5074 	addw	r0, r1, #1396	; 0x574
 801078a:	f501 61b3 	add.w	r1, r1, #1432	; 0x598
 801078e:	edd5 6a00 	vldr	s13, [r5]
 8010792:	edd4 5a00 	vldr	s11, [r4]
 8010796:	ed90 6a00 	vldr	s12, [r0]
 801079a:	fec6 7aa7 	vmaxnm.f32	s15, s13, s15
 801079e:	fec6 6ac7 	vminnm.f32	s13, s13, s14
 80107a2:	ed91 7a00 	vldr	s14, [r1]
 80107a6:	fec5 7aa7 	vmaxnm.f32	s15, s11, s15
 80107aa:	fec6 6ae5 	vminnm.f32	s13, s13, s11
 80107ae:	fec6 7a27 	vmaxnm.f32	s15, s12, s15
 80107b2:	fec6 6a66 	vminnm.f32	s13, s12, s13
 80107b6:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80107ba:	fe87 7a66 	vminnm.f32	s14, s14, s13
 80107be:	d109      	bne.n	80107d4 <m_kalman_3gyro.isra.0.constprop.0+0x2cd4>
 80107c0:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80107c4:	f201 51bc 	addw	r1, r1, #1468	; 0x5bc
 80107c8:	edd1 6a00 	vldr	s13, [r1]
 80107cc:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80107d0:	fe87 7a66 	vminnm.f32	s14, s14, s13
 80107d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80107d8:	ed1f 7ab9 	vldr	s14, [pc, #-740]	; 80104f8 <m_kalman_3gyro.isra.0.constprop.0+0x29f8>
 80107dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e4:	f300 80d2 	bgt.w	801098c <m_kalman_3gyro.isra.0.constprop.0+0x2e8c>
 80107e8:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80107ec:	2b05      	cmp	r3, #5
 80107ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80107f0:	f201 41c4 	addw	r1, r1, #1220	; 0x4c4
 80107f4:	edd0 5a00 	vldr	s11, [r0]
 80107f8:	ed91 6a00 	vldr	s12, [r1]
 80107fc:	982b      	ldr	r0, [sp, #172]	; 0xac
 80107fe:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8010800:	ed90 7a00 	vldr	s14, [r0]
 8010804:	edd1 6a00 	vldr	s13, [r1]
 8010808:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801080a:	fec7 7a25 	vmaxnm.f32	s15, s14, s11
 801080e:	fec7 5a65 	vminnm.f32	s11, s14, s11
 8010812:	fec6 7a27 	vmaxnm.f32	s15, s12, s15
 8010816:	ed91 7a00 	vldr	s14, [r1]
 801081a:	fec6 7aa7 	vmaxnm.f32	s15, s13, s15
 801081e:	fe86 6a65 	vminnm.f32	s12, s12, s11
 8010822:	fec6 6ac6 	vminnm.f32	s13, s13, s12
 8010826:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 801082a:	fe87 7a66 	vminnm.f32	s14, s14, s13
 801082e:	d02d      	beq.n	801088c <m_kalman_3gyro.isra.0.constprop.0+0x2d8c>
 8010830:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8010834:	2b0a      	cmp	r3, #10
 8010836:	f501 65a6 	add.w	r5, r1, #1328	; 0x530
 801083a:	f201 5454 	addw	r4, r1, #1364	; 0x554
 801083e:	f501 60af 	add.w	r0, r1, #1400	; 0x578
 8010842:	f201 519c 	addw	r1, r1, #1436	; 0x59c
 8010846:	edd5 5a00 	vldr	s11, [r5]
 801084a:	ed94 6a00 	vldr	s12, [r4]
 801084e:	edd0 6a00 	vldr	s13, [r0]
 8010852:	fec5 7aa7 	vmaxnm.f32	s15, s11, s15
 8010856:	fec5 5ac7 	vminnm.f32	s11, s11, s14
 801085a:	ed91 7a00 	vldr	s14, [r1]
 801085e:	fec6 7a27 	vmaxnm.f32	s15, s12, s15
 8010862:	fe86 6a65 	vminnm.f32	s12, s12, s11
 8010866:	fec6 7aa7 	vmaxnm.f32	s15, s13, s15
 801086a:	fec6 6ac6 	vminnm.f32	s13, s13, s12
 801086e:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8010872:	fe87 7a66 	vminnm.f32	s14, s14, s13
 8010876:	d109      	bne.n	801088c <m_kalman_3gyro.isra.0.constprop.0+0x2d8c>
 8010878:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 801087c:	f501 61b8 	add.w	r1, r1, #1472	; 0x5c0
 8010880:	edd1 6a00 	vldr	s13, [r1]
 8010884:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8010888:	fe87 7a66 	vminnm.f32	s14, s14, s13
 801088c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010890:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8010a60 <m_kalman_3gyro.isra.0.constprop.0+0x2f60>
 8010894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801089c:	dc76      	bgt.n	801098c <m_kalman_3gyro.isra.0.constprop.0+0x2e8c>
 801089e:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80108a2:	2b05      	cmp	r3, #5
 80108a4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80108a6:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 80108aa:	ed90 7a00 	vldr	s14, [r0]
 80108ae:	ed91 6a00 	vldr	s12, [r1]
 80108b2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80108b4:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80108b6:	edd0 5a00 	vldr	s11, [r0]
 80108ba:	edd1 6a00 	vldr	s13, [r1]
 80108be:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80108c0:	fec7 7a25 	vmaxnm.f32	s15, s14, s11
 80108c4:	fec7 5a65 	vminnm.f32	s11, s14, s11
 80108c8:	fec6 7a27 	vmaxnm.f32	s15, s12, s15
 80108cc:	ed91 7a00 	vldr	s14, [r1]
 80108d0:	fec6 7aa7 	vmaxnm.f32	s15, s13, s15
 80108d4:	fe86 6a65 	vminnm.f32	s12, s12, s11
 80108d8:	fec6 6ac6 	vminnm.f32	s13, s13, s12
 80108dc:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80108e0:	fe87 7a66 	vminnm.f32	s14, s14, s13
 80108e4:	d02d      	beq.n	8010942 <m_kalman_3gyro.isra.0.constprop.0+0x2e42>
 80108e6:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80108ea:	2b0a      	cmp	r3, #10
 80108ec:	f201 5534 	addw	r5, r1, #1332	; 0x534
 80108f0:	f501 64ab 	add.w	r4, r1, #1368	; 0x558
 80108f4:	f201 507c 	addw	r0, r1, #1404	; 0x57c
 80108f8:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 80108fc:	edd5 5a00 	vldr	s11, [r5]
 8010900:	ed94 6a00 	vldr	s12, [r4]
 8010904:	edd0 6a00 	vldr	s13, [r0]
 8010908:	fec5 7aa7 	vmaxnm.f32	s15, s11, s15
 801090c:	fec5 5ac7 	vminnm.f32	s11, s11, s14
 8010910:	ed91 7a00 	vldr	s14, [r1]
 8010914:	fec6 7a27 	vmaxnm.f32	s15, s12, s15
 8010918:	fe86 6a65 	vminnm.f32	s12, s12, s11
 801091c:	fec6 7aa7 	vmaxnm.f32	s15, s13, s15
 8010920:	fec6 6ac6 	vminnm.f32	s13, s13, s12
 8010924:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 8010928:	fe87 7a66 	vminnm.f32	s14, s14, s13
 801092c:	d109      	bne.n	8010942 <m_kalman_3gyro.isra.0.constprop.0+0x2e42>
 801092e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8010932:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 8010936:	edd3 6a00 	vldr	s13, [r3]
 801093a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 801093e:	fe87 7a66 	vminnm.f32	s14, s14, s13
 8010942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010946:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8010a60 <m_kalman_3gyro.isra.0.constprop.0+0x2f60>
 801094a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010952:	dc1b      	bgt.n	801098c <m_kalman_3gyro.isra.0.constprop.0+0x2e8c>
 8010954:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010956:	2b00      	cmp	r3, #0
 8010958:	f43e ade7 	beq.w	800f52a <m_kalman_3gyro.isra.0.constprop.0+0x1a2a>
 801095c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8010960:	2b01      	cmp	r3, #1
 8010962:	f040 8708 	bne.w	8011776 <m_kalman_3gyro.isra.0.constprop.0+0x3c76>
 8010966:	2a0a      	cmp	r2, #10
 8010968:	f000 86a4 	beq.w	80116b4 <m_kalman_3gyro.isra.0.constprop.0+0x3bb4>
 801096c:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8010970:	2300      	movs	r3, #0
 8010972:	3201      	adds	r2, #1
 8010974:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 8010978:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 801097c:	f8c1 2450 	str.w	r2, [r1, #1104]	; 0x450
 8010980:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 8010984:	f8c1 345c 	str.w	r3, [r1, #1116]	; 0x45c
 8010988:	f7fe bdee 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 801098c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801098e:	2301      	movs	r3, #1
 8010990:	2a00      	cmp	r2, #0
 8010992:	f43e adca 	beq.w	800f52a <m_kalman_3gyro.isra.0.constprop.0+0x1a2a>
 8010996:	2a02      	cmp	r2, #2
 8010998:	f000 8749 	beq.w	801182e <m_kalman_3gyro.isra.0.constprop.0+0x3d2e>
 801099c:	2a04      	cmp	r2, #4
 801099e:	f000 8255 	beq.w	8010e4c <m_kalman_3gyro.isra.0.constprop.0+0x334c>
 80109a2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010a64 <m_kalman_3gyro.isra.0.constprop.0+0x2f64>
 80109a6:	2300      	movs	r3, #0
 80109a8:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 80109ac:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 80109b0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80109b4:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80109b8:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80109bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c0:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 80109c4:	f8c0 3450 	str.w	r3, [r0, #1104]	; 0x450
 80109c8:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 80109cc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80109d0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 80109d4:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 80109d8:	67c3      	str	r3, [r0, #124]	; 0x7c
 80109da:	f6be adcd 	bge.w	800f578 <m_kalman_3gyro.isra.0.constprop.0+0x1a78>
 80109de:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 80109e2:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 80109e6:	2b31      	cmp	r3, #49	; 0x31
 80109e8:	f73e adcf 	bgt.w	800f58a <m_kalman_3gyro.isra.0.constprop.0+0x1a8a>
 80109ec:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80109f0:	2200      	movs	r2, #0
 80109f2:	3301      	adds	r3, #1
 80109f4:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 80109f8:	f8c1 3458 	str.w	r3, [r1, #1112]	; 0x458
 80109fc:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 8010a00:	f7fe bdc3 	b.w	800f58a <m_kalman_3gyro.isra.0.constprop.0+0x1a8a>
 8010a04:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8010a08:	e4a1      	b.n	801034e <m_kalman_3gyro.isra.0.constprop.0+0x284e>
 8010a0a:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8010a0e:	e4f2      	b.n	80103f6 <m_kalman_3gyro.isra.0.constprop.0+0x28f6>
 8010a10:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010a14:	e4fb      	b.n	801040e <m_kalman_3gyro.isra.0.constprop.0+0x290e>
 8010a16:	ee27 9a89 	vmul.f32	s18, s15, s18
 8010a1a:	e4a4      	b.n	8010366 <m_kalman_3gyro.isra.0.constprop.0+0x2866>
 8010a1c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8010a20:	e4ad      	b.n	801037e <m_kalman_3gyro.isra.0.constprop.0+0x287e>
 8010a22:	ee67 baab 	vmul.f32	s23, s15, s23
 8010a26:	e4b6      	b.n	8010396 <m_kalman_3gyro.isra.0.constprop.0+0x2896>
 8010a28:	ee27 ba8b 	vmul.f32	s22, s15, s22
 8010a2c:	e4bf      	b.n	80103ae <m_kalman_3gyro.isra.0.constprop.0+0x28ae>
 8010a2e:	ee67 aaaa 	vmul.f32	s21, s15, s21
 8010a32:	e4c8      	b.n	80103c6 <m_kalman_3gyro.isra.0.constprop.0+0x28c6>
 8010a34:	ee27 aa8a 	vmul.f32	s20, s15, s20
 8010a38:	e4d1      	b.n	80103de <m_kalman_3gyro.isra.0.constprop.0+0x28de>
 8010a3a:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8010a3e:	ee17 0a90 	vmov	r0, s15
 8010a42:	f7ef fda1 	bl	8000588 <__aeabi_f2d>
 8010a46:	ec41 0b10 	vmov	d0, r0, r1
 8010a4a:	f009 ffff 	bl	801aa4c <sqrt>
 8010a4e:	ec51 0b10 	vmov	r0, r1, d0
 8010a52:	f7f0 f8e9 	bl	8000c28 <__aeabi_d2f>
 8010a56:	ee0a 0a10 	vmov	s20, r0
 8010a5a:	f7ff b847 	b.w	800faec <m_kalman_3gyro.isra.0.constprop.0+0x1fec>
 8010a5e:	bf00      	nop
 8010a60:	3be56042 	.word	0x3be56042
 8010a64:	42480000 	.word	0x42480000
 8010a68:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8010a6c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 8010a70:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 8010a74:	f603 0178 	addw	r1, r3, #2168	; 0x878
 8010a78:	f603 0274 	addw	r2, r3, #2164	; 0x874
 8010a7c:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8010a80:	edd1 fa00 	vldr	s31, [r1]
 8010a84:	ed92 da00 	vldr	s26, [r2]
 8010a88:	ee6f 7aaf 	vmul.f32	s15, s31, s31
 8010a8c:	edd3 ca00 	vldr	s25, [r3]
 8010a90:	eeed 7a0d 	vfma.f32	s15, s26, s26
 8010a94:	eeec 7aac 	vfma.f32	s15, s25, s25
 8010a98:	ee17 0a90 	vmov	r0, s15
 8010a9c:	f7ef fd74 	bl	8000588 <__aeabi_f2d>
 8010aa0:	ec41 0b10 	vmov	d0, r0, r1
 8010aa4:	f009 ffd2 	bl	801aa4c <sqrt>
 8010aa8:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8010aac:	f603 0184 	addw	r1, r3, #2180	; 0x884
 8010ab0:	f503 6208 	add.w	r2, r3, #2176	; 0x880
 8010ab4:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8010ab8:	edd1 ea00 	vldr	s29, [r1]
 8010abc:	ed92 fa00 	vldr	s30, [r2]
 8010ac0:	ee6e 7aae 	vmul.f32	s15, s29, s29
 8010ac4:	ed93 ea00 	vldr	s28, [r3]
 8010ac8:	ec57 6b10 	vmov	r6, r7, d0
 8010acc:	eeef 7a0f 	vfma.f32	s15, s30, s30
 8010ad0:	eeee 7a0e 	vfma.f32	s15, s28, s28
 8010ad4:	ee17 0a90 	vmov	r0, s15
 8010ad8:	f7ef fd56 	bl	8000588 <__aeabi_f2d>
 8010adc:	ec41 0b10 	vmov	d0, r0, r1
 8010ae0:	f009 ffb4 	bl	801aa4c <sqrt>
 8010ae4:	ec51 0b10 	vmov	r0, r1, d0
 8010ae8:	f7f0 f89e 	bl	8000c28 <__aeabi_d2f>
 8010aec:	ee07 0a90 	vmov	s15, r0
 8010af0:	4bd1      	ldr	r3, [pc, #836]	; (8010e38 <m_kalman_3gyro.isra.0.constprop.0+0x3338>)
 8010af2:	4639      	mov	r1, r7
 8010af4:	eeca 6a27 	vdiv.f32	s13, s20, s15
 8010af8:	4630      	mov	r0, r6
 8010afa:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c
 8010afe:	edcd 6a00 	vstr	s13, [sp]
 8010b02:	f7f0 f891 	bl	8000c28 <__aeabi_d2f>
 8010b06:	ee07 0a90 	vmov	s15, r0
 8010b0a:	eddd 6a00 	vldr	s13, [sp]
 8010b0e:	ee8a 7a27 	vdiv.f32	s14, s20, s15
 8010b12:	ee26 fa8f 	vmul.f32	s30, s13, s30
 8010b16:	ee26 ea8e 	vmul.f32	s28, s13, s28
 8010b1a:	ee66 eaae 	vmul.f32	s29, s13, s29
 8010b1e:	ee67 7a2c 	vmul.f32	s15, s14, s25
 8010b22:	ee67 6a0d 	vmul.f32	s13, s14, s26
 8010b26:	ee27 7a2f 	vmul.f32	s14, s14, s31
 8010b2a:	ee6f ca67 	vnmul.f32	s25, s30, s15
 8010b2e:	ee66 faee 	vnmul.f32	s31, s13, s29
 8010b32:	ee27 da4e 	vnmul.f32	s26, s14, s28
 8010b36:	eeee ca26 	vfma.f32	s25, s28, s13
 8010b3a:	eee7 fa0f 	vfma.f32	s31, s14, s30
 8010b3e:	eea7 daae 	vfma.f32	s26, s15, s29
 8010b42:	ee6c 7aac 	vmul.f32	s15, s25, s25
 8010b46:	eeed 7a0d 	vfma.f32	s15, s26, s26
 8010b4a:	eeef 7aaf 	vfma.f32	s15, s31, s31
 8010b4e:	ee17 0a90 	vmov	r0, s15
 8010b52:	f7ef fd19 	bl	8000588 <__aeabi_f2d>
 8010b56:	ec41 0b10 	vmov	d0, r0, r1
 8010b5a:	f009 ff77 	bl	801aa4c <sqrt>
 8010b5e:	ec51 0b10 	vmov	r0, r1, d0
 8010b62:	f7f0 f861 	bl	8000c28 <__aeabi_d2f>
 8010b66:	ee07 0a10 	vmov	s14, r0
 8010b6a:	aa7b      	add	r2, sp, #492	; 0x1ec
 8010b6c:	4640      	mov	r0, r8
 8010b6e:	eeca 7a07 	vdiv.f32	s15, s20, s14
 8010b72:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010b74:	ed88 fa02 	vstr	s30, [r8, #8]
 8010b78:	edc8 ea05 	vstr	s29, [r8, #20]
 8010b7c:	ed88 ea08 	vstr	s28, [r8, #32]
 8010b80:	ee2d da27 	vmul.f32	s26, s26, s15
 8010b84:	ee6c caa7 	vmul.f32	s25, s25, s15
 8010b88:	ee6f faa7 	vmul.f32	s31, s31, s15
 8010b8c:	ee6d 6a4e 	vnmul.f32	s13, s26, s28
 8010b90:	ed88 da01 	vstr	s26, [r8, #4]
 8010b94:	ee2f 7a6c 	vnmul.f32	s14, s30, s25
 8010b98:	edc8 ca04 	vstr	s25, [r8, #16]
 8010b9c:	ee6e 7aef 	vnmul.f32	s15, s29, s31
 8010ba0:	edc8 fa07 	vstr	s31, [r8, #28]
 8010ba4:	eeef 6a8f 	vfma.f32	s13, s31, s30
 8010ba8:	eead 7a2e 	vfma.f32	s14, s26, s29
 8010bac:	eeee 7a2c 	vfma.f32	s15, s28, s25
 8010bb0:	edc8 6a03 	vstr	s13, [r8, #12]
 8010bb4:	ed88 7a06 	vstr	s14, [r8, #24]
 8010bb8:	edc8 7a00 	vstr	s15, [r8]
 8010bbc:	f7fa fd1e 	bl	800b5fc <m_mldivide>
 8010bc0:	a949      	add	r1, sp, #292	; 0x124
 8010bc2:	a87b      	add	r0, sp, #492	; 0x1ec
 8010bc4:	f7fb fb2e 	bl	800c224 <m_dcm2q_eml>
 8010bc8:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8010e3c <m_kalman_3gyro.isra.0.constprop.0+0x333c>
 8010bcc:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8010bce:	eeb0 7a67 	vmov.f32	s14, s15
 8010bd2:	994a      	ldr	r1, [sp, #296]	; 0x128
 8010bd4:	eef0 6a67 	vmov.f32	s13, s15
 8010bd8:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
 8010bda:	934d      	str	r3, [sp, #308]	; 0x134
 8010bdc:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8010bde:	914e      	str	r1, [sp, #312]	; 0x138
 8010be0:	924f      	str	r2, [sp, #316]	; 0x13c
 8010be2:	9350      	str	r3, [sp, #320]	; 0x140
 8010be4:	ed94 5a06 	vldr	s10, [r4, #24]
 8010be8:	3424      	adds	r4, #36	; 0x24
 8010bea:	ed54 5a02 	vldr	s11, [r4, #-8]
 8010bee:	ed14 6a01 	vldr	s12, [r4, #-4]
 8010bf2:	42a5      	cmp	r5, r4
 8010bf4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010bf8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010bfc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010c00:	d1f0      	bne.n	8010be4 <m_kalman_3gyro.isra.0.constprop.0+0x30e4>
 8010c02:	ed9d 6a15 	vldr	s12, [sp, #84]	; 0x54
 8010c06:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 8010c0a:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 8010c0e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8010c12:	eddd 5a0e 	vldr	s11, [sp, #56]	; 0x38
 8010c16:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 8010e40 <m_kalman_3gyro.isra.0.constprop.0+0x3340>
 8010c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1e:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010c22:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010c26:	bfcc      	ite	gt
 8010c28:	2301      	movgt	r3, #1
 8010c2a:	2300      	movle	r3, #0
 8010c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c30:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010c3c:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 8010c40:	bfd8      	it	le
 8010c42:	2300      	movle	r3, #0
 8010c44:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 8010c48:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 8010c4c:	b14b      	cbz	r3, 8010c62 <m_kalman_3gyro.isra.0.constprop.0+0x3162>
 8010c4e:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8010c52:	ed9d 7a13 	vldr	s14, [sp, #76]	; 0x4c
 8010c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5e:	f73f ad1f 	bgt.w	80106a0 <m_kalman_3gyro.isra.0.constprop.0+0x2ba0>
 8010c62:	2301      	movs	r3, #1
 8010c64:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8010c68:	f240 1201 	movw	r2, #257	; 0x101
 8010c6c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8010c70:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 8010c74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010c76:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8010c7a:	edd3 7a00 	vldr	s15, [r3]
 8010c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c82:	eef4 7ae9 	vcmpe.f32	s15, s19
 8010c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c8a:	f2c0 8392 	blt.w	80113b2 <m_kalman_3gyro.isra.0.constprop.0+0x38b2>
 8010c8e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8010c92:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	f040 8467 	bne.w	801156a <m_kalman_3gyro.isra.0.constprop.0+0x3a6a>
 8010c9c:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 8010ca0:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8010e44 <m_kalman_3gyro.isra.0.constprop.0+0x3344>
 8010ca4:	edd3 6a06 	vldr	s13, [r3, #24]
 8010ca8:	ed93 7a07 	vldr	s14, [r3, #28]
 8010cac:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010cb0:	edd3 7a08 	vldr	s15, [r3, #32]
 8010cb4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010cb8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010cbc:	edc3 6a06 	vstr	s13, [r3, #24]
 8010cc0:	ed83 7a07 	vstr	s14, [r3, #28]
 8010cc4:	edc3 7a08 	vstr	s15, [r3, #32]
 8010cc8:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8010ccc:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 8010cd0:	3301      	adds	r3, #1
 8010cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cd6:	f000 84d4 	beq.w	8011682 <m_kalman_3gyro.isra.0.constprop.0+0x3b82>
 8010cda:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8010cde:	2b31      	cmp	r3, #49	; 0x31
 8010ce0:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 8010ce4:	f200 84cd 	bhi.w	8011682 <m_kalman_3gyro.isra.0.constprop.0+0x3b82>
 8010ce8:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8010cec:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
 8010cf0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010cf4:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8010cf8:	f000 84b8 	beq.w	801166c <m_kalman_3gyro.isra.0.constprop.0+0x3b6c>
 8010cfc:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8010d00:	f040 8372 	bne.w	80113e8 <m_kalman_3gyro.isra.0.constprop.0+0x38e8>
 8010d04:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8010d08:	2301      	movs	r3, #1
 8010d0a:	f8dd 46d8 	ldr.w	r4, [sp, #1752]	; 0x6d8
 8010d0e:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8010d12:	f602 0198 	addw	r1, r2, #2200	; 0x898
 8010d16:	f884 38a4 	strb.w	r3, [r4, #2212]	; 0x8a4
 8010d1a:	f602 029c 	addw	r2, r2, #2204	; 0x89c
 8010d1e:	6008      	str	r0, [r1, #0]
 8010d20:	f504 630a 	add.w	r3, r4, #2208	; 0x8a0
 8010d24:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8010d28:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8010d2c:	6010      	str	r0, [r2, #0]
 8010d2e:	6019      	str	r1, [r3, #0]
 8010d30:	eddd 7a4e 	vldr	s15, [sp, #312]	; 0x138
 8010d34:	eddd 6a4d 	vldr	s13, [sp, #308]	; 0x134
 8010d38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010d3c:	ed9d 7a4f 	vldr	s14, [sp, #316]	; 0x13c
 8010d40:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010d44:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010d48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010d4c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010d50:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010d54:	ee17 0a90 	vmov	r0, s15
 8010d58:	f7ef fc16 	bl	8000588 <__aeabi_f2d>
 8010d5c:	ec41 0b10 	vmov	d0, r0, r1
 8010d60:	f009 fe74 	bl	801aa4c <sqrt>
 8010d64:	ec51 0b10 	vmov	r0, r1, d0
 8010d68:	f7ef ff5e 	bl	8000c28 <__aeabi_d2f>
 8010d6c:	f7ef fc0c 	bl	8000588 <__aeabi_f2d>
 8010d70:	a32f      	add	r3, pc, #188	; (adr r3, 8010e30 <m_kalman_3gyro.isra.0.constprop.0+0x3330>)
 8010d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d76:	f7ef fed1 	bl	8000b1c <__aeabi_dcmplt>
 8010d7a:	2800      	cmp	r0, #0
 8010d7c:	f000 83fd 	beq.w	801157a <m_kalman_3gyro.isra.0.constprop.0+0x3a7a>
 8010d80:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 8010d84:	2200      	movs	r2, #0
 8010d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	f7ef febc 	bl	8000b08 <__aeabi_dcmpeq>
 8010d90:	2800      	cmp	r0, #0
 8010d92:	f000 8439 	beq.w	8011608 <m_kalman_3gyro.isra.0.constprop.0+0x3b08>
 8010d96:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8010d9a:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8010d9e:	2b32      	cmp	r3, #50	; 0x32
 8010da0:	f040 8433 	bne.w	801160a <m_kalman_3gyro.isra.0.constprop.0+0x3b0a>
 8010da4:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 8010da8:	2201      	movs	r2, #1
 8010daa:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8010e48 <m_kalman_3gyro.isra.0.constprop.0+0x3348>
 8010dae:	edd3 7a06 	vldr	s15, [r3, #24]
 8010db2:	f8dd 1690 	ldr.w	r1, [sp, #1680]	; 0x690
 8010db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010dba:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8010dbe:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 8010dc2:	edc1 7a06 	vstr	s15, [r1, #24]
 8010dc6:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8010dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010dce:	f881 2202 	strb.w	r2, [r1, #514]	; 0x202
 8010dd2:	f8dd 1690 	ldr.w	r1, [sp, #1680]	; 0x690
 8010dd6:	edd1 7a07 	vldr	s15, [r1, #28]
 8010dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010dde:	edc1 7a07 	vstr	s15, [r1, #28]
 8010de2:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8010de6:	f881 2203 	strb.w	r2, [r1, #515]	; 0x203
 8010dea:	f8dd 1690 	ldr.w	r1, [sp, #1680]	; 0x690
 8010dee:	edd1 7a08 	vldr	s15, [r1, #32]
 8010df2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010df6:	edc1 7a08 	vstr	s15, [r1, #32]
 8010dfa:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8010dfe:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 8010e02:	f000 852d 	beq.w	8011860 <m_kalman_3gyro.isra.0.constprop.0+0x3d60>
 8010e06:	3301      	adds	r3, #1
 8010e08:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8010e0c:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 8010e10:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 8010e14:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8010e16:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8010e18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010e1a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 8010e1e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 8010e22:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8010e26:	f7fe bb9f 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 8010e2a:	bf00      	nop
 8010e2c:	f3af 8000 	nop.w
 8010e30:	47ae147b 	.word	0x47ae147b
 8010e34:	3f747ae1 	.word	0x3f747ae1
 8010e38:	20001448 	.word	0x20001448
 8010e3c:	00000000 	.word	0x00000000
 8010e40:	3d088889 	.word	0x3d088889
 8010e44:	3eaaaaab 	.word	0x3eaaaaab
 8010e48:	3e4ccccd 	.word	0x3e4ccccd
 8010e4c:	4bec      	ldr	r3, [pc, #944]	; (8011200 <m_kalman_3gyro.isra.0.constprop.0+0x3700>)
 8010e4e:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
 8010e52:	2a04      	cmp	r2, #4
 8010e54:	f240 83e7 	bls.w	8011626 <m_kalman_3gyro.isra.0.constprop.0+0x3b26>
 8010e58:	4be9      	ldr	r3, [pc, #932]	; (8011200 <m_kalman_3gyro.isra.0.constprop.0+0x3700>)
 8010e5a:	eddf 7aea 	vldr	s15, [pc, #936]	; 8011204 <m_kalman_3gyro.isra.0.constprop.0+0x3704>
 8010e5e:	edd3 3a74 	vldr	s7, [r3, #464]	; 0x1d0
 8010e62:	461c      	mov	r4, r3
 8010e64:	ed93 7a73 	vldr	s14, [r3, #460]	; 0x1cc
 8010e68:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8010e6c:	eddf 5ae6 	vldr	s11, [pc, #920]	; 8011208 <m_kalman_3gyro.isra.0.constprop.0+0x3708>
 8010e70:	ed93 4a71 	vldr	s8, [r3, #452]	; 0x1c4
 8010e74:	ee27 6a27 	vmul.f32	s12, s14, s15
 8010e78:	edd3 4a70 	vldr	s9, [r3, #448]	; 0x1c0
 8010e7c:	eea4 5a25 	vfma.f32	s10, s8, s11
 8010e80:	edd3 1a75 	vldr	s3, [r3, #468]	; 0x1d4
 8010e84:	edd3 2a82 	vldr	s5, [r3, #520]	; 0x208
 8010e88:	eea4 6aa5 	vfma.f32	s12, s9, s11
 8010e8c:	edc4 3a71 	vstr	s7, [r4, #452]	; 0x1c4
 8010e90:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8010e94:	edd4 3a83 	vldr	s7, [r4, #524]	; 0x20c
 8010e98:	ee22 aaa7 	vmul.f32	s20, s5, s15
 8010e9c:	edc4 4a6d 	vstr	s9, [r4, #436]	; 0x1b4
 8010ea0:	edd4 4a84 	vldr	s9, [r4, #528]	; 0x210
 8010ea4:	ed84 7a70 	vstr	s14, [r4, #448]	; 0x1c0
 8010ea8:	ee23 7aa7 	vmul.f32	s14, s7, s15
 8010eac:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8010eb0:	ed93 1a72 	vldr	s2, [r3, #456]	; 0x1c8
 8010eb4:	ed93 2a7f 	vldr	s4, [r3, #508]	; 0x1fc
 8010eb8:	ed93 3a80 	vldr	s6, [r3, #512]	; 0x200
 8010ebc:	eee1 6a25 	vfma.f32	s13, s2, s11
 8010ec0:	ed84 4a6e 	vstr	s8, [r4, #440]	; 0x1b8
 8010ec4:	eea2 aa25 	vfma.f32	s20, s4, s11
 8010ec8:	ed94 4a81 	vldr	s8, [r4, #516]	; 0x204
 8010ecc:	eea3 7a25 	vfma.f32	s14, s6, s11
 8010ed0:	f8d3 01d8 	ldr.w	r0, [r3, #472]	; 0x1d8
 8010ed4:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
 8010ed8:	eee4 7a25 	vfma.f32	s15, s8, s11
 8010edc:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8010ee0:	eef0 5a45 	vmov.f32	s11, s10
 8010ee4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010ee8:	ed84 1a6f 	vstr	s2, [r4, #444]	; 0x1bc
 8010eec:	edc4 1a72 	vstr	s3, [r4, #456]	; 0x1c8
 8010ef0:	ed84 2a7c 	vstr	s4, [r4, #496]	; 0x1f0
 8010ef4:	edc4 2a7f 	vstr	s5, [r4, #508]	; 0x1fc
 8010ef8:	ed84 3a7d 	vstr	s6, [r4, #500]	; 0x1f4
 8010efc:	edc4 3a80 	vstr	s7, [r4, #512]	; 0x200
 8010f00:	ed84 4a7e 	vstr	s8, [r4, #504]	; 0x1f8
 8010f04:	edc4 4a81 	vstr	s9, [r4, #516]	; 0x204
 8010f08:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
 8010f0c:	eddf 4abf 	vldr	s9, [pc, #764]	; 801120c <m_kalman_3gyro.isra.0.constprop.0+0x370c>
 8010f10:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
 8010f14:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8010f18:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
 8010f1c:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8010f20:	edd4 3a7a 	vldr	s7, [r4, #488]	; 0x1e8
 8010f24:	ed94 1a79 	vldr	s2, [r4, #484]	; 0x1e4
 8010f28:	eee3 5aa4 	vfma.f32	s11, s7, s9
 8010f2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010f2e:	eea1 6a24 	vfma.f32	s12, s2, s9
 8010f32:	ed9f 5ab7 	vldr	s10, [pc, #732]	; 8011210 <m_kalman_3gyro.isra.0.constprop.0+0x3710>
 8010f36:	edd1 0a01 	vldr	s1, [r1, #4]
 8010f3a:	edd1 1a00 	vldr	s3, [r1]
 8010f3e:	ed94 0a7b 	vldr	s0, [r4, #492]	; 0x1ec
 8010f42:	ed94 4a8a 	vldr	s8, [r4, #552]	; 0x228
 8010f46:	eee0 5a85 	vfma.f32	s11, s1, s10
 8010f4a:	ed94 ca88 	vldr	s24, [r4, #544]	; 0x220
 8010f4e:	eea1 6a85 	vfma.f32	s12, s3, s10
 8010f52:	ed94 da89 	vldr	s26, [r4, #548]	; 0x224
 8010f56:	eee0 6a24 	vfma.f32	s13, s0, s9
 8010f5a:	ed91 2a02 	vldr	s4, [r1, #8]
 8010f5e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010f62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010f64:	eeac aa24 	vfma.f32	s20, s24, s9
 8010f68:	edc4 3a77 	vstr	s7, [r4, #476]	; 0x1dc
 8010f6c:	eead 7a24 	vfma.f32	s14, s26, s9
 8010f70:	ed91 3a01 	vldr	s6, [r1, #4]
 8010f74:	ee65 4aa5 	vmul.f32	s9, s11, s11
 8010f78:	edd1 2a00 	vldr	s5, [r1]
 8010f7c:	edd1 3a02 	vldr	s7, [r1, #8]
 8010f80:	eee2 6a05 	vfma.f32	s13, s4, s10
 8010f84:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8010f88:	eee6 4a06 	vfma.f32	s9, s12, s12
 8010f8c:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8010f90:	eee3 7a85 	vfma.f32	s15, s7, s10
 8010f94:	edc4 5a8c 	vstr	s11, [r4, #560]	; 0x230
 8010f98:	eea3 7a05 	vfma.f32	s14, s6, s10
 8010f9c:	ed84 6a8b 	vstr	s12, [r4, #556]	; 0x22c
 8010fa0:	eea2 aa85 	vfma.f32	s20, s5, s10
 8010fa4:	ed84 1a76 	vstr	s2, [r4, #472]	; 0x1d8
 8010fa8:	edc4 1a79 	vstr	s3, [r4, #484]	; 0x1e4
 8010fac:	edc4 6a8d 	vstr	s13, [r4, #564]	; 0x234
 8010fb0:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8010fb4:	ed84 2a7b 	vstr	s4, [r4, #492]	; 0x1ec
 8010fb8:	edc4 2a88 	vstr	s5, [r4, #544]	; 0x220
 8010fbc:	eef0 da67 	vmov.f32	s27, s15
 8010fc0:	eef0 ca47 	vmov.f32	s25, s14
 8010fc4:	ed84 3a89 	vstr	s6, [r4, #548]	; 0x224
 8010fc8:	edc4 3a8a 	vstr	s7, [r4, #552]	; 0x228
 8010fcc:	edc4 0a7a 	vstr	s1, [r4, #488]	; 0x1e8
 8010fd0:	ed84 0a78 	vstr	s0, [r4, #480]	; 0x1e0
 8010fd4:	ee14 0a90 	vmov	r0, s9
 8010fd8:	ed84 aa8e 	vstr	s20, [r4, #568]	; 0x238
 8010fdc:	ed84 ca85 	vstr	s24, [r4, #532]	; 0x214
 8010fe0:	ed84 da86 	vstr	s26, [r4, #536]	; 0x218
 8010fe4:	ed84 4a87 	vstr	s8, [r4, #540]	; 0x21c
 8010fe8:	edc4 7a90 	vstr	s15, [r4, #576]	; 0x240
 8010fec:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8010ff0:	ed84 7a8f 	vstr	s14, [r4, #572]	; 0x23c
 8010ff4:	f7ef fac8 	bl	8000588 <__aeabi_f2d>
 8010ff8:	ec41 0b10 	vmov	d0, r0, r1
 8010ffc:	f009 fd26 	bl	801aa4c <sqrt>
 8011000:	ee2c 7aac 	vmul.f32	s14, s25, s25
 8011004:	ec55 4b10 	vmov	r4, r5, d0
 8011008:	eeaa 7a0a 	vfma.f32	s14, s20, s20
 801100c:	eead 7aad 	vfma.f32	s14, s27, s27
 8011010:	ee17 0a10 	vmov	r0, s14
 8011014:	f7ef fab8 	bl	8000588 <__aeabi_f2d>
 8011018:	ec41 0b10 	vmov	d0, r0, r1
 801101c:	f009 fd16 	bl	801aa4c <sqrt>
 8011020:	4620      	mov	r0, r4
 8011022:	4629      	mov	r1, r5
 8011024:	ec55 4b10 	vmov	r4, r5, d0
 8011028:	f7ef fdfe 	bl	8000c28 <__aeabi_d2f>
 801102c:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8011030:	ee07 0a10 	vmov	s14, r0
 8011034:	eef4 7a47 	vcmp.f32	s15, s14
 8011038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103c:	f300 821c 	bgt.w	8011478 <m_kalman_3gyro.isra.0.constprop.0+0x3978>
 8011040:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 8011044:	f7fe ba90 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 8011048:	2200      	movs	r2, #0
 801104a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 801104e:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8011052:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8011056:	4613      	mov	r3, r2
 8011058:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 801105c:	f7fe bc37 	b.w	800f8ce <m_kalman_3gyro.isra.0.constprop.0+0x1dce>
 8011060:	2600      	movs	r6, #0
 8011062:	4f6c      	ldr	r7, [pc, #432]	; (8011214 <m_kalman_3gyro.isra.0.constprop.0+0x3714>)
 8011064:	f7fd bd29 	b.w	800eaba <m_kalman_3gyro.isra.0.constprop.0+0xfba>
 8011068:	eeb1 ca04 	vmov.f32	s24, #20	; 0x40a00000  5.0
 801106c:	f7fe b9ae 	b.w	800f3cc <m_kalman_3gyro.isra.0.constprop.0+0x18cc>
 8011070:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011072:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011076:	ed93 7a00 	vldr	s14, [r3]
 801107a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011082:	f340 8188 	ble.w	8011396 <m_kalman_3gyro.isra.0.constprop.0+0x3896>
 8011086:	2300      	movs	r3, #0
 8011088:	f881 31ff 	strb.w	r3, [r1, #511]	; 0x1ff
 801108c:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 8011090:	f7fe bc09 	b.w	800f8a6 <m_kalman_3gyro.isra.0.constprop.0+0x1da6>
 8011094:	f8d3 68b0 	ldr.w	r6, [r3, #2224]	; 0x8b0
 8011098:	2e00      	cmp	r6, #0
 801109a:	f000 80c9 	beq.w	8011230 <m_kalman_3gyro.isra.0.constprop.0+0x3730>
 801109e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80110a0:	6818      	ldr	r0, [r3, #0]
 80110a2:	f7ef fa71 	bl	8000588 <__aeabi_f2d>
 80110a6:	a354      	add	r3, pc, #336	; (adr r3, 80111f8 <m_kalman_3gyro.isra.0.constprop.0+0x36f8>)
 80110a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ac:	f7ef fd54 	bl	8000b58 <__aeabi_dcmpgt>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	f000 80bd 	beq.w	8011230 <m_kalman_3gyro.isra.0.constprop.0+0x3730>
 80110b6:	3e01      	subs	r6, #1
 80110b8:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 80110bc:	f8c3 68b0 	str.w	r6, [r3, #2224]	; 0x8b0
 80110c0:	f7fe bca6 	b.w	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 80110c4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80110c8:	ee37 8ac8 	vsub.f32	s16, s15, s16
 80110cc:	eef0 7ac8 	vabs.f32	s15, s16
 80110d0:	ee17 0a90 	vmov	r0, s15
 80110d4:	f7ef fa58 	bl	8000588 <__aeabi_f2d>
 80110d8:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 80110dc:	4604      	mov	r4, r0
 80110de:	460d      	mov	r5, r1
 80110e0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80110e2:	f7ef fa51 	bl	8000588 <__aeabi_f2d>
 80110e6:	4606      	mov	r6, r0
 80110e8:	460f      	mov	r7, r1
 80110ea:	4620      	mov	r0, r4
 80110ec:	4629      	mov	r1, r5
 80110ee:	4632      	mov	r2, r6
 80110f0:	463b      	mov	r3, r7
 80110f2:	f7ef fd27 	bl	8000b44 <__aeabi_dcmpge>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	f000 80f1 	beq.w	80112de <m_kalman_3gyro.isra.0.constprop.0+0x37de>
 80110fc:	4620      	mov	r0, r4
 80110fe:	4629      	mov	r1, r5
 8011100:	f7ef fd92 	bl	8000c28 <__aeabi_d2f>
 8011104:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 8011108:	ee68 7a08 	vmul.f32	s15, s16, s16
 801110c:	ed93 7a03 	vldr	s14, [r3, #12]
 8011110:	6298      	str	r0, [r3, #40]	; 0x28
 8011112:	ee67 6a07 	vmul.f32	s13, s14, s14
 8011116:	eef4 6a67 	vcmp.f32	s13, s15
 801111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801111e:	f57e ac3a 	bpl.w	800f996 <m_kalman_3gyro.isra.0.constprop.0+0x1e96>
 8011122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011126:	eef4 7a66 	vcmp.f32	s15, s13
 801112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112e:	f77e ac32 	ble.w	800f996 <m_kalman_3gyro.isra.0.constprop.0+0x1e96>
 8011132:	ed93 6a04 	vldr	s12, [r3, #16]
 8011136:	ee27 7a27 	vmul.f32	s14, s14, s15
 801113a:	edd3 6a05 	vldr	s13, [r3, #20]
 801113e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011146:	ed83 7a03 	vstr	s14, [r3, #12]
 801114a:	ed83 6a04 	vstr	s12, [r3, #16]
 801114e:	edc3 7a05 	vstr	s15, [r3, #20]
 8011152:	f7fe bc20 	b.w	800f996 <m_kalman_3gyro.isra.0.constprop.0+0x1e96>
 8011156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011158:	eeea 9a0a 	vfma.f32	s19, s20, s20
 801115c:	eeb1 8a48 	vneg.f32	s16, s16
 8011160:	a851      	add	r0, sp, #324	; 0x144
 8011162:	461a      	mov	r2, r3
 8011164:	6819      	ldr	r1, [r3, #0]
 8011166:	685c      	ldr	r4, [r3, #4]
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	9149      	str	r1, [sp, #292]	; 0x124
 801116c:	a949      	add	r1, sp, #292	; 0x124
 801116e:	934b      	str	r3, [sp, #300]	; 0x12c
 8011170:	68d3      	ldr	r3, [r2, #12]
 8011172:	ed8d 9a51 	vstr	s18, [sp, #324]	; 0x144
 8011176:	934c      	str	r3, [sp, #304]	; 0x130
 8011178:	edcd 8a52 	vstr	s17, [sp, #328]	; 0x148
 801117c:	ed8d 8a53 	vstr	s16, [sp, #332]	; 0x14c
 8011180:	ed8d aa54 	vstr	s20, [sp, #336]	; 0x150
 8011184:	944a      	str	r4, [sp, #296]	; 0x128
 8011186:	f7fa fbe5 	bl	800b954 <m_qmult_eml>
 801118a:	ee19 0a90 	vmov	r0, s19
 801118e:	ed8d 9a49 	vstr	s18, [sp, #292]	; 0x124
 8011192:	edcd 8a4a 	vstr	s17, [sp, #296]	; 0x128
 8011196:	ac4d      	add	r4, sp, #308	; 0x134
 8011198:	ed8d 8a4b 	vstr	s16, [sp, #300]	; 0x12c
 801119c:	ed8d 9a51 	vstr	s18, [sp, #324]	; 0x144
 80111a0:	edcd 8a52 	vstr	s17, [sp, #328]	; 0x148
 80111a4:	ed8d 8a53 	vstr	s16, [sp, #332]	; 0x14c
 80111a8:	ed8d aa54 	vstr	s20, [sp, #336]	; 0x150
 80111ac:	ed8d aa4c 	vstr	s20, [sp, #304]	; 0x130
 80111b0:	f7ef f9ea 	bl	8000588 <__aeabi_f2d>
 80111b4:	ec41 0b10 	vmov	d0, r0, r1
 80111b8:	f009 fc48 	bl	801aa4c <sqrt>
 80111bc:	ec51 0b10 	vmov	r0, r1, d0
 80111c0:	f7ef fd32 	bl	8000c28 <__aeabi_d2f>
 80111c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80111c8:	ee07 0a90 	vmov	s15, r0
 80111cc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80111d0:	ee29 9a27 	vmul.f32	s18, s18, s15
 80111d4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80111d8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80111dc:	ee2a aa27 	vmul.f32	s20, s20, s15
 80111e0:	ed8d 9a4d 	vstr	s18, [sp, #308]	; 0x134
 80111e4:	edcd 8a4e 	vstr	s17, [sp, #312]	; 0x138
 80111e8:	ed8d 8a4f 	vstr	s16, [sp, #316]	; 0x13c
 80111ec:	ed8d aa50 	vstr	s20, [sp, #320]	; 0x140
 80111f0:	f7ff ba4d 	b.w	801068e <m_kalman_3gyro.isra.0.constprop.0+0x2b8e>
 80111f4:	f3af 8000 	nop.w
 80111f8:	33333333 	.word	0x33333333
 80111fc:	3fd33333 	.word	0x3fd33333
 8011200:	20001448 	.word	0x20001448
 8011204:	bdcccccd 	.word	0xbdcccccd
 8011208:	be4ccccd 	.word	0xbe4ccccd
 801120c:	3dcccccd 	.word	0x3dcccccd
 8011210:	3e4ccccd 	.word	0x3e4ccccd
 8011214:	40140000 	.word	0x40140000
 8011218:	a9c1      	add	r1, sp, #772	; 0x304
 801121a:	a8b4      	add	r0, sp, #720	; 0x2d0
 801121c:	eeb0 0a69 	vmov.f32	s0, s19
 8011220:	f7fb fb06 	bl	800c830 <m_interp1q_constrain>
 8011224:	a9db      	add	r1, sp, #876	; 0x36c
 8011226:	eef0 5a40 	vmov.f32	s11, s0
 801122a:	a8ce      	add	r0, sp, #824	; 0x338
 801122c:	f7fd bbe3 	b.w	800e9f6 <m_kalman_3gyro.isra.0.constprop.0+0xef6>
 8011230:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011232:	f7ef f9a9 	bl	8000588 <__aeabi_f2d>
 8011236:	4604      	mov	r4, r0
 8011238:	460d      	mov	r5, r1
 801123a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801123c:	f7ef f9a4 	bl	8000588 <__aeabi_f2d>
 8011240:	2200      	movs	r2, #0
 8011242:	4bd7      	ldr	r3, [pc, #860]	; (80115a0 <m_kalman_3gyro.isra.0.constprop.0+0x3aa0>)
 8011244:	f7ef f9f8 	bl	8000638 <__aeabi_dmul>
 8011248:	4602      	mov	r2, r0
 801124a:	460b      	mov	r3, r1
 801124c:	4620      	mov	r0, r4
 801124e:	4629      	mov	r1, r5
 8011250:	f7ef fc64 	bl	8000b1c <__aeabi_dcmplt>
 8011254:	2800      	cmp	r0, #0
 8011256:	f43e abdb 	beq.w	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 801125a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801125c:	f7ef f994 	bl	8000588 <__aeabi_f2d>
 8011260:	4604      	mov	r4, r0
 8011262:	460d      	mov	r5, r1
 8011264:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011266:	f7ef f98f 	bl	8000588 <__aeabi_f2d>
 801126a:	2200      	movs	r2, #0
 801126c:	4bcc      	ldr	r3, [pc, #816]	; (80115a0 <m_kalman_3gyro.isra.0.constprop.0+0x3aa0>)
 801126e:	f7ef f9e3 	bl	8000638 <__aeabi_dmul>
 8011272:	4602      	mov	r2, r0
 8011274:	460b      	mov	r3, r1
 8011276:	4620      	mov	r0, r4
 8011278:	4629      	mov	r1, r5
 801127a:	f7ef fc4f 	bl	8000b1c <__aeabi_dcmplt>
 801127e:	2800      	cmp	r0, #0
 8011280:	f43e abc6 	beq.w	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 8011284:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011286:	f7ef f97f 	bl	8000588 <__aeabi_f2d>
 801128a:	4604      	mov	r4, r0
 801128c:	460d      	mov	r5, r1
 801128e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011290:	f7ef f97a 	bl	8000588 <__aeabi_f2d>
 8011294:	4602      	mov	r2, r0
 8011296:	460b      	mov	r3, r1
 8011298:	f7ef f818 	bl	80002cc <__adddf3>
 801129c:	4602      	mov	r2, r0
 801129e:	460b      	mov	r3, r1
 80112a0:	4620      	mov	r0, r4
 80112a2:	4629      	mov	r1, r5
 80112a4:	f7ef fc58 	bl	8000b58 <__aeabi_dcmpgt>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	f000 8250 	beq.w	801174e <m_kalman_3gyro.isra.0.constprop.0+0x3c4e>
 80112ae:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 80112b2:	2200      	movs	r2, #0
 80112b4:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80112b8:	f893 38ad 	ldrb.w	r3, [r3, #2221]	; 0x8ad
 80112bc:	f8a1 21fc 	strh.w	r2, [r1, #508]	; 0x1fc
 80112c0:	2b0e      	cmp	r3, #14
 80112c2:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 80112c6:	f881 2205 	strb.w	r2, [r1, #517]	; 0x205
 80112ca:	f881 2207 	strb.w	r2, [r1, #519]	; 0x207
 80112ce:	f200 8256 	bhi.w	801177e <m_kalman_3gyro.isra.0.constprop.0+0x3c7e>
 80112d2:	3303      	adds	r3, #3
 80112d4:	460a      	mov	r2, r1
 80112d6:	f881 38ad 	strb.w	r3, [r1, #2221]	; 0x8ad
 80112da:	f7fe bb99 	b.w	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 80112de:	4634      	mov	r4, r6
 80112e0:	463d      	mov	r5, r7
 80112e2:	e70b      	b.n	80110fc <m_kalman_3gyro.isra.0.constprop.0+0x35fc>
 80112e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80112e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80112ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f0:	f47d af17 	bne.w	800f122 <m_kalman_3gyro.isra.0.constprop.0+0x1622>
 80112f4:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 80112f8:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80112fc:	9806      	ldr	r0, [sp, #24]
 80112fe:	645c      	str	r4, [r3, #68]	; 0x44
 8011300:	649c      	str	r4, [r3, #72]	; 0x48
 8011302:	64dc      	str	r4, [r3, #76]	; 0x4c
 8011304:	655c      	str	r4, [r3, #84]	; 0x54
 8011306:	659c      	str	r4, [r3, #88]	; 0x58
 8011308:	65dc      	str	r4, [r3, #92]	; 0x5c
 801130a:	641d      	str	r5, [r3, #64]	; 0x40
 801130c:	651d      	str	r5, [r3, #80]	; 0x50
 801130e:	661d      	str	r5, [r3, #96]	; 0x60
 8011310:	f7fa ff88 	bl	800c224 <m_dcm2q_eml>
 8011314:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8011318:	f8dd 66d8 	ldr.w	r6, [sp, #1752]	; 0x6d8
 801131c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8011320:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
 8011324:	2100      	movs	r1, #0
 8011326:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
 801132a:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
 801132e:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8011332:	f8dd 46d8 	ldr.w	r4, [sp, #1752]	; 0x6d8
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 801133c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8011340:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8011344:	30b8      	adds	r0, #184	; 0xb8
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 801134c:	f8dd 36b8 	ldr.w	r3, [sp, #1720]	; 0x6b8
 8011350:	689c      	ldr	r4, [r3, #8]
 8011352:	4b94      	ldr	r3, [pc, #592]	; (80115a4 <m_kalman_3gyro.isra.0.constprop.0+0x3aa4>)
 8011354:	f8c6 40a8 	str.w	r4, [r6, #168]	; 0xa8
 8011358:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
 801135c:	f8c6 50b0 	str.w	r5, [r6, #176]	; 0xb0
 8011360:	f8c6 50b4 	str.w	r5, [r6, #180]	; 0xb4
 8011364:	f004 fd66 	bl	8015e34 <memset>
 8011368:	4b8f      	ldr	r3, [pc, #572]	; (80115a8 <m_kalman_3gyro.isra.0.constprop.0+0x3aa8>)
 801136a:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 801136e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8011372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011376:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 801137a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 801137e:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8011382:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 8011386:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 801138a:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 801138e:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 8011392:	f7fd bec6 	b.w	800f122 <m_kalman_3gyro.isra.0.constprop.0+0x1622>
 8011396:	2201      	movs	r2, #1
 8011398:	f240 1301 	movw	r3, #257	; 0x101
 801139c:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 80113a0:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 80113a4:	f7fe ba7f 	b.w	800f8a6 <m_kalman_3gyro.isra.0.constprop.0+0x1da6>
 80113a8:	1c5c      	adds	r4, r3, #1
 80113aa:	f7fd bfb9 	b.w	800f320 <m_kalman_3gyro.isra.0.constprop.0+0x1820>
 80113ae:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 80113b2:	f8dd 2690 	ldr.w	r2, [sp, #1680]	; 0x690
 80113b6:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 80113ba:	ed92 7a07 	vldr	s14, [r2, #28]
 80113be:	edd3 6a06 	vldr	s13, [r3, #24]
 80113c2:	2300      	movs	r3, #0
 80113c4:	edd2 7a08 	vldr	s15, [r2, #32]
 80113c8:	ee27 7a0c 	vmul.f32	s14, s14, s24
 80113cc:	ee66 6a8c 	vmul.f32	s13, s13, s24
 80113d0:	ee27 ca8c 	vmul.f32	s24, s15, s24
 80113d4:	ed82 7a07 	vstr	s14, [r2, #28]
 80113d8:	edc2 6a06 	vstr	s13, [r2, #24]
 80113dc:	ed82 ca08 	vstr	s24, [r2, #32]
 80113e0:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80113e4:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 80113e8:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 80113ec:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f47f ac9d 	bne.w	8010d30 <m_kalman_3gyro.isra.0.constprop.0+0x3230>
 80113f6:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80113fa:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80113fe:	b332      	cbz	r2, 801144e <m_kalman_3gyro.isra.0.constprop.0+0x394e>
 8011400:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011404:	eef4 da67 	vcmp.f32	s27, s15
 8011408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140c:	d51f      	bpl.n	801144e <m_kalman_3gyro.isra.0.constprop.0+0x394e>
 801140e:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8011412:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8011416:	ed92 7af1 	vldr	s14, [r2, #964]	; 0x3c4
 801141a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011422:	d514      	bpl.n	801144e <m_kalman_3gyro.isra.0.constprop.0+0x394e>
 8011424:	4611      	mov	r1, r2
 8011426:	4614      	mov	r4, r2
 8011428:	f8d2 03d8 	ldr.w	r0, [r2, #984]	; 0x3d8
 801142c:	2201      	movs	r2, #1
 801142e:	f8d1 13dc 	ldr.w	r1, [r1, #988]	; 0x3dc
 8011432:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8011436:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 801143a:	f8d4 13d4 	ldr.w	r1, [r4, #980]	; 0x3d4
 801143e:	67e1      	str	r1, [r4, #124]	; 0x7c
 8011440:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 8011444:	700a      	strb	r2, [r1, #0]
 8011446:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 801144a:	f7fe b88d 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 801144e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8011452:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 8011456:	2b1e      	cmp	r3, #30
 8011458:	f000 80a8 	beq.w	80115ac <m_kalman_3gyro.isra.0.constprop.0+0x3aac>
 801145c:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8011460:	3301      	adds	r3, #1
 8011462:	2200      	movs	r2, #0
 8011464:	f8c1 3454 	str.w	r3, [r1, #1108]	; 0x454
 8011468:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 801146c:	f7fe b87c 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 8011470:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011474:	f7fd bb89 	b.w	800eb8a <m_kalman_3gyro.isra.0.constprop.0+0x108a>
 8011478:	4620      	mov	r0, r4
 801147a:	4629      	mov	r1, r5
 801147c:	f7ef fbd4 	bl	8000c28 <__aeabi_d2f>
 8011480:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8011484:	ee07 0a10 	vmov	s14, r0
 8011488:	eef4 7a47 	vcmp.f32	s15, s14
 801148c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011490:	f77f add6 	ble.w	8011040 <m_kalman_3gyro.isra.0.constprop.0+0x3540>
 8011494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011496:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 801149a:	ed93 7a00 	vldr	s14, [r3]
 801149e:	eeb0 7ac7 	vabs.f32	s14, s14
 80114a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114aa:	f57f adc9 	bpl.w	8011040 <m_kalman_3gyro.isra.0.constprop.0+0x3540>
 80114ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80114b2:	eeb0 7ac7 	vabs.f32	s14, s14
 80114b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114be:	f57f adbf 	bpl.w	8011040 <m_kalman_3gyro.isra.0.constprop.0+0x3540>
 80114c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80114c6:	eeb0 7ac7 	vabs.f32	s14, s14
 80114ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d2:	f57f adb5 	bpl.w	8011040 <m_kalman_3gyro.isra.0.constprop.0+0x3540>
 80114d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114d8:	edd3 7a00 	vldr	s15, [r3]
 80114dc:	eef0 7ae7 	vabs.f32	s15, s15
 80114e0:	ee17 0a90 	vmov	r0, s15
 80114e4:	f7ef f850 	bl	8000588 <__aeabi_f2d>
 80114e8:	a32b      	add	r3, pc, #172	; (adr r3, 8011598 <m_kalman_3gyro.isra.0.constprop.0+0x3a98>)
 80114ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ee:	f7ef fb15 	bl	8000b1c <__aeabi_dcmplt>
 80114f2:	2800      	cmp	r0, #0
 80114f4:	f43f ada4 	beq.w	8011040 <m_kalman_3gyro.isra.0.constprop.0+0x3540>
 80114f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80114fe:	eef0 7ae7 	vabs.f32	s15, s15
 8011502:	ee17 0a90 	vmov	r0, s15
 8011506:	f7ef f83f 	bl	8000588 <__aeabi_f2d>
 801150a:	a323      	add	r3, pc, #140	; (adr r3, 8011598 <m_kalman_3gyro.isra.0.constprop.0+0x3a98>)
 801150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011510:	f7ef fb04 	bl	8000b1c <__aeabi_dcmplt>
 8011514:	2800      	cmp	r0, #0
 8011516:	f43f ad93 	beq.w	8011040 <m_kalman_3gyro.isra.0.constprop.0+0x3540>
 801151a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801151c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011520:	eef0 7ae7 	vabs.f32	s15, s15
 8011524:	ee17 0a90 	vmov	r0, s15
 8011528:	f7ef f82e 	bl	8000588 <__aeabi_f2d>
 801152c:	a31a      	add	r3, pc, #104	; (adr r3, 8011598 <m_kalman_3gyro.isra.0.constprop.0+0x3a98>)
 801152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011532:	f7ef faf3 	bl	8000b1c <__aeabi_dcmplt>
 8011536:	2800      	cmp	r0, #0
 8011538:	f43f ad82 	beq.w	8011040 <m_kalman_3gyro.isra.0.constprop.0+0x3540>
 801153c:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8011540:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8011544:	2b0a      	cmp	r3, #10
 8011546:	f000 812e 	beq.w	80117a6 <m_kalman_3gyro.isra.0.constprop.0+0x3ca6>
 801154a:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 801154e:	2200      	movs	r2, #0
 8011550:	3301      	adds	r3, #1
 8011552:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 8011556:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 801155a:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 801155e:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 8011562:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8011566:	f7fd bfff 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 801156a:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 801156e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011572:	edd3 6a06 	vldr	s13, [r3, #24]
 8011576:	f7ff bb97 	b.w	8010ca8 <m_kalman_3gyro.isra.0.constprop.0+0x31a8>
 801157a:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 801157e:	f8c3 0450 	str.w	r0, [r3, #1104]	; 0x450
 8011582:	f8a3 0202 	strh.w	r0, [r3, #514]	; 0x202
 8011586:	f883 0204 	strb.w	r0, [r3, #516]	; 0x204
 801158a:	f8c3 045c 	str.w	r0, [r3, #1116]	; 0x45c
 801158e:	f7fd bfeb 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 8011592:	bf00      	nop
 8011594:	f3af 8000 	nop.w
 8011598:	66666666 	.word	0x66666666
 801159c:	3ff66666 	.word	0x3ff66666
 80115a0:	3ff80000 	.word	0x3ff80000
 80115a4:	3f666666 	.word	0x3f666666
 80115a8:	40a00000 	.word	0x40a00000
 80115ac:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 80115b0:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 80115b4:	2b27      	cmp	r3, #39	; 0x27
 80115b6:	f200 8128 	bhi.w	801180a <m_kalman_3gyro.isra.0.constprop.0+0x3d0a>
 80115ba:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 80115be:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 80115c2:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80115c6:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 80115ca:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80115ce:	2301      	movs	r3, #1
 80115d0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 80115d4:	f8d0 23d4 	ldr.w	r2, [r0, #980]	; 0x3d4
 80115d8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 80115dc:	4601      	mov	r1, r0
 80115de:	67c2      	str	r2, [r0, #124]	; 0x7c
 80115e0:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80115e4:	7013      	strb	r3, [r2, #0]
 80115e6:	4603      	mov	r3, r0
 80115e8:	f8b3 38a8 	ldrh.w	r3, [r3, #2216]	; 0x8a8
 80115ec:	2201      	movs	r2, #1
 80115ee:	4413      	add	r3, r2
 80115f0:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 80115f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115f8:	bf14      	ite	ne
 80115fa:	b29b      	uxthne	r3, r3
 80115fc:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011600:	f8a1 38a8 	strh.w	r3, [r1, #2216]	; 0x8a8
 8011604:	f7fd bfb0 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 8011608:	4603      	mov	r3, r0
 801160a:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 801160e:	2200      	movs	r2, #0
 8011610:	3301      	adds	r3, #1
 8011612:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 8011616:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 801161a:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 801161e:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 8011622:	f7fd bfa1 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 8011626:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011628:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801162c:	4dc7      	ldr	r5, [pc, #796]	; (801194c <m_kalman_3gyro.isra.0.constprop.0+0x3e4c>)
 801162e:	3201      	adds	r2, #1
 8011630:	6820      	ldr	r0, [r4, #0]
 8011632:	2100      	movs	r1, #0
 8011634:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011638:	f885 21b0 	strb.w	r2, [r5, #432]	; 0x1b0
 801163c:	6862      	ldr	r2, [r4, #4]
 801163e:	f8c3 01b4 	str.w	r0, [r3, #436]	; 0x1b4
 8011642:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011644:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
 8011648:	4602      	mov	r2, r0
 801164a:	68a5      	ldr	r5, [r4, #8]
 801164c:	6804      	ldr	r4, [r0, #0]
 801164e:	6892      	ldr	r2, [r2, #8]
 8011650:	6840      	ldr	r0, [r0, #4]
 8011652:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
 8011656:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
 801165a:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 801165e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
 8011662:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 8011666:	7019      	strb	r1, [r3, #0]
 8011668:	f7fe bae0 	b.w	800fc2c <m_kalman_3gyro.isra.0.constprop.0+0x212c>
 801166c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011670:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8011674:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 8011678:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 801167c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 8011680:	e6b2      	b.n	80113e8 <m_kalman_3gyro.isra.0.constprop.0+0x38e8>
 8011682:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8011686:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 801168a:	2b00      	cmp	r3, #0
 801168c:	f47f ab2c 	bne.w	8010ce8 <m_kalman_3gyro.isra.0.constprop.0+0x31e8>
 8011690:	ed9f 6aaf 	vldr	s12, [pc, #700]	; 8011950 <m_kalman_3gyro.isra.0.constprop.0+0x3e50>
 8011694:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 8011698:	ee66 6a86 	vmul.f32	s13, s13, s12
 801169c:	ee27 7a06 	vmul.f32	s14, s14, s12
 80116a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80116a4:	edc3 6a06 	vstr	s13, [r3, #24]
 80116a8:	ed83 7a07 	vstr	s14, [r3, #28]
 80116ac:	edc3 7a08 	vstr	s15, [r3, #32]
 80116b0:	f7ff bb1a 	b.w	8010ce8 <m_kalman_3gyro.isra.0.constprop.0+0x31e8>
 80116b4:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80116b8:	f240 1201 	movw	r2, #257	; 0x101
 80116bc:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 80116c0:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 80116c4:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 80116c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80116ca:	680a      	ldr	r2, [r1, #0]
 80116cc:	67c2      	str	r2, [r0, #124]	; 0x7c
 80116ce:	684a      	ldr	r2, [r1, #4]
 80116d0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80116d4:	688a      	ldr	r2, [r1, #8]
 80116d6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 80116da:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80116de:	7013      	strb	r3, [r2, #0]
 80116e0:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 80116e4:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 80116e8:	3301      	adds	r3, #1
 80116ea:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 80116ee:	b172      	cbz	r2, 801170e <m_kalman_3gyro.isra.0.constprop.0+0x3c0e>
 80116f0:	4604      	mov	r4, r0
 80116f2:	2100      	movs	r1, #0
 80116f4:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80116f6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80116fa:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 80116fe:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8011702:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8011706:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 801170a:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 801170e:	2b1e      	cmp	r3, #30
 8011710:	f47f ac96 	bne.w	8011040 <m_kalman_3gyro.isra.0.constprop.0+0x3540>
 8011714:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8011718:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 801171c:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8011720:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8011724:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
 8011728:	f603 0398 	addw	r3, r3, #2200	; 0x898
 801172c:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 8011730:	f602 029c 	addw	r2, r2, #2204	; 0x89c
 8011734:	6018      	str	r0, [r3, #0]
 8011736:	6011      	str	r1, [r2, #0]
 8011738:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 801173c:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8011740:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8011744:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	f7fd bf0d 	b.w	800f568 <m_kalman_3gyro.isra.0.constprop.0+0x1a68>
 801174e:	f8dd 36d8 	ldr.w	r3, [sp, #1752]	; 0x6d8
 8011752:	f893 38ad 	ldrb.w	r3, [r3, #2221]	; 0x8ad
 8011756:	b1c3      	cbz	r3, 801178a <m_kalman_3gyro.isra.0.constprop.0+0x3c8a>
 8011758:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 801175c:	3b01      	subs	r3, #1
 801175e:	f8a2 01fc 	strh.w	r0, [r2, #508]	; 0x1fc
 8011762:	f882 01fe 	strb.w	r0, [r2, #510]	; 0x1fe
 8011766:	f882 38ad 	strb.w	r3, [r2, #2221]	; 0x8ad
 801176a:	f882 0205 	strb.w	r0, [r2, #517]	; 0x205
 801176e:	f882 0207 	strb.w	r0, [r2, #519]	; 0x207
 8011772:	f7fe b94d 	b.w	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 8011776:	2301      	movs	r3, #1
 8011778:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801177a:	f7ff b90c 	b.w	8010996 <m_kalman_3gyro.isra.0.constprop.0+0x2e96>
 801177e:	2364      	movs	r3, #100	; 0x64
 8011780:	460a      	mov	r2, r1
 8011782:	f8c1 38b0 	str.w	r3, [r1, #2224]	; 0x8b0
 8011786:	f7fe b943 	b.w	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 801178a:	2e00      	cmp	r6, #0
 801178c:	d07f      	beq.n	801188e <m_kalman_3gyro.isra.0.constprop.0+0x3d8e>
 801178e:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8011792:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 8011796:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 801179a:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 801179e:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 80117a2:	f7fe b935 	b.w	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 80117a6:	2301      	movs	r3, #1
 80117a8:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 80117ac:	f240 1201 	movw	r2, #257	; 0x101
 80117b0:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 80117b4:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 80117b8:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 80117bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80117be:	680a      	ldr	r2, [r1, #0]
 80117c0:	67c2      	str	r2, [r0, #124]	; 0x7c
 80117c2:	684a      	ldr	r2, [r1, #4]
 80117c4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80117c8:	688a      	ldr	r2, [r1, #8]
 80117ca:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 80117ce:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 80117d2:	7013      	strb	r3, [r2, #0]
 80117d4:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 80117d8:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 80117dc:	3301      	adds	r3, #1
 80117de:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 80117e2:	2a00      	cmp	r2, #0
 80117e4:	d093      	beq.n	801170e <m_kalman_3gyro.isra.0.constprop.0+0x3c0e>
 80117e6:	4602      	mov	r2, r0
 80117e8:	f8dd 46d8 	ldr.w	r4, [sp, #1752]	; 0x6d8
 80117ec:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80117f0:	2100      	movs	r1, #0
 80117f2:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 80117f6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 80117fa:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 80117fe:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8011800:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8011804:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8011808:	e781      	b.n	801170e <m_kalman_3gyro.isra.0.constprop.0+0x3c0e>
 801180a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801180c:	2301      	movs	r3, #1
 801180e:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 8011812:	680a      	ldr	r2, [r1, #0]
 8011814:	67c2      	str	r2, [r0, #124]	; 0x7c
 8011816:	684a      	ldr	r2, [r1, #4]
 8011818:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801181c:	688a      	ldr	r2, [r1, #8]
 801181e:	4601      	mov	r1, r0
 8011820:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8011824:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 8011828:	7013      	strb	r3, [r2, #0]
 801182a:	4603      	mov	r3, r0
 801182c:	e6dc      	b.n	80115e8 <m_kalman_3gyro.isra.0.constprop.0+0x3ae8>
 801182e:	2201      	movs	r2, #1
 8011830:	f8dd 06d8 	ldr.w	r0, [sp, #1752]	; 0x6d8
 8011834:	f240 1101 	movw	r1, #257	; 0x101
 8011838:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 801183c:	f880 2204 	strb.w	r2, [r0, #516]	; 0x204
 8011840:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011842:	f8a0 1202 	strh.w	r1, [r0, #514]	; 0x202
 8011846:	edd2 7a00 	vldr	s15, [r2]
 801184a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801184e:	eef4 7ae9 	vcmpe.f32	s15, s19
 8011852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011856:	db32      	blt.n	80118be <m_kalman_3gyro.isra.0.constprop.0+0x3dbe>
 8011858:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 801185c:	f7ff ba17 	b.w	8010c8e <m_kalman_3gyro.isra.0.constprop.0+0x318e>
 8011860:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 8011864:	f601 0298 	addw	r2, r1, #2200	; 0x898
 8011868:	f601 039c 	addw	r3, r1, #2204	; 0x89c
 801186c:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 8011870:	6010      	str	r0, [r2, #0]
 8011872:	6019      	str	r1, [r3, #0]
 8011874:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8011878:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 801187c:	f8dd 16d8 	ldr.w	r1, [sp, #1752]	; 0x6d8
 8011880:	f502 620a 	add.w	r2, r2, #2208	; 0x8a0
 8011884:	f8d1 10a8 	ldr.w	r1, [r1, #168]	; 0xa8
 8011888:	6011      	str	r1, [r2, #0]
 801188a:	f7ff babd 	b.w	8010e08 <m_kalman_3gyro.isra.0.constprop.0+0x3308>
 801188e:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 8011892:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011896:	edd3 6a00 	vldr	s13, [r3]
 801189a:	ed93 7a01 	vldr	s14, [r3, #4]
 801189e:	edd3 7a02 	vldr	s15, [r3, #8]
 80118a2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80118a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80118aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80118ae:	edc3 6a00 	vstr	s13, [r3]
 80118b2:	ed83 7a01 	vstr	s14, [r3, #4]
 80118b6:	edc3 7a02 	vstr	s15, [r3, #8]
 80118ba:	f7fe b8a9 	b.w	800fa10 <m_kalman_3gyro.isra.0.constprop.0+0x1f10>
 80118be:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80118c2:	eef4 da66 	vcmp.f32	s27, s13
 80118c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ca:	f57f ad70 	bpl.w	80113ae <m_kalman_3gyro.isra.0.constprop.0+0x38ae>
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f43f ad6d 	beq.w	80113ae <m_kalman_3gyro.isra.0.constprop.0+0x38ae>
 80118d4:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80118d8:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 80118dc:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 80118e0:	ee87 7a87 	vdiv.f32	s14, s15, s14
 80118e4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80118e8:	eddd 5a0f 	vldr	s11, [sp, #60]	; 0x3c
 80118ec:	ee87 6a86 	vdiv.f32	s12, s15, s12
 80118f0:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80118f4:	eec7 7aa5 	vdiv.f32	s15, s15, s11
 80118f8:	eef7 5a08 	vmov.f32	s11, #120	; 0x3fc00000  1.5
 80118fc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011900:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011904:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801190c:	f57f ad4f 	bpl.w	80113ae <m_kalman_3gyro.isra.0.constprop.0+0x38ae>
 8011910:	f8dd 2690 	ldr.w	r2, [sp, #1680]	; 0x690
 8011914:	f50d 7804 	add.w	r8, sp, #528	; 0x210
 8011918:	f8dd 3690 	ldr.w	r3, [sp, #1680]	; 0x690
 801191c:	ed92 7a07 	vldr	s14, [r2, #28]
 8011920:	ed93 6a06 	vldr	s12, [r3, #24]
 8011924:	2300      	movs	r3, #0
 8011926:	edd2 7a08 	vldr	s15, [r2, #32]
 801192a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801192e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8011932:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011936:	ed82 7a07 	vstr	s14, [r2, #28]
 801193a:	ed82 6a06 	vstr	s12, [r2, #24]
 801193e:	edc2 6a08 	vstr	s13, [r2, #32]
 8011942:	f8dd 26d8 	ldr.w	r2, [sp, #1752]	; 0x6d8
 8011946:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 801194a:	e54d      	b.n	80113e8 <m_kalman_3gyro.isra.0.constprop.0+0x38e8>
 801194c:	20001448 	.word	0x20001448
 8011950:	3f19999a 	.word	0x3f19999a

08011954 <SpacePointAlgorithm.isra.0>:
 8011954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011958:	ed2d 8b10 	vpush	{d8-d15}
 801195c:	b0bb      	sub	sp, #236	; 0xec
 801195e:	461d      	mov	r5, r3
 8011960:	f8df e3e8 	ldr.w	lr, [pc, #1000]	; 8011d4c <SpacePointAlgorithm.isra.0+0x3f8>
 8011964:	4681      	mov	r9, r0
 8011966:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
 801196a:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 801196e:	460e      	mov	r6, r1
 8011970:	4692      	mov	sl, r2
 8011972:	9315      	str	r3, [sp, #84]	; 0x54
 8011974:	eef0 ba40 	vmov.f32	s23, s0
 8011978:	f89d 3168 	ldrb.w	r3, [sp, #360]	; 0x168
 801197c:	eeb0 fa41 	vmov.f32	s30, s2
 8011980:	9f69      	ldr	r7, [sp, #420]	; 0x1a4
 8011982:	eeb0 ea61 	vmov.f32	s28, s3
 8011986:	9316      	str	r3, [sp, #88]	; 0x58
 8011988:	eeb0 ba42 	vmov.f32	s22, s4
 801198c:	f89d 316c 	ldrb.w	r3, [sp, #364]	; 0x16c
 8011990:	eef0 9a62 	vmov.f32	s19, s5
 8011994:	eeb0 aa43 	vmov.f32	s20, s6
 8011998:	edcd 0a19 	vstr	s1, [sp, #100]	; 0x64
 801199c:	9317      	str	r3, [sp, #92]	; 0x5c
 801199e:	eef0 aa63 	vmov.f32	s21, s7
 80119a2:	f89d 3170 	ldrb.w	r3, [sp, #368]	; 0x170
 80119a6:	9c54      	ldr	r4, [sp, #336]	; 0x150
 80119a8:	9318      	str	r3, [sp, #96]	; 0x60
 80119aa:	f89d b164 	ldrb.w	fp, [sp, #356]	; 0x164
 80119ae:	f8dd 8190 	ldr.w	r8, [sp, #400]	; 0x190
 80119b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80119b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80119ba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80119be:	e88c 0003 	stmia.w	ip, {r0, r1}
 80119c2:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 80119c6:	f7ef f92f 	bl	8000c28 <__aeabi_d2f>
 80119ca:	f897 38cc 	ldrb.w	r3, [r7, #2252]	; 0x8cc
 80119ce:	ee0c 0a90 	vmov	s25, r0
 80119d2:	b923      	cbnz	r3, 80119de <SpacePointAlgorithm.isra.0+0x8a>
 80119d4:	2201      	movs	r2, #1
 80119d6:	2300      	movs	r3, #0
 80119d8:	f887 28cc 	strb.w	r2, [r7, #2252]	; 0x8cc
 80119dc:	603b      	str	r3, [r7, #0]
 80119de:	eddf 7ace 	vldr	s15, [pc, #824]	; 8011d18 <SpacePointAlgorithm.isra.0+0x3c4>
 80119e2:	eec7 7aab 	vdiv.f32	s15, s15, s23
 80119e6:	ee17 0a90 	vmov	r0, s15
 80119ea:	f7ee fdcd 	bl	8000588 <__aeabi_f2d>
 80119ee:	ec41 0b10 	vmov	d0, r0, r1
 80119f2:	f009 f82b 	bl	801aa4c <sqrt>
 80119f6:	ec51 0b10 	vmov	r0, r1, d0
 80119fa:	f7ef f915 	bl	8000c28 <__aeabi_d2f>
 80119fe:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8011d1c <SpacePointAlgorithm.isra.0+0x3c8>
 8011a02:	edd5 3a00 	vldr	s7, [r5]
 8011a06:	ee07 0a90 	vmov	s15, r0
 8011a0a:	ed95 5a01 	vldr	s10, [r5, #4]
 8011a0e:	edd5 5a02 	vldr	s11, [r5, #8]
 8011a12:	ee63 3a87 	vmul.f32	s7, s7, s14
 8011a16:	eddf 4ac2 	vldr	s9, [pc, #776]	; 8011d20 <SpacePointAlgorithm.isra.0+0x3cc>
 8011a1a:	ee25 5a07 	vmul.f32	s10, s10, s14
 8011a1e:	ee65 5a87 	vmul.f32	s11, s11, s14
 8011a22:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8011a26:	eec4 faa7 	vdiv.f32	s31, s9, s15
 8011a2a:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 8011a2e:	ed9d 4a22 	vldr	s8, [sp, #136]	; 0x88
 8011a32:	eddd 4a23 	vldr	s9, [sp, #140]	; 0x8c
 8011a36:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
 8011a3a:	edc5 3a00 	vstr	s7, [r5]
 8011a3e:	ee67 ea86 	vmul.f32	s29, s15, s12
 8011a42:	ed85 5a01 	vstr	s10, [r5, #4]
 8011a46:	ee67 8aa6 	vmul.f32	s17, s15, s13
 8011a4a:	edc5 5a02 	vstr	s11, [r5, #8]
 8011a4e:	ee27 8a84 	vmul.f32	s16, s15, s8
 8011a52:	ee27 daa4 	vmul.f32	s26, s15, s9
 8011a56:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011a5a:	f1bb 0f04 	cmp.w	fp, #4
 8011a5e:	f200 8130 	bhi.w	8011cc2 <SpacePointAlgorithm.isra.0+0x36e>
 8011a62:	e8df f01b 	tbh	[pc, fp, lsl #1]
 8011a66:	0141      	.short	0x0141
 8011a68:	0123014e 	.word	0x0123014e
 8011a6c:	0005012e 	.word	0x0005012e
 8011a70:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8011a74:	ed9f caab 	vldr	s24, [pc, #684]	; 8011d24 <SpacePointAlgorithm.isra.0+0x3d0>
 8011a78:	2200      	movs	r2, #0
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 8011a80:	f7ef f842 	bl	8000b08 <__aeabi_dcmpeq>
 8011a84:	2800      	cmp	r0, #0
 8011a86:	f040 80e6 	bne.w	8011c56 <SpacePointAlgorithm.isra.0+0x302>
 8011a8a:	edd7 7a00 	vldr	s15, [r7]
 8011a8e:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8011a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011a96:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aa2:	ed87 7a00 	vstr	s14, [r7]
 8011aa6:	f100 80fc 	bmi.w	8011ca2 <SpacePointAlgorithm.isra.0+0x34e>
 8011aaa:	eef3 5a04 	vmov.f32	s11, #52	; 0x41a00000  20.0
 8011aae:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8011d28 <SpacePointAlgorithm.isra.0+0x3d4>
 8011ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ab6:	ee85 3a87 	vdiv.f32	s6, s11, s14
 8011aba:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8011d2c <SpacePointAlgorithm.isra.0+0x3d8>
 8011abe:	ee6b 4a0d 	vmul.f32	s9, s22, s26
 8011ac2:	ee2f 3a83 	vmul.f32	s6, s31, s6
 8011ac6:	ee27 6aae 	vmul.f32	s12, s15, s29
 8011aca:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8011ace:	ee67 6aa8 	vmul.f32	s13, s15, s17
 8011ad2:	ee2d 4a88 	vmul.f32	s8, s27, s16
 8011ad6:	ee29 7a07 	vmul.f32	s14, s18, s14
 8011ada:	edd4 3a0a 	vldr	s7, [r4, #40]	; 0x28
 8011ade:	eef7 5a08 	vmov.f32	s11, #120	; 0x3fc00000  1.5
 8011ae2:	edd6 7a01 	vldr	s15, [r6, #4]
 8011ae6:	462b      	mov	r3, r5
 8011ae8:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
 8011aec:	ad2e      	add	r5, sp, #184	; 0xb8
 8011aee:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8011af2:	ed94 5a03 	vldr	s10, [r4, #12]
 8011af6:	edd6 3a00 	vldr	s7, [r6]
 8011afa:	ee2b ba25 	vmul.f32	s22, s22, s11
 8011afe:	edd4 2a05 	vldr	s5, [r4, #20]
 8011b02:	f10d 0c6c 	add.w	ip, sp, #108	; 0x6c
 8011b06:	edd4 5a04 	vldr	s11, [r4, #16]
 8011b0a:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8011b0e:	ee27 5a85 	vmul.f32	s10, s15, s10
 8011b12:	ed94 0a01 	vldr	s0, [r4, #4]
 8011b16:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8011b1a:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 8011b1e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011b22:	edd4 2a00 	vldr	s5, [r4]
 8011b26:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8011b2a:	4648      	mov	r0, r9
 8011b2c:	eea3 5aa2 	vfma.f32	s10, s7, s5
 8011b30:	edd4 2a02 	vldr	s5, [r4, #8]
 8011b34:	eee3 5a80 	vfma.f32	s11, s7, s0
 8011b38:	ed8d 6a30 	vstr	s12, [sp, #192]	; 0xc0
 8011b3c:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8011b40:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8011b44:	edd6 3a02 	vldr	s7, [r6, #8]
 8011b48:	ae1a      	add	r6, sp, #104	; 0x68
 8011b4a:	edd4 2a08 	vldr	s5, [r4, #32]
 8011b4e:	4652      	mov	r2, sl
 8011b50:	ee73 3ac6 	vsub.f32	s7, s7, s12
 8011b54:	ed94 9a06 	vldr	s18, [r4, #24]
 8011b58:	ed94 6a07 	vldr	s12, [r4, #28]
 8011b5c:	ac25      	add	r4, sp, #148	; 0x94
 8011b5e:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8011b62:	eeb0 2a6c 	vmov.f32	s4, s25
 8011b66:	eee2 7aa3 	vfma.f32	s15, s5, s7
 8011b6a:	edcd 6a32 	vstr	s13, [sp, #200]	; 0xc8
 8011b6e:	eea3 5a89 	vfma.f32	s10, s7, s18
 8011b72:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8011b76:	eee6 5a23 	vfma.f32	s11, s12, s7
 8011b7a:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8011b7e:	ed8d 4a35 	vstr	s8, [sp, #212]	; 0xd4
 8011b82:	eef0 1a6b 	vmov.f32	s3, s23
 8011b86:	ed8d 4a36 	vstr	s8, [sp, #216]	; 0xd8
 8011b8a:	eeb0 1a6a 	vmov.f32	s2, s21
 8011b8e:	edcd 4a37 	vstr	s9, [sp, #220]	; 0xdc
 8011b92:	eef0 0a4a 	vmov.f32	s1, s20
 8011b96:	ed8d 3a25 	vstr	s6, [sp, #148]	; 0x94
 8011b9a:	eeb0 0a69 	vmov.f32	s0, s19
 8011b9e:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 8011ba2:	ed8d 5a1c 	vstr	s10, [sp, #112]	; 0x70
 8011ba6:	edcd 5a1d 	vstr	s11, [sp, #116]	; 0x74
 8011baa:	ed8d 7a38 	vstr	s14, [sp, #224]	; 0xe0
 8011bae:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8011bb2:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 8011bb6:	ed8d 3a27 	vstr	s6, [sp, #156]	; 0x9c
 8011bba:	f8df e194 	ldr.w	lr, [pc, #404]	; 8011d50 <SpacePointAlgorithm.isra.0+0x3fc>
 8011bbe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011bc0:	9604      	str	r6, [sp, #16]
 8011bc2:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8011d54 <SpacePointAlgorithm.isra.0+0x400>
 8011bc6:	4e5a      	ldr	r6, [pc, #360]	; (8011d30 <SpacePointAlgorithm.isra.0+0x3dc>)
 8011bc8:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
 8011bcc:	9102      	str	r1, [sp, #8]
 8011bce:	a91c      	add	r1, sp, #112	; 0x70
 8011bd0:	f8cd b00c 	str.w	fp, [sp, #12]
 8011bd4:	ed8d ca28 	vstr	s24, [sp, #160]	; 0xa0
 8011bd8:	ed8d ca29 	vstr	s24, [sp, #164]	; 0xa4
 8011bdc:	ed8d ca2a 	vstr	s24, [sp, #168]	; 0xa8
 8011be0:	9712      	str	r7, [sp, #72]	; 0x48
 8011be2:	962c      	str	r6, [sp, #176]	; 0xb0
 8011be4:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
 8011be8:	e9cd 5400 	strd	r5, r4, [sp]
 8011bec:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8011bee:	f88d 5068 	strb.w	r5, [sp, #104]	; 0x68
 8011bf2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8011bf4:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8011bf8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011bfa:	f88d 506a 	strb.w	r5, [sp, #106]	; 0x6a
 8011bfe:	9d68      	ldr	r5, [sp, #416]	; 0x1a0
 8011c00:	9511      	str	r5, [sp, #68]	; 0x44
 8011c02:	9d67      	ldr	r5, [sp, #412]	; 0x19c
 8011c04:	9510      	str	r5, [sp, #64]	; 0x40
 8011c06:	9d66      	ldr	r5, [sp, #408]	; 0x198
 8011c08:	e9cd 850e 	strd	r8, r5, [sp, #56]	; 0x38
 8011c0c:	9d63      	ldr	r5, [sp, #396]	; 0x18c
 8011c0e:	950c      	str	r5, [sp, #48]	; 0x30
 8011c10:	9d62      	ldr	r5, [sp, #392]	; 0x188
 8011c12:	950b      	str	r5, [sp, #44]	; 0x2c
 8011c14:	9d55      	ldr	r5, [sp, #340]	; 0x154
 8011c16:	950a      	str	r5, [sp, #40]	; 0x28
 8011c18:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8011c1c:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 8011c20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011c24:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 8011c28:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c2c:	f7fb ff68 	bl	800db00 <m_kalman_3gyro.isra.0.constprop.0>
 8011c30:	4621      	mov	r1, r4
 8011c32:	9862      	ldr	r0, [sp, #392]	; 0x188
 8011c34:	f7f9 fec8 	bl	800b9c8 <m_q2dcm_eml>
 8011c38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c3c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8011c3e:	6013      	str	r3, [r2, #0]
 8011c40:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011c44:	6053      	str	r3, [r2, #4]
 8011c46:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011c4a:	6093      	str	r3, [r2, #8]
 8011c4c:	b03b      	add	sp, #236	; 0xec
 8011c4e:	ecbd 8b10 	vpop	{d8-d15}
 8011c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c56:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8011c5a:	edd7 7a00 	vldr	s15, [r7]
 8011c5e:	eef4 7a47 	vcmp.f32	s15, s14
 8011c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c66:	d505      	bpl.n	8011c74 <SpacePointAlgorithm.isra.0+0x320>
 8011c68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c70:	f73f af0d 	bgt.w	8011a8e <SpacePointAlgorithm.isra.0+0x13a>
 8011c74:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8011d34 <SpacePointAlgorithm.isra.0+0x3e0>
 8011c78:	2300      	movs	r3, #0
 8011c7a:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 8011c7e:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8011c82:	ee3e ea27 	vadd.f32	s28, s28, s15
 8011c86:	603b      	str	r3, [r7, #0]
 8011c88:	ee67 6a28 	vmul.f32	s13, s14, s17
 8011c8c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8011d2c <SpacePointAlgorithm.isra.0+0x3d8>
 8011c90:	ee2d 4a88 	vmul.f32	s8, s27, s16
 8011c94:	ee8f 3a8e 	vdiv.f32	s6, s31, s28
 8011c98:	ee6b 4a0d 	vmul.f32	s9, s22, s26
 8011c9c:	ee29 7a07 	vmul.f32	s14, s18, s14
 8011ca0:	e71b      	b.n	8011ada <SpacePointAlgorithm.isra.0+0x186>
 8011ca2:	eeb1 3a04 	vmov.f32	s6, #20	; 0x40a00000  5.0
 8011ca6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8011d38 <SpacePointAlgorithm.isra.0+0x3e4>
 8011caa:	e706      	b.n	8011aba <SpacePointAlgorithm.isra.0+0x166>
 8011cac:	ee69 9aac 	vmul.f32	s19, s19, s25
 8011cb0:	ed9f ca22 	vldr	s24, [pc, #136]	; 8011d3c <SpacePointAlgorithm.isra.0+0x3e8>
 8011cb4:	ee2a aa2c 	vmul.f32	s20, s20, s25
 8011cb8:	ee6a aaac 	vmul.f32	s21, s21, s25
 8011cbc:	eef1 da04 	vmov.f32	s27, #20	; 0x40a00000  5.0
 8011cc0:	e6da      	b.n	8011a78 <SpacePointAlgorithm.isra.0+0x124>
 8011cc2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011d40 <SpacePointAlgorithm.isra.0+0x3ec>
 8011cc6:	eef6 da00 	vmov.f32	s27, #96	; 0x3f000000  0.5
 8011cca:	ed9f ca1e 	vldr	s24, [pc, #120]	; 8011d44 <SpacePointAlgorithm.isra.0+0x3f0>
 8011cce:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011cd2:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011cd6:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8011cda:	ee69 9aac 	vmul.f32	s19, s19, s25
 8011cde:	ee2a aa2c 	vmul.f32	s20, s20, s25
 8011ce2:	ee6a aaac 	vmul.f32	s21, s21, s25
 8011ce6:	e6c7      	b.n	8011a78 <SpacePointAlgorithm.isra.0+0x124>
 8011ce8:	eddf 7a17 	vldr	s15, [pc, #92]	; 8011d48 <SpacePointAlgorithm.isra.0+0x3f4>
 8011cec:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8011cf0:	ed9f ca14 	vldr	s24, [pc, #80]	; 8011d44 <SpacePointAlgorithm.isra.0+0x3f0>
 8011cf4:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011cf8:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011cfc:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8011d00:	e6ba      	b.n	8011a78 <SpacePointAlgorithm.isra.0+0x124>
 8011d02:	ee69 9aac 	vmul.f32	s19, s19, s25
 8011d06:	ed9f ca07 	vldr	s24, [pc, #28]	; 8011d24 <SpacePointAlgorithm.isra.0+0x3d0>
 8011d0a:	ee2a aa2c 	vmul.f32	s20, s20, s25
 8011d0e:	ee6a aaac 	vmul.f32	s21, s21, s25
 8011d12:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
 8011d16:	e6af      	b.n	8011a78 <SpacePointAlgorithm.isra.0+0x124>
 8011d18:	3c03126f 	.word	0x3c03126f
 8011d1c:	3c8efa35 	.word	0x3c8efa35
 8011d20:	3b656042 	.word	0x3b656042
 8011d24:	3ac49ba6 	.word	0x3ac49ba6
 8011d28:	3d4ccccd 	.word	0x3d4ccccd
 8011d2c:	3f333333 	.word	0x3f333333
 8011d30:	3c23d70a 	.word	0x3c23d70a
 8011d34:	358637bd 	.word	0x358637bd
 8011d38:	3e4ccccd 	.word	0x3e4ccccd
 8011d3c:	3727c5ac 	.word	0x3727c5ac
 8011d40:	42c80000 	.word	0x42c80000
 8011d44:	3a83126f 	.word	0x3a83126f
 8011d48:	3dcccccd 	.word	0x3dcccccd
 8011d4c:	0801c86c 	.word	0x0801c86c
 8011d50:	3b449ba6 	.word	0x3b449ba6
 8011d54:	3a9d4952 	.word	0x3a9d4952

08011d58 <MotionDI_Initialize>:
 8011d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d5c:	4c13      	ldr	r4, [pc, #76]	; (8011dac <MotionDI_Initialize+0x54>)
 8011d5e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8011d62:	4913      	ldr	r1, [pc, #76]	; (8011db0 <MotionDI_Initialize+0x58>)
 8011d64:	f24c 2540 	movw	r5, #49728	; 0xc240
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	4607      	mov	r7, r0
 8011d6c:	f023 0301 	bic.w	r3, r3, #1
 8011d70:	ed2d 8b02 	vpush	{d8}
 8011d74:	6023      	str	r3, [r4, #0]
 8011d76:	b093      	sub	sp, #76	; 0x4c
 8011d78:	680b      	ldr	r3, [r1, #0]
 8011d7a:	4013      	ands	r3, r2
 8011d7c:	42ab      	cmp	r3, r5
 8011d7e:	d021      	beq.n	8011dc4 <MotionDI_Initialize+0x6c>
 8011d80:	680b      	ldr	r3, [r1, #0]
 8011d82:	f24c 2170 	movw	r1, #49776	; 0xc270
 8011d86:	4013      	ands	r3, r2
 8011d88:	428b      	cmp	r3, r1
 8011d8a:	d01b      	beq.n	8011dc4 <MotionDI_Initialize+0x6c>
 8011d8c:	4b09      	ldr	r3, [pc, #36]	; (8011db4 <MotionDI_Initialize+0x5c>)
 8011d8e:	2201      	movs	r2, #1
 8011d90:	4619      	mov	r1, r3
 8011d92:	601a      	str	r2, [r3, #0]
 8011d94:	680b      	ldr	r3, [r1, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1fc      	bne.n	8011d94 <MotionDI_Initialize+0x3c>
 8011d9a:	4b07      	ldr	r3, [pc, #28]	; (8011db8 <MotionDI_Initialize+0x60>)
 8011d9c:	4907      	ldr	r1, [pc, #28]	; (8011dbc <MotionDI_Initialize+0x64>)
 8011d9e:	4a08      	ldr	r2, [pc, #32]	; (8011dc0 <MotionDI_Initialize+0x68>)
 8011da0:	6019      	str	r1, [r3, #0]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	4293      	cmp	r3, r2
 8011da6:	d02d      	beq.n	8011e04 <MotionDI_Initialize+0xac>
 8011da8:	e7fe      	b.n	8011da8 <MotionDI_Initialize+0x50>
 8011daa:	bf00      	nop
 8011dac:	e0002000 	.word	0xe0002000
 8011db0:	e000ed00 	.word	0xe000ed00
 8011db4:	40023008 	.word	0x40023008
 8011db8:	40023000 	.word	0x40023000
 8011dbc:	f407a5c2 	.word	0xf407a5c2
 8011dc0:	b5e8b5cd 	.word	0xb5e8b5cd
 8011dc4:	4be4      	ldr	r3, [pc, #912]	; (8012158 <MotionDI_Initialize+0x400>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d1df      	bne.n	8011d8c <MotionDI_Initialize+0x34>
 8011dcc:	4ae3      	ldr	r2, [pc, #908]	; (801215c <MotionDI_Initialize+0x404>)
 8011dce:	6813      	ldr	r3, [r2, #0]
 8011dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011dd4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8011dd8:	d006      	beq.n	8011de8 <MotionDI_Initialize+0x90>
 8011dda:	6813      	ldr	r3, [r2, #0]
 8011ddc:	f240 4283 	movw	r2, #1155	; 0x483
 8011de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011de4:	4293      	cmp	r3, r2
 8011de6:	d1d1      	bne.n	8011d8c <MotionDI_Initialize+0x34>
 8011de8:	4bdd      	ldr	r3, [pc, #884]	; (8012160 <MotionDI_Initialize+0x408>)
 8011dea:	2201      	movs	r2, #1
 8011dec:	4619      	mov	r1, r3
 8011dee:	601a      	str	r2, [r3, #0]
 8011df0:	680b      	ldr	r3, [r1, #0]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d1fc      	bne.n	8011df0 <MotionDI_Initialize+0x98>
 8011df6:	4bdb      	ldr	r3, [pc, #876]	; (8012164 <MotionDI_Initialize+0x40c>)
 8011df8:	49db      	ldr	r1, [pc, #876]	; (8012168 <MotionDI_Initialize+0x410>)
 8011dfa:	4adc      	ldr	r2, [pc, #880]	; (801216c <MotionDI_Initialize+0x414>)
 8011dfc:	6019      	str	r1, [r3, #0]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d1d1      	bne.n	8011da8 <MotionDI_Initialize+0x50>
 8011e04:	4cda      	ldr	r4, [pc, #872]	; (8012170 <MotionDI_Initialize+0x418>)
 8011e06:	f04f 0c14 	mov.w	ip, #20
 8011e0a:	4dda      	ldr	r5, [pc, #872]	; (8012174 <MotionDI_Initialize+0x41c>)
 8011e0c:	2101      	movs	r1, #1
 8011e0e:	683a      	ldr	r2, [r7, #0]
 8011e10:	f504 63c9 	add.w	r3, r4, #1608	; 0x648
 8011e14:	f8c5 c464 	str.w	ip, [r5, #1124]	; 0x464
 8011e18:	2600      	movs	r6, #0
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	f505 638c 	add.w	r3, r5, #1120	; 0x460
 8011e20:	f8df c394 	ldr.w	ip, [pc, #916]	; 80121b8 <MotionDI_Initialize+0x460>
 8011e24:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 8011e28:	f44f 02dc 	mov.w	r2, #7208960	; 0x6e0000
 8011e2c:	f884 1644 	strb.w	r1, [r4, #1604]	; 0x644
 8011e30:	f8c3 c000 	str.w	ip, [r3]
 8011e34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011e38:	4bcf      	ldr	r3, [pc, #828]	; (8012178 <MotionDI_Initialize+0x420>)
 8011e3a:	f505 6b8d 	add.w	fp, r5, #1128	; 0x468
 8011e3e:	6528      	str	r0, [r5, #80]	; 0x50
 8011e40:	f105 0014 	add.w	r0, r5, #20
 8011e44:	f8a5 1058 	strh.w	r1, [r5, #88]	; 0x58
 8011e48:	4631      	mov	r1, r6
 8011e4a:	f8c5 21c8 	str.w	r2, [r5, #456]	; 0x1c8
 8011e4e:	2230      	movs	r2, #48	; 0x30
 8011e50:	f8cb 3000 	str.w	r3, [fp]
 8011e54:	702e      	strb	r6, [r5, #0]
 8011e56:	f885 646c 	strb.w	r6, [r5, #1132]	; 0x46c
 8011e5a:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
 8011e5e:	656e      	str	r6, [r5, #84]	; 0x54
 8011e60:	64ae      	str	r6, [r5, #72]	; 0x48
 8011e62:	f003 ffe7 	bl	8015e34 <memset>
 8011e66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011e6a:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011e6e:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 801217c <MotionDI_Initialize+0x424>
 8011e72:	626b      	str	r3, [r5, #36]	; 0x24
 8011e74:	82aa      	strh	r2, [r5, #20]
 8011e76:	636b      	str	r3, [r5, #52]	; 0x34
 8011e78:	646b      	str	r3, [r5, #68]	; 0x44
 8011e7a:	ed97 0a00 	vldr	s0, [r7]
 8011e7e:	f884 664c 	strb.w	r6, [r4, #1612]	; 0x64c
 8011e82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011e86:	612e      	str	r6, [r5, #16]
 8011e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011e8c:	ee17 2a90 	vmov	r2, s15
 8011e90:	1e53      	subs	r3, r2, #1
 8011e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011e96:	d20b      	bcs.n	8011eb0 <MotionDI_Initialize+0x158>
 8011e98:	f1a2 030a 	sub.w	r3, r2, #10
 8011e9c:	f8c5 2464 	str.w	r2, [r5, #1124]	; 0x464
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	2b5a      	cmp	r3, #90	; 0x5a
 8011ea4:	bf8c      	ite	hi
 8011ea6:	2300      	movhi	r3, #0
 8011ea8:	2301      	movls	r3, #1
 8011eaa:	702b      	strb	r3, [r5, #0]
 8011eac:	ed97 0a00 	vldr	s0, [r7]
 8011eb0:	f7f9 faf6 	bl	800b4a0 <iNemoEngine_gbias_init>
 8011eb4:	eddf 6ab2 	vldr	s13, [pc, #712]	; 8012180 <MotionDI_Initialize+0x428>
 8011eb8:	2500      	movs	r5, #0
 8011eba:	4eb2      	ldr	r6, [pc, #712]	; (8012184 <MotionDI_Initialize+0x42c>)
 8011ebc:	f241 13b4 	movw	r3, #4532	; 0x11b4
 8011ec0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011ec4:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
 8011ec8:	f606 00e8 	addw	r0, r6, #2280	; 0x8e8
 8011ecc:	eddf 7aae 	vldr	s15, [pc, #696]	; 8012188 <MotionDI_Initialize+0x430>
 8011ed0:	f04f 0801 	mov.w	r8, #1
 8011ed4:	4fad      	ldr	r7, [pc, #692]	; (801218c <MotionDI_Initialize+0x434>)
 8011ed6:	f04f 0a0a 	mov.w	sl, #10
 8011eda:	52f5      	strh	r5, [r6, r3]
 8011edc:	f241 12b6 	movw	r2, #4534	; 0x11b6
 8011ee0:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8012190 <MotionDI_Initialize+0x438>
 8011ee4:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 8011ee8:	4baa      	ldr	r3, [pc, #680]	; (8012194 <MotionDI_Initialize+0x43c>)
 8011eea:	f507 7e68 	add.w	lr, r7, #928	; 0x3a0
 8011eee:	eddf 3aaa 	vldr	s7, [pc, #680]	; 8012198 <MotionDI_Initialize+0x440>
 8011ef2:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8011ef6:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 8011efa:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
 8011efe:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 8011f02:	f207 59e4 	addw	r9, r7, #1508	; 0x5e4
 8011f06:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 8011f0a:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 8011f0e:	613d      	str	r5, [r7, #16]
 8011f10:	753d      	strb	r5, [r7, #20]
 8011f12:	54b5      	strb	r5, [r6, r2]
 8011f14:	2202      	movs	r2, #2
 8011f16:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
 8011f1a:	607d      	str	r5, [r7, #4]
 8011f1c:	723d      	strb	r5, [r7, #8]
 8011f1e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 8011f22:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 8011f26:	61fd      	str	r5, [r7, #28]
 8011f28:	f887 5020 	strb.w	r5, [r7, #32]
 8011f2c:	62bd      	str	r5, [r7, #40]	; 0x28
 8011f2e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
 8011f32:	637d      	str	r5, [r7, #52]	; 0x34
 8011f34:	f887 5038 	strb.w	r5, [r7, #56]	; 0x38
 8011f38:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 8011f3c:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 8011f40:	f886 a8e0 	strb.w	sl, [r6, #2272]	; 0x8e0
 8011f44:	f507 6ab6 	add.w	sl, r7, #1456	; 0x5b0
 8011f48:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 8011f4c:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 8011f50:	ed84 7a28 	vstr	s14, [r4, #160]	; 0xa0
 8011f54:	ed86 8a86 	vstr	s16, [r6, #536]	; 0x218
 8011f58:	ed9f 7a90 	vldr	s14, [pc, #576]	; 801219c <MotionDI_Initialize+0x444>
 8011f5c:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8012130 <MotionDI_Initialize+0x3d8>
 8011f60:	ed9f 2b75 	vldr	d2, [pc, #468]	; 8012138 <MotionDI_Initialize+0x3e0>
 8011f64:	ed9f 4b76 	vldr	d4, [pc, #472]	; 8012140 <MotionDI_Initialize+0x3e8>
 8011f68:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8012148 <MotionDI_Initialize+0x3f0>
 8011f6c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012150 <MotionDI_Initialize+0x3f8>
 8011f70:	ed86 1b08 	vstr	d1, [r6, #32]
 8011f74:	ed86 2b0e 	vstr	d2, [r6, #56]	; 0x38
 8011f78:	ed86 4b06 	vstr	d4, [r6, #24]
 8011f7c:	ed86 5b0a 	vstr	d5, [r6, #40]	; 0x28
 8011f80:	ed86 6b0c 	vstr	d6, [r6, #48]	; 0x30
 8011f84:	643d      	str	r5, [r7, #64]	; 0x40
 8011f86:	f883 80c0 	strb.w	r8, [r3, #192]	; 0xc0
 8011f8a:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8011f8e:	ed80 8a82 	vstr	s16, [r0, #520]	; 0x208
 8011f92:	edc0 7a83 	vstr	s15, [r0, #524]	; 0x20c
 8011f96:	edc0 7a84 	vstr	s15, [r0, #528]	; 0x210
 8011f9a:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
 8011f9e:	edc4 7aaf 	vstr	s15, [r4, #700]	; 0x2bc
 8011fa2:	edc4 7ab0 	vstr	s15, [r4, #704]	; 0x2c0
 8011fa6:	edc4 7ab1 	vstr	s15, [r4, #708]	; 0x2c4
 8011faa:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 8011fae:	edc4 7ab3 	vstr	s15, [r4, #716]	; 0x2cc
 8011fb2:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 8011fb6:	edc4 7ab5 	vstr	s15, [r4, #724]	; 0x2d4
 8011fba:	ed84 8ab6 	vstr	s16, [r4, #728]	; 0x2d8
 8011fbe:	edc4 7ab7 	vstr	s15, [r4, #732]	; 0x2dc
 8011fc2:	edc4 7ab8 	vstr	s15, [r4, #736]	; 0x2e0
 8011fc6:	edc4 7ab9 	vstr	s15, [r4, #740]	; 0x2e4
 8011fca:	ed84 8aba 	vstr	s16, [r4, #744]	; 0x2e8
 8011fce:	edc4 7abb 	vstr	s15, [r4, #748]	; 0x2ec
 8011fd2:	edc4 7abc 	vstr	s15, [r4, #752]	; 0x2f0
 8011fd6:	edc4 7abd 	vstr	s15, [r4, #756]	; 0x2f4
 8011fda:	ed84 8abe 	vstr	s16, [r4, #760]	; 0x2f8
 8011fde:	edc4 7abf 	vstr	s15, [r4, #764]	; 0x2fc
 8011fe2:	edc4 7ac0 	vstr	s15, [r4, #768]	; 0x300
 8011fe6:	edc4 7ac1 	vstr	s15, [r4, #772]	; 0x304
 8011fea:	ed84 8ac2 	vstr	s16, [r4, #776]	; 0x308
 8011fee:	edc4 7ac3 	vstr	s15, [r4, #780]	; 0x30c
 8011ff2:	edc4 7ac4 	vstr	s15, [r4, #784]	; 0x310
 8011ff6:	ed80 4b02 	vstr	d4, [r0, #8]
 8011ffa:	ed80 5b06 	vstr	d5, [r0, #24]
 8011ffe:	ed9f 4a68 	vldr	s8, [pc, #416]	; 80121a0 <MotionDI_Initialize+0x448>
 8012002:	eddf 4a68 	vldr	s9, [pc, #416]	; 80121a4 <MotionDI_Initialize+0x44c>
 8012006:	ed9f 5a68 	vldr	s10, [pc, #416]	; 80121a8 <MotionDI_Initialize+0x450>
 801200a:	eddf 5a68 	vldr	s11, [pc, #416]	; 80121ac <MotionDI_Initialize+0x454>
 801200e:	ed80 6b08 	vstr	d6, [r0, #32]
 8012012:	eddf 6a67 	vldr	s13, [pc, #412]	; 80121b0 <MotionDI_Initialize+0x458>
 8012016:	ed9f 6a67 	vldr	s12, [pc, #412]	; 80121b4 <MotionDI_Initialize+0x45c>
 801201a:	ed80 1b04 	vstr	d1, [r0, #16]
 801201e:	ed80 2b0a 	vstr	d2, [r0, #40]	; 0x28
 8012022:	edc4 7ac5 	vstr	s15, [r4, #788]	; 0x314
 8012026:	ed84 3a3f 	vstr	s6, [r4, #252]	; 0xfc
 801202a:	edc4 3a3b 	vstr	s7, [r4, #236]	; 0xec
 801202e:	ed84 4a3c 	vstr	s8, [r4, #240]	; 0xf0
 8012032:	edc4 4a3d 	vstr	s9, [r4, #244]	; 0xf4
 8012036:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 801203a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 801203e:	ed84 8ac6 	vstr	s16, [r4, #792]	; 0x318
 8012042:	edc4 7ac7 	vstr	s15, [r4, #796]	; 0x31c
 8012046:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 801204a:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 801204e:	ed84 8aca 	vstr	s16, [r4, #808]	; 0x328
 8012052:	edc4 7acb 	vstr	s15, [r4, #812]	; 0x32c
 8012056:	edc4 7acc 	vstr	s15, [r4, #816]	; 0x330
 801205a:	edc4 7acd 	vstr	s15, [r4, #820]	; 0x334
 801205e:	ed84 8ace 	vstr	s16, [r4, #824]	; 0x338
 8012062:	ed84 8aa0 	vstr	s16, [r4, #640]	; 0x280
 8012066:	edc4 7aa1 	vstr	s15, [r4, #644]	; 0x284
 801206a:	edc4 7aa2 	vstr	s15, [r4, #648]	; 0x288
 801206e:	edc4 7aa3 	vstr	s15, [r4, #652]	; 0x28c
 8012072:	ed84 8aa4 	vstr	s16, [r4, #656]	; 0x290
 8012076:	edc4 7aa5 	vstr	s15, [r4, #660]	; 0x294
 801207a:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
 801207e:	edc4 7aa7 	vstr	s15, [r4, #668]	; 0x29c
 8012082:	ed84 8aa8 	vstr	s16, [r4, #672]	; 0x2a0
 8012086:	edc4 7aa9 	vstr	s15, [r4, #676]	; 0x2a4
 801208a:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
 801208e:	edc4 7aab 	vstr	s15, [r4, #684]	; 0x2ac
 8012092:	edc4 7aac 	vstr	s15, [r4, #688]	; 0x2b0
 8012096:	edc4 7aad 	vstr	s15, [r4, #692]	; 0x2b4
 801209a:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 801209e:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
 80120a2:	ed84 8a43 	vstr	s16, [r4, #268]	; 0x10c
 80120a6:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
 80120aa:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
 80120ae:	ed84 5a45 	vstr	s10, [r4, #276]	; 0x114
 80120b2:	edc4 5a46 	vstr	s11, [r4, #280]	; 0x118
 80120b6:	ed84 6a47 	vstr	s12, [r4, #284]	; 0x11c
 80120ba:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 80120be:	f8a4 c124 	strh.w	ip, [r4, #292]	; 0x124
 80120c2:	ed8e 8a21 	vstr	s16, [lr, #132]	; 0x84
 80120c6:	ed8e 8a25 	vstr	s16, [lr, #148]	; 0x94
 80120ca:	ed8e 8a29 	vstr	s16, [lr, #164]	; 0xa4
 80120ce:	ed8e 8a2d 	vstr	s16, [lr, #180]	; 0xb4
 80120d2:	ed8e 8a31 	vstr	s16, [lr, #196]	; 0xc4
 80120d6:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 80120da:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 80120de:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 80120e2:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 80120e6:	edce 7a1e 	vstr	s15, [lr, #120]	; 0x78
 80120ea:	edce 7a1f 	vstr	s15, [lr, #124]	; 0x7c
 80120ee:	edce 7a20 	vstr	s15, [lr, #128]	; 0x80
 80120f2:	edce 7a22 	vstr	s15, [lr, #136]	; 0x88
 80120f6:	edce 7a23 	vstr	s15, [lr, #140]	; 0x8c
 80120fa:	edce 7a24 	vstr	s15, [lr, #144]	; 0x90
 80120fe:	edce 7a26 	vstr	s15, [lr, #152]	; 0x98
 8012102:	edce 7a27 	vstr	s15, [lr, #156]	; 0x9c
 8012106:	edce 7a28 	vstr	s15, [lr, #160]	; 0xa0
 801210a:	edce 7a2a 	vstr	s15, [lr, #168]	; 0xa8
 801210e:	edce 7a2b 	vstr	s15, [lr, #172]	; 0xac
 8012112:	edce 7a2c 	vstr	s15, [lr, #176]	; 0xb0
 8012116:	edce 7a2e 	vstr	s15, [lr, #184]	; 0xb8
 801211a:	edce 7a2f 	vstr	s15, [lr, #188]	; 0xbc
 801211e:	edce 7a30 	vstr	s15, [lr, #192]	; 0xc0
 8012122:	edce 7a32 	vstr	s15, [lr, #200]	; 0xc8
 8012126:	edce 7a33 	vstr	s15, [lr, #204]	; 0xcc
 801212a:	edce 7a34 	vstr	s15, [lr, #208]	; 0xd0
 801212e:	e04b      	b.n	80121c8 <MotionDI_Initialize+0x470>
 8012130:	20000000 	.word	0x20000000
 8012134:	3fc55a40 	.word	0x3fc55a40
 8012138:	60000000 	.word	0x60000000
 801213c:	3f9f1fed 	.word	0x3f9f1fed
 8012140:	60000000 	.word	0x60000000
 8012144:	3fc76cab 	.word	0x3fc76cab
 8012148:	00000000 	.word	0x00000000
 801214c:	3fbfdfb7 	.word	0x3fbfdfb7
 8012150:	c0000000 	.word	0xc0000000
 8012154:	3fb2875e 	.word	0x3fb2875e
 8012158:	e0042000 	.word	0xe0042000
 801215c:	5c001000 	.word	0x5c001000
 8012160:	58024c08 	.word	0x58024c08
 8012164:	58024c00 	.word	0x58024c00
 8012168:	f407a5c2 	.word	0xf407a5c2
 801216c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012170:	20001448 	.word	0x20001448
 8012174:	200025c0 	.word	0x200025c0
 8012178:	3e4ccccd 	.word	0x3e4ccccd
 801217c:	447a0000 	.word	0x447a0000
 8012180:	7f800000 	.word	0x7f800000
 8012184:	20000000 	.word	0x20000000
 8012188:	00000000 	.word	0x00000000
 801218c:	200014ec 	.word	0x200014ec
 8012190:	ff800000 	.word	0xff800000
 8012194:	200010f8 	.word	0x200010f8
 8012198:	3f639581 	.word	0x3f639581
 801219c:	3f2ac083 	.word	0x3f2ac083
 80121a0:	402ab021 	.word	0x402ab021
 80121a4:	3f13f7cf 	.word	0x3f13f7cf
 80121a8:	39712c28 	.word	0x39712c28
 80121ac:	3a09a027 	.word	0x3a09a027
 80121b0:	3dcccccd 	.word	0x3dcccccd
 80121b4:	39b24207 	.word	0x39b24207
 80121b8:	3a83126f 	.word	0x3a83126f
 80121bc:	3a51b717 	.word	0x3a51b717
 80121c0:	3a378034 	.word	0x3a378034
 80121c4:	3f666666 	.word	0x3f666666
 80121c8:	ed84 3a4e 	vstr	s6, [r4, #312]	; 0x138
 80121cc:	edc4 3a4a 	vstr	s7, [r4, #296]	; 0x128
 80121d0:	ed84 4a4b 	vstr	s8, [r4, #300]	; 0x12c
 80121d4:	edc4 4a4c 	vstr	s9, [r4, #304]	; 0x130
 80121d8:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 80121dc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 80121e0:	ed8e 8a35 	vstr	s16, [lr, #212]	; 0xd4
 80121e4:	ed8e 8a39 	vstr	s16, [lr, #228]	; 0xe4
 80121e8:	ed8e 8a3d 	vstr	s16, [lr, #244]	; 0xf4
 80121ec:	ed8e 8a0f 	vstr	s16, [lr, #60]	; 0x3c
 80121f0:	ed8e 8a13 	vstr	s16, [lr, #76]	; 0x4c
 80121f4:	ed8e 8a17 	vstr	s16, [lr, #92]	; 0x5c
 80121f8:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 80121fc:	ed84 8a52 	vstr	s16, [r4, #328]	; 0x148
 8012200:	edce 7a36 	vstr	s15, [lr, #216]	; 0xd8
 8012204:	edce 7a37 	vstr	s15, [lr, #220]	; 0xdc
 8012208:	edce 7a38 	vstr	s15, [lr, #224]	; 0xe0
 801220c:	edce 7a3a 	vstr	s15, [lr, #232]	; 0xe8
 8012210:	edce 7a3b 	vstr	s15, [lr, #236]	; 0xec
 8012214:	edce 7a3c 	vstr	s15, [lr, #240]	; 0xf0
 8012218:	edce 7a10 	vstr	s15, [lr, #64]	; 0x40
 801221c:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 8012220:	edce 7a12 	vstr	s15, [lr, #72]	; 0x48
 8012224:	edce 7a14 	vstr	s15, [lr, #80]	; 0x50
 8012228:	edce 7a15 	vstr	s15, [lr, #84]	; 0x54
 801222c:	edce 7a16 	vstr	s15, [lr, #88]	; 0x58
 8012230:	edce 7a18 	vstr	s15, [lr, #96]	; 0x60
 8012234:	edce 7a19 	vstr	s15, [lr, #100]	; 0x64
 8012238:	edce 7a1a 	vstr	s15, [lr, #104]	; 0x68
 801223c:	edce 7a1b 	vstr	s15, [lr, #108]	; 0x6c
 8012240:	edce 7a1c 	vstr	s15, [lr, #112]	; 0x70
 8012244:	edce 7a1d 	vstr	s15, [lr, #116]	; 0x74
 8012248:	f884 814c 	strb.w	r8, [r4, #332]	; 0x14c
 801224c:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
 8012250:	ed84 5a54 	vstr	s10, [r4, #336]	; 0x150
 8012254:	f884 2144 	strb.w	r2, [r4, #324]	; 0x144
 8012258:	edc4 5a55 	vstr	s11, [r4, #340]	; 0x154
 801225c:	ed84 6a56 	vstr	s12, [r4, #344]	; 0x158
 8012260:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 8012264:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
 8012268:	edc0 7a29 	vstr	s15, [r0, #164]	; 0xa4
 801226c:	edc0 7a2a 	vstr	s15, [r0, #168]	; 0xa8
 8012270:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 8012274:	f7fa fd22 	bl	800ccbc <iNemo_setOrientation.constprop.0>
 8012278:	f7fa feea 	bl	800d050 <iNemo_setOrientation_6X.constprop.0>
 801227c:	46b4      	mov	ip, r6
 801227e:	78b3      	ldrb	r3, [r6, #2]
 8012280:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 8012284:	f83c 0f04 	ldrh.w	r0, [ip, #4]!
 8012288:	2202      	movs	r2, #2
 801228a:	9300      	str	r3, [sp, #0]
 801228c:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8012290:	9001      	str	r0, [sp, #4]
 8012292:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8012296:	f8c4 3101 	str.w	r3, [r4, #257]	; 0x101
 801229a:	9b01      	ldr	r3, [sp, #4]
 801229c:	ed1f 5a39 	vldr	s10, [pc, #-228]	; 80121bc <MotionDI_Initialize+0x464>
 80122a0:	ed5f 5a39 	vldr	s11, [pc, #-228]	; 80121c0 <MotionDI_Initialize+0x468>
 80122a4:	8831      	ldrh	r1, [r6, #0]
 80122a6:	f89c e002 	ldrb.w	lr, [ip, #2]
 80122aa:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80121c4 <MotionDI_Initialize+0x46c>
 80122ae:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
 80122b2:	f8df c128 	ldr.w	ip, [pc, #296]	; 80123dc <MotionDI_Initialize+0x684>
 80122b6:	9b00      	ldr	r3, [sp, #0]
 80122b8:	edc4 4a4b 	vstr	s9, [r4, #300]	; 0x12c
 80122bc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80122c0:	edc4 4a3c 	vstr	s9, [r4, #240]	; 0xf0
 80122c4:	ed84 5a54 	vstr	s10, [r4, #336]	; 0x150
 80122c8:	ed84 5a45 	vstr	s10, [r4, #276]	; 0x114
 80122cc:	edc4 5a55 	vstr	s11, [r4, #340]	; 0x154
 80122d0:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 80122d4:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
 80122d8:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 80122dc:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 80122e0:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 80122e4:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
 80122e8:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 80122ec:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 80122f0:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
 80122f4:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
 80122f8:	ed84 7a62 	vstr	s14, [r4, #392]	; 0x188
 80122fc:	f88d e03b 	strb.w	lr, [sp, #59]	; 0x3b
 8012300:	f8ad 1035 	strh.w	r1, [sp, #53]	; 0x35
 8012304:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
 8012308:	edc4 7a3b 	vstr	s15, [r4, #236]	; 0xec
 801230c:	edc4 7a61 	vstr	s15, [r4, #388]	; 0x184
 8012310:	edc4 5a46 	vstr	s11, [r4, #280]	; 0x118
 8012314:	f8dd 1035 	ldr.w	r1, [sp, #53]	; 0x35
 8012318:	f8c4 c13d 	str.w	ip, [r4, #317]	; 0x13d
 801231c:	f8dd c039 	ldr.w	ip, [sp, #57]	; 0x39
 8012320:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 80123d0 <MotionDI_Initialize+0x678>
 8012324:	eddb 6a00 	vldr	s13, [fp]
 8012328:	ed94 7a02 	vldr	s14, [r4, #8]
 801232c:	edd4 7a03 	vldr	s15, [r4, #12]
 8012330:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 80123e0 <MotionDI_Initialize+0x688>
 8012334:	f8d4 b014 	ldr.w	fp, [r4, #20]
 8012338:	f8a4 218c 	strh.w	r2, [r4, #396]	; 0x18c
 801233c:	4a25      	ldr	r2, [pc, #148]	; (80123d4 <MotionDI_Initialize+0x67c>)
 801233e:	ed84 6a56 	vstr	s12, [r4, #344]	; 0x158
 8012342:	ed84 6a47 	vstr	s12, [r4, #284]	; 0x11c
 8012346:	edc4 6a59 	vstr	s13, [r4, #356]	; 0x164
 801234a:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
 801234e:	edc4 7a5f 	vstr	s15, [r4, #380]	; 0x17c
 8012352:	f8c4 e16c 	str.w	lr, [r4, #364]	; 0x16c
 8012356:	f8c4 b174 	str.w	fp, [r4, #372]	; 0x174
 801235a:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
 801235e:	e9c4 1c64 	strd	r1, ip, [r4, #400]	; 0x190
 8012362:	f7fb f83f 	bl	800d3e4 <MotionDI_setKnobs.part.0>
 8012366:	4629      	mov	r1, r5
 8012368:	4650      	mov	r0, sl
 801236a:	2234      	movs	r2, #52	; 0x34
 801236c:	f003 fd62 	bl	8015e34 <memset>
 8012370:	4629      	mov	r1, r5
 8012372:	4648      	mov	r0, r9
 8012374:	2234      	movs	r2, #52	; 0x34
 8012376:	f884 5684 	strb.w	r5, [r4, #1668]	; 0x684
 801237a:	ed8a 8a03 	vstr	s16, [sl, #12]
 801237e:	ed8a 8a07 	vstr	s16, [sl, #28]
 8012382:	ed8a 8a0b 	vstr	s16, [sl, #44]	; 0x2c
 8012386:	f003 fd55 	bl	8015e34 <memset>
 801238a:	f241 13b4 	movw	r3, #4532	; 0x11b4
 801238e:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 8012392:	f884 56b8 	strb.w	r5, [r4, #1720]	; 0x6b8
 8012396:	f207 672c 	addw	r7, r7, #1580	; 0x62c
 801239a:	52f5      	strh	r5, [r6, r3]
 801239c:	f241 13b6 	movw	r3, #4534	; 0x11b6
 80123a0:	f884 56c8 	strb.w	r5, [r4, #1736]	; 0x6c8
 80123a4:	2000      	movs	r0, #0
 80123a6:	2100      	movs	r1, #0
 80123a8:	f8c4 86cc 	str.w	r8, [r4, #1740]	; 0x6cc
 80123ac:	54f5      	strb	r5, [r6, r3]
 80123ae:	2400      	movs	r4, #0
 80123b0:	4d09      	ldr	r5, [pc, #36]	; (80123d8 <MotionDI_Initialize+0x680>)
 80123b2:	ed89 8a03 	vstr	s16, [r9, #12]
 80123b6:	ed89 8a07 	vstr	s16, [r9, #28]
 80123ba:	ed89 8a0b 	vstr	s16, [r9, #44]	; 0x2c
 80123be:	e9c2 0100 	strd	r0, r1, [r2]
 80123c2:	e9c7 4500 	strd	r4, r5, [r7]
 80123c6:	b013      	add	sp, #76	; 0x4c
 80123c8:	ecbd 8b02 	vpop	{d8}
 80123cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123d0:	3b378034 	.word	0x3b378034
 80123d4:	3e051eb8 	.word	0x3e051eb8
 80123d8:	fff80000 	.word	0xfff80000
 80123dc:	01010001 	.word	0x01010001
 80123e0:	3a2c7da2 	.word	0x3a2c7da2

080123e4 <MotionDI_setKnobs>:
 80123e4:	4b03      	ldr	r3, [pc, #12]	; (80123f4 <MotionDI_setKnobs+0x10>)
 80123e6:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 80123ea:	b903      	cbnz	r3, 80123ee <MotionDI_setKnobs+0xa>
 80123ec:	4770      	bx	lr
 80123ee:	f7fa bff9 	b.w	800d3e4 <MotionDI_setKnobs.part.0>
 80123f2:	bf00      	nop
 80123f4:	20001448 	.word	0x20001448

080123f8 <MotionDI_getKnobs>:
 80123f8:	4a22      	ldr	r2, [pc, #136]	; (8012484 <MotionDI_getKnobs+0x8c>)
 80123fa:	f892 3644 	ldrb.w	r3, [r2, #1604]	; 0x644
 80123fe:	b903      	cbnz	r3, 8012402 <MotionDI_getKnobs+0xa>
 8012400:	4770      	bx	lr
 8012402:	4b21      	ldr	r3, [pc, #132]	; (8012488 <MotionDI_getKnobs+0x90>)
 8012404:	4619      	mov	r1, r3
 8012406:	b4f0      	push	{r4, r5, r6, r7}
 8012408:	f831 5f04 	ldrh.w	r5, [r1, #4]!
 801240c:	b090      	sub	sp, #64	; 0x40
 801240e:	2400      	movs	r4, #0
 8012410:	f892 7125 	ldrb.w	r7, [r2, #293]	; 0x125
 8012414:	788e      	ldrb	r6, [r1, #2]
 8012416:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
 801241a:	7899      	ldrb	r1, [r3, #2]
 801241c:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
 8012420:	f88d 6033 	strb.w	r6, [sp, #51]	; 0x33
 8012424:	881c      	ldrh	r4, [r3, #0]
 8012426:	f8ad 5031 	strh.w	r5, [sp, #49]	; 0x31
 801242a:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
 801242e:	f892 6126 	ldrb.w	r6, [r2, #294]	; 0x126
 8012432:	f8ad 402d 	strh.w	r4, [sp, #45]	; 0x2d
 8012436:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 801243a:	f8d2 40ec 	ldr.w	r4, [r2, #236]	; 0xec
 801243e:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
 8012442:	f8dd 502d 	ldr.w	r5, [sp, #45]	; 0x2d
 8012446:	6303      	str	r3, [r0, #48]	; 0x30
 8012448:	4b10      	ldr	r3, [pc, #64]	; (801248c <MotionDI_getKnobs+0x94>)
 801244a:	f880 6029 	strb.w	r6, [r0, #41]	; 0x29
 801244e:	62c5      	str	r5, [r0, #44]	; 0x2c
 8012450:	6204      	str	r4, [r0, #32]
 8012452:	6241      	str	r1, [r0, #36]	; 0x24
 8012454:	f880 7028 	strb.w	r7, [r0, #40]	; 0x28
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	6855      	ldr	r5, [r2, #4]
 801245c:	6003      	str	r3, [r0, #0]
 801245e:	f892 4168 	ldrb.w	r4, [r2, #360]	; 0x168
 8012462:	68d3      	ldr	r3, [r2, #12]
 8012464:	6891      	ldr	r1, [r2, #8]
 8012466:	7104      	strb	r4, [r0, #4]
 8012468:	6816      	ldr	r6, [r2, #0]
 801246a:	6954      	ldr	r4, [r2, #20]
 801246c:	6086      	str	r6, [r0, #8]
 801246e:	60c5      	str	r5, [r0, #12]
 8012470:	6104      	str	r4, [r0, #16]
 8012472:	6141      	str	r1, [r0, #20]
 8012474:	6183      	str	r3, [r0, #24]
 8012476:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
 801247a:	7703      	strb	r3, [r0, #28]
 801247c:	b010      	add	sp, #64	; 0x40
 801247e:	bcf0      	pop	{r4, r5, r6, r7}
 8012480:	4770      	bx	lr
 8012482:	bf00      	nop
 8012484:	20001448 	.word	0x20001448
 8012488:	20000000 	.word	0x20000000
 801248c:	20002a28 	.word	0x20002a28

08012490 <MotionDI_AccCal_getParams>:
 8012490:	b4f0      	push	{r4, r5, r6, r7}
 8012492:	4e0e      	ldr	r6, [pc, #56]	; (80124cc <MotionDI_AccCal_getParams+0x3c>)
 8012494:	f896 2644 	ldrb.w	r2, [r6, #1604]	; 0x644
 8012498:	b90a      	cbnz	r2, 801249e <MotionDI_AccCal_getParams+0xe>
 801249a:	bcf0      	pop	{r4, r5, r6, r7}
 801249c:	4770      	bx	lr
 801249e:	f206 6754 	addw	r7, r6, #1620	; 0x654
 80124a2:	4604      	mov	r4, r0
 80124a4:	f206 6684 	addw	r6, r6, #1668	; 0x684
 80124a8:	463d      	mov	r5, r7
 80124aa:	3410      	adds	r4, #16
 80124ac:	3710      	adds	r7, #16
 80124ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124b0:	42b5      	cmp	r5, r6
 80124b2:	f844 0c10 	str.w	r0, [r4, #-16]
 80124b6:	f844 1c0c 	str.w	r1, [r4, #-12]
 80124ba:	f844 2c08 	str.w	r2, [r4, #-8]
 80124be:	f844 3c04 	str.w	r3, [r4, #-4]
 80124c2:	d1f1      	bne.n	80124a8 <MotionDI_AccCal_getParams+0x18>
 80124c4:	6838      	ldr	r0, [r7, #0]
 80124c6:	6020      	str	r0, [r4, #0]
 80124c8:	bcf0      	pop	{r4, r5, r6, r7}
 80124ca:	4770      	bx	lr
 80124cc:	20001448 	.word	0x20001448

080124d0 <MotionDI_AccCal_reset>:
 80124d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d4:	4e35      	ldr	r6, [pc, #212]	; (80125ac <MotionDI_AccCal_reset+0xdc>)
 80124d6:	f896 3644 	ldrb.w	r3, [r6, #1604]	; 0x644
 80124da:	ed2d 8b02 	vpush	{d8}
 80124de:	b91b      	cbnz	r3, 80124e8 <MotionDI_AccCal_reset+0x18>
 80124e0:	ecbd 8b02 	vpop	{d8}
 80124e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124e8:	f206 6354 	addw	r3, r6, #1620	; 0x654
 80124ec:	4c30      	ldr	r4, [pc, #192]	; (80125b0 <MotionDI_AccCal_reset+0xe0>)
 80124ee:	2100      	movs	r1, #0
 80124f0:	2234      	movs	r2, #52	; 0x34
 80124f2:	4618      	mov	r0, r3
 80124f4:	f504 6a8c 	add.w	sl, r4, #1120	; 0x460
 80124f8:	460d      	mov	r5, r1
 80124fa:	f504 688d 	add.w	r8, r4, #1128	; 0x468
 80124fe:	f003 fc99 	bl	8015e34 <memset>
 8012502:	2114      	movs	r1, #20
 8012504:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 8012508:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80125b4 <MotionDI_AccCal_reset+0xe4>
 801250c:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80125b8 <MotionDI_AccCal_reset+0xe8>
 8012510:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 8012514:	4603      	mov	r3, r0
 8012516:	f8d4 b464 	ldr.w	fp, [r4, #1124]	; 0x464
 801251a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801251e:	f44f 0edc 	mov.w	lr, #7208960	; 0x6e0000
 8012522:	1860      	adds	r0, r4, r1
 8012524:	edda 8a00 	vldr	s17, [sl]
 8012528:	ed98 8a00 	vldr	s16, [r8]
 801252c:	f8c4 1464 	str.w	r1, [r4, #1124]	; 0x464
 8012530:	4629      	mov	r1, r5
 8012532:	6522      	str	r2, [r4, #80]	; 0x50
 8012534:	2230      	movs	r2, #48	; 0x30
 8012536:	edca 7a00 	vstr	s15, [sl]
 801253a:	f8c8 c000 	str.w	ip, [r8]
 801253e:	f8a4 9058 	strh.w	r9, [r4, #88]	; 0x58
 8012542:	60df      	str	r7, [r3, #12]
 8012544:	f894 946c 	ldrb.w	r9, [r4, #1132]	; 0x46c
 8012548:	61df      	str	r7, [r3, #28]
 801254a:	62df      	str	r7, [r3, #44]	; 0x2c
 801254c:	f8c4 e1c8 	str.w	lr, [r4, #456]	; 0x1c8
 8012550:	7025      	strb	r5, [r4, #0]
 8012552:	f886 5684 	strb.w	r5, [r6, #1668]	; 0x684
 8012556:	f884 546c 	strb.w	r5, [r4, #1132]	; 0x46c
 801255a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 801255e:	6565      	str	r5, [r4, #84]	; 0x54
 8012560:	64a5      	str	r5, [r4, #72]	; 0x48
 8012562:	f003 fc67 	bl	8015e34 <memset>
 8012566:	f10b 33ff 	add.w	r3, fp, #4294967295
 801256a:	f44f 7281 	mov.w	r2, #258	; 0x102
 801256e:	6125      	str	r5, [r4, #16]
 8012570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012574:	6267      	str	r7, [r4, #36]	; 0x24
 8012576:	6367      	str	r7, [r4, #52]	; 0x34
 8012578:	6467      	str	r7, [r4, #68]	; 0x44
 801257a:	f886 564c 	strb.w	r5, [r6, #1612]	; 0x64c
 801257e:	82a2      	strh	r2, [r4, #20]
 8012580:	d2ae      	bcs.n	80124e0 <MotionDI_AccCal_reset+0x10>
 8012582:	f1ab 030a 	sub.w	r3, fp, #10
 8012586:	edca 8a00 	vstr	s17, [sl]
 801258a:	ed88 8a00 	vstr	s16, [r8]
 801258e:	b29b      	uxth	r3, r3
 8012590:	f8c4 b464 	str.w	fp, [r4, #1124]	; 0x464
 8012594:	f884 946c 	strb.w	r9, [r4, #1132]	; 0x46c
 8012598:	2b5a      	cmp	r3, #90	; 0x5a
 801259a:	ecbd 8b02 	vpop	{d8}
 801259e:	bf8c      	ite	hi
 80125a0:	2300      	movhi	r3, #0
 80125a2:	2301      	movls	r3, #1
 80125a4:	7023      	strb	r3, [r4, #0]
 80125a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125aa:	bf00      	nop
 80125ac:	20001448 	.word	0x20001448
 80125b0:	200025c0 	.word	0x200025c0
 80125b4:	3a83126f 	.word	0x3a83126f
 80125b8:	3e4ccccd 	.word	0x3e4ccccd

080125bc <MotionDI_GyrCal_getParams>:
 80125bc:	b538      	push	{r3, r4, r5, lr}
 80125be:	4d10      	ldr	r5, [pc, #64]	; (8012600 <MotionDI_GyrCal_getParams+0x44>)
 80125c0:	f895 3644 	ldrb.w	r3, [r5, #1604]	; 0x644
 80125c4:	b903      	cbnz	r3, 80125c8 <MotionDI_GyrCal_getParams+0xc>
 80125c6:	bd38      	pop	{r3, r4, r5, pc}
 80125c8:	4604      	mov	r4, r0
 80125ca:	2224      	movs	r2, #36	; 0x24
 80125cc:	2100      	movs	r1, #0
 80125ce:	3010      	adds	r0, #16
 80125d0:	f003 fc30 	bl	8015e34 <memset>
 80125d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80125d8:	2000      	movs	r0, #0
 80125da:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80125de:	60e3      	str	r3, [r4, #12]
 80125e0:	61e3      	str	r3, [r4, #28]
 80125e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125e4:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 80125e8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80125ec:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
 80125f0:	6061      	str	r1, [r4, #4]
 80125f2:	60a2      	str	r2, [r4, #8]
 80125f4:	6023      	str	r3, [r4, #0]
 80125f6:	f895 36b8 	ldrb.w	r3, [r5, #1720]	; 0x6b8
 80125fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80125fe:	bd38      	pop	{r3, r4, r5, pc}
 8012600:	20001448 	.word	0x20001448

08012604 <MotionDI_GyrCal_reset>:
 8012604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012608:	4c17      	ldr	r4, [pc, #92]	; (8012668 <MotionDI_GyrCal_reset+0x64>)
 801260a:	f894 3644 	ldrb.w	r3, [r4, #1604]	; 0x644
 801260e:	b34b      	cbz	r3, 8012664 <MotionDI_GyrCal_reset+0x60>
 8012610:	f504 63d1 	add.w	r3, r4, #1672	; 0x688
 8012614:	2234      	movs	r2, #52	; 0x34
 8012616:	2100      	movs	r1, #0
 8012618:	4618      	mov	r0, r3
 801261a:	f003 fc0b 	bl	8015e34 <memset>
 801261e:	4603      	mov	r3, r0
 8012620:	f504 60c9 	add.w	r0, r4, #1608	; 0x648
 8012624:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012628:	2100      	movs	r1, #0
 801262a:	f8d4 a000 	ldr.w	sl, [r4]
 801262e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012632:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8012636:	6927      	ldr	r7, [r4, #16]
 8012638:	68e6      	ldr	r6, [r4, #12]
 801263a:	6965      	ldr	r5, [r4, #20]
 801263c:	ed90 0a00 	vldr	s0, [r0]
 8012640:	60da      	str	r2, [r3, #12]
 8012642:	61da      	str	r2, [r3, #28]
 8012644:	62da      	str	r2, [r3, #44]	; 0x2c
 8012646:	f884 16b8 	strb.w	r1, [r4, #1720]	; 0x6b8
 801264a:	f884 16c8 	strb.w	r1, [r4, #1736]	; 0x6c8
 801264e:	f7f8 ff27 	bl	800b4a0 <iNemoEngine_gbias_init>
 8012652:	f8c4 a000 	str.w	sl, [r4]
 8012656:	f8c4 9004 	str.w	r9, [r4, #4]
 801265a:	f8c4 8008 	str.w	r8, [r4, #8]
 801265e:	6127      	str	r7, [r4, #16]
 8012660:	60e6      	str	r6, [r4, #12]
 8012662:	6165      	str	r5, [r4, #20]
 8012664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012668:	20001448 	.word	0x20001448
 801266c:	00000000 	.word	0x00000000

08012670 <MotionDI_update>:
 8012670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	4cc6      	ldr	r4, [pc, #792]	; (8012990 <MotionDI_update+0x320>)
 8012676:	ed2d 8b10 	vpush	{d8-d15}
 801267a:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 801267e:	f894 3644 	ldrb.w	r3, [r4, #1604]	; 0x644
 8012682:	901d      	str	r0, [sp, #116]	; 0x74
 8012684:	2b00      	cmp	r3, #0
 8012686:	f000 817c 	beq.w	8012982 <MotionDI_update+0x312>
 801268a:	2300      	movs	r3, #0
 801268c:	460d      	mov	r5, r1
 801268e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012692:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012696:	f7ee fc25 	bl	8000ee4 <__aeabi_ldivmod>
 801269a:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 801269e:	9017      	str	r0, [sp, #92]	; 0x5c
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	f000 818d 	beq.w	80129c0 <MotionDI_update+0x350>
 80126a6:	2b02      	cmp	r3, #2
 80126a8:	f000 818f 	beq.w	80129ca <MotionDI_update+0x35a>
 80126ac:	ab58      	add	r3, sp, #352	; 0x160
 80126ae:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 80126b2:	f204 6754 	addw	r7, r4, #1620	; 0x654
 80126b6:	9318      	str	r3, [sp, #96]	; 0x60
 80126b8:	ab65      	add	r3, sp, #404	; 0x194
 80126ba:	9319      	str	r3, [sp, #100]	; 0x64
 80126bc:	f894 8180 	ldrb.w	r8, [r4, #384]	; 0x180
 80126c0:	f1b8 0f01 	cmp.w	r8, #1
 80126c4:	f000 8563 	beq.w	801318e <MotionDI_update+0xb1e>
 80126c8:	f1b8 0f02 	cmp.w	r8, #2
 80126cc:	f000 8564 	beq.w	8013198 <MotionDI_update+0xb28>
 80126d0:	4eb0      	ldr	r6, [pc, #704]	; (8012994 <MotionDI_update+0x324>)
 80126d2:	edd5 6a02 	vldr	s13, [r5, #8]
 80126d6:	edd7 7a00 	vldr	s15, [r7]
 80126da:	ed95 7a03 	vldr	s14, [r5, #12]
 80126de:	edd7 5a01 	vldr	s11, [r7, #4]
 80126e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80126e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80126ea:	edd5 7a04 	vldr	s15, [r5, #16]
 80126ee:	ee37 7a65 	vsub.f32	s14, s14, s11
 80126f2:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 80129b4 <MotionDI_update+0x344>
 80126f6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80126fa:	f8d5 9000 	ldr.w	r9, [r5]
 80126fe:	ed97 5a03 	vldr	s10, [r7, #12]
 8012702:	ed97 6a07 	vldr	s12, [r7, #28]
 8012706:	f8d8 3000 	ldr.w	r3, [r8]
 801270a:	ee66 6a85 	vmul.f32	s13, s13, s10
 801270e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012712:	edd7 5a0b 	vldr	s11, [r7, #44]	; 0x2c
 8012716:	ebb9 0303 	subs.w	r3, r9, r3
 801271a:	ed95 5a05 	vldr	s10, [r5, #20]
 801271e:	ed96 6a00 	vldr	s12, [r6]
 8012722:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012726:	931a      	str	r3, [sp, #104]	; 0x68
 8012728:	ee35 5a46 	vsub.f32	s10, s10, s12
 801272c:	edd5 5a06 	vldr	s11, [r5, #24]
 8012730:	ed95 6a07 	vldr	s12, [r5, #28]
 8012734:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012738:	686d      	ldr	r5, [r5, #4]
 801273a:	ed96 4a01 	vldr	s8, [r6, #4]
 801273e:	eb65 0303 	sbc.w	r3, r5, r3
 8012742:	edd6 4a02 	vldr	s9, [r6, #8]
 8012746:	ee75 5ac4 	vsub.f32	s11, s11, s8
 801274a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801274c:	931b      	str	r3, [sp, #108]	; 0x6c
 801274e:	ee36 6a64 	vsub.f32	s12, s12, s9
 8012752:	edc2 6a03 	vstr	s13, [r2, #12]
 8012756:	ed82 7a04 	vstr	s14, [r2, #16]
 801275a:	edc2 7a05 	vstr	s15, [r2, #20]
 801275e:	ed82 5a06 	vstr	s10, [r2, #24]
 8012762:	edc2 5a07 	vstr	s11, [r2, #28]
 8012766:	ed82 6a08 	vstr	s12, [r2, #32]
 801276a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 801276e:	2800      	cmp	r0, #0
 8012770:	f171 0300 	sbcs.w	r3, r1, #0
 8012774:	f2c0 8649 	blt.w	801340a <MotionDI_update+0xd9a>
 8012778:	f7ee fb76 	bl	8000e68 <__aeabi_l2f>
 801277c:	eddf 7a86 	vldr	s15, [pc, #536]	; 8012998 <MotionDI_update+0x328>
 8012780:	ee07 0a10 	vmov	s14, r0
 8012784:	ee27 9a27 	vmul.f32	s18, s14, s15
 8012788:	ab5b      	add	r3, sp, #364	; 0x16c
 801278a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801278e:	4b83      	ldr	r3, [pc, #524]	; (801299c <MotionDI_update+0x32c>)
 8012790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012794:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012796:	e9c8 9500 	strd	r9, r5, [r8]
 801279a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801279e:	4d80      	ldr	r5, [pc, #512]	; (80129a0 <MotionDI_update+0x330>)
 80127a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80127a4:	aa5e      	add	r2, sp, #376	; 0x178
 80127a6:	3518      	adds	r5, #24
 80127a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80127aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80127ae:	aa5b      	add	r2, sp, #364	; 0x16c
 80127b0:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
 80127b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80127b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80127ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80127be:	f1a5 030c 	sub.w	r3, r5, #12
 80127c2:	350c      	adds	r5, #12
 80127c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80127c8:	ab5e      	add	r3, sp, #376	; 0x178
 80127ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80127ce:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
 80127d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	f040 84c0 	bne.w	801315c <MotionDI_update+0xaec>
 80127dc:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 80127e0:	931a      	str	r3, [sp, #104]	; 0x68
 80127e2:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 80127e6:	931c      	str	r3, [sp, #112]	; 0x70
 80127e8:	b133      	cbz	r3, 80127f8 <MotionDI_update+0x188>
 80127ea:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 80127ee:	f003 0301 	and.w	r3, r3, #1
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	f041 80dc 	bne.w	80139b0 <MotionDI_update+0x1340>
 80127f8:	ab90      	add	r3, sp, #576	; 0x240
 80127fa:	f50d 7904 	add.w	r9, sp, #528	; 0x210
 80127fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8012800:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012802:	b123      	cbz	r3, 801280e <MotionDI_update+0x19e>
 8012804:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8012808:	07d8      	lsls	r0, r3, #31
 801280a:	f101 831c 	bmi.w	8013e46 <MotionDI_update+0x17d6>
 801280e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80129b8 <MotionDI_update+0x348>
 8012812:	4d64      	ldr	r5, [pc, #400]	; (80129a4 <MotionDI_update+0x334>)
 8012814:	ae93      	add	r6, sp, #588	; 0x24c
 8012816:	af88      	add	r7, sp, #544	; 0x220
 8012818:	f5a5 7800 	sub.w	r8, r5, #512	; 0x200
 801281c:	f5a5 7c03 	sub.w	ip, r5, #524	; 0x20c
 8012820:	f5a5 7ac2 	sub.w	sl, r5, #388	; 0x184
 8012824:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012828:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801282c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012830:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8012834:	f1a5 030c 	sub.w	r3, r5, #12
 8012838:	ae97      	add	r6, sp, #604	; 0x25c
 801283a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801283e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012840:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012844:	f105 027c 	add.w	r2, r5, #124	; 0x7c
 8012848:	ab8b      	add	r3, sp, #556	; 0x22c
 801284a:	ca07      	ldmia	r2, {r0, r1, r2}
 801284c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8012850:	f105 0288 	add.w	r2, r5, #136	; 0x88
 8012854:	ae9a      	add	r6, sp, #616	; 0x268
 8012856:	ca07      	ldmia	r2, {r0, r1, r2}
 8012858:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801285c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012860:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8012864:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8012868:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801286c:	f5a5 72bc 	sub.w	r2, r5, #376	; 0x178
 8012870:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8012872:	ca07      	ldmia	r2, {r0, r1, r2}
 8012874:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012878:	4671      	mov	r1, lr
 801287a:	4660      	mov	r0, ip
 801287c:	4632      	mov	r2, r6
 801287e:	f7f9 fe97 	bl	800c5b0 <quatErr2EulerErr>
 8012882:	6833      	ldr	r3, [r6, #0]
 8012884:	f1a5 000c 	sub.w	r0, r5, #12
 8012888:	f105 01e4 	add.w	r1, r5, #228	; 0xe4
 801288c:	4632      	mov	r2, r6
 801288e:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
 8012892:	f7f9 fe8d 	bl	800c5b0 <quatErr2EulerErr>
 8012896:	f8d6 c000 	ldr.w	ip, [r6]
 801289a:	aa97      	add	r2, sp, #604	; 0x25c
 801289c:	a893      	add	r0, sp, #588	; 0x24c
 801289e:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 80128a2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80128a4:	f8cb c074 	str.w	ip, [fp, #116]	; 0x74
 80128a8:	f7fa ff0a 	bl	800d6c0 <iNemo_quat2heading>
 80128ac:	463a      	mov	r2, r7
 80128ae:	4648      	mov	r0, r9
 80128b0:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 80128b4:	4659      	mov	r1, fp
 80128b6:	ed8b 0a1c 	vstr	s0, [fp, #112]	; 0x70
 80128ba:	f7fa ff01 	bl	800d6c0 <iNemo_quat2heading>
 80128be:	ab5b      	add	r3, sp, #364	; 0x16c
 80128c0:	f5a5 7741 	sub.w	r7, r5, #772	; 0x304
 80128c4:	ed8b 0a0d 	vstr	s0, [fp, #52]	; 0x34
 80128c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80128cc:	f5a5 733e 	sub.w	r3, r5, #760	; 0x2f8
 80128d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80128d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80128d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80128da:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80128de:	aa5e      	add	r2, sp, #376	; 0x178
 80128e0:	3718      	adds	r7, #24
 80128e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80128e4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80128e8:	aa5b      	add	r2, sp, #364	; 0x16c
 80128ea:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 80128ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80128f0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80128f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80128f8:	f5a5 7382 	sub.w	r3, r5, #260	; 0x104
 80128fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012900:	ab5e      	add	r3, sp, #376	; 0x178
 8012902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012906:	f1a5 03ec 	sub.w	r3, r5, #236	; 0xec
 801290a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801290e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012910:	2b00      	cmp	r3, #0
 8012912:	f040 870d 	bne.w	8013730 <MotionDI_update+0x10c0>
 8012916:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012918:	2b00      	cmp	r3, #0
 801291a:	f040 85c1 	bne.w	80134a0 <MotionDI_update+0xe30>
 801291e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012920:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012924:	ad93      	add	r5, sp, #588	; 0x24c
 8012926:	4634      	mov	r4, r6
 8012928:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801292c:	4b1e      	ldr	r3, [pc, #120]	; (80129a8 <MotionDI_update+0x338>)
 801292e:	ad9a      	add	r5, sp, #616	; 0x268
 8012930:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012934:	4b1d      	ldr	r3, [pc, #116]	; (80129ac <MotionDI_update+0x33c>)
 8012936:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801293a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801293e:	ab97      	add	r3, sp, #604	; 0x25c
 8012940:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012942:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012946:	4b1a      	ldr	r3, [pc, #104]	; (80129b0 <MotionDI_update+0x340>)
 8012948:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801294c:	ab97      	add	r3, sp, #604	; 0x25c
 801294e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012952:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012954:	6030      	str	r0, [r6, #0]
 8012956:	6071      	str	r1, [r6, #4]
 8012958:	60b2      	str	r2, [r6, #8]
 801295a:	f8db 4048 	ldr.w	r4, [fp, #72]	; 0x48
 801295e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012960:	61f0      	str	r0, [r6, #28]
 8012962:	6231      	str	r1, [r6, #32]
 8012964:	6272      	str	r2, [r6, #36]	; 0x24
 8012966:	f8db 104c 	ldr.w	r1, [fp, #76]	; 0x4c
 801296a:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
 801296e:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 8012972:	6131      	str	r1, [r6, #16]
 8012974:	6172      	str	r2, [r6, #20]
 8012976:	60f4      	str	r4, [r6, #12]
 8012978:	61b3      	str	r3, [r6, #24]
 801297a:	cd07      	ldmia	r5!, {r0, r1, r2}
 801297c:	62b0      	str	r0, [r6, #40]	; 0x28
 801297e:	62f1      	str	r1, [r6, #44]	; 0x2c
 8012980:	6332      	str	r2, [r6, #48]	; 0x30
 8012982:	f20d 4da4 	addw	sp, sp, #1188	; 0x4a4
 8012986:	ecbd 8b10 	vpop	{d8-d15}
 801298a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801298e:	bf00      	nop
 8012990:	20001448 	.word	0x20001448
 8012994:	20001ad0 	.word	0x20001ad0
 8012998:	358637bd 	.word	0x358637bd
 801299c:	200016a4 	.word	0x200016a4
 80129a0:	20001698 	.word	0x20001698
 80129a4:	2000199c 	.word	0x2000199c
 80129a8:	20001990 	.word	0x20001990
 80129ac:	20001a18 	.word	0x20001a18
 80129b0:	20001a24 	.word	0x20001a24
 80129b4:	20001b08 	.word	0x20001b08
 80129b8:	20001880 	.word	0x20001880
 80129bc:	447a0000 	.word	0x447a0000
 80129c0:	f894 3684 	ldrb.w	r3, [r4, #1668]	; 0x684
 80129c4:	2b03      	cmp	r3, #3
 80129c6:	f43f ae71 	beq.w	80126ac <MotionDI_update+0x3c>
 80129ca:	ed95 7a02 	vldr	s14, [r5, #8]
 80129ce:	af36      	add	r7, sp, #216	; 0xd8
 80129d0:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 80129bc <MotionDI_update+0x34c>
 80129d4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80129d8:	f894 164c 	ldrb.w	r1, [r4, #1612]	; 0x64c
 80129dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e0:	bfb4      	ite	lt
 80129e2:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80129e6:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80129ea:	eee7 7a26 	vfma.f32	s15, s14, s13
 80129ee:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 80129bc <MotionDI_update+0x34c>
 80129f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80129f6:	ee17 3a90 	vmov	r3, s15
 80129fa:	edd5 7a03 	vldr	s15, [r5, #12]
 80129fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a02:	603b      	str	r3, [r7, #0]
 8012a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a08:	bfb4      	ite	lt
 8012a0a:	eebe 7a00 	vmovlt.f32	s14, #224	; 0xbf000000 -0.5
 8012a0e:	eeb6 7a00 	vmovge.f32	s14, #96	; 0x3f000000  0.5
 8012a12:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012a16:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 80129bc <MotionDI_update+0x34c>
 8012a1a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8012a1e:	ed95 7a04 	vldr	s14, [r5, #16]
 8012a22:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012a26:	ee17 2a90 	vmov	r2, s15
 8012a2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8012a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a32:	bfac      	ite	ge
 8012a34:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8012a38:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8012a3c:	2909      	cmp	r1, #9
 8012a3e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012a46:	ee17 6a90 	vmov	r6, s15
 8012a4a:	edc7 7a02 	vstr	s15, [r7, #8]
 8012a4e:	d802      	bhi.n	8012a56 <MotionDI_update+0x3e6>
 8012a50:	3101      	adds	r1, #1
 8012a52:	f884 164c 	strb.w	r1, [r4, #1612]	; 0x64c
 8012a56:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8012a5a:	48e8      	ldr	r0, [pc, #928]	; (8012dfc <MotionDI_update+0x78c>)
 8012a5c:	428b      	cmp	r3, r1
 8012a5e:	bfa8      	it	ge
 8012a60:	460b      	movge	r3, r1
 8012a62:	428e      	cmp	r6, r1
 8012a64:	bfa8      	it	ge
 8012a66:	460e      	movge	r6, r1
 8012a68:	4283      	cmp	r3, r0
 8012a6a:	bfb8      	it	lt
 8012a6c:	4603      	movlt	r3, r0
 8012a6e:	4282      	cmp	r2, r0
 8012a70:	4637      	mov	r7, r6
 8012a72:	f280 878e 	bge.w	8013992 <MotionDI_update+0x1322>
 8012a76:	4ee2      	ldr	r6, [pc, #904]	; (8012e00 <MotionDI_update+0x790>)
 8012a78:	b218      	sxth	r0, r3
 8012a7a:	4ae0      	ldr	r2, [pc, #896]	; (8012dfc <MotionDI_update+0x78c>)
 8012a7c:	f8b6 31c8 	ldrh.w	r3, [r6, #456]	; 0x1c8
 8012a80:	4297      	cmp	r7, r2
 8012a82:	f8b6 e1ca 	ldrh.w	lr, [r6, #458]	; 0x1ca
 8012a86:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8012a8a:	f103 0301 	add.w	r3, r3, #1
 8012a8e:	bfb8      	it	lt
 8012a90:	4617      	movlt	r7, r2
 8012a92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	f8ad 00e8 	strh.w	r0, [sp, #232]	; 0xe8
 8012a9a:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 8012a9e:	f8c6 21c4 	str.w	r2, [r6, #452]	; 0x1c4
 8012aa2:	b23f      	sxth	r7, r7
 8012aa4:	4573      	cmp	r3, lr
 8012aa6:	9239      	str	r2, [sp, #228]	; 0xe4
 8012aa8:	f8ad 70ec 	strh.w	r7, [sp, #236]	; 0xec
 8012aac:	f8ac 01cc 	strh.w	r0, [ip, #460]	; 0x1cc
 8012ab0:	f8ac 11ce 	strh.w	r1, [ip, #462]	; 0x1ce
 8012ab4:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 8012ab8:	f8ac 71d0 	strh.w	r7, [ip, #464]	; 0x1d0
 8012abc:	9219      	str	r2, [sp, #100]	; 0x64
 8012abe:	f8ad 10ea 	strh.w	r1, [sp, #234]	; 0xea
 8012ac2:	f200 8760 	bhi.w	8013986 <MotionDI_update+0x1316>
 8012ac6:	7831      	ldrb	r1, [r6, #0]
 8012ac8:	2900      	cmp	r1, #0
 8012aca:	f000 84a5 	beq.w	8013418 <MotionDI_update+0xda8>
 8012ace:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 8012ad2:	ea50 0201 	orrs.w	r2, r0, r1
 8012ad6:	f001 8098 	beq.w	8013c0a <MotionDI_update+0x159a>
 8012ada:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8012adc:	f04f 0c00 	mov.w	ip, #0
 8012ae0:	ebb7 0800 	subs.w	r8, r7, r0
 8012ae4:	eb6c 0901 	sbc.w	r9, ip, r1
 8012ae8:	f1b9 0f00 	cmp.w	r9, #0
 8012aec:	bf08      	it	eq
 8012aee:	f5b8 7f7a 	cmpeq.w	r8, #1000	; 0x3e8
 8012af2:	f0c0 848e 	bcc.w	8013412 <MotionDI_update+0xda2>
 8012af6:	f8d6 1464 	ldr.w	r1, [r6, #1124]	; 0x464
 8012afa:	fb01 f103 	mul.w	r1, r1, r3
 8012afe:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8012b02:	bf34      	ite	cc
 8012b04:	2100      	movcc	r1, #0
 8012b06:	2101      	movcs	r1, #1
 8012b08:	2900      	cmp	r1, #0
 8012b0a:	f000 8482 	beq.w	8013412 <MotionDI_update+0xda2>
 8012b0e:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 8012b12:	f44f 7227 	mov.w	r2, #668	; 0x29c
 8012b16:	49bb      	ldr	r1, [pc, #748]	; (8012e04 <MotionDI_update+0x794>)
 8012b18:	4658      	mov	r0, fp
 8012b1a:	f003 f97d 	bl	8015e18 <memcpy>
 8012b1e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8012b22:	2b02      	cmp	r3, #2
 8012b24:	931e      	str	r3, [sp, #120]	; 0x78
 8012b26:	f241 85ce 	bls.w	80146c6 <MotionDI_update+0x2056>
 8012b2a:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 8012b2e:	921c      	str	r2, [sp, #112]	; 0x70
 8012b30:	2a00      	cmp	r2, #0
 8012b32:	f001 840f 	beq.w	8014354 <MotionDI_update+0x1ce4>
 8012b36:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8012b3a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8012b3c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8012b40:	eddf 7ab1 	vldr	s15, [pc, #708]	; 8012e08 <MotionDI_update+0x798>
 8012b44:	9323      	str	r3, [sp, #140]	; 0x8c
 8012b46:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012b4a:	fef8 8a48 	vrinta.f32	s17, s16
 8012b4e:	eefc 8ae8 	vcvt.u32.f32	s17, s17
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	f002 8155 	beq.w	8014e02 <MotionDI_update+0x2792>
 8012b58:	ee18 2a90 	vmov	r2, s17
 8012b5c:	1ad3      	subs	r3, r2, r3
 8012b5e:	4aab      	ldr	r2, [pc, #684]	; (8012e0c <MotionDI_update+0x79c>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	f242 827d 	bls.w	8015060 <MotionDI_update+0x29f0>
 8012b66:	2300      	movs	r3, #0
 8012b68:	7533      	strb	r3, [r6, #20]
 8012b6a:	f896 946c 	ldrb.w	r9, [r6, #1132]	; 0x46c
 8012b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b72:	4ba7      	ldr	r3, [pc, #668]	; (8012e10 <MotionDI_update+0x7a0>)
 8012b74:	f1b9 0f01 	cmp.w	r9, #1
 8012b78:	edd3 7a00 	vldr	s15, [r3]
 8012b7c:	ee87 aa27 	vdiv.f32	s20, s14, s15
 8012b80:	f002 8209 	beq.w	8014f96 <MotionDI_update+0x2926>
 8012b84:	eddf 2aa3 	vldr	s5, [pc, #652]	; 8012e14 <MotionDI_update+0x7a4>
 8012b88:	ee6a 9a0a 	vmul.f32	s19, s20, s20
 8012b8c:	ee69 2aa2 	vmul.f32	s5, s19, s5
 8012b90:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012b92:	465f      	mov	r7, fp
 8012b94:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
 8012b98:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 8012b9c:	084a      	lsrs	r2, r1, #1
 8012b9e:	f9bb 800a 	ldrsh.w	r8, [fp, #10]
 8012ba2:	ee0d 0a10 	vmov	s26, r0
 8012ba6:	ee0c 3a90 	vmov	s25, r3
 8012baa:	428a      	cmp	r2, r1
 8012bac:	ee07 8a90 	vmov	s15, r8
 8012bb0:	eeb8 7acd 	vcvt.f32.s32	s14, s26
 8012bb4:	eeb8 9aec 	vcvt.f32.s32	s18, s25
 8012bb8:	eddf aa97 	vldr	s21, [pc, #604]	; 8012e18 <MotionDI_update+0x7a8>
 8012bbc:	eef8 bae7 	vcvt.f32.s32	s23, s15
 8012bc0:	ed9f 5a96 	vldr	s10, [pc, #600]	; 8012e1c <MotionDI_update+0x7ac>
 8012bc4:	ed9f 4a96 	vldr	s8, [pc, #600]	; 8012e20 <MotionDI_update+0x7b0>
 8012bc8:	ee6a aa2a 	vmul.f32	s21, s20, s21
 8012bcc:	9218      	str	r2, [sp, #96]	; 0x60
 8012bce:	bf28      	it	cs
 8012bd0:	460a      	movcs	r2, r1
 8012bd2:	eef0 5a49 	vmov.f32	s11, s18
 8012bd6:	ee14 0a10 	vmov	r0, s8
 8012bda:	eef0 4a49 	vmov.f32	s9, s18
 8012bde:	4696      	mov	lr, r2
 8012be0:	eeb0 2a6b 	vmov.f32	s4, s23
 8012be4:	eddf 3a8f 	vldr	s7, [pc, #572]	; 8012e24 <MotionDI_update+0x7b4>
 8012be8:	eef0 0a6b 	vmov.f32	s1, s23
 8012bec:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 8012bf0:	eef0 1a47 	vmov.f32	s3, s14
 8012bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8012bf8:	eeb0 3a45 	vmov.f32	s6, s10
 8012bfc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012c00:	eeb8 6a44 	vcvt.f32.u32	s12, s8
 8012c04:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8012c08:	eeb8 ba63 	vcvt.f32.u32	s22, s7
 8012c0c:	fb02 fc02 	mul.w	ip, r2, r2
 8012c10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012c14:	ee07 1a90 	vmov	s15, r1
 8012c18:	ee06 2a90 	vmov	s13, r2
 8012c1c:	fb01 c101 	mla	r1, r1, r1, ip
 8012c20:	ee00 3a10 	vmov	s0, r3
 8012c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c28:	3001      	adds	r0, #1
 8012c2a:	fb03 1303 	mla	r3, r3, r3, r1
 8012c2e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012c32:	b280      	uxth	r0, r0
 8012c34:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012c38:	fec5 5aa7 	vmaxnm.f32	s11, s11, s15
 8012c3c:	fec4 4ae7 	vminnm.f32	s9, s9, s15
 8012c40:	ee07 3a90 	vmov	s15, r3
 8012c44:	fe82 2a26 	vmaxnm.f32	s4, s4, s13
 8012c48:	fec0 0ae6 	vminnm.f32	s1, s1, s13
 8012c4c:	3706      	adds	r7, #6
 8012c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c52:	fec1 1a80 	vmaxnm.f32	s3, s3, s0
 8012c56:	fe81 1a40 	vminnm.f32	s2, s2, s0
 8012c5a:	eef1 6ae7 	vsqrt.f32	s13, s15
 8012c5e:	ee35 5a27 	vadd.f32	s10, s10, s15
 8012c62:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8012c66:	ee33 3a26 	vadd.f32	s6, s6, s13
 8012c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c6e:	eeb4 bae6 	vcmpe.f32	s22, s13
 8012c72:	bf48      	it	mi
 8012c74:	eebc 4ae6 	vcvtmi.u32.f32	s8, s13
 8012c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c7c:	bfc8      	it	gt
 8012c7e:	eefc 3ae6 	vcvtgt.u32.f32	s7, s13
 8012c82:	4570      	cmp	r0, lr
 8012c84:	d3ba      	bcc.n	8012bfc <MotionDI_update+0x58c>
 8012c86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012c88:	4298      	cmp	r0, r3
 8012c8a:	f082 8222 	bcs.w	80150d2 <MotionDI_update+0x2a62>
 8012c8e:	3b01      	subs	r3, #1
 8012c90:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8012c94:	f10b 0c06 	add.w	ip, fp, #6
 8012c98:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8012e1c <MotionDI_update+0x7ac>
 8012c9c:	1a1b      	subs	r3, r3, r0
 8012c9e:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 8012ca2:	fa10 f383 	uxtah	r3, r0, r3
 8012ca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012caa:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 8012cae:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8012cb2:	eeb8 6a44 	vcvt.f32.u32	s12, s8
 8012cb6:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8012cba:	eeb8 ca63 	vcvt.f32.u32	s24, s7
 8012cbe:	fb02 f702 	mul.w	r7, r2, r2
 8012cc2:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8012cc6:	ee07 0a90 	vmov	s15, r0
 8012cca:	ee06 2a90 	vmov	s13, r2
 8012cce:	fb00 7000 	mla	r0, r0, r0, r7
 8012cd2:	ee0b 3a10 	vmov	s22, r3
 8012cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012cda:	3106      	adds	r1, #6
 8012cdc:	fb03 0303 	mla	r3, r3, r3, r0
 8012ce0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012ce4:	eeb8 bacb 	vcvt.f32.s32	s22, s22
 8012ce8:	fec5 5aa7 	vmaxnm.f32	s11, s11, s15
 8012cec:	fec4 4ae7 	vminnm.f32	s9, s9, s15
 8012cf0:	ee07 3a90 	vmov	s15, r3
 8012cf4:	fe82 2a26 	vmaxnm.f32	s4, s4, s13
 8012cf8:	fec0 0ae6 	vminnm.f32	s1, s1, s13
 8012cfc:	fec1 1a8b 	vmaxnm.f32	s3, s3, s22
 8012d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d04:	fe81 1a4b 	vminnm.f32	s2, s2, s22
 8012d08:	eef1 6ae7 	vsqrt.f32	s13, s15
 8012d0c:	ee35 5a27 	vadd.f32	s10, s10, s15
 8012d10:	eef4 6ac6 	vcmpe.f32	s13, s12
 8012d14:	ee30 0a26 	vadd.f32	s0, s0, s13
 8012d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1c:	eef4 6acc 	vcmpe.f32	s13, s24
 8012d20:	bfc8      	it	gt
 8012d22:	eebc 4ae6 	vcvtgt.u32.f32	s8, s13
 8012d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d2a:	bf48      	it	mi
 8012d2c:	eefc 3ae6 	vcvtmi.u32.f32	s7, s13
 8012d30:	458c      	cmp	ip, r1
 8012d32:	d1bc      	bne.n	8012cae <MotionDI_update+0x63e>
 8012d34:	ee75 7ae4 	vsub.f32	s15, s11, s9
 8012d38:	eef4 aae7 	vcmpe.f32	s21, s15
 8012d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d40:	f102 8085 	bmi.w	8014e4e <MotionDI_update+0x27de>
 8012d44:	ee72 6a60 	vsub.f32	s13, s4, s1
 8012d48:	eef4 aae6 	vcmpe.f32	s21, s13
 8012d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d50:	f102 807d 	bmi.w	8014e4e <MotionDI_update+0x27de>
 8012d54:	ee71 6ac1 	vsub.f32	s13, s3, s2
 8012d58:	eef4 aae6 	vcmpe.f32	s21, s13
 8012d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d60:	f102 8075 	bmi.w	8014e4e <MotionDI_update+0x27de>
 8012d64:	2301      	movs	r3, #1
 8012d66:	9328      	str	r3, [sp, #160]	; 0xa0
 8012d68:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8012d6a:	ee70 6a03 	vadd.f32	s13, s0, s6
 8012d6e:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
 8012d72:	f107 3aff 	add.w	sl, r7, #4294967295
 8012d76:	ee07 aa90 	vmov	s15, sl
 8012d7a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8012d7e:	ee07 7a90 	vmov	s15, r7
 8012d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d86:	ee86 baa7 	vdiv.f32	s22, s13, s15
 8012d8a:	ee6b 6a0b 	vmul.f32	s13, s22, s22
 8012d8e:	eea7 5ae6 	vfms.f32	s10, s15, s13
 8012d92:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8012d96:	eef4 6ae2 	vcmpe.f32	s13, s5
 8012d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d9e:	f301 8492 	bgt.w	80146c6 <MotionDI_update+0x2056>
 8012da2:	ee14 2a10 	vmov	r2, s8
 8012da6:	ee13 1a90 	vmov	r1, s7
 8012daa:	4b1f      	ldr	r3, [pc, #124]	; (8012e28 <MotionDI_update+0x7b8>)
 8012dac:	1a52      	subs	r2, r2, r1
 8012dae:	edd3 6a00 	vldr	s13, [r3]
 8012db2:	ee07 2a90 	vmov	s15, r2
 8012db6:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8012dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012dbe:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc6:	f101 847e 	bmi.w	80146c6 <MotionDI_update+0x2056>
 8012dca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012dcc:	1afa      	subs	r2, r7, r3
 8012dce:	ee07 3a90 	vmov	s15, r3
 8012dd2:	ee06 2a10 	vmov	s12, r2
 8012dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012dda:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012dde:	eec3 6a27 	vdiv.f32	s13, s6, s15
 8012de2:	eec0 7a06 	vdiv.f32	s15, s0, s12
 8012de6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012dea:	eef0 7ae7 	vabs.f32	s15, s15
 8012dee:	eef4 aae7 	vcmpe.f32	s21, s15
 8012df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df6:	f101 8466 	bmi.w	80146c6 <MotionDI_update+0x2056>
 8012dfa:	e01b      	b.n	8012e34 <MotionDI_update+0x7c4>
 8012dfc:	ffff8002 	.word	0xffff8002
 8012e00:	200025c0 	.word	0x200025c0
 8012e04:	20002784 	.word	0x20002784
 8012e08:	3a83126f 	.word	0x3a83126f
 8012e0c:	00278d00 	.word	0x00278d00
 8012e10:	20002a20 	.word	0x20002a20
 8012e14:	3ca3d70a 	.word	0x3ca3d70a
 8012e18:	3dcccccd 	.word	0x3dcccccd
	...
 8012e24:	fffffffe 	.word	0xfffffffe
 8012e28:	20002a28 	.word	0x20002a28
 8012e2c:	bdd5e54c 	.word	0xbdd5e54c
 8012e30:	41193238 	.word	0x41193238
 8012e34:	ee7b 7a4a 	vsub.f32	s15, s22, s20
 8012e38:	eef0 7ae7 	vabs.f32	s15, s15
 8012e3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012e40:	eeb4 aae7 	vcmpe.f32	s20, s15
 8012e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e48:	f101 843d 	bmi.w	80146c6 <MotionDI_update+0x2056>
 8012e4c:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8012e50:	f04f 0903 	mov.w	r9, #3
 8012e54:	ed5f 7a0b 	vldr	s15, [pc, #-44]	; 8012e2c <MotionDI_update+0x7bc>
 8012e58:	ee07 3a10 	vmov	s14, r3
 8012e5c:	eeb8 ca47 	vcvt.f32.u32	s24, s14
 8012e60:	ee6c 7a27 	vmul.f32	s15, s24, s15
 8012e64:	ee17 0a90 	vmov	r0, s15
 8012e68:	f7ed fb8e 	bl	8000588 <__aeabi_f2d>
 8012e6c:	ec41 0b10 	vmov	d0, r0, r1
 8012e70:	f007 fd9e 	bl	801a9b0 <exp>
 8012e74:	ec51 0b10 	vmov	r0, r1, d0
 8012e78:	f7ed fed6 	bl	8000c28 <__aeabi_d2f>
 8012e7c:	ed5f 6a14 	vldr	s13, [pc, #-80]	; 8012e30 <MotionDI_update+0x7c0>
 8012e80:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012e84:	ee04 0a10 	vmov	s8, r0
 8012e88:	eec6 7a8c 	vdiv.f32	s15, s13, s24
 8012e8c:	463b      	mov	r3, r7
 8012e8e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012e92:	a883      	add	r0, sp, #524	; 0x20c
 8012e94:	b21b      	sxth	r3, r3
 8012e96:	46c6      	mov	lr, r8
 8012e98:	007f      	lsls	r7, r7, #1
 8012e9a:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012e9e:	931f      	str	r3, [sp, #124]	; 0x7c
 8012ea0:	464b      	mov	r3, r9
 8012ea2:	ee34 6ac4 	vsub.f32	s12, s9, s8
 8012ea6:	f1a7 0c06 	sub.w	ip, r7, #6
 8012eaa:	ee74 6a64 	vsub.f32	s13, s8, s9
 8012eae:	3f0c      	subs	r7, #12
 8012eb0:	eef0 3a44 	vmov.f32	s7, s8
 8012eb4:	4484      	add	ip, r0
 8012eb6:	4407      	add	r7, r0
 8012eb8:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8012ebc:	9520      	str	r5, [sp, #128]	; 0x80
 8012ebe:	46b9      	mov	r9, r7
 8012ec0:	461f      	mov	r7, r3
 8012ec2:	eed7 3a86 	vfnms.f32	s7, s15, s12
 8012ec6:	eee7 4aa6 	vfma.f32	s9, s15, s13
 8012eca:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8012ece:	ee1c 5a90 	vmov	r5, s25
 8012ed2:	f9bb 3010 	ldrsh.w	r3, [fp, #16]
 8012ed6:	2100      	movs	r1, #0
 8012ed8:	eb02 0805 	add.w	r8, r2, r5
 8012edc:	f9bb 5012 	ldrsh.w	r5, [fp, #18]
 8012ee0:	ee1d 2a10 	vmov	r2, s26
 8012ee4:	4473      	add	r3, lr
 8012ee6:	ee07 8a90 	vmov	s15, r8
 8012eea:	9718      	str	r7, [sp, #96]	; 0x60
 8012eec:	442a      	add	r2, r5
 8012eee:	eef8 2ae7 	vcvt.f32.s32	s5, s15
 8012ef2:	ee07 3a90 	vmov	s15, r3
 8012ef6:	4696      	mov	lr, r2
 8012ef8:	460a      	mov	r2, r1
 8012efa:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8012efe:	ee07 ea90 	vmov	s15, lr
 8012f02:	ee22 5a83 	vmul.f32	s10, s5, s6
 8012f06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012f0a:	ee25 6a83 	vmul.f32	s12, s11, s6
 8012f0e:	ee66 7a83 	vmul.f32	s15, s13, s6
 8012f12:	e011      	b.n	8012f38 <MotionDI_update+0x8c8>
 8012f14:	f930 301e 	ldrsh.w	r3, [r0, lr, lsl #1]
 8012f18:	ee09 3a10 	vmov	s18, r3
 8012f1c:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8012f20:	ee0b 3a90 	vmov	s23, r3
 8012f24:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8012f28:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8012f2c:	ee07 3a10 	vmov	s14, r3
 8012f30:	eef8 baeb 	vcvt.f32.s32	s23, s23
 8012f34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f38:	1853      	adds	r3, r2, r1
 8012f3a:	ee69 5a23 	vmul.f32	s11, s18, s7
 8012f3e:	ee6b 6aa3 	vmul.f32	s13, s23, s7
 8012f42:	3101      	adds	r1, #1
 8012f44:	005d      	lsls	r5, r3, #1
 8012f46:	ee27 7a23 	vmul.f32	s14, s14, s7
 8012f4a:	eee4 5a05 	vfma.f32	s11, s8, s10
 8012f4e:	feb8 5a45 	vrinta.f32	s10, s10
 8012f52:	3506      	adds	r5, #6
 8012f54:	eee4 6a06 	vfma.f32	s13, s8, s12
 8012f58:	eea4 7a27 	vfma.f32	s14, s8, s15
 8012f5c:	fef8 7a67 	vrinta.f32	s15, s15
 8012f60:	1942      	adds	r2, r0, r5
 8012f62:	5f45      	ldrsh	r5, [r0, r5]
 8012f64:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 8012f68:	feb8 6a46 	vrinta.f32	s12, s12
 8012f6c:	ee01 5a10 	vmov	s2, r5
 8012f70:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 8012f74:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8012f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f7c:	ee01 5a90 	vmov	s3, r5
 8012f80:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8012f84:	eebd 2ac6 	vcvt.s32.f32	s4, s12
 8012f88:	ee02 2a90 	vmov	s5, r2
 8012f8c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8012f90:	b209      	sxth	r1, r1
 8012f92:	eee4 5a81 	vfma.f32	s11, s9, s2
 8012f96:	ee15 2a10 	vmov	r2, s10
 8012f9a:	ee17 5a90 	vmov	r5, s15
 8012f9e:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8012fa2:	eee4 6aa1 	vfma.f32	s13, s9, s3
 8012fa6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 8012faa:	eef0 7a47 	vmov.f32	s15, s14
 8012fae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012fb2:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8012fb6:	ee12 7a10 	vmov	r7, s4
 8012fba:	458a      	cmp	sl, r1
 8012fbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8012fc0:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8012fc4:	eb00 084e 	add.w	r8, r0, lr, lsl #1
 8012fc8:	eeb0 5a65 	vmov.f32	s10, s11
 8012fcc:	805f      	strh	r7, [r3, #2]
 8012fce:	eeb0 6a66 	vmov.f32	s12, s13
 8012fd2:	809d      	strh	r5, [r3, #4]
 8012fd4:	dc9e      	bgt.n	8012f14 <MotionDI_update+0x8a4>
 8012fd6:	feb8 5a65 	vrinta.f32	s10, s11
 8012fda:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 8012fde:	feb8 6a66 	vrinta.f32	s12, s13
 8012fe2:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8012fe6:	fef8 7a67 	vrinta.f32	s15, s15
 8012fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012fee:	ee15 3a10 	vmov	r3, s10
 8012ff2:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8012ff4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8012ff6:	b21a      	sxth	r2, r3
 8012ff8:	ee16 3a10 	vmov	r3, s12
 8012ffc:	f8ac 2000 	strh.w	r2, [ip]
 8013000:	b219      	sxth	r1, r3
 8013002:	f9b9 e000 	ldrsh.w	lr, [r9]
 8013006:	ee17 3a90 	vmov	r3, s15
 801300a:	f8ac 1002 	strh.w	r1, [ip, #2]
 801300e:	4472      	add	r2, lr
 8013010:	b21b      	sxth	r3, r3
 8013012:	f9b9 e002 	ldrsh.w	lr, [r9, #2]
 8013016:	ee02 2a10 	vmov	s4, r2
 801301a:	f8ac 3004 	strh.w	r3, [ip, #4]
 801301e:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8013022:	4471      	add	r1, lr
 8013024:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8013028:	18d3      	adds	r3, r2, r3
 801302a:	ee02 1a90 	vmov	s5, r1
 801302e:	ee05 3a10 	vmov	s10, r3
 8013032:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8013036:	ee22 2a03 	vmul.f32	s4, s4, s6
 801303a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801303e:	ee62 2a83 	vmul.f32	s5, s5, s6
 8013042:	ee25 5a03 	vmul.f32	s10, s10, s6
 8013046:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801304a:	fef8 7a42 	vrinta.f32	s15, s4
 801304e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013052:	fef8 5a62 	vrinta.f32	s11, s5
 8013056:	005b      	lsls	r3, r3, #1
 8013058:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 801305c:	3d01      	subs	r5, #1
 801305e:	feb8 6a45 	vrinta.f32	s12, s10
 8013062:	f1a3 020c 	sub.w	r2, r3, #12
 8013066:	3b06      	subs	r3, #6
 8013068:	ee17 1a90 	vmov	r1, s15
 801306c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8013070:	f930 8003 	ldrsh.w	r8, [r0, r3]
 8013074:	eb00 0e02 	add.w	lr, r0, r2
 8013078:	5e82      	ldrsh	r2, [r0, r2]
 801307a:	b22d      	sxth	r5, r5
 801307c:	ee01 8a90 	vmov	s3, r8
 8013080:	f9be 8002 	ldrsh.w	r8, [lr, #2]
 8013084:	ee07 2a90 	vmov	s15, r2
 8013088:	f9be e004 	ldrsh.w	lr, [lr, #4]
 801308c:	18c2      	adds	r2, r0, r3
 801308e:	ee06 8a90 	vmov	s13, r8
 8013092:	ee07 ea10 	vmov	s14, lr
 8013096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801309a:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801309e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80130a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80130a6:	2d01      	cmp	r5, #1
 80130a8:	ee00 ea90 	vmov	s1, lr
 80130ac:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80130b0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80130b4:	52c1      	strh	r1, [r0, r3]
 80130b6:	ee01 ea10 	vmov	s2, lr
 80130ba:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80130be:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80130c2:	ee15 3a90 	vmov	r3, s11
 80130c6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80130ca:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80130ce:	8053      	strh	r3, [r2, #2]
 80130d0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80130d4:	ee16 3a10 	vmov	r3, s12
 80130d8:	eee3 6aa0 	vfma.f32	s13, s7, s1
 80130dc:	eea3 7a81 	vfma.f32	s14, s7, s2
 80130e0:	8093      	strh	r3, [r2, #4]
 80130e2:	eee3 7aa1 	vfma.f32	s15, s7, s3
 80130e6:	eee4 6a22 	vfma.f32	s13, s8, s5
 80130ea:	eea4 7a05 	vfma.f32	s14, s8, s10
 80130ee:	eee4 7a02 	vfma.f32	s15, s8, s4
 80130f2:	eef0 2a66 	vmov.f32	s5, s13
 80130f6:	eeb0 5a47 	vmov.f32	s10, s14
 80130fa:	eeb0 2a67 	vmov.f32	s4, s15
 80130fe:	dca2      	bgt.n	8013046 <MotionDI_update+0x9d6>
 8013100:	fef8 2a66 	vrinta.f32	s5, s13
 8013104:	eefd 2ae2 	vcvt.s32.f32	s5, s5
 8013108:	feb8 2a67 	vrinta.f32	s4, s15
 801310c:	feb8 5a47 	vrinta.f32	s10, s14
 8013110:	eebd 2ac2 	vcvt.s32.f32	s4, s4
 8013114:	3f01      	subs	r7, #1
 8013116:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 801311a:	ee12 2a90 	vmov	r2, s5
 801311e:	b2bf      	uxth	r7, r7
 8013120:	b211      	sxth	r1, r2
 8013122:	ee12 3a10 	vmov	r3, s4
 8013126:	ee15 2a10 	vmov	r2, s10
 801312a:	b21b      	sxth	r3, r3
 801312c:	468e      	mov	lr, r1
 801312e:	b215      	sxth	r5, r2
 8013130:	f8ab 100a 	strh.w	r1, [fp, #10]
 8013134:	ee0c 3a90 	vmov	s25, r3
 8013138:	f8ab 3008 	strh.w	r3, [fp, #8]
 801313c:	ee0d 5a10 	vmov	s26, r5
 8013140:	f8ab 500c 	strh.w	r5, [fp, #12]
 8013144:	2f00      	cmp	r7, #0
 8013146:	f001 82ea 	beq.w	801471e <MotionDI_update+0x20ae>
 801314a:	ee07 1a90 	vmov	s15, r1
 801314e:	eeb8 9aec 	vcvt.f32.s32	s18, s25
 8013152:	eeb8 7acd 	vcvt.f32.s32	s14, s26
 8013156:	eef8 bae7 	vcvt.f32.s32	s23, s15
 801315a:	e6b6      	b.n	8012eca <MotionDI_update+0x85a>
 801315c:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8013160:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8013164:	431a      	orrs	r2, r3
 8013166:	07d5      	lsls	r5, r2, #31
 8013168:	f140 8401 	bpl.w	801396e <MotionDI_update+0x12fe>
 801316c:	49c9      	ldr	r1, [pc, #804]	; (8013494 <MotionDI_update+0xe24>)
 801316e:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
 8013172:	2a00      	cmp	r2, #0
 8013174:	f340 8554 	ble.w	8013c20 <MotionDI_update+0x15b0>
 8013178:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 801317c:	3a01      	subs	r2, #1
 801317e:	931a      	str	r3, [sp, #104]	; 0x68
 8013180:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 8013184:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
 8013188:	931c      	str	r3, [sp, #112]	; 0x70
 801318a:	f7ff bb2d 	b.w	80127e8 <MotionDI_update+0x178>
 801318e:	f894 36b8 	ldrb.w	r3, [r4, #1720]	; 0x6b8
 8013192:	2b03      	cmp	r3, #3
 8013194:	f43f aa9c 	beq.w	80126d0 <MotionDI_update+0x60>
 8013198:	462a      	mov	r2, r5
 801319a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801319c:	462e      	mov	r6, r5
 801319e:	f50d 7e02 	add.w	lr, sp, #520	; 0x208
 80131a2:	f8cb 3000 	str.w	r3, [fp]
 80131a6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80131aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80131ac:	6851      	ldr	r1, [r2, #4]
 80131ae:	ed94 3a23 	vldr	s6, [r4, #140]	; 0x8c
 80131b2:	6892      	ldr	r2, [r2, #8]
 80131b4:	edd4 3a24 	vldr	s7, [r4, #144]	; 0x90
 80131b8:	ed94 4a25 	vldr	s8, [r4, #148]	; 0x94
 80131bc:	ed83 3a00 	vstr	s6, [r3]
 80131c0:	edc3 3a01 	vstr	s7, [r3, #4]
 80131c4:	ed83 4a02 	vstr	s8, [r3, #8]
 80131c8:	ab85      	add	r3, sp, #532	; 0x214
 80131ca:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
 80131ce:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
 80131d2:	f856 0f14 	ldr.w	r0, [r6, #20]!
 80131d6:	6871      	ldr	r1, [r6, #4]
 80131d8:	68b2      	ldr	r2, [r6, #8]
 80131da:	c307      	stmia	r3!, {r0, r1, r2}
 80131dc:	f1bc 0f00 	cmp.w	ip, #0
 80131e0:	d102      	bne.n	80131e8 <MotionDI_update+0xb78>
 80131e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80131e4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80131e8:	eddb 6a01 	vldr	s13, [fp, #4]
 80131ec:	f10c 0c01 	add.w	ip, ip, #1
 80131f0:	edd4 4a18 	vldr	s9, [r4, #96]	; 0x60
 80131f4:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 80131f8:	fa0f fc8c 	sxth.w	ip, ip
 80131fc:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8013200:	eddb 7a02 	vldr	s15, [fp, #8]
 8013204:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
 8013208:	ee76 6a81 	vadd.f32	s13, s13, s2
 801320c:	ed9b 7a03 	vldr	s14, [fp, #12]
 8013210:	ed94 0a1a 	vldr	s0, [r4, #104]	; 0x68
 8013214:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8013218:	ed9b 2a04 	vldr	s4, [fp, #16]
 801321c:	edd4 1a0a 	vldr	s3, [r4, #40]	; 0x28
 8013220:	eea7 0a07 	vfma.f32	s0, s14, s14
 8013224:	eef0 8a64 	vmov.f32	s17, s9
 8013228:	edd4 4a16 	vldr	s9, [r4, #88]	; 0x58
 801322c:	ed9b 5a05 	vldr	s10, [fp, #20]
 8013230:	eee2 1a02 	vfma.f32	s3, s4, s4
 8013234:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8013238:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801323c:	eddb 2a06 	vldr	s5, [fp, #24]
 8013240:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 8013244:	eee5 5a05 	vfma.f32	s11, s10, s10
 8013248:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
 801324c:	edd4 4a07 	vldr	s9, [r4, #28]
 8013250:	eee2 0aa2 	vfma.f32	s1, s5, s5
 8013254:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8013258:	ee37 7a01 	vadd.f32	s14, s14, s2
 801325c:	ee32 2a24 	vadd.f32	s4, s4, s9
 8013260:	ed94 1a08 	vldr	s2, [r4, #32]
 8013264:	edd4 4a09 	vldr	s9, [r4, #36]	; 0x24
 8013268:	3301      	adds	r3, #1
 801326a:	ee35 5a01 	vadd.f32	s10, s10, s2
 801326e:	f8a4 c018 	strh.w	ip, [r4, #24]
 8013272:	ee72 2aa4 	vadd.f32	s5, s5, s9
 8013276:	b21b      	sxth	r3, r3
 8013278:	edc4 8a18 	vstr	s17, [r4, #96]	; 0x60
 801327c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8013280:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 8013284:	ed84 6a19 	vstr	s12, [r4, #100]	; 0x64
 8013288:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
 801328c:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
 8013290:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 8013294:	edc4 1a0a 	vstr	s3, [r4, #40]	; 0x28
 8013298:	ed84 2a07 	vstr	s4, [r4, #28]
 801329c:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
 80132a0:	ed84 5a08 	vstr	s10, [r4, #32]
 80132a4:	edc4 2a09 	vstr	s5, [r4, #36]	; 0x24
 80132a8:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 80132ac:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80132b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80132b2:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80132b6:	4291      	cmp	r1, r2
 80132b8:	f4ff aa0a 	bcc.w	80126d0 <MotionDI_update+0x60>
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f341 81e0 	ble.w	8014682 <MotionDI_update+0x2012>
 80132c2:	ee04 3a90 	vmov	s9, r3
 80132c6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80132ca:	ed94 aa1d 	vldr	s20, [r4, #116]	; 0x74
 80132ce:	f1bc 0f00 	cmp.w	ip, #0
 80132d2:	eeb8 1ae4 	vcvt.f32.s32	s2, s9
 80132d6:	edd4 9a1e 	vldr	s19, [r4, #120]	; 0x78
 80132da:	ed94 9a1c 	vldr	s18, [r4, #112]	; 0x70
 80132de:	eec8 4a01 	vdiv.f32	s9, s16, s2
 80132e2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80132e6:	ee24 6a86 	vmul.f32	s12, s9, s12
 80132ea:	ee64 7aa7 	vmul.f32	s15, s9, s15
 80132ee:	ee27 7a24 	vmul.f32	s14, s14, s9
 80132f2:	ed84 0a1a 	vstr	s0, [r4, #104]	; 0x68
 80132f6:	ed84 6a19 	vstr	s12, [r4, #100]	; 0x64
 80132fa:	ee30 6a06 	vadd.f32	s12, s0, s12
 80132fe:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8013302:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
 8013306:	ee64 4aa8 	vmul.f32	s9, s9, s17
 801330a:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 801330e:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8013312:	ee37 0a69 	vsub.f32	s0, s14, s19
 8013316:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 801331a:	ee77 7aca 	vsub.f32	s15, s15, s20
 801331e:	edc4 4a18 	vstr	s9, [r4, #96]	; 0x60
 8013322:	eee6 4ae6 	vfms.f32	s9, s13, s13
 8013326:	eeb0 0ac0 	vabs.f32	s0, s0
 801332a:	eef0 7ae7 	vabs.f32	s15, s15
 801332e:	eea7 6a47 	vfms.f32	s12, s14, s14
 8013332:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8013336:	ee70 7a27 	vadd.f32	s15, s0, s15
 801333a:	eef0 6ae6 	vabs.f32	s13, s13
 801333e:	ee74 4a86 	vadd.f32	s9, s9, s12
 8013342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013346:	f341 81de 	ble.w	8014706 <MotionDI_update+0x2096>
 801334a:	ee07 ca10 	vmov	s14, ip
 801334e:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8013352:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 8013356:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 801335a:	6922      	ldr	r2, [r4, #16]
 801335c:	ebb2 0f4c 	cmp.w	r2, ip, lsl #1
 8013360:	ee88 0a06 	vdiv.f32	s0, s16, s12
 8013364:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 8013368:	ee60 5a25 	vmul.f32	s11, s0, s11
 801336c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8013370:	ee20 5a05 	vmul.f32	s10, s0, s10
 8013374:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
 8013378:	ee62 2a80 	vmul.f32	s5, s5, s0
 801337c:	ee70 5aa5 	vadd.f32	s11, s1, s11
 8013380:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 8013384:	ee22 7a00 	vmul.f32	s14, s4, s0
 8013388:	ed84 5a08 	vstr	s10, [r4, #32]
 801338c:	ee61 1a80 	vmul.f32	s3, s3, s0
 8013390:	edc4 2a09 	vstr	s5, [r4, #36]	; 0x24
 8013394:	eee5 5a45 	vfms.f32	s11, s10, s10
 8013398:	ee72 6ae6 	vsub.f32	s13, s5, s13
 801339c:	ed84 7a07 	vstr	s14, [r4, #28]
 80133a0:	ee35 5a68 	vsub.f32	s10, s10, s17
 80133a4:	edc4 1a0a 	vstr	s3, [r4, #40]	; 0x28
 80133a8:	eee7 1a47 	vfms.f32	s3, s14, s14
 80133ac:	eef0 6ae6 	vabs.f32	s13, s13
 80133b0:	eeb0 5ac5 	vabs.f32	s10, s10
 80133b4:	eee2 5ae2 	vfms.f32	s11, s5, s5
 80133b8:	ee37 7a48 	vsub.f32	s14, s14, s16
 80133bc:	ee36 5a85 	vadd.f32	s10, s13, s10
 80133c0:	eeb0 7ac7 	vabs.f32	s14, s14
 80133c4:	ee71 1aa5 	vadd.f32	s3, s3, s11
 80133c8:	ee35 5a07 	vadd.f32	s10, s10, s14
 80133cc:	f280 84b6 	bge.w	8013d3c <MotionDI_update+0x16cc>
 80133d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80133d4:	ee66 1a21 	vmul.f32	s3, s12, s3
 80133d8:	ed94 7a01 	vldr	s14, [r4, #4]
 80133dc:	ee06 ca90 	vmov	s13, ip
 80133e0:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 80133e4:	eec1 6aa5 	vdiv.f32	s13, s3, s11
 80133e8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80133ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f0:	f140 84a4 	bpl.w	8013d3c <MotionDI_update+0x16cc>
 80133f4:	ed94 7a02 	vldr	s14, [r4, #8]
 80133f8:	eeb4 5ac7 	vcmpe.f32	s10, s14
 80133fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013400:	bf4c      	ite	mi
 8013402:	2101      	movmi	r1, #1
 8013404:	2100      	movpl	r1, #0
 8013406:	f000 bc9a 	b.w	8013d3e <MotionDI_update+0x16ce>
 801340a:	ed9f 9a23 	vldr	s18, [pc, #140]	; 8013498 <MotionDI_update+0xe28>
 801340e:	f7ff b9bb 	b.w	8012788 <MotionDI_update+0x118>
 8013412:	459e      	cmp	lr, r3
 8013414:	f43f ab7b 	beq.w	8012b0e <MotionDI_update+0x49e>
 8013418:	aa58      	add	r2, sp, #352	; 0x160
 801341a:	7d33      	ldrb	r3, [r6, #20]
 801341c:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 8013420:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8013424:	9218      	str	r2, [sp, #96]	; 0x60
 8013426:	aa33      	add	r2, sp, #204	; 0xcc
 8013428:	921c      	str	r2, [sp, #112]	; 0x70
 801342a:	aa65      	add	r2, sp, #404	; 0x194
 801342c:	9219      	str	r2, [sp, #100]	; 0x64
 801342e:	edd6 6a07 	vldr	s13, [r6, #28]
 8013432:	ed96 7a08 	vldr	s14, [r6, #32]
 8013436:	edd6 7a06 	vldr	s15, [r6, #24]
 801343a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801343e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013442:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 8013446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801344a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801344c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801344e:	edc3 6a01 	vstr	s13, [r3, #4]
 8013452:	ed83 7a02 	vstr	s14, [r3, #8]
 8013456:	edc3 7a00 	vstr	s15, [r3]
 801345a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 801345c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 801345e:	f8ca 2000 	str.w	r2, [sl]
 8013462:	f8ca 3004 	str.w	r3, [sl, #4]
 8013466:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8013468:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801346a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801346c:	f8ca 1008 	str.w	r1, [sl, #8]
 8013470:	f8ca 200c 	str.w	r2, [sl, #12]
 8013474:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8013476:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013478:	f8ca 3010 	str.w	r3, [sl, #16]
 801347c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801347e:	4f07      	ldr	r7, [pc, #28]	; (801349c <MotionDI_update+0xe2c>)
 8013480:	f8ca 0014 	str.w	r0, [sl, #20]
 8013484:	f8ca 1018 	str.w	r1, [sl, #24]
 8013488:	f8ca 201c 	str.w	r2, [sl, #28]
 801348c:	f8ca 3020 	str.w	r3, [sl, #32]
 8013490:	f7ff b914 	b.w	80126bc <MotionDI_update+0x4c>
 8013494:	200010f8 	.word	0x200010f8
 8013498:	3c23d70a 	.word	0x3c23d70a
 801349c:	20001a9c 	.word	0x20001a9c
 80134a0:	af36      	add	r7, sp, #216	; 0xd8
 80134a2:	4a9b      	ldr	r2, [pc, #620]	; (8013710 <MotionDI_update+0x10a0>)
 80134a4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80134a8:	f04f 0c00 	mov.w	ip, #0
 80134ac:	ae46      	add	r6, sp, #280	; 0x118
 80134ae:	f5a2 7165 	sub.w	r1, r2, #916	; 0x394
 80134b2:	4638      	mov	r0, r7
 80134b4:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 80134b8:	f8c6 c000 	str.w	ip, [r6]
 80134bc:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80134c0:	f8c6 c004 	str.w	ip, [r6, #4]
 80134c4:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 80134c8:	f8c6 c008 	str.w	ip, [r6, #8]
 80134cc:	f8c9 c000 	str.w	ip, [r9]
 80134d0:	f8c9 c004 	str.w	ip, [r9, #4]
 80134d4:	f8c9 c008 	str.w	ip, [r9, #8]
 80134d8:	961e      	str	r6, [sp, #120]	; 0x78
 80134da:	edcd aa49 	vstr	s21, [sp, #292]	; 0x124
 80134de:	f894 6161 	ldrb.w	r6, [r4, #353]	; 0x161
 80134e2:	edc9 aa03 	vstr	s21, [r9, #12]
 80134e6:	f7f8 f827 	bl	800b538 <rotVect>
 80134ea:	4a8a      	ldr	r2, [pc, #552]	; (8013714 <MotionDI_update+0x10a4>)
 80134ec:	4650      	mov	r0, sl
 80134ee:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 80134f2:	f7f8 f821 	bl	800b538 <rotVect>
 80134f6:	4a88      	ldr	r2, [pc, #544]	; (8013718 <MotionDI_update+0x10a8>)
 80134f8:	4640      	mov	r0, r8
 80134fa:	f5a2 715f 	sub.w	r1, r2, #892	; 0x37c
 80134fe:	f7f8 f81b 	bl	800b538 <rotVect>
 8013502:	edd7 7a00 	vldr	s15, [r7]
 8013506:	ed97 7a01 	vldr	s14, [r7, #4]
 801350a:	ed9a 8a00 	vldr	s16, [sl]
 801350e:	eeb1 ca67 	vneg.f32	s24, s15
 8013512:	edda 8a01 	vldr	s17, [sl, #4]
 8013516:	eef1 ca47 	vneg.f32	s25, s14
 801351a:	ed98 ba02 	vldr	s22, [r8, #8]
 801351e:	eeb1 8a48 	vneg.f32	s16, s16
 8013522:	4b7e      	ldr	r3, [pc, #504]	; (801371c <MotionDI_update+0x10ac>)
 8013524:	eef1 8a68 	vneg.f32	s17, s17
 8013528:	eef1 ba4b 	vneg.f32	s23, s22
 801352c:	edd8 9a00 	vldr	s19, [r8]
 8013530:	ed98 aa01 	vldr	s20, [r8, #4]
 8013534:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8013538:	ed87 ca01 	vstr	s24, [r7, #4]
 801353c:	edc7 ca00 	vstr	s25, [r7]
 8013540:	ed8a 8a01 	vstr	s16, [sl, #4]
 8013544:	edca 8a00 	vstr	s17, [sl]
 8013548:	edc8 ba02 	vstr	s23, [r8, #8]
 801354c:	edc8 9a01 	vstr	s19, [r8, #4]
 8013550:	ed88 aa00 	vstr	s20, [r8]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d057      	beq.n	8013608 <MotionDI_update+0xf98>
 8013558:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801355c:	ed97 da02 	vldr	s26, [r7, #8]
 8013560:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013564:	eeed 7a0d 	vfma.f32	s15, s26, s26
 8013568:	ee17 0a90 	vmov	r0, s15
 801356c:	f7ed f80c 	bl	8000588 <__aeabi_f2d>
 8013570:	ec41 0b10 	vmov	d0, r0, r1
 8013574:	f007 fa6a 	bl	801aa4c <sqrt>
 8013578:	ec51 0b10 	vmov	r0, r1, d0
 801357c:	f7ed fb54 	bl	8000c28 <__aeabi_d2f>
 8013580:	ee0d 0a90 	vmov	s27, r0
 8013584:	f7ed f800 	bl	8000588 <__aeabi_f2d>
 8013588:	a35f      	add	r3, pc, #380	; (adr r3, 8013708 <MotionDI_update+0x1098>)
 801358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358e:	f7ed fac5 	bl	8000b1c <__aeabi_dcmplt>
 8013592:	b938      	cbnz	r0, 80135a4 <MotionDI_update+0xf34>
 8013594:	eeca 7aad 	vdiv.f32	s15, s21, s27
 8013598:	ee6c caa7 	vmul.f32	s25, s25, s15
 801359c:	ee2c ca27 	vmul.f32	s24, s24, s15
 80135a0:	ee2d da27 	vmul.f32	s26, s26, s15
 80135a4:	ee69 7aa9 	vmul.f32	s15, s19, s19
 80135a8:	edc7 ca00 	vstr	s25, [r7]
 80135ac:	ed87 ca01 	vstr	s24, [r7, #4]
 80135b0:	ed87 da02 	vstr	s26, [r7, #8]
 80135b4:	eeea 7a0a 	vfma.f32	s15, s20, s20
 80135b8:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 80135bc:	ee17 0a90 	vmov	r0, s15
 80135c0:	f7ec ffe2 	bl	8000588 <__aeabi_f2d>
 80135c4:	ec41 0b10 	vmov	d0, r0, r1
 80135c8:	f007 fa40 	bl	801aa4c <sqrt>
 80135cc:	ec51 0b10 	vmov	r0, r1, d0
 80135d0:	f7ed fb2a 	bl	8000c28 <__aeabi_d2f>
 80135d4:	ee0a 0a90 	vmov	s21, r0
 80135d8:	f7ec ffd6 	bl	8000588 <__aeabi_f2d>
 80135dc:	a34a      	add	r3, pc, #296	; (adr r3, 8013708 <MotionDI_update+0x1098>)
 80135de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e2:	f7ed fa9b 	bl	8000b1c <__aeabi_dcmplt>
 80135e6:	b948      	cbnz	r0, 80135fc <MotionDI_update+0xf8c>
 80135e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80135ec:	eec7 7a2a 	vdiv.f32	s15, s14, s21
 80135f0:	ee2a aa27 	vmul.f32	s20, s20, s15
 80135f4:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80135f8:	ee6b baa7 	vmul.f32	s23, s23, s15
 80135fc:	ed88 aa00 	vstr	s20, [r8]
 8013600:	edc8 9a01 	vstr	s19, [r8, #4]
 8013604:	edc8 ba02 	vstr	s23, [r8, #8]
 8013608:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 801360c:	2a00      	cmp	r2, #0
 801360e:	f000 82f5 	beq.w	8013bfc <MotionDI_update+0x158c>
 8013612:	ee07 2a90 	vmov	s15, r2
 8013616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801361a:	eec8 8a87 	vdiv.f32	s17, s17, s14
 801361e:	ee88 8a07 	vdiv.f32	s16, s16, s14
 8013622:	edda 6a02 	vldr	s13, [sl, #8]
 8013626:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 801362a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 801372c <MotionDI_update+0x10bc>
 801362e:	3301      	adds	r3, #1
 8013630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013634:	ed98 6a0e 	vldr	s12, [r8, #56]	; 0x38
 8013638:	b2db      	uxtb	r3, r3
 801363a:	edd8 6a0c 	vldr	s13, [r8, #48]	; 0x30
 801363e:	ed98 7a0d 	vldr	s14, [r8, #52]	; 0x34
 8013642:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8013646:	ee37 8a08 	vadd.f32	s16, s14, s16
 801364a:	fbb3 f1f2 	udiv	r1, r3, r2
 801364e:	fb02 3311 	mls	r3, r2, r1, r3
 8013652:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
 8013656:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 801365a:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 801365e:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 8013662:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013666:	edc8 7a0e 	vstr	s15, [r8, #56]	; 0x38
 801366a:	2a00      	cmp	r2, #0
 801366c:	f040 8548 	bne.w	8014100 <MotionDI_update+0x1a90>
 8013670:	4b2b      	ldr	r3, [pc, #172]	; (8013720 <MotionDI_update+0x10b0>)
 8013672:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013674:	4619      	mov	r1, r3
 8013676:	f1a3 0c60 	sub.w	ip, r3, #96	; 0x60
 801367a:	931f      	str	r3, [sp, #124]	; 0x7c
 801367c:	3b10      	subs	r3, #16
 801367e:	f1a1 0220 	sub.w	r2, r1, #32
 8013682:	9501      	str	r5, [sp, #4]
 8013684:	3940      	subs	r1, #64	; 0x40
 8013686:	f8cd c000 	str.w	ip, [sp]
 801368a:	f7f8 ff43 	bl	800c514 <SpacePointGyroPropRedist>
 801368e:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 8013692:	2b01      	cmp	r3, #1
 8013694:	f000 87de 	beq.w	8014654 <MotionDI_update+0x1fe4>
 8013698:	4b22      	ldr	r3, [pc, #136]	; (8013724 <MotionDI_update+0x10b4>)
 801369a:	4639      	mov	r1, r7
 801369c:	f894 2162 	ldrb.w	r2, [r4, #354]	; 0x162
 80136a0:	f103 000c 	add.w	r0, r3, #12
 80136a4:	e9cd 0200 	strd	r0, r2, [sp]
 80136a8:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 80136ac:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 80136b0:	f7f9 f988 	bl	800c9c4 <output_update>
 80136b4:	2300      	movs	r3, #0
 80136b6:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
 80136ba:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
 80136be:	0793      	lsls	r3, r2, #30
 80136c0:	d409      	bmi.n	80136d6 <MotionDI_update+0x1066>
 80136c2:	f894 1144 	ldrb.w	r1, [r4, #324]	; 0x144
 80136c6:	fbb1 f3f6 	udiv	r3, r1, r6
 80136ca:	fb06 1613 	mls	r6, r6, r3, r1
 80136ce:	f016 0fff 	tst.w	r6, #255	; 0xff
 80136d2:	f000 8646 	beq.w	8014362 <MotionDI_update+0x1cf2>
 80136d6:	4a14      	ldr	r2, [pc, #80]	; (8013728 <MotionDI_update+0x10b8>)
 80136d8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80136da:	4611      	mov	r1, r2
 80136dc:	f7f8 f93a 	bl	800b954 <m_qmult_eml>
 80136e0:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	f47f a91a 	bne.w	801291e <MotionDI_update+0x2ae>
 80136ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80136ec:	edd1 7a08 	vldr	s15, [r1, #32]
 80136f0:	698a      	ldr	r2, [r1, #24]
 80136f2:	eef1 7a67 	vneg.f32	s15, s15
 80136f6:	69cb      	ldr	r3, [r1, #28]
 80136f8:	61ca      	str	r2, [r1, #28]
 80136fa:	618b      	str	r3, [r1, #24]
 80136fc:	edc1 7a08 	vstr	s15, [r1, #32]
 8013700:	f7ff b90d 	b.w	801291e <MotionDI_update+0x2ae>
 8013704:	f3af 8000 	nop.w
 8013708:	a0b5ed8d 	.word	0xa0b5ed8d
 801370c:	3eb0c6f7 	.word	0x3eb0c6f7
 8013710:	200018a4 	.word	0x200018a4
 8013714:	200018b0 	.word	0x200018b0
 8013718:	20001898 	.word	0x20001898
 801371c:	200010f8 	.word	0x200010f8
 8013720:	20001984 	.word	0x20001984
 8013724:	20001a18 	.word	0x20001a18
 8013728:	20001934 	.word	0x20001934
 801372c:	2000188c 	.word	0x2000188c
 8013730:	aa46      	add	r2, sp, #280	; 0x118
 8013732:	af36      	add	r7, sp, #216	; 0xd8
 8013734:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8013738:	f04f 0c00 	mov.w	ip, #0
 801373c:	4616      	mov	r6, r2
 801373e:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8013742:	4638      	mov	r0, r7
 8013744:	f5a5 6196 	sub.w	r1, r5, #1200	; 0x4b0
 8013748:	921e      	str	r2, [sp, #120]	; 0x78
 801374a:	f5a5 723e 	sub.w	r2, r5, #760	; 0x2f8
 801374e:	f8c6 c000 	str.w	ip, [r6]
 8013752:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 8013756:	f8c6 c004 	str.w	ip, [r6, #4]
 801375a:	f8c6 c008 	str.w	ip, [r6, #8]
 801375e:	f8c9 c000 	str.w	ip, [r9]
 8013762:	f8c9 c004 	str.w	ip, [r9, #4]
 8013766:	f8c9 c008 	str.w	ip, [r9, #8]
 801376a:	edc6 9a03 	vstr	s19, [r6, #12]
 801376e:	edc9 9a03 	vstr	s19, [r9, #12]
 8013772:	f894 6125 	ldrb.w	r6, [r4, #293]	; 0x125
 8013776:	f7f7 fedf 	bl	800b538 <rotVect>
 801377a:	f5a5 723b 	sub.w	r2, r5, #748	; 0x2ec
 801377e:	4650      	mov	r0, sl
 8013780:	f5a5 6193 	sub.w	r1, r5, #1176	; 0x498
 8013784:	f7f7 fed8 	bl	800b538 <rotVect>
 8013788:	f5a5 7241 	sub.w	r2, r5, #772	; 0x304
 801378c:	a83c      	add	r0, sp, #240	; 0xf0
 801378e:	f2a5 41a4 	subw	r1, r5, #1188	; 0x4a4
 8013792:	f7f7 fed1 	bl	800b538 <rotVect>
 8013796:	edd7 7a00 	vldr	s15, [r7]
 801379a:	edd7 5a01 	vldr	s11, [r7, #4]
 801379e:	ed9a 7a00 	vldr	s14, [sl]
 80137a2:	eeb1 aa67 	vneg.f32	s20, s15
 80137a6:	edda 6a01 	vldr	s13, [sl, #4]
 80137aa:	eef1 aa65 	vneg.f32	s21, s11
 80137ae:	ed9d ba3e 	vldr	s22, [sp, #248]	; 0xf8
 80137b2:	eef1 ba47 	vneg.f32	s23, s14
 80137b6:	4b7a      	ldr	r3, [pc, #488]	; (80139a0 <MotionDI_update+0x1330>)
 80137b8:	eeb1 ca66 	vneg.f32	s24, s13
 80137bc:	eeb1 da4b 	vneg.f32	s26, s22
 80137c0:	ed9d 8a3c 	vldr	s16, [sp, #240]	; 0xf0
 80137c4:	eddd 8a3d 	vldr	s17, [sp, #244]	; 0xf4
 80137c8:	f893 38e0 	ldrb.w	r3, [r3, #2272]	; 0x8e0
 80137cc:	ed87 aa01 	vstr	s20, [r7, #4]
 80137d0:	edc7 aa00 	vstr	s21, [r7]
 80137d4:	edca ba01 	vstr	s23, [sl, #4]
 80137d8:	ed8a ca00 	vstr	s24, [sl]
 80137dc:	ed8d da3e 	vstr	s26, [sp, #248]	; 0xf8
 80137e0:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 80137e4:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d045      	beq.n	8013878 <MotionDI_update+0x1208>
 80137ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80137f0:	edd7 ca02 	vldr	s25, [r7, #8]
 80137f4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80137f8:	eeec 7aac 	vfma.f32	s15, s25, s25
 80137fc:	ee17 0a90 	vmov	r0, s15
 8013800:	f7ec fec2 	bl	8000588 <__aeabi_f2d>
 8013804:	ec41 0b10 	vmov	d0, r0, r1
 8013808:	f007 f920 	bl	801aa4c <sqrt>
 801380c:	ec51 0b10 	vmov	r0, r1, d0
 8013810:	f7ed fa0a 	bl	8000c28 <__aeabi_d2f>
 8013814:	ee07 0a90 	vmov	s15, r0
 8013818:	ee28 7a08 	vmul.f32	s14, s16, s16
 801381c:	ee89 6aa7 	vdiv.f32	s12, s19, s15
 8013820:	eea8 7aa8 	vfma.f32	s14, s17, s17
 8013824:	eeab 7a0b 	vfma.f32	s14, s22, s22
 8013828:	ee66 aa2a 	vmul.f32	s21, s12, s21
 801382c:	ee26 aa0a 	vmul.f32	s20, s12, s20
 8013830:	ee17 0a10 	vmov	r0, s14
 8013834:	ee26 6a2c 	vmul.f32	s12, s12, s25
 8013838:	edc7 aa00 	vstr	s21, [r7]
 801383c:	ed87 aa01 	vstr	s20, [r7, #4]
 8013840:	ed87 6a02 	vstr	s12, [r7, #8]
 8013844:	f7ec fea0 	bl	8000588 <__aeabi_f2d>
 8013848:	ec41 0b10 	vmov	d0, r0, r1
 801384c:	f007 f8fe 	bl	801aa4c <sqrt>
 8013850:	ec51 0b10 	vmov	r0, r1, d0
 8013854:	f7ed f9e8 	bl	8000c28 <__aeabi_d2f>
 8013858:	ee07 0a90 	vmov	s15, r0
 801385c:	eec9 7aa7 	vdiv.f32	s15, s19, s15
 8013860:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8013864:	ee27 8a88 	vmul.f32	s16, s15, s16
 8013868:	ee67 7a8d 	vmul.f32	s15, s15, s26
 801386c:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 8013870:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 8013874:	edcd 7a3e 	vstr	s15, [sp, #248]	; 0xf8
 8013878:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
 801387c:	2900      	cmp	r1, #0
 801387e:	f000 81b6 	beq.w	8013bee <MotionDI_update+0x157e>
 8013882:	ee07 1a90 	vmov	s15, r1
 8013886:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801388a:	ee8c ca06 	vdiv.f32	s24, s24, s12
 801388e:	eecb ba86 	vdiv.f32	s23, s23, s12
 8013892:	ed9a 7a02 	vldr	s14, [sl, #8]
 8013896:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 801389a:	edd4 6a9d 	vldr	s13, [r4, #628]	; 0x274
 801389e:	3301      	adds	r3, #1
 80138a0:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
 80138a4:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80138a8:	ed94 6a9f 	vldr	s12, [r4, #636]	; 0x27c
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	ed94 7a9e 	vldr	s14, [r4, #632]	; 0x278
 80138b2:	ee76 6a8c 	vadd.f32	s13, s13, s24
 80138b6:	ee37 7a2b 	vadd.f32	s14, s14, s23
 80138ba:	fbb3 f2f1 	udiv	r2, r3, r1
 80138be:	fb01 3312 	mls	r3, r1, r2, r3
 80138c2:	edc4 6a9d 	vstr	s13, [r4, #628]	; 0x274
 80138c6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
 80138ca:	ed84 7a9e 	vstr	s14, [r4, #632]	; 0x278
 80138ce:	ee77 7a86 	vadd.f32	s15, s15, s12
 80138d2:	edc4 7a9f 	vstr	s15, [r4, #636]	; 0x27c
 80138d6:	2800      	cmp	r0, #0
 80138d8:	f040 8420 	bne.w	801411c <MotionDI_update+0x1aac>
 80138dc:	4931      	ldr	r1, [pc, #196]	; (80139a4 <MotionDI_update+0x1334>)
 80138de:	981e      	ldr	r0, [sp, #120]	; 0x78
 80138e0:	f101 0350 	add.w	r3, r1, #80	; 0x50
 80138e4:	f101 0240 	add.w	r2, r1, #64	; 0x40
 80138e8:	e9cd 1800 	strd	r1, r8, [sp]
 80138ec:	3120      	adds	r1, #32
 80138ee:	f7f8 fe11 	bl	800c514 <SpacePointGyroPropRedist>
 80138f2:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	f000 86b6 	beq.w	8014668 <MotionDI_update+0x1ff8>
 80138fc:	4b2a      	ldr	r3, [pc, #168]	; (80139a8 <MotionDI_update+0x1338>)
 80138fe:	4639      	mov	r1, r7
 8013900:	f894 2126 	ldrb.w	r2, [r4, #294]	; 0x126
 8013904:	f103 000c 	add.w	r0, r3, #12
 8013908:	e9cd 0200 	strd	r0, r2, [sp]
 801390c:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 8013910:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 8013914:	f7f9 f856 	bl	800c9c4 <output_update>
 8013918:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 801391c:	2300      	movs	r3, #0
 801391e:	0791      	lsls	r1, r2, #30
 8013920:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
 8013924:	d409      	bmi.n	801393a <MotionDI_update+0x12ca>
 8013926:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 801392a:	fbb1 f3f6 	udiv	r3, r1, r6
 801392e:	fb06 1613 	mls	r6, r6, r3, r1
 8013932:	f016 0fff 	tst.w	r6, #255	; 0xff
 8013936:	f000 85d1 	beq.w	80144dc <MotionDI_update+0x1e6c>
 801393a:	4a1c      	ldr	r2, [pc, #112]	; (80139ac <MotionDI_update+0x133c>)
 801393c:	981e      	ldr	r0, [sp, #120]	; 0x78
 801393e:	4611      	mov	r1, r2
 8013940:	f7f8 f808 	bl	800b954 <m_qmult_eml>
 8013944:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8013948:	2b01      	cmp	r3, #1
 801394a:	f47e afe4 	bne.w	8012916 <MotionDI_update+0x2a6>
 801394e:	edd4 7ad7 	vldr	s15, [r4, #860]	; 0x35c
 8013952:	f8d4 2354 	ldr.w	r2, [r4, #852]	; 0x354
 8013956:	eef1 7a67 	vneg.f32	s15, s15
 801395a:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 801395e:	f8c4 2358 	str.w	r2, [r4, #856]	; 0x358
 8013962:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 8013966:	edc4 7ad7 	vstr	s15, [r4, #860]	; 0x35c
 801396a:	f7fe bfd4 	b.w	8012916 <MotionDI_update+0x2a6>
 801396e:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 8013972:	f50d 7904 	add.w	r9, sp, #528	; 0x210
 8013976:	931c      	str	r3, [sp, #112]	; 0x70
 8013978:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 801397c:	931a      	str	r3, [sp, #104]	; 0x68
 801397e:	ab90      	add	r3, sp, #576	; 0x240
 8013980:	9317      	str	r3, [sp, #92]	; 0x5c
 8013982:	f7fe bf3d 	b.w	8012800 <MotionDI_update+0x190>
 8013986:	2100      	movs	r1, #0
 8013988:	460b      	mov	r3, r1
 801398a:	f8a6 11c8 	strh.w	r1, [r6, #456]	; 0x1c8
 801398e:	f7ff b89a 	b.w	8012ac6 <MotionDI_update+0x456>
 8013992:	428a      	cmp	r2, r1
 8013994:	bfa8      	it	ge
 8013996:	460a      	movge	r2, r1
 8013998:	b211      	sxth	r1, r2
 801399a:	f7ff b86c 	b.w	8012a76 <MotionDI_update+0x406>
 801399e:	bf00      	nop
 80139a0:	20000000 	.word	0x20000000
 80139a4:	20001724 	.word	0x20001724
 80139a8:	20001818 	.word	0x20001818
 80139ac:	20001734 	.word	0x20001734
 80139b0:	4ad8      	ldr	r2, [pc, #864]	; (8013d14 <MotionDI_update+0x16a4>)
 80139b2:	2300      	movs	r3, #0
 80139b4:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 80139b8:	a83c      	add	r0, sp, #240	; 0xf0
 80139ba:	f5a2 7165 	sub.w	r1, r2, #916	; 0x394
 80139be:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 80139c2:	f8ca 3000 	str.w	r3, [sl]
 80139c6:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80139ca:	f7f7 fdb5 	bl	800b538 <rotVect>
 80139ce:	4ad2      	ldr	r2, [pc, #840]	; (8013d18 <MotionDI_update+0x16a8>)
 80139d0:	4648      	mov	r0, r9
 80139d2:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 80139d6:	f7f7 fdaf 	bl	800b538 <rotVect>
 80139da:	eddd 7a3c 	vldr	s15, [sp, #240]	; 0xf0
 80139de:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 80139e2:	ed99 8a00 	vldr	s16, [r9]
 80139e6:	eef1 9a67 	vneg.f32	s19, s15
 80139ea:	edd9 8a01 	vldr	s17, [r9, #4]
 80139ee:	eeb1 aa47 	vneg.f32	s20, s14
 80139f2:	4bca      	ldr	r3, [pc, #808]	; (8013d1c <MotionDI_update+0x16ac>)
 80139f4:	eeb1 8a48 	vneg.f32	s16, s16
 80139f8:	eef1 8a68 	vneg.f32	s17, s17
 80139fc:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 8013a00:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8013a04:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 8013a08:	ed89 8a01 	vstr	s16, [r9, #4]
 8013a0c:	edc9 8a00 	vstr	s17, [r9]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	f040 83a2 	bne.w	801415a <MotionDI_update+0x1aea>
 8013a16:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 8013a1a:	ed9f bac1 	vldr	s22, [pc, #772]	; 8013d20 <MotionDI_update+0x16b0>
 8013a1e:	eddf bac1 	vldr	s23, [pc, #772]	; 8013d24 <MotionDI_update+0x16b4>
 8013a22:	f894 1161 	ldrb.w	r1, [r4, #353]	; 0x161
 8013a26:	22f8      	movs	r2, #248	; 0xf8
 8013a28:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8013a2c:	4658      	mov	r0, fp
 8013a2e:	ee00 1a10 	vmov	s0, r1
 8013a32:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8013d38 <MotionDI_update+0x16c8>
 8013a36:	f043 0302 	orr.w	r3, r3, #2
 8013a3a:	4fbb      	ldr	r7, [pc, #748]	; (8013d28 <MotionDI_update+0x16b8>)
 8013a3c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8013a40:	f8d8 507c 	ldr.w	r5, [r8, #124]	; 0x7c
 8013a44:	f083 0301 	eor.w	r3, r3, #1
 8013a48:	f8d8 c078 	ldr.w	ip, [r8, #120]	; 0x78
 8013a4c:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
 8013a50:	4641      	mov	r1, r8
 8013a52:	ee20 0a09 	vmul.f32	s0, s0, s18
 8013a56:	f8d8 5080 	ldr.w	r5, [r8, #128]	; 0x80
 8013a5a:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8013a5e:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8013a62:	f8c8 5090 	str.w	r5, [r8, #144]	; 0x90
 8013a66:	ad46      	add	r5, sp, #280	; 0x118
 8013a68:	ed8d 0a17 	vstr	s0, [sp, #92]	; 0x5c
 8013a6c:	f8c8 c088 	str.w	ip, [r8, #136]	; 0x88
 8013a70:	f8c8 3094 	str.w	r3, [r8, #148]	; 0x94
 8013a74:	f002 f9d0 	bl	8015e18 <memcpy>
 8013a78:	f8d9 e008 	ldr.w	lr, [r9, #8]
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	f508 7cf9 	add.w	ip, r8, #498	; 0x1f2
 8013a82:	f108 02c8 	add.w	r2, r8, #200	; 0xc8
 8013a86:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8013a88:	f208 10f1 	addw	r0, r8, #497	; 0x1f1
 8013a8c:	f508 71f8 	add.w	r1, r8, #496	; 0x1f0
 8013a90:	f8cb e02c 	str.w	lr, [fp, #44]	; 0x2c
 8013a94:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8013a98:	f50d 7904 	add.w	r9, sp, #528	; 0x210
 8013a9c:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8013aa0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 8013aa4:	ed8b aa06 	vstr	s20, [fp, #24]
 8013aa8:	edcb 9a07 	vstr	s19, [fp, #28]
 8013aac:	edcb aa08 	vstr	s21, [fp, #32]
 8013ab0:	edcb ba03 	vstr	s23, [fp, #12]
 8013ab4:	ed8b ba05 	vstr	s22, [fp, #20]
 8013ab8:	edcb 8a09 	vstr	s17, [fp, #36]	; 0x24
 8013abc:	ed8b 8a0a 	vstr	s16, [fp, #40]	; 0x28
 8013ac0:	920f      	str	r2, [sp, #60]	; 0x3c
 8013ac2:	9610      	str	r6, [sp, #64]	; 0x40
 8013ac4:	ae90      	add	r6, sp, #576	; 0x240
 8013ac6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8013aca:	9112      	str	r1, [sp, #72]	; 0x48
 8013acc:	e9cd 0c13 	strd	r0, ip, [sp, #76]	; 0x4c
 8013ad0:	f8cb 3010 	str.w	r3, [fp, #16]
 8013ad4:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 8013ad8:	9715      	str	r7, [sp, #84]	; 0x54
 8013ada:	950e      	str	r5, [sp, #56]	; 0x38
 8013adc:	f7ec fd54 	bl	8000588 <__aeabi_f2d>
 8013ae0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013ae4:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
 8013ae8:	f7ec fd2c 	bl	8000544 <__aeabi_ui2d>
 8013aec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013af0:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
 8013af4:	f894 213f 	ldrb.w	r2, [r4, #319]	; 0x13f
 8013af8:	9308      	str	r3, [sp, #32]
 8013afa:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
 8013afe:	9207      	str	r2, [sp, #28]
 8013b00:	f894 213d 	ldrb.w	r2, [r4, #317]	; 0x13d
 8013b04:	9306      	str	r3, [sp, #24]
 8013b06:	f894 313c 	ldrb.w	r3, [r4, #316]	; 0x13c
 8013b0a:	9205      	str	r2, [sp, #20]
 8013b0c:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 8013b10:	9304      	str	r3, [sp, #16]
 8013b12:	f7ec fd39 	bl	8000588 <__aeabi_f2d>
 8013b16:	f50d 7c1c 	add.w	ip, sp, #624	; 0x270
 8013b1a:	ed9d 0a17 	vldr	s0, [sp, #92]	; 0x5c
 8013b1e:	9617      	str	r6, [sp, #92]	; 0x5c
 8013b20:	ab8d      	add	r3, sp, #564	; 0x234
 8013b22:	aa87      	add	r2, sp, #540	; 0x21c
 8013b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b28:	edd4 3a56 	vldr	s7, [r4, #344]	; 0x158
 8013b2c:	4649      	mov	r1, r9
 8013b2e:	ed94 3a55 	vldr	s6, [r4, #340]	; 0x154
 8013b32:	a8a3      	add	r0, sp, #652	; 0x28c
 8013b34:	edd4 2a54 	vldr	s5, [r4, #336]	; 0x150
 8013b38:	ed94 2a4d 	vldr	s4, [r4, #308]	; 0x134
 8013b3c:	edd4 1a4c 	vldr	s3, [r4, #304]	; 0x130
 8013b40:	ed94 1a4b 	vldr	s2, [r4, #300]	; 0x12c
 8013b44:	edd4 0a4a 	vldr	s1, [r4, #296]	; 0x128
 8013b48:	e9cd 6c00 	strd	r6, ip, [sp]
 8013b4c:	f108 06f8 	add.w	r6, r8, #248	; 0xf8
 8013b50:	961f      	str	r6, [sp, #124]	; 0x7c
 8013b52:	f7fd feff 	bl	8011954 <SpacePointAlgorithm.isra.0>
 8013b56:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
 8013b5a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8013b5e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8013b62:	2b01      	cmp	r3, #1
 8013b64:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8013b68:	f8c8 01f4 	str.w	r0, [r8, #500]	; 0x1f4
 8013b6c:	f8c8 11f8 	str.w	r1, [r8, #504]	; 0x1f8
 8013b70:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 8013b74:	682f      	ldr	r7, [r5, #0]
 8013b76:	6868      	ldr	r0, [r5, #4]
 8013b78:	68a9      	ldr	r1, [r5, #8]
 8013b7a:	68ea      	ldr	r2, [r5, #12]
 8013b7c:	d115      	bne.n	8013baa <MotionDI_update+0x153a>
 8013b7e:	2300      	movs	r3, #0
 8013b80:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
 8013b84:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 8013b88:	4a64      	ldr	r2, [pc, #400]	; (8013d1c <MotionDI_update+0x16ac>)
 8013b8a:	f8c8 7078 	str.w	r7, [r8, #120]	; 0x78
 8013b8e:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8013b92:	f8c8 1080 	str.w	r1, [r8, #128]	; 0x80
 8013b96:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
 8013b9a:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 8013b9e:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 8013ba2:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
 8013ba6:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
 8013baa:	eddf 7a60 	vldr	s15, [pc, #384]	; 8013d2c <MotionDI_update+0x16bc>
 8013bae:	ed9a 6a00 	vldr	s12, [sl]
 8013bb2:	edda 6a01 	vldr	s13, [sl, #4]
 8013bb6:	ed9a 7a02 	vldr	s14, [sl, #8]
 8013bba:	ee26 5a27 	vmul.f32	s10, s12, s15
 8013bbe:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8013bc2:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
 8013bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bca:	ed88 5a1b 	vstr	s10, [r8, #108]	; 0x6c
 8013bce:	edc8 5a1c 	vstr	s11, [r8, #112]	; 0x70
 8013bd2:	edc8 7a1d 	vstr	s15, [r8, #116]	; 0x74
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	f000 82b5 	beq.w	8014146 <MotionDI_update+0x1ad6>
 8013bdc:	f894 36ec 	ldrb.w	r3, [r4, #1772]	; 0x6ec
 8013be0:	2b09      	cmp	r3, #9
 8013be2:	f200 83a8 	bhi.w	8014336 <MotionDI_update+0x1cc6>
 8013be6:	3301      	adds	r3, #1
 8013be8:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 8013bec:	e2ad      	b.n	801414a <MotionDI_update+0x1ada>
 8013bee:	2301      	movs	r3, #1
 8013bf0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013bf4:	4619      	mov	r1, r3
 8013bf6:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
 8013bfa:	e64a      	b.n	8013892 <MotionDI_update+0x1222>
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c02:	461a      	mov	r2, r3
 8013c04:	f884 3161 	strb.w	r3, [r4, #353]	; 0x161
 8013c08:	e50b      	b.n	8013622 <MotionDI_update+0xfb2>
 8013c0a:	f8d6 1464 	ldr.w	r1, [r6, #1124]	; 0x464
 8013c0e:	fb01 f103 	mul.w	r1, r1, r3
 8013c12:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8013c16:	bf34      	ite	cc
 8013c18:	2100      	movcc	r1, #0
 8013c1a:	2101      	movcs	r1, #1
 8013c1c:	f7fe bf74 	b.w	8012b08 <MotionDI_update+0x498>
 8013c20:	f8d4 2650 	ldr.w	r2, [r4, #1616]	; 0x650
 8013c24:	f8d4 e6dc 	ldr.w	lr, [r4, #1756]	; 0x6dc
 8013c28:	921a      	str	r2, [sp, #104]	; 0x68
 8013c2a:	2a00      	cmp	r2, #0
 8013c2c:	f040 832a 	bne.w	8014284 <MotionDI_update+0x1c14>
 8013c30:	f10e 0c01 	add.w	ip, lr, #1
 8013c34:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 8013c38:	921c      	str	r2, [sp, #112]	; 0x70
 8013c3a:	2a00      	cmp	r2, #0
 8013c3c:	f000 84fa 	beq.w	8014634 <MotionDI_update+0x1fc4>
 8013c40:	ee07 ca90 	vmov	s15, ip
 8013c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c48:	4a39      	ldr	r2, [pc, #228]	; (8013d30 <MotionDI_update+0x16c0>)
 8013c4a:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 8013c4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013c52:	4f38      	ldr	r7, [pc, #224]	; (8013d34 <MotionDI_update+0x16c4>)
 8013c54:	4611      	mov	r1, r2
 8013c56:	4610      	mov	r0, r2
 8013c58:	463d      	mov	r5, r7
 8013c5a:	ee07 ea90 	vmov	s15, lr
 8013c5e:	eec6 5a87 	vdiv.f32	s11, s13, s14
 8013c62:	ed92 4a00 	vldr	s8, [r2]
 8013c66:	ecb5 7a01 	vldmia	r5!, {s14}
 8013c6a:	f101 0104 	add.w	r1, r1, #4
 8013c6e:	ed90 5a02 	vldr	s10, [r0, #8]
 8013c72:	f100 0008 	add.w	r0, r0, #8
 8013c76:	edd1 4a00 	vldr	s9, [r1]
 8013c7a:	ed95 6a00 	vldr	s12, [r5]
 8013c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c82:	edd7 6a02 	vldr	s13, [r7, #8]
 8013c86:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 8013c8a:	eea7 7a84 	vfma.f32	s14, s15, s8
 8013c8e:	eea7 6aa4 	vfma.f32	s12, s15, s9
 8013c92:	eee7 6a85 	vfma.f32	s13, s15, s10
 8013c96:	ee26 6a25 	vmul.f32	s12, s12, s11
 8013c9a:	ee67 7a25 	vmul.f32	s15, s14, s11
 8013c9e:	ee26 7aa5 	vmul.f32	s14, s13, s11
 8013ca2:	ed81 6a00 	vstr	s12, [r1]
 8013ca6:	edc2 7a00 	vstr	s15, [r2]
 8013caa:	ed80 7a00 	vstr	s14, [r0]
 8013cae:	f47e ad9e 	bne.w	80127ee <MotionDI_update+0x17e>
 8013cb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013cb4:	b16b      	cbz	r3, 8013cd2 <MotionDI_update+0x1662>
 8013cb6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013cba:	ee26 6a26 	vmul.f32	s12, s12, s13
 8013cbe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013cc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013cc6:	ed84 6a46 	vstr	s12, [r4, #280]	; 0x118
 8013cca:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 8013cce:	edc4 7a45 	vstr	s15, [r4, #276]	; 0x114
 8013cd2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013cd6:	edd1 6a00 	vldr	s13, [r1]
 8013cda:	ed90 7a00 	vldr	s14, [r0]
 8013cde:	edd2 7a00 	vldr	s15, [r2]
 8013ce2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013ce6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013cea:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013cee:	edc4 6a55 	vstr	s13, [r4, #340]	; 0x154
 8013cf2:	ed84 7a56 	vstr	s14, [r4, #344]	; 0x158
 8013cf6:	edc4 7a54 	vstr	s15, [r4, #336]	; 0x150
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	2500      	movs	r5, #0
 8013cfe:	6013      	str	r3, [r2, #0]
 8013d00:	600b      	str	r3, [r1, #0]
 8013d02:	6003      	str	r3, [r0, #0]
 8013d04:	f8c4 56dc 	str.w	r5, [r4, #1756]	; 0x6dc
 8013d08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013d0a:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
 8013d0e:	f7fe bd6b 	b.w	80127e8 <MotionDI_update+0x178>
 8013d12:	bf00      	nop
 8013d14:	200018a4 	.word	0x200018a4
 8013d18:	200018b0 	.word	0x200018b0
 8013d1c:	200010f8 	.word	0x200010f8
 8013d20:	bf333333 	.word	0xbf333333
 8013d24:	3f333333 	.word	0x3f333333
 8013d28:	200008e8 	.word	0x200008e8
 8013d2c:	42652ee1 	.word	0x42652ee1
 8013d30:	20001b28 	.word	0x20001b28
 8013d34:	20000cec 	.word	0x20000cec
 8013d38:	2000188c 	.word	0x2000188c
 8013d3c:	2100      	movs	r1, #0
 8013d3e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8013d42:	f2c0 82d5 	blt.w	80142f0 <MotionDI_update+0x1c80>
 8013d46:	f04f 0900 	mov.w	r9, #0
 8013d4a:	4ee2      	ldr	r6, [pc, #904]	; (80140d4 <MotionDI_update+0x1a64>)
 8013d4c:	f04f 0a00 	mov.w	sl, #0
 8013d50:	f8a4 9088 	strh.w	r9, [r4, #136]	; 0x88
 8013d54:	f1b9 0f01 	cmp.w	r9, #1
 8013d58:	f1a6 0c1c 	sub.w	ip, r6, #28
 8013d5c:	eddf 7ade 	vldr	s15, [pc, #888]	; 80140d8 <MotionDI_update+0x1a68>
 8013d60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013d66:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013d6a:	f1a6 0e64 	sub.w	lr, r6, #100	; 0x64
 8013d6e:	f1a6 0c48 	sub.w	ip, r6, #72	; 0x48
 8013d72:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8013d76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d7e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8013d82:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8013d86:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8013d8a:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 8013d8e:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
 8013d92:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
 8013d96:	f8a4 a018 	strh.w	sl, [r4, #24]
 8013d9a:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
 8013d9e:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 8013da2:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
 8013da6:	edc4 7a07 	vstr	s15, [r4, #28]
 8013daa:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8013dae:	edc4 7a08 	vstr	s15, [r4, #32]
 8013db2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 8013db6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 8013dba:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
 8013dbe:	f241 87b0 	bls.w	8015d22 <MotionDI_update+0x36b2>
 8013dc2:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
 8013dc6:	ed94 9a0e 	vldr	s18, [r4, #56]	; 0x38
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	f000 848c 	beq.w	80146e8 <MotionDI_update+0x2078>
 8013dd0:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8013dd4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013dd8:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8013ddc:	ee33 3a09 	vadd.f32	s6, s6, s18
 8013de0:	ee73 3aa8 	vadd.f32	s7, s7, s17
 8013de4:	ee34 4a27 	vadd.f32	s8, s8, s15
 8013de8:	ee23 9a08 	vmul.f32	s18, s6, s16
 8013dec:	ee63 8a88 	vmul.f32	s17, s7, s16
 8013df0:	ee24 8a08 	vmul.f32	s16, s8, s16
 8013df4:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 8013df8:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 8013dfc:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 8013e00:	4eb6      	ldr	r6, [pc, #728]	; (80140dc <MotionDI_update+0x1a6c>)
 8013e02:	2224      	movs	r2, #36	; 0x24
 8013e04:	2100      	movs	r1, #0
 8013e06:	f106 0010 	add.w	r0, r6, #16
 8013e0a:	f002 f813 	bl	8015e34 <memset>
 8013e0e:	f894 26c8 	ldrb.w	r2, [r4, #1736]	; 0x6c8
 8013e12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013e16:	ed86 9a00 	vstr	s18, [r6]
 8013e1a:	2a01      	cmp	r2, #1
 8013e1c:	edc6 8a01 	vstr	s17, [r6, #4]
 8013e20:	ed86 8a02 	vstr	s16, [r6, #8]
 8013e24:	60f3      	str	r3, [r6, #12]
 8013e26:	61f3      	str	r3, [r6, #28]
 8013e28:	62f3      	str	r3, [r6, #44]	; 0x2c
 8013e2a:	f240 8184 	bls.w	8014136 <MotionDI_update+0x1ac6>
 8013e2e:	2303      	movs	r3, #3
 8013e30:	f1b8 0f01 	cmp.w	r8, #1
 8013e34:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 8013e38:	f47e ac4b 	bne.w	80126d2 <MotionDI_update+0x62>
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	f884 3180 	strb.w	r3, [r4, #384]	; 0x180
 8013e42:	f7fe bc46 	b.w	80126d2 <MotionDI_update+0x62>
 8013e46:	4aa6      	ldr	r2, [pc, #664]	; (80140e0 <MotionDI_update+0x1a70>)
 8013e48:	2300      	movs	r3, #0
 8013e4a:	af36      	add	r7, sp, #216	; 0xd8
 8013e4c:	a839      	add	r0, sp, #228	; 0xe4
 8013e4e:	f5a2 71dc 	sub.w	r1, r2, #440	; 0x1b8
 8013e52:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8013e56:	603b      	str	r3, [r7, #0]
 8013e58:	4da2      	ldr	r5, [pc, #648]	; (80140e4 <MotionDI_update+0x1a74>)
 8013e5a:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8013e5e:	f7f7 fb6b 	bl	800b538 <rotVect>
 8013e62:	4aa1      	ldr	r2, [pc, #644]	; (80140e8 <MotionDI_update+0x1a78>)
 8013e64:	4640      	mov	r0, r8
 8013e66:	f5a2 71d6 	sub.w	r1, r2, #428	; 0x1ac
 8013e6a:	f7f7 fb65 	bl	800b538 <rotVect>
 8013e6e:	4a9f      	ldr	r2, [pc, #636]	; (80140ec <MotionDI_update+0x1a7c>)
 8013e70:	a83f      	add	r0, sp, #252	; 0xfc
 8013e72:	f5a2 71d0 	sub.w	r1, r2, #416	; 0x1a0
 8013e76:	f7f7 fb5f 	bl	800b538 <rotVect>
 8013e7a:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 8013e7e:	ed9d 7a3a 	vldr	s14, [sp, #232]	; 0xe8
 8013e82:	edd8 9a00 	vldr	s19, [r8]
 8013e86:	eeb1 ca67 	vneg.f32	s24, s15
 8013e8a:	ed98 aa01 	vldr	s20, [r8, #4]
 8013e8e:	eef1 ca47 	vneg.f32	s25, s14
 8013e92:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 8013e96:	eef1 9a69 	vneg.f32	s19, s19
 8013e9a:	eeb1 aa4a 	vneg.f32	s20, s20
 8013e9e:	ed9d 8a3f 	vldr	s16, [sp, #252]	; 0xfc
 8013ea2:	eef1 ba4b 	vneg.f32	s23, s22
 8013ea6:	eddd 8a40 	vldr	s17, [sp, #256]	; 0x100
 8013eaa:	f895 38e0 	ldrb.w	r3, [r5, #2272]	; 0x8e0
 8013eae:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 8013eb2:	9327      	str	r3, [sp, #156]	; 0x9c
 8013eb4:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 8013eb8:	edc8 9a01 	vstr	s19, [r8, #4]
 8013ebc:	ed88 aa00 	vstr	s20, [r8]
 8013ec0:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 8013ec4:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 8013ec8:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	f040 8190 	bne.w	80141f2 <MotionDI_update+0x1b82>
 8013ed2:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 8013ed6:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
 8013eda:	22f8      	movs	r2, #248	; 0xf8
 8013edc:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8013ee0:	4658      	mov	r0, fp
 8013ee2:	ee00 1a10 	vmov	s0, r1
 8013ee6:	4e82      	ldr	r6, [pc, #520]	; (80140f0 <MotionDI_update+0x1a80>)
 8013ee8:	f043 0302 	orr.w	r3, r3, #2
 8013eec:	ed94 7aaf 	vldr	s14, [r4, #700]	; 0x2bc
 8013ef0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8013ef4:	edd4 7ab0 	vldr	s15, [r4, #704]	; 0x2c0
 8013ef8:	f083 0301 	eor.w	r3, r3, #1
 8013efc:	f8d4 e2c4 	ldr.w	lr, [r4, #708]	; 0x2c4
 8013f00:	f8d4 c2c8 	ldr.w	ip, [r4, #712]	; 0x2c8
 8013f04:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8013f08:	ee20 0a09 	vmul.f32	s0, s0, s18
 8013f0c:	4979      	ldr	r1, [pc, #484]	; (80140f4 <MotionDI_update+0x1a84>)
 8013f0e:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8013f12:	ed84 7ab3 	vstr	s14, [r4, #716]	; 0x2cc
 8013f16:	ed8d 0a26 	vstr	s0, [sp, #152]	; 0x98
 8013f1a:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 8013f1e:	f8c4 e2d4 	str.w	lr, [r4, #724]	; 0x2d4
 8013f22:	f8c4 c2d8 	str.w	ip, [r4, #728]	; 0x2d8
 8013f26:	f001 ff77 	bl	8015e18 <memcpy>
 8013f2a:	f5a6 7395 	sub.w	r3, r6, #298	; 0x12a
 8013f2e:	ed98 7a02 	vldr	s14, [r8, #8]
 8013f32:	f8d5 c0c4 	ldr.w	ip, [r5, #196]	; 0xc4
 8013f36:	f106 3eff 	add.w	lr, r6, #4294967295
 8013f3a:	edd5 7a2f 	vldr	s15, [r5, #188]	; 0xbc
 8013f3e:	1eb0      	subs	r0, r6, #2
 8013f40:	f8d5 80c0 	ldr.w	r8, [r5, #192]	; 0xc0
 8013f44:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013f46:	496c      	ldr	r1, [pc, #432]	; (80140f8 <MotionDI_update+0x1a88>)
 8013f48:	931e      	str	r3, [sp, #120]	; 0x78
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	ed8b 7a0b 	vstr	s14, [fp, #44]	; 0x2c
 8013f50:	edcb ca06 	vstr	s25, [fp, #24]
 8013f54:	ed8b ca07 	vstr	s24, [fp, #28]
 8013f58:	edcb aa08 	vstr	s21, [fp, #32]
 8013f5c:	edcb 8a03 	vstr	s17, [fp, #12]
 8013f60:	ed8b 8a04 	vstr	s16, [fp, #16]
 8013f64:	edcb ba05 	vstr	s23, [fp, #20]
 8013f68:	ed8b aa09 	vstr	s20, [fp, #36]	; 0x24
 8013f6c:	edcb 9a0a 	vstr	s19, [fp, #40]	; 0x28
 8013f70:	9210      	str	r2, [sp, #64]	; 0x40
 8013f72:	9012      	str	r0, [sp, #72]	; 0x48
 8013f74:	9711      	str	r7, [sp, #68]	; 0x44
 8013f76:	e9cd e613 	strd	lr, r6, [sp, #76]	; 0x4c
 8013f7a:	f8c4 c390 	str.w	ip, [r4, #912]	; 0x390
 8013f7e:	edc4 7ae2 	vstr	s15, [r4, #904]	; 0x388
 8013f82:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 8013f86:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
 8013f8a:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8013f8e:	f8c4 838c 	str.w	r8, [r4, #908]	; 0x38c
 8013f92:	9115      	str	r1, [sp, #84]	; 0x54
 8013f94:	edd4 3a47 	vldr	s7, [r4, #284]	; 0x11c
 8013f98:	ed94 3a46 	vldr	s6, [r4, #280]	; 0x118
 8013f9c:	edd4 2a45 	vldr	s5, [r4, #276]	; 0x114
 8013fa0:	edcd 3a25 	vstr	s7, [sp, #148]	; 0x94
 8013fa4:	ed8d 3a24 	vstr	s6, [sp, #144]	; 0x90
 8013fa8:	edcd 2a23 	vstr	s5, [sp, #140]	; 0x8c
 8013fac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013fae:	ed94 2a3e 	vldr	s4, [r4, #248]	; 0xf8
 8013fb2:	edd4 1a3d 	vldr	s3, [r4, #244]	; 0xf4
 8013fb6:	ed94 1a3c 	vldr	s2, [r4, #240]	; 0xf0
 8013fba:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 8013fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fc0:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 8013fc4:	ed8d 2a22 	vstr	s4, [sp, #136]	; 0x88
 8013fc8:	edcd 1a21 	vstr	s3, [sp, #132]	; 0x84
 8013fcc:	ed8d 1a20 	vstr	s2, [sp, #128]	; 0x80
 8013fd0:	edcd 0a1f 	vstr	s1, [sp, #124]	; 0x7c
 8013fd4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013fd8:	f7ec fad6 	bl	8000588 <__aeabi_f2d>
 8013fdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013fe0:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
 8013fe4:	f7ec faae 	bl	8000544 <__aeabi_ui2d>
 8013fe8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013fec:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8013ff0:	f894 2103 	ldrb.w	r2, [r4, #259]	; 0x103
 8013ff4:	9308      	str	r3, [sp, #32]
 8013ff6:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 8013ffa:	9207      	str	r2, [sp, #28]
 8013ffc:	f894 2101 	ldrb.w	r2, [r4, #257]	; 0x101
 8014000:	9306      	str	r3, [sp, #24]
 8014002:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
 8014006:	9205      	str	r2, [sp, #20]
 8014008:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 801400c:	9304      	str	r3, [sp, #16]
 801400e:	f7ec fabb 	bl	8000588 <__aeabi_f2d>
 8014012:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014014:	aa87      	add	r2, sp, #540	; 0x21c
 8014016:	ed9d 0a26 	vldr	s0, [sp, #152]	; 0x98
 801401a:	9300      	str	r3, [sp, #0]
 801401c:	ab8d      	add	r3, sp, #564	; 0x234
 801401e:	eddd 3a25 	vldr	s7, [sp, #148]	; 0x94
 8014022:	ed9d 3a24 	vldr	s6, [sp, #144]	; 0x90
 8014026:	eddd 2a23 	vldr	s5, [sp, #140]	; 0x8c
 801402a:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 801402e:	eddd 1a21 	vldr	s3, [sp, #132]	; 0x84
 8014032:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 8014036:	eddd 0a1f 	vldr	s1, [sp, #124]	; 0x7c
 801403a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801403e:	a99c      	add	r1, sp, #624	; 0x270
 8014040:	a8a3      	add	r0, sp, #652	; 0x28c
 8014042:	9101      	str	r1, [sp, #4]
 8014044:	4649      	mov	r1, r9
 8014046:	f7fd fc85 	bl	8011954 <SpacePointAlgorithm.isra.0>
 801404a:	f894 3436 	ldrb.w	r3, [r4, #1078]	; 0x436
 801404e:	1db0      	adds	r0, r6, #6
 8014050:	f106 020a 	add.w	r2, r6, #10
 8014054:	f8d5 c0f0 	ldr.w	ip, [r5, #240]	; 0xf0
 8014058:	46b6      	mov	lr, r6
 801405a:	f8d5 1118 	ldr.w	r1, [r5, #280]	; 0x118
 801405e:	2b01      	cmp	r3, #1
 8014060:	f8d5 80c8 	ldr.w	r8, [r5, #200]	; 0xc8
 8014064:	f8c0 c000 	str.w	ip, [r0]
 8014068:	6011      	str	r1, [r2, #0]
 801406a:	f8da c000 	ldr.w	ip, [sl]
 801406e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8014072:	f8da 1008 	ldr.w	r1, [sl, #8]
 8014076:	f8da 200c 	ldr.w	r2, [sl, #12]
 801407a:	f84e 8f02 	str.w	r8, [lr, #2]!
 801407e:	f000 830c 	beq.w	801469a <MotionDI_update+0x202a>
 8014082:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014084:	3b01      	subs	r3, #1
 8014086:	b2db      	uxtb	r3, r3
 8014088:	2b08      	cmp	r3, #8
 801408a:	bf98      	it	ls
 801408c:	f885 38e0 	strbls.w	r3, [r5, #2272]	; 0x8e0
 8014090:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80140fc <MotionDI_update+0x1a8c>
 8014094:	ed97 6a00 	vldr	s12, [r7]
 8014098:	edd7 6a01 	vldr	s13, [r7, #4]
 801409c:	ed97 7a02 	vldr	s14, [r7, #8]
 80140a0:	ee26 5a27 	vmul.f32	s10, s12, s15
 80140a4:	ee66 5aa7 	vmul.f32	s11, s13, s15
 80140a8:	f894 3435 	ldrb.w	r3, [r4, #1077]	; 0x435
 80140ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140b0:	ed84 5aac 	vstr	s10, [r4, #688]	; 0x2b0
 80140b4:	edc4 5aad 	vstr	s11, [r4, #692]	; 0x2b4
 80140b8:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d077      	beq.n	80141b0 <MotionDI_update+0x1b40>
 80140c0:	f894 36ed 	ldrb.w	r3, [r4, #1773]	; 0x6ed
 80140c4:	2b09      	cmp	r3, #9
 80140c6:	f200 813e 	bhi.w	8014346 <MotionDI_update+0x1cd6>
 80140ca:	3301      	adds	r3, #1
 80140cc:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 80140d0:	e070      	b.n	80141b4 <MotionDI_update+0x1b44>
 80140d2:	bf00      	nop
 80140d4:	200014b4 	.word	0x200014b4
 80140d8:	00000000 	.word	0x00000000
 80140dc:	20001ad0 	.word	0x20001ad0
 80140e0:	200016a4 	.word	0x200016a4
 80140e4:	20000000 	.word	0x20000000
 80140e8:	200016b0 	.word	0x200016b0
 80140ec:	20001698 	.word	0x20001698
 80140f0:	2000187e 	.word	0x2000187e
 80140f4:	2000168c 	.word	0x2000168c
 80140f8:	20000010 	.word	0x20000010
 80140fc:	42652ee1 	.word	0x42652ee1
 8014100:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014102:	f108 0378 	add.w	r3, r8, #120	; 0x78
 8014106:	eeb0 0a49 	vmov.f32	s0, s18
 801410a:	4651      	mov	r1, sl
 801410c:	9200      	str	r2, [sp, #0]
 801410e:	4618      	mov	r0, r3
 8014110:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 8014114:	f7f8 f970 	bl	800c3f8 <SpacePointGyroProp>
 8014118:	f7ff baaa 	b.w	8013670 <MotionDI_update+0x1000>
 801411c:	4be7      	ldr	r3, [pc, #924]	; (80144bc <MotionDI_update+0x1e4c>)
 801411e:	eeb0 0a49 	vmov.f32	s0, s18
 8014122:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014124:	4651      	mov	r1, sl
 8014126:	4618      	mov	r0, r3
 8014128:	9200      	str	r2, [sp, #0]
 801412a:	f1a3 020c 	sub.w	r2, r3, #12
 801412e:	f7f8 f963 	bl	800c3f8 <SpacePointGyroProp>
 8014132:	f7ff bbd3 	b.w	80138dc <MotionDI_update+0x126c>
 8014136:	3201      	adds	r2, #1
 8014138:	2302      	movs	r3, #2
 801413a:	f884 26c8 	strb.w	r2, [r4, #1736]	; 0x6c8
 801413e:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 8014142:	f7fe bac6 	b.w	80126d2 <MotionDI_update+0x62>
 8014146:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 801414a:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 801414e:	f083 0302 	eor.w	r3, r3, #2
 8014152:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8014156:	f7fe bb53 	b.w	8012800 <MotionDI_update+0x190>
 801415a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801415e:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 8014162:	ed9f bad7 	vldr	s22, [pc, #860]	; 80144c0 <MotionDI_update+0x1e50>
 8014166:	eddf bad7 	vldr	s23, [pc, #860]	; 80144c4 <MotionDI_update+0x1e54>
 801416a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801416e:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8014172:	ee17 0a90 	vmov	r0, s15
 8014176:	f7ec fa07 	bl	8000588 <__aeabi_f2d>
 801417a:	ec41 0b10 	vmov	d0, r0, r1
 801417e:	f006 fc65 	bl	801aa4c <sqrt>
 8014182:	ec51 0b10 	vmov	r0, r1, d0
 8014186:	f7ec fd4f 	bl	8000c28 <__aeabi_d2f>
 801418a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801418e:	ee07 0a90 	vmov	s15, r0
 8014192:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014196:	ee2a aa27 	vmul.f32	s20, s20, s15
 801419a:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801419e:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80141a2:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 80141a6:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 80141aa:	edcd aa3e 	vstr	s21, [sp, #248]	; 0xf8
 80141ae:	e438      	b.n	8013a22 <MotionDI_update+0x13b2>
 80141b0:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 80141b4:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 80141b8:	4bc3      	ldr	r3, [pc, #780]	; (80144c8 <MotionDI_update+0x1e58>)
 80141ba:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
 80141be:	f082 0202 	eor.w	r2, r2, #2
 80141c2:	6099      	str	r1, [r3, #8]
 80141c4:	f884 2124 	strb.w	r2, [r4, #292]	; 0x124
 80141c8:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
 80141cc:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 80141d0:	f843 1b04 	str.w	r1, [r3], #4
 80141d4:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80141d8:	601a      	str	r2, [r3, #0]
 80141da:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
 80141de:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80141e2:	f8c4 13e8 	str.w	r1, [r4, #1000]	; 0x3e8
 80141e6:	f8c4 23ec 	str.w	r2, [r4, #1004]	; 0x3ec
 80141ea:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
 80141ee:	f7fe bb10 	b.w	8012812 <MotionDI_update+0x1a2>
 80141f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80141f6:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 80141fa:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 80141fe:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014202:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8014206:	ee17 0a90 	vmov	r0, s15
 801420a:	f7ec f9bd 	bl	8000588 <__aeabi_f2d>
 801420e:	ec41 0b10 	vmov	d0, r0, r1
 8014212:	f006 fc1b 	bl	801aa4c <sqrt>
 8014216:	ec51 0b10 	vmov	r0, r1, d0
 801421a:	f7ec fd05 	bl	8000c28 <__aeabi_d2f>
 801421e:	ee07 0a90 	vmov	s15, r0
 8014222:	ee28 7a08 	vmul.f32	s14, s16, s16
 8014226:	eecd 7a27 	vdiv.f32	s15, s26, s15
 801422a:	eea8 7aa8 	vfma.f32	s14, s17, s17
 801422e:	eeab 7a0b 	vfma.f32	s14, s22, s22
 8014232:	ee6c caa7 	vmul.f32	s25, s25, s15
 8014236:	ee2c ca27 	vmul.f32	s24, s24, s15
 801423a:	ee17 0a10 	vmov	r0, s14
 801423e:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8014242:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 8014246:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 801424a:	edcd aa3b 	vstr	s21, [sp, #236]	; 0xec
 801424e:	f7ec f99b 	bl	8000588 <__aeabi_f2d>
 8014252:	ec41 0b10 	vmov	d0, r0, r1
 8014256:	f006 fbf9 	bl	801aa4c <sqrt>
 801425a:	ec51 0b10 	vmov	r0, r1, d0
 801425e:	f7ec fce3 	bl	8000c28 <__aeabi_d2f>
 8014262:	ee07 0a90 	vmov	s15, r0
 8014266:	eecd 7a27 	vdiv.f32	s15, s26, s15
 801426a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801426e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014272:	ee6b baa7 	vmul.f32	s23, s23, s15
 8014276:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 801427a:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 801427e:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 8014282:	e628      	b.n	8013ed6 <MotionDI_update+0x1866>
 8014284:	ee07 ea90 	vmov	s15, lr
 8014288:	f10e 0c01 	add.w	ip, lr, #1
 801428c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014290:	498e      	ldr	r1, [pc, #568]	; (80144cc <MotionDI_update+0x1e5c>)
 8014292:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8014296:	ee07 ca90 	vmov	s15, ip
 801429a:	4d8d      	ldr	r5, [pc, #564]	; (80144d0 <MotionDI_update+0x1e60>)
 801429c:	4608      	mov	r0, r1
 801429e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80142a2:	f201 4284 	addw	r2, r1, #1156	; 0x484
 80142a6:	edd5 7a02 	vldr	s15, [r5, #8]
 80142aa:	f501 6191 	add.w	r1, r1, #1160	; 0x488
 80142ae:	ecf5 6a01 	vldmia	r5!, {s13}
 80142b2:	f200 408c 	addw	r0, r0, #1164	; 0x48c
 80142b6:	ee85 6a07 	vdiv.f32	s12, s10, s14
 80142ba:	ed92 4a00 	vldr	s8, [r2]
 80142be:	edd1 4a00 	vldr	s9, [r1]
 80142c2:	ed90 5a00 	vldr	s10, [r0]
 80142c6:	ed95 7a00 	vldr	s14, [r5]
 80142ca:	eee5 6a84 	vfma.f32	s13, s11, s8
 80142ce:	eea5 7aa4 	vfma.f32	s14, s11, s9
 80142d2:	eee5 7a85 	vfma.f32	s15, s11, s10
 80142d6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80142da:	ee27 7a06 	vmul.f32	s14, s14, s12
 80142de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80142e2:	edc2 6a00 	vstr	s13, [r2]
 80142e6:	ed81 7a00 	vstr	s14, [r1]
 80142ea:	edc0 7a00 	vstr	s15, [r0]
 80142ee:	e4a1      	b.n	8013c34 <MotionDI_update+0x15c4>
 80142f0:	3b01      	subs	r3, #1
 80142f2:	ee61 4a24 	vmul.f32	s9, s2, s9
 80142f6:	edd4 6a00 	vldr	s13, [r4]
 80142fa:	ee07 3a10 	vmov	s14, r3
 80142fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014302:	ee84 6a87 	vdiv.f32	s12, s9, s14
 8014306:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801430e:	f57f ad1a 	bpl.w	8013d46 <MotionDI_update+0x16d6>
 8014312:	ed94 7a03 	vldr	s14, [r4, #12]
 8014316:	eef4 7ac7 	vcmpe.f32	s15, s14
 801431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801431e:	f57f ad12 	bpl.w	8013d46 <MotionDI_update+0x16d6>
 8014322:	2900      	cmp	r1, #0
 8014324:	f001 8501 	beq.w	8015d2a <MotionDI_update+0x36ba>
 8014328:	f8b4 9088 	ldrh.w	r9, [r4, #136]	; 0x88
 801432c:	f109 0901 	add.w	r9, r9, #1
 8014330:	fa1f f989 	uxth.w	r9, r9
 8014334:	e509      	b.n	8013d4a <MotionDI_update+0x16da>
 8014336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014338:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 801433c:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 8014340:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8014344:	e701      	b.n	801414a <MotionDI_update+0x1ada>
 8014346:	ed84 6af1 	vstr	s12, [r4, #964]	; 0x3c4
 801434a:	edc4 6af2 	vstr	s13, [r4, #968]	; 0x3c8
 801434e:	ed84 7af3 	vstr	s14, [r4, #972]	; 0x3cc
 8014352:	e72f      	b.n	80141b4 <MotionDI_update+0x1b44>
 8014354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014358:	6572      	str	r2, [r6, #84]	; 0x54
 801435a:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 801435e:	f7fe bbea 	b.w	8012b36 <MotionDI_update+0x4c6>
 8014362:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
 8014366:	f042 0201 	orr.w	r2, r2, #1
 801436a:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 801436e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8014370:	f8c8 1098 	str.w	r1, [r8, #152]	; 0x98
 8014374:	f8d8 1090 	ldr.w	r1, [r8, #144]	; 0x90
 8014378:	f8c8 309c 	str.w	r3, [r8, #156]	; 0x9c
 801437c:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8014380:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014382:	f884 2160 	strb.w	r2, [r4, #352]	; 0x160
 8014386:	4632      	mov	r2, r6
 8014388:	f8c8 10a0 	str.w	r1, [r8, #160]	; 0xa0
 801438c:	4951      	ldr	r1, [pc, #324]	; (80144d4 <MotionDI_update+0x1e64>)
 801438e:	f8c8 30a4 	str.w	r3, [r8, #164]	; 0xa4
 8014392:	f7f7 fadf 	bl	800b954 <m_qmult_eml>
 8014396:	4950      	ldr	r1, [pc, #320]	; (80144d8 <MotionDI_update+0x1e68>)
 8014398:	464a      	mov	r2, r9
 801439a:	f101 0040 	add.w	r0, r1, #64	; 0x40
 801439e:	f7f7 fad9 	bl	800b954 <m_qmult_eml>
 80143a2:	4649      	mov	r1, r9
 80143a4:	4630      	mov	r0, r6
 80143a6:	f7f7 fad5 	bl	800b954 <m_qmult_eml>
 80143aa:	ed99 9a01 	vldr	s18, [r9, #4]
 80143ae:	edd9 9a00 	vldr	s19, [r9]
 80143b2:	ee69 7a09 	vmul.f32	s15, s18, s18
 80143b6:	edd9 8a02 	vldr	s17, [r9, #8]
 80143ba:	ed99 8a03 	vldr	s16, [r9, #12]
 80143be:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80143c2:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80143c6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80143ca:	ee17 0a90 	vmov	r0, s15
 80143ce:	f7ec f8db 	bl	8000588 <__aeabi_f2d>
 80143d2:	ec41 0b10 	vmov	d0, r0, r1
 80143d6:	f006 fb39 	bl	801aa4c <sqrt>
 80143da:	ec51 0b10 	vmov	r0, r1, d0
 80143de:	f7ec fc23 	bl	8000c28 <__aeabi_d2f>
 80143e2:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
 80143e6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80143ea:	ee07 0a90 	vmov	s15, r0
 80143ee:	ee05 3a10 	vmov	s10, r3
 80143f2:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 80143f6:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 80143fa:	eeb8 5a45 	vcvt.f32.u32	s10, s10
 80143fe:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 8014402:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8014406:	f8d8 00a8 	ldr.w	r0, [r8, #168]	; 0xa8
 801440a:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 801440e:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 8014412:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 8014416:	f8c8 00b8 	str.w	r0, [r8, #184]	; 0xb8
 801441a:	eec5 7a85 	vdiv.f32	s15, s11, s10
 801441e:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 8014422:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 8014426:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 801442a:	ee69 9a87 	vmul.f32	s19, s19, s14
 801442e:	ee29 9a07 	vmul.f32	s18, s18, s14
 8014432:	ee68 8a87 	vmul.f32	s17, s17, s14
 8014436:	ee28 8a07 	vmul.f32	s16, s16, s14
 801443a:	edc9 9a00 	vstr	s19, [r9]
 801443e:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 8014442:	ee27 6a86 	vmul.f32	s12, s15, s12
 8014446:	ed89 9a01 	vstr	s18, [r9, #4]
 801444a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801444e:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 8014452:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014456:	edc9 8a02 	vstr	s17, [r9, #8]
 801445a:	ee26 7a06 	vmul.f32	s14, s12, s12
 801445e:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 8014462:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 8014466:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 801446a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801446e:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 8014472:	ed89 8a03 	vstr	s16, [r9, #12]
 8014476:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 801447a:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801447e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014486:	f100 84ea 	bmi.w	8014e5e <MotionDI_update+0x27ee>
 801448a:	2000      	movs	r0, #0
 801448c:	2300      	movs	r3, #0
 801448e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014492:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 8014496:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 801449a:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 801449e:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 80144a2:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 80144a6:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 80144aa:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 80144ae:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 80144b2:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 80144b6:	f7ff b913 	b.w	80136e0 <MotionDI_update+0x1070>
 80144ba:	bf00      	nop
 80144bc:	20001704 	.word	0x20001704
 80144c0:	bf3504f3 	.word	0xbf3504f3
 80144c4:	3f3504f3 	.word	0x3f3504f3
 80144c8:	20001848 	.word	0x20001848
 80144cc:	200016a4 	.word	0x200016a4
 80144d0:	20000414 	.word	0x20000414
 80144d4:	20001934 	.word	0x20001934
 80144d8:	20001914 	.word	0x20001914
 80144dc:	f8d4 12cc 	ldr.w	r1, [r4, #716]	; 0x2cc
 80144e0:	f042 0201 	orr.w	r2, r2, #1
 80144e4:	f8d4 32d0 	ldr.w	r3, [r4, #720]	; 0x2d0
 80144e8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80144ea:	f8c4 12dc 	str.w	r1, [r4, #732]	; 0x2dc
 80144ee:	f8d4 12d4 	ldr.w	r1, [r4, #724]	; 0x2d4
 80144f2:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
 80144f6:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 80144fa:	981e      	ldr	r0, [sp, #120]	; 0x78
 80144fc:	f884 2124 	strb.w	r2, [r4, #292]	; 0x124
 8014500:	4632      	mov	r2, r6
 8014502:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
 8014506:	49a5      	ldr	r1, [pc, #660]	; (801479c <MotionDI_update+0x212c>)
 8014508:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801450c:	f7f7 fa22 	bl	800b954 <m_qmult_eml>
 8014510:	49a3      	ldr	r1, [pc, #652]	; (80147a0 <MotionDI_update+0x2130>)
 8014512:	464a      	mov	r2, r9
 8014514:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8014518:	f7f7 fa1c 	bl	800b954 <m_qmult_eml>
 801451c:	4649      	mov	r1, r9
 801451e:	4630      	mov	r0, r6
 8014520:	f7f7 fa18 	bl	800b954 <m_qmult_eml>
 8014524:	edd9 9a01 	vldr	s19, [r9, #4]
 8014528:	ed99 aa00 	vldr	s20, [r9]
 801452c:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8014530:	edd9 8a02 	vldr	s17, [r9, #8]
 8014534:	ed99 8a03 	vldr	s16, [r9, #12]
 8014538:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801453c:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014540:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014544:	ee17 0a90 	vmov	r0, s15
 8014548:	f7ec f81e 	bl	8000588 <__aeabi_f2d>
 801454c:	ec41 0b10 	vmov	d0, r0, r1
 8014550:	f006 fa7c 	bl	801aa4c <sqrt>
 8014554:	ec51 0b10 	vmov	r0, r1, d0
 8014558:	f7ec fb66 	bl	8000c28 <__aeabi_d2f>
 801455c:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 8014560:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014564:	ee07 0a90 	vmov	s15, r0
 8014568:	ee05 3a10 	vmov	s10, r3
 801456c:	ed94 6ac4 	vldr	s12, [r4, #784]	; 0x310
 8014570:	edd4 6ac3 	vldr	s13, [r4, #780]	; 0x30c
 8014574:	eeb8 5a45 	vcvt.f32.u32	s10, s10
 8014578:	edd4 4ac5 	vldr	s9, [r4, #788]	; 0x314
 801457c:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8014580:	f8d4 32ec 	ldr.w	r3, [r4, #748]	; 0x2ec
 8014584:	f8d4 12f0 	ldr.w	r1, [r4, #752]	; 0x2f0
 8014588:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 801458c:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
 8014590:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
 8014594:	eec5 7a85 	vdiv.f32	s15, s11, s10
 8014598:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
 801459c:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
 80145a0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
 80145a4:	ee27 aa0a 	vmul.f32	s20, s14, s20
 80145a8:	ee67 9a29 	vmul.f32	s19, s14, s19
 80145ac:	ee67 8a28 	vmul.f32	s17, s14, s17
 80145b0:	ee28 8a07 	vmul.f32	s16, s16, s14
 80145b4:	ed89 aa00 	vstr	s20, [r9]
 80145b8:	ed84 aaaf 	vstr	s20, [r4, #700]	; 0x2bc
 80145bc:	ee27 6a86 	vmul.f32	s12, s15, s12
 80145c0:	edc9 9a01 	vstr	s19, [r9, #4]
 80145c4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80145c8:	edc4 9ab0 	vstr	s19, [r4, #704]	; 0x2c0
 80145cc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80145d0:	edc9 8a02 	vstr	s17, [r9, #8]
 80145d4:	ee26 7a06 	vmul.f32	s14, s12, s12
 80145d8:	ed84 6ac8 	vstr	s12, [r4, #800]	; 0x320
 80145dc:	edc4 6ac7 	vstr	s13, [r4, #796]	; 0x31c
 80145e0:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 80145e4:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80145e8:	edc4 8ab1 	vstr	s17, [r4, #708]	; 0x2c4
 80145ec:	ed89 8a03 	vstr	s16, [r9, #12]
 80145f0:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 80145f4:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80145f8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80145fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014600:	f100 843d 	bmi.w	8014e7e <MotionDI_update+0x280e>
 8014604:	2000      	movs	r0, #0
 8014606:	2300      	movs	r3, #0
 8014608:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801460c:	f8c4 0328 	str.w	r0, [r4, #808]	; 0x328
 8014610:	f8c4 22f8 	str.w	r2, [r4, #760]	; 0x2f8
 8014614:	f8c4 2338 	str.w	r2, [r4, #824]	; 0x338
 8014618:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
 801461c:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 8014620:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
 8014624:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 8014628:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
 801462c:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
 8014630:	f7ff b988 	b.w	8013944 <MotionDI_update+0x12d4>
 8014634:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 8014638:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 801463c:	f47e a8dc 	bne.w	80127f8 <MotionDI_update+0x188>
 8014640:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014642:	2b00      	cmp	r3, #0
 8014644:	f041 82d8 	bne.w	8015bf8 <MotionDI_update+0x3588>
 8014648:	4a56      	ldr	r2, [pc, #344]	; (80147a4 <MotionDI_update+0x2134>)
 801464a:	1d11      	adds	r1, r2, #4
 801464c:	f102 0008 	add.w	r0, r2, #8
 8014650:	f7ff bb53 	b.w	8013cfa <MotionDI_update+0x168a>
 8014654:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014656:	2300      	movs	r3, #0
 8014658:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801465c:	618b      	str	r3, [r1, #24]
 801465e:	624a      	str	r2, [r1, #36]	; 0x24
 8014660:	61cb      	str	r3, [r1, #28]
 8014662:	620b      	str	r3, [r1, #32]
 8014664:	f7ff b818 	b.w	8013698 <MotionDI_update+0x1028>
 8014668:	2300      	movs	r3, #0
 801466a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801466e:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 8014672:	f8c4 2360 	str.w	r2, [r4, #864]	; 0x360
 8014676:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
 801467a:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
 801467e:	f7ff b93d 	b.w	80138fc <MotionDI_update+0x128c>
 8014682:	2300      	movs	r3, #0
 8014684:	2200      	movs	r2, #0
 8014686:	6563      	str	r3, [r4, #84]	; 0x54
 8014688:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801468c:	6623      	str	r3, [r4, #96]	; 0x60
 801468e:	65a3      	str	r3, [r4, #88]	; 0x58
 8014690:	6663      	str	r3, [r4, #100]	; 0x64
 8014692:	65e3      	str	r3, [r4, #92]	; 0x5c
 8014694:	66a3      	str	r3, [r4, #104]	; 0x68
 8014696:	f7fe b81b 	b.w	80126d0 <MotionDI_update+0x60>
 801469a:	2300      	movs	r3, #0
 801469c:	f8c4 c2bc 	str.w	ip, [r4, #700]	; 0x2bc
 80146a0:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
 80146a4:	f8c4 12c4 	str.w	r1, [r4, #708]	; 0x2c4
 80146a8:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
 80146ac:	f8c4 c2cc 	str.w	ip, [r4, #716]	; 0x2cc
 80146b0:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
 80146b4:	f8c4 12d4 	str.w	r1, [r4, #724]	; 0x2d4
 80146b8:	f8c4 22d8 	str.w	r2, [r4, #728]	; 0x2d8
 80146bc:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
 80146c0:	f885 38e0 	strb.w	r3, [r5, #2272]	; 0x8e0
 80146c4:	e4e4      	b.n	8014090 <MotionDI_update+0x1a20>
 80146c6:	2200      	movs	r2, #0
 80146c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80146ca:	a958      	add	r1, sp, #352	; 0x160
 80146cc:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 80146d0:	60b3      	str	r3, [r6, #8]
 80146d2:	60f2      	str	r2, [r6, #12]
 80146d4:	7d33      	ldrb	r3, [r6, #20]
 80146d6:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 80146da:	aa65      	add	r2, sp, #404	; 0x194
 80146dc:	9118      	str	r1, [sp, #96]	; 0x60
 80146de:	a933      	add	r1, sp, #204	; 0xcc
 80146e0:	9219      	str	r2, [sp, #100]	; 0x64
 80146e2:	911c      	str	r1, [sp, #112]	; 0x70
 80146e4:	f7fe bea3 	b.w	801342e <MotionDI_update+0xdbe>
 80146e8:	2301      	movs	r3, #1
 80146ea:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 80146ee:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 80146f2:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 80146f6:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 80146fa:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 80146fe:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
 8014702:	f7ff bb7d 	b.w	8013e00 <MotionDI_update+0x1790>
 8014706:	2300      	movs	r3, #0
 8014708:	2200      	movs	r2, #0
 801470a:	4e27      	ldr	r6, [pc, #156]	; (80147a8 <MotionDI_update+0x2138>)
 801470c:	8322      	strh	r2, [r4, #24]
 801470e:	61e3      	str	r3, [r4, #28]
 8014710:	62a3      	str	r3, [r4, #40]	; 0x28
 8014712:	6223      	str	r3, [r4, #32]
 8014714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014716:	6263      	str	r3, [r4, #36]	; 0x24
 8014718:	6323      	str	r3, [r4, #48]	; 0x30
 801471a:	f7fd bfda 	b.w	80126d2 <MotionDI_update+0x62>
 801471e:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8014720:	f24f 2330 	movw	r3, #62000	; 0xf230
 8014724:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014726:	46f0      	mov	r8, lr
 8014728:	4403      	add	r3, r0
 801472a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801472c:	429a      	cmp	r2, r3
 801472e:	f200 843a 	bhi.w	8014fa6 <MotionDI_update+0x2936>
 8014732:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 8014736:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 801473a:	9325      	str	r3, [sp, #148]	; 0x94
 801473c:	9020      	str	r0, [sp, #128]	; 0x80
 801473e:	9221      	str	r2, [sp, #132]	; 0x84
 8014740:	9324      	str	r3, [sp, #144]	; 0x90
 8014742:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 8014746:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801474a:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 801474e:	eba2 0808 	sub.w	r8, r2, r8
 8014752:	ee1c 2a90 	vmov	r2, s25
 8014756:	f9bb 9012 	ldrsh.w	r9, [fp, #18]
 801475a:	1a9b      	subs	r3, r3, r2
 801475c:	fb08 f808 	mul.w	r8, r8, r8
 8014760:	ee1d 2a10 	vmov	r2, s26
 8014764:	eddf 7a11 	vldr	s15, [pc, #68]	; 80147ac <MotionDI_update+0x213c>
 8014768:	fb03 8303 	mla	r3, r3, r3, r8
 801476c:	ed9f 5a10 	vldr	s10, [pc, #64]	; 80147b0 <MotionDI_update+0x2140>
 8014770:	eba9 0102 	sub.w	r1, r9, r2
 8014774:	2201      	movs	r2, #1
 8014776:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
 801477a:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801477e:	fb01 3301 	mla	r3, r1, r1, r3
 8014782:	ee2a 5a05 	vmul.f32	s10, s20, s10
 8014786:	eddf 5a0b 	vldr	s11, [pc, #44]	; 80147b4 <MotionDI_update+0x2144>
 801478a:	4611      	mov	r1, r2
 801478c:	9318      	str	r3, [sp, #96]	; 0x60
 801478e:	2300      	movs	r3, #0
 8014790:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8014794:	9322      	str	r3, [sp, #136]	; 0x88
 8014796:	9526      	str	r5, [sp, #152]	; 0x98
 8014798:	e016      	b.n	80147c8 <MotionDI_update+0x2158>
 801479a:	bf00      	nop
 801479c:	20001734 	.word	0x20001734
 80147a0:	20001714 	.word	0x20001714
 80147a4:	20001b28 	.word	0x20001b28
 80147a8:	20001ad0 	.word	0x20001ad0
 80147ac:	3c23d70a 	.word	0x3c23d70a
 80147b0:	3e99999a 	.word	0x3e99999a
 80147b4:	3f6b851f 	.word	0x3f6b851f
 80147b8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80147bc:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 80147c0:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80147c4:	f9b3 900c 	ldrsh.w	r9, [r3, #12]
 80147c8:	1c4b      	adds	r3, r1, #1
 80147ca:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80147ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80147d2:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 80147d6:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80147da:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80147de:	f9b3 c00a 	ldrsh.w	ip, [r3, #10]
 80147e2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80147e6:	ebac 0c05 	sub.w	ip, ip, r5
 80147ea:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80147ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80147f2:	fb0c fc0c 	mul.w	ip, ip, ip
 80147f6:	1bc0      	subs	r0, r0, r7
 80147f8:	eba3 0309 	sub.w	r3, r3, r9
 80147fc:	fb00 c000 	mla	r0, r0, r0, ip
 8014800:	fb03 0303 	mla	r3, r3, r3, r0
 8014804:	ee07 3a10 	vmov	s14, r3
 8014808:	eef8 7a47 	vcvt.f32.u32	s15, s14
 801480c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8014810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014814:	d446      	bmi.n	80148a4 <MotionDI_update+0x2234>
 8014816:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801481e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8014822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014826:	d43d      	bmi.n	80148a4 <MotionDI_update+0x2234>
 8014828:	fb05 fe05 	mul.w	lr, r5, r5
 801482c:	fb07 ee07 	mla	lr, r7, r7, lr
 8014830:	fb09 ee09 	mla	lr, r9, r9, lr
 8014834:	ee07 ea90 	vmov	s15, lr
 8014838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801483c:	eef1 6ae7 	vsqrt.f32	s13, s15
 8014840:	ee36 6aca 	vsub.f32	s12, s13, s20
 8014844:	eeb0 6ac6 	vabs.f32	s12, s12
 8014848:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801484c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014850:	d428      	bmi.n	80148a4 <MotionDI_update+0x2234>
 8014852:	ee76 6acb 	vsub.f32	s13, s13, s22
 8014856:	eef0 6ae6 	vabs.f32	s13, s13
 801485a:	eef4 aae6 	vcmpe.f32	s21, s13
 801485e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014862:	d41f      	bmi.n	80148a4 <MotionDI_update+0x2234>
 8014864:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014866:	2800      	cmp	r0, #0
 8014868:	f040 8319 	bne.w	8014e9e <MotionDI_update+0x282e>
 801486c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801486e:	2b00      	cmp	r3, #0
 8014870:	f040 83ea 	bne.w	8015048 <MotionDI_update+0x29d8>
 8014874:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014876:	eba3 0e01 	sub.w	lr, r3, r1
 801487a:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 801487e:	4601      	mov	r1, r0
 8014880:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014882:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014886:	fb03 031e 	mls	r3, r3, lr, r0
 801488a:	9320      	str	r3, [sp, #128]	; 0x80
 801488c:	2301      	movs	r3, #1
 801488e:	65f1      	str	r1, [r6, #92]	; 0x5c
 8014890:	2100      	movs	r1, #0
 8014892:	f8a6 7060 	strh.w	r7, [r6, #96]	; 0x60
 8014896:	931c      	str	r3, [sp, #112]	; 0x70
 8014898:	9121      	str	r1, [sp, #132]	; 0x84
 801489a:	f8a6 5062 	strh.w	r5, [r6, #98]	; 0x62
 801489e:	9322      	str	r3, [sp, #136]	; 0x88
 80148a0:	f8a6 9064 	strh.w	r9, [r6, #100]	; 0x64
 80148a4:	3201      	adds	r2, #1
 80148a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80148a8:	b212      	sxth	r2, r2
 80148aa:	4293      	cmp	r3, r2
 80148ac:	4611      	mov	r1, r2
 80148ae:	dc83      	bgt.n	80147b8 <MotionDI_update+0x2148>
 80148b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80148b2:	f896 e04c 	ldrb.w	lr, [r6, #76]	; 0x4c
 80148b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80148b8:	f8a6 1050 	strh.w	r1, [r6, #80]	; 0x50
 80148bc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80148be:	fab3 f283 	clz	r2, r3
 80148c2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80148c4:	ea41 0e0e 	orr.w	lr, r1, lr
 80148c8:	9921      	ldr	r1, [sp, #132]	; 0x84
 80148ca:	0952      	lsrs	r2, r2, #5
 80148cc:	f8a6 1058 	strh.w	r1, [r6, #88]	; 0x58
 80148d0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80148d2:	921f      	str	r2, [sp, #124]	; 0x7c
 80148d4:	6571      	str	r1, [r6, #84]	; 0x54
 80148d6:	f886 e04c 	strb.w	lr, [r6, #76]	; 0x4c
 80148da:	b91b      	cbnz	r3, 80148e4 <MotionDI_update+0x2274>
 80148dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80148de:	2b00      	cmp	r3, #0
 80148e0:	f040 8231 	bne.w	8014d46 <MotionDI_update+0x26d6>
 80148e4:	f1be 0f00 	cmp.w	lr, #0
 80148e8:	f000 83ce 	beq.w	8015088 <MotionDI_update+0x2a18>
 80148ec:	6937      	ldr	r7, [r6, #16]
 80148ee:	b1d7      	cbz	r7, 8014926 <MotionDI_update+0x22b6>
 80148f0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80148f2:	f7eb fe27 	bl	8000544 <__aeabi_ui2d>
 80148f6:	a3f6      	add	r3, pc, #984	; (adr r3, 8014cd0 <MotionDI_update+0x2660>)
 80148f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fc:	f7eb fe9c 	bl	8000638 <__aeabi_dmul>
 8014900:	4680      	mov	r8, r0
 8014902:	4689      	mov	r9, r1
 8014904:	4638      	mov	r0, r7
 8014906:	f7eb fe1d 	bl	8000544 <__aeabi_ui2d>
 801490a:	4602      	mov	r2, r0
 801490c:	460b      	mov	r3, r1
 801490e:	4640      	mov	r0, r8
 8014910:	4649      	mov	r1, r9
 8014912:	f7eb fcd9 	bl	80002c8 <__aeabi_dsub>
 8014916:	2200      	movs	r2, #0
 8014918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801491c:	f7ec f8fe 	bl	8000b1c <__aeabi_dcmplt>
 8014920:	2800      	cmp	r0, #0
 8014922:	f040 83dd 	bne.w	80150e0 <MotionDI_update+0x2a70>
 8014926:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 801492a:	2b01      	cmp	r3, #1
 801492c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801492e:	f000 83d4 	beq.w	80150da <MotionDI_update+0x2a6a>
 8014932:	2b0a      	cmp	r3, #10
 8014934:	f240 83d4 	bls.w	80150e0 <MotionDI_update+0x2a70>
 8014938:	ab58      	add	r3, sp, #352	; 0x160
 801493a:	2100      	movs	r1, #0
 801493c:	2234      	movs	r2, #52	; 0x34
 801493e:	4618      	mov	r0, r3
 8014940:	9318      	str	r3, [sp, #96]	; 0x60
 8014942:	2300      	movs	r3, #0
 8014944:	f88d 10aa 	strb.w	r1, [sp, #170]	; 0xaa
 8014948:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 801494c:	932b      	str	r3, [sp, #172]	; 0xac
 801494e:	932c      	str	r3, [sp, #176]	; 0xb0
 8014950:	932d      	str	r3, [sp, #180]	; 0xb4
 8014952:	932e      	str	r3, [sp, #184]	; 0xb8
 8014954:	4be0      	ldr	r3, [pc, #896]	; (8014cd8 <MotionDI_update+0x2668>)
 8014956:	912f      	str	r1, [sp, #188]	; 0xbc
 8014958:	edd3 9a00 	vldr	s19, [r3]
 801495c:	f8ad 10c0 	strh.w	r1, [sp, #192]	; 0xc0
 8014960:	9131      	str	r1, [sp, #196]	; 0xc4
 8014962:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 8014966:	f001 fa65 	bl	8015e34 <memset>
 801496a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801496c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801496e:	4293      	cmp	r3, r2
 8014970:	f001 818c 	beq.w	8015c8c <MotionDI_update+0x361c>
 8014974:	461a      	mov	r2, r3
 8014976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014978:	9924      	ldr	r1, [sp, #144]	; 0x90
 801497a:	3301      	adds	r3, #1
 801497c:	1a9b      	subs	r3, r3, r2
 801497e:	fb93 f2f1 	sdiv	r2, r3, r1
 8014982:	fb01 3312 	mls	r3, r1, r2, r3
 8014986:	b21a      	sxth	r2, r3
 8014988:	2a00      	cmp	r2, #0
 801498a:	9219      	str	r2, [sp, #100]	; 0x64
 801498c:	da03      	bge.n	8014996 <MotionDI_update+0x2326>
 801498e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014990:	441a      	add	r2, r3
 8014992:	b213      	sxth	r3, r2
 8014994:	9319      	str	r3, [sp, #100]	; 0x64
 8014996:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014998:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801499a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801499e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80149a2:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 80149a6:	f9b3 e062 	ldrsh.w	lr, [r3, #98]	; 0x62
 80149aa:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80149ae:	2a00      	cmp	r2, #0
 80149b0:	f001 8191 	beq.w	8015cd6 <MotionDI_update+0x3666>
 80149b4:	2200      	movs	r2, #0
 80149b6:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 80149ba:	4699      	mov	r9, r3
 80149bc:	46f2      	mov	sl, lr
 80149be:	46e0      	mov	r8, ip
 80149c0:	4611      	mov	r1, r2
 80149c2:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80149c4:	469b      	mov	fp, r3
 80149c6:	951e      	str	r5, [sp, #120]	; 0x78
 80149c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80149ca:	3201      	adds	r2, #1
 80149cc:	4419      	add	r1, r3
 80149ce:	b212      	sxth	r2, r2
 80149d0:	fb91 f3f7 	sdiv	r3, r1, r7
 80149d4:	fb07 1313 	mls	r3, r7, r3, r1
 80149d8:	4611      	mov	r1, r2
 80149da:	b21b      	sxth	r3, r3
 80149dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80149e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80149e4:	f9b3 5060 	ldrsh.w	r5, [r3, #96]	; 0x60
 80149e8:	f9b3 0062 	ldrsh.w	r0, [r3, #98]	; 0x62
 80149ec:	45ac      	cmp	ip, r5
 80149ee:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80149f2:	bfb8      	it	lt
 80149f4:	46ac      	movlt	ip, r5
 80149f6:	45a8      	cmp	r8, r5
 80149f8:	bfa8      	it	ge
 80149fa:	46a8      	movge	r8, r5
 80149fc:	4586      	cmp	lr, r0
 80149fe:	bfb8      	it	lt
 8014a00:	4686      	movlt	lr, r0
 8014a02:	4582      	cmp	sl, r0
 8014a04:	bfa8      	it	ge
 8014a06:	4682      	movge	sl, r0
 8014a08:	459b      	cmp	fp, r3
 8014a0a:	bfb8      	it	lt
 8014a0c:	469b      	movlt	fp, r3
 8014a0e:	4599      	cmp	r9, r3
 8014a10:	bfa8      	it	ge
 8014a12:	4699      	movge	r9, r3
 8014a14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014a16:	429a      	cmp	r2, r3
 8014a18:	dbd6      	blt.n	80149c8 <MotionDI_update+0x2358>
 8014a1a:	ebac 0c08 	sub.w	ip, ip, r8
 8014a1e:	465b      	mov	r3, fp
 8014a20:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8014a22:	ee07 ca90 	vmov	s15, ip
 8014a26:	f8dd b080 	ldr.w	fp, [sp, #128]	; 0x80
 8014a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a2e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8014cdc <MotionDI_update+0x266c>
 8014a32:	ed9f 6aab 	vldr	s12, [pc, #684]	; 8014ce0 <MotionDI_update+0x2670>
 8014a36:	eec7 5a29 	vdiv.f32	s11, s14, s19
 8014a3a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014a3e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a46:	f300 8331 	bgt.w	80150ac <MotionDI_update+0x2a3c>
 8014a4a:	ebae 0e0a 	sub.w	lr, lr, sl
 8014a4e:	ee07 ea10 	vmov	s14, lr
 8014a52:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8014a56:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8014a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a5e:	f300 8325 	bgt.w	80150ac <MotionDI_update+0x2a3c>
 8014a62:	eba3 0909 	sub.w	r9, r3, r9
 8014a66:	ee07 9a10 	vmov	s14, r9
 8014a6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a6e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8014a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a76:	f300 8319 	bgt.w	80150ac <MotionDI_update+0x2a3c>
 8014a7a:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
 8014a7e:	ee65 5a86 	vmul.f32	s11, s11, s12
 8014a82:	eef4 5ae7 	vcmpe.f32	s11, s15
 8014a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a8a:	f100 830f 	bmi.w	80150ac <MotionDI_update+0x2a3c>
 8014a8e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8014a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a96:	f300 8309 	bgt.w	80150ac <MotionDI_update+0x2a3c>
 8014a9a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa2:	f300 8303 	bgt.w	80150ac <MotionDI_update+0x2a3c>
 8014aa6:	ed96 7a07 	vldr	s14, [r6, #28]
 8014aaa:	f10d 03ab 	add.w	r3, sp, #171	; 0xab
 8014aae:	edd6 6a06 	vldr	s13, [r6, #24]
 8014ab2:	eeb0 0a69 	vmov.f32	s0, s19
 8014ab6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014aba:	edd6 7a08 	vldr	s15, [r6, #32]
 8014abe:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014ac2:	9300      	str	r3, [sp, #0]
 8014ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ac8:	aa2d      	add	r2, sp, #180	; 0xb4
 8014aca:	ee17 1a10 	vmov	r1, s14
 8014ace:	a831      	add	r0, sp, #196	; 0xc4
 8014ad0:	ee16 3a90 	vmov	r3, s13
 8014ad4:	f8ad 10c6 	strh.w	r1, [sp, #198]	; 0xc6
 8014ad8:	ee17 1a90 	vmov	r1, s15
 8014adc:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
 8014ae0:	ab2e      	add	r3, sp, #184	; 0xb8
 8014ae2:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 8014ae6:	497f      	ldr	r1, [pc, #508]	; (8014ce4 <MotionDI_update+0x2674>)
 8014ae8:	f7f8 fd08 	bl	800d4fc <getAccStats.constprop.0>
 8014aec:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8014ce8 <MotionDI_update+0x2678>
 8014af0:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8014af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014afc:	f140 8302 	bpl.w	8015104 <MotionDI_update+0x2a94>
 8014b00:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	f000 82fd 	beq.w	8015104 <MotionDI_update+0x2a94>
 8014b0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	f040 82f9 	bne.w	8015104 <MotionDI_update+0x2a94>
 8014b12:	7d33      	ldrb	r3, [r6, #20]
 8014b14:	2b03      	cmp	r3, #3
 8014b16:	f001 80f7 	beq.w	8015d08 <MotionDI_update+0x3698>
 8014b1a:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8014d04 <MotionDI_update+0x2694>
 8014b1e:	f04f 0e03 	mov.w	lr, #3
 8014b22:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8014b24:	edc6 8a04 	vstr	s17, [r6, #16]
 8014b28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b2c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014b2e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b32:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014b34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b38:	f8dc 8000 	ldr.w	r8, [ip]
 8014b3c:	f04f 0c00 	mov.w	ip, #0
 8014b40:	f886 e014 	strb.w	lr, [r6, #20]
 8014b44:	f886 c04c 	strb.w	ip, [r6, #76]	; 0x4c
 8014b48:	f8d6 c048 	ldr.w	ip, [r6, #72]	; 0x48
 8014b4c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014b4e:	ab33      	add	r3, sp, #204	; 0xcc
 8014b50:	f8c7 8000 	str.w	r8, [r7]
 8014b54:	931c      	str	r3, [sp, #112]	; 0x70
 8014b56:	ab65      	add	r3, sp, #404	; 0x194
 8014b58:	9319      	str	r3, [sp, #100]	; 0x64
 8014b5a:	f1bc 0f00 	cmp.w	ip, #0
 8014b5e:	f001 802e 	beq.w	8015bbe <MotionDI_update+0x354e>
 8014b62:	ee07 ca90 	vmov	s15, ip
 8014b66:	eddf 6a61 	vldr	s13, [pc, #388]	; 8014cec <MotionDI_update+0x267c>
 8014b6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014b6e:	ee38 6a47 	vsub.f32	s12, s16, s14
 8014b72:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8014b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b7a:	f101 80b2 	bmi.w	8015ce2 <MotionDI_update+0x3672>
 8014b7e:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8014cf0 <MotionDI_update+0x2680>
 8014b82:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b8a:	f141 80d1 	bpl.w	8015d30 <MotionDI_update+0x36c0>
 8014b8e:	ee76 6ac8 	vsub.f32	s13, s13, s16
 8014b92:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8014cf4 <MotionDI_update+0x2684>
 8014b96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014b9a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014b9e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8014ba2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014ba6:	ed9f 4a54 	vldr	s8, [pc, #336]	; 8014cf8 <MotionDI_update+0x2688>
 8014baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014bae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014bb0:	edd6 1a06 	vldr	s3, [r6, #24]
 8014bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014bb8:	edd3 5a01 	vldr	s11, [r3, #4]
 8014bbc:	ed93 6a02 	vldr	s12, [r3, #8]
 8014bc0:	edd3 6a03 	vldr	s13, [r3, #12]
 8014bc4:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8014bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014bcc:	edd3 4a04 	vldr	s9, [r3, #16]
 8014bd0:	ed93 5a08 	vldr	s10, [r3, #32]
 8014bd4:	ed93 1a0c 	vldr	s2, [r3, #48]	; 0x30
 8014bd8:	ee67 5a25 	vmul.f32	s11, s14, s11
 8014bdc:	ee27 6a06 	vmul.f32	s12, s14, s12
 8014be0:	ed96 4a11 	vldr	s8, [r6, #68]	; 0x44
 8014be4:	ee67 6a26 	vmul.f32	s13, s14, s13
 8014be8:	ed96 2a07 	vldr	s4, [r6, #28]
 8014bec:	ee67 4a24 	vmul.f32	s9, s14, s9
 8014bf0:	edd6 2a08 	vldr	s5, [r6, #32]
 8014bf4:	ee27 5a05 	vmul.f32	s10, s14, s10
 8014bf8:	ed96 3a09 	vldr	s6, [r6, #36]	; 0x24
 8014bfc:	ee27 7a01 	vmul.f32	s14, s14, s2
 8014c00:	edd6 3a0d 	vldr	s7, [r6, #52]	; 0x34
 8014c04:	eee7 5aa1 	vfma.f32	s11, s15, s3
 8014c08:	eea7 6a82 	vfma.f32	s12, s15, s4
 8014c0c:	eea7 7a84 	vfma.f32	s14, s15, s8
 8014c10:	eee7 6aa2 	vfma.f32	s13, s15, s5
 8014c14:	eee7 4a83 	vfma.f32	s9, s15, s6
 8014c18:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8014c1c:	eef0 7a47 	vmov.f32	s15, s14
 8014c20:	feb8 7a65 	vrinta.f32	s14, s11
 8014c24:	ed86 7a06 	vstr	s14, [r6, #24]
 8014c28:	feb8 7a46 	vrinta.f32	s14, s12
 8014c2c:	edc6 4a09 	vstr	s9, [r6, #36]	; 0x24
 8014c30:	ed86 7a07 	vstr	s14, [r6, #28]
 8014c34:	feb8 7a66 	vrinta.f32	s14, s13
 8014c38:	ed86 5a0d 	vstr	s10, [r6, #52]	; 0x34
 8014c3c:	ed86 7a08 	vstr	s14, [r6, #32]
 8014c40:	edc6 7a11 	vstr	s15, [r6, #68]	; 0x44
 8014c44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014c46:	f7eb fc7d 	bl	8000544 <__aeabi_ui2d>
 8014c4a:	4f2c      	ldr	r7, [pc, #176]	; (8014cfc <MotionDI_update+0x268c>)
 8014c4c:	a320      	add	r3, pc, #128	; (adr r3, 8014cd0 <MotionDI_update+0x2660>)
 8014c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c52:	f7eb fcf1 	bl	8000638 <__aeabi_dmul>
 8014c56:	f7eb ffc7 	bl	8000be8 <__aeabi_d2uiz>
 8014c5a:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8014c5e:	edd6 6a07 	vldr	s13, [r6, #28]
 8014c62:	2200      	movs	r2, #0
 8014c64:	ed96 7a08 	vldr	s14, [r6, #32]
 8014c68:	edd6 7a06 	vldr	s15, [r6, #24]
 8014c6c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014c70:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8014c72:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c7a:	931e      	str	r3, [sp, #120]	; 0x78
 8014c7c:	f8d6 c028 	ldr.w	ip, [r6, #40]	; 0x28
 8014c80:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8014c84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014c86:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8014c8a:	64b0      	str	r0, [r6, #72]	; 0x48
 8014c8c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8014c90:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014c92:	60f9      	str	r1, [r7, #12]
 8014c94:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8014c96:	edc0 6a01 	vstr	s13, [r0, #4]
 8014c9a:	ed80 7a02 	vstr	s14, [r0, #8]
 8014c9e:	edc0 7a00 	vstr	s15, [r0]
 8014ca2:	60b3      	str	r3, [r6, #8]
 8014ca4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8014ca6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8014ca8:	f8c7 c010 	str.w	ip, [r7, #16]
 8014cac:	61f9      	str	r1, [r7, #28]
 8014cae:	f8d6 c038 	ldr.w	ip, [r6, #56]	; 0x38
 8014cb2:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8014cb4:	eddf 4a12 	vldr	s9, [pc, #72]	; 8014d00 <MotionDI_update+0x2690>
 8014cb8:	6178      	str	r0, [r7, #20]
 8014cba:	61bb      	str	r3, [r7, #24]
 8014cbc:	ee25 5a24 	vmul.f32	s10, s10, s9
 8014cc0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8014cc2:	ee66 6a24 	vmul.f32	s13, s12, s9
 8014cc6:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8014cc8:	e01e      	b.n	8014d08 <MotionDI_update+0x2698>
 8014cca:	bf00      	nop
 8014ccc:	f3af 8000 	nop.w
 8014cd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8014cd4:	3f50624d 	.word	0x3f50624d
 8014cd8:	20002a20 	.word	0x20002a20
 8014cdc:	3f8ccccd 	.word	0x3f8ccccd
 8014ce0:	3f99999a 	.word	0x3f99999a
 8014ce4:	200025e4 	.word	0x200025e4
 8014ce8:	3d23d70a 	.word	0x3d23d70a
 8014cec:	42f00000 	.word	0x42f00000
 8014cf0:	45e10000 	.word	0x45e10000
 8014cf4:	38941a9d 	.word	0x38941a9d
 8014cf8:	00000000 	.word	0x00000000
 8014cfc:	20001a9c 	.word	0x20001a9c
 8014d00:	3a83126f 	.word	0x3a83126f
 8014d04:	200025d4 	.word	0x200025d4
 8014d08:	ee25 7aa4 	vmul.f32	s14, s11, s9
 8014d0c:	60f2      	str	r2, [r6, #12]
 8014d0e:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 8014d12:	f8c7 c020 	str.w	ip, [r7, #32]
 8014d16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8014d18:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 8014d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d1e:	2901      	cmp	r1, #1
 8014d20:	7d33      	ldrb	r3, [r6, #20]
 8014d22:	6278      	str	r0, [r7, #36]	; 0x24
 8014d24:	ed87 5a01 	vstr	s10, [r7, #4]
 8014d28:	ed87 7a00 	vstr	s14, [r7]
 8014d2c:	edc7 6a02 	vstr	s13, [r7, #8]
 8014d30:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 8014d34:	f47d acc2 	bne.w	80126bc <MotionDI_update+0x4c>
 8014d38:	2b03      	cmp	r3, #3
 8014d3a:	f47d acbf 	bne.w	80126bc <MotionDI_update+0x4c>
 8014d3e:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
 8014d42:	f7fd bcbb 	b.w	80126bc <MotionDI_update+0x4c>
 8014d46:	4bcc      	ldr	r3, [pc, #816]	; (8015078 <MotionDI_update+0x2a08>)
 8014d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014d4c:	2100      	movs	r1, #0
 8014d4e:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014d52:	edd3 7a00 	vldr	s15, [r3]
 8014d56:	4688      	mov	r8, r1
 8014d58:	460b      	mov	r3, r1
 8014d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014d5e:	460a      	mov	r2, r1
 8014d60:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8014d62:	3101      	adds	r1, #1
 8014d64:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8014d68:	f9b0 900a 	ldrsh.w	r9, [r0, #10]
 8014d6c:	3006      	adds	r0, #6
 8014d6e:	b28f      	uxth	r7, r1
 8014d70:	4462      	add	r2, ip
 8014d72:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014d76:	444b      	add	r3, r9
 8014d78:	45ba      	cmp	sl, r7
 8014d7a:	44e0      	add	r8, ip
 8014d7c:	d8f1      	bhi.n	8014d62 <MotionDI_update+0x26f2>
 8014d7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014d80:	fb92 f2f1 	sdiv	r2, r2, r1
 8014d84:	ee07 2a90 	vmov	s15, r2
 8014d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d94:	f100 8799 	bmi.w	8015cca <MotionDI_update+0x365a>
 8014d98:	eef1 6a47 	vneg.f32	s13, s14
 8014d9c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014da4:	dd03      	ble.n	8014dae <MotionDI_update+0x273e>
 8014da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014daa:	edc6 7a06 	vstr	s15, [r6, #24]
 8014dae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014db0:	fb93 f3f2 	sdiv	r3, r3, r2
 8014db4:	ee07 3a90 	vmov	s15, r3
 8014db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc4:	f100 877b 	bmi.w	8015cbe <MotionDI_update+0x364e>
 8014dc8:	eef1 6a47 	vneg.f32	s13, s14
 8014dcc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dd4:	dd03      	ble.n	8014dde <MotionDI_update+0x276e>
 8014dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014dda:	edc6 7a07 	vstr	s15, [r6, #28]
 8014dde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014de0:	fb98 f8f3 	sdiv	r8, r8, r3
 8014de4:	ee07 8a90 	vmov	s15, r8
 8014de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df4:	f140 8755 	bpl.w	8015ca2 <MotionDI_update+0x3632>
 8014df8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014dfc:	edc6 7a08 	vstr	s15, [r6, #32]
 8014e00:	e570      	b.n	80148e4 <MotionDI_update+0x2274>
 8014e02:	7d33      	ldrb	r3, [r6, #20]
 8014e04:	2b03      	cmp	r3, #3
 8014e06:	f47d aeb0 	bne.w	8012b6a <MotionDI_update+0x4fa>
 8014e0a:	6932      	ldr	r2, [r6, #16]
 8014e0c:	2a00      	cmp	r2, #0
 8014e0e:	f43d aeac 	beq.w	8012b6a <MotionDI_update+0x4fa>
 8014e12:	ee07 2a90 	vmov	s15, r2
 8014e16:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8014e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e1e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e2a:	f77d ae9e 	ble.w	8012b6a <MotionDI_update+0x4fa>
 8014e2e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8014e30:	2200      	movs	r2, #0
 8014e32:	60b1      	str	r1, [r6, #8]
 8014e34:	a958      	add	r1, sp, #352	; 0x160
 8014e36:	9118      	str	r1, [sp, #96]	; 0x60
 8014e38:	a933      	add	r1, sp, #204	; 0xcc
 8014e3a:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8014e3e:	60f2      	str	r2, [r6, #12]
 8014e40:	911c      	str	r1, [sp, #112]	; 0x70
 8014e42:	a965      	add	r1, sp, #404	; 0x194
 8014e44:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 8014e48:	9119      	str	r1, [sp, #100]	; 0x64
 8014e4a:	f7fe baf0 	b.w	801342e <MotionDI_update+0xdbe>
 8014e4e:	f1b9 0f01 	cmp.w	r9, #1
 8014e52:	f43f ac38 	beq.w	80146c6 <MotionDI_update+0x2056>
 8014e56:	2300      	movs	r3, #0
 8014e58:	9328      	str	r3, [sp, #160]	; 0xa0
 8014e5a:	f7fd bf85 	b.w	8012d68 <MotionDI_update+0x6f8>
 8014e5e:	ee75 7ac7 	vsub.f32	s15, s11, s14
 8014e62:	ee17 0a90 	vmov	r0, s15
 8014e66:	f7eb fb8f 	bl	8000588 <__aeabi_f2d>
 8014e6a:	ec41 0b10 	vmov	d0, r0, r1
 8014e6e:	f005 fded 	bl	801aa4c <sqrt>
 8014e72:	ec51 0b10 	vmov	r0, r1, d0
 8014e76:	f7eb fed7 	bl	8000c28 <__aeabi_d2f>
 8014e7a:	f7ff bb07 	b.w	801448c <MotionDI_update+0x1e1c>
 8014e7e:	ee75 7ac7 	vsub.f32	s15, s11, s14
 8014e82:	ee17 0a90 	vmov	r0, s15
 8014e86:	f7eb fb7f 	bl	8000588 <__aeabi_f2d>
 8014e8a:	ec41 0b10 	vmov	d0, r0, r1
 8014e8e:	f005 fddd 	bl	801aa4c <sqrt>
 8014e92:	ec51 0b10 	vmov	r0, r1, d0
 8014e96:	f7eb fec7 	bl	8000c28 <__aeabi_d2f>
 8014e9a:	f7ff bbb4 	b.w	8014606 <MotionDI_update+0x1f96>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	9825      	ldr	r0, [sp, #148]	; 0x94
 8014ea2:	4283      	cmp	r3, r0
 8014ea4:	f000 8124 	beq.w	80150f0 <MotionDI_update+0x2a80>
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014eac:	3301      	adds	r3, #1
 8014eae:	eba3 0800 	sub.w	r8, r3, r0
 8014eb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8014eb4:	fb98 fefa 	sdiv	lr, r8, sl
 8014eb8:	fb0a 8e1e 	mls	lr, sl, lr, r8
 8014ebc:	fa0f f38e 	sxth.w	r3, lr
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	da03      	bge.n	8014ecc <MotionDI_update+0x285c>
 8014ec4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014ec6:	449e      	add	lr, r3
 8014ec8:	fa0f f38e 	sxth.w	r3, lr
 8014ecc:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014ece:	f100 3cff 	add.w	ip, r0, #4294967295
 8014ed2:	fa0f f08c 	sxth.w	r0, ip
 8014ed6:	fa1f fc8c 	uxth.w	ip, ip
 8014eda:	2800      	cmp	r0, #0
 8014edc:	db2e      	blt.n	8014f3c <MotionDI_update+0x28cc>
 8014ede:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8014ee2:	4418      	add	r0, r3
 8014ee4:	9118      	str	r1, [sp, #96]	; 0x60
 8014ee6:	ebac 0300 	sub.w	r3, ip, r0
 8014eea:	4698      	mov	r8, r3
 8014eec:	fb90 f3fa 	sdiv	r3, r0, sl
 8014ef0:	fb0a 0313 	mls	r3, sl, r3, r0
 8014ef4:	3801      	subs	r0, #1
 8014ef6:	b21b      	sxth	r3, r3
 8014ef8:	eb08 0e00 	add.w	lr, r8, r0
 8014efc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014f00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014f04:	f8b3 1062 	ldrh.w	r1, [r3, #98]	; 0x62
 8014f08:	f8b3 c060 	ldrh.w	ip, [r3, #96]	; 0x60
 8014f0c:	fb11 f105 	smulbb	r1, r1, r5
 8014f10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014f14:	fb17 110c 	smlabb	r1, r7, ip, r1
 8014f18:	fb19 1303 	smlabb	r3, r9, r3, r1
 8014f1c:	ee07 3a90 	vmov	s15, r3
 8014f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f28:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f30:	f73f acb8 	bgt.w	80148a4 <MotionDI_update+0x2234>
 8014f34:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 8014f38:	d0d8      	beq.n	8014eec <MotionDI_update+0x287c>
 8014f3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014f3c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8014f3e:	fb90 f3fa 	sdiv	r3, r0, sl
 8014f42:	fb0a 0313 	mls	r3, sl, r3, r0
 8014f46:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014f48:	1a41      	subs	r1, r0, r1
 8014f4a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014f4c:	b21b      	sxth	r3, r3
 8014f4e:	f100 0801 	add.w	r8, r0, #1
 8014f52:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014f54:	9321      	str	r3, [sp, #132]	; 0x84
 8014f56:	4684      	mov	ip, r0
 8014f58:	45d0      	cmp	r8, sl
 8014f5a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8014f5c:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8014f60:	ebac 0e00 	sub.w	lr, ip, r0
 8014f64:	f101 30ff 	add.w	r0, r1, #4294967295
 8014f68:	46c4      	mov	ip, r8
 8014f6a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8014f6c:	bfa8      	it	ge
 8014f6e:	46d4      	movge	ip, sl
 8014f70:	fb03 e310 	mls	r3, r3, r0, lr
 8014f74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014f78:	fa1f f08c 	uxth.w	r0, ip
 8014f7c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8014f80:	901c      	str	r0, [sp, #112]	; 0x70
 8014f82:	2001      	movs	r0, #1
 8014f84:	65cb      	str	r3, [r1, #92]	; 0x5c
 8014f86:	9022      	str	r0, [sp, #136]	; 0x88
 8014f88:	f8a1 7060 	strh.w	r7, [r1, #96]	; 0x60
 8014f8c:	f8a1 5062 	strh.w	r5, [r1, #98]	; 0x62
 8014f90:	f8a1 9064 	strh.w	r9, [r1, #100]	; 0x64
 8014f94:	e486      	b.n	80148a4 <MotionDI_update+0x2234>
 8014f96:	ee6a 9a0a 	vmul.f32	s19, s20, s20
 8014f9a:	eddf 2a38 	vldr	s5, [pc, #224]	; 801507c <MotionDI_update+0x2a0c>
 8014f9e:	ee69 2aa2 	vmul.f32	s5, s19, s5
 8014fa2:	f7fd bdf5 	b.w	8012b90 <MotionDI_update+0x520>
 8014fa6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014faa:	429a      	cmp	r2, r3
 8014fac:	f000 866b 	beq.w	8015c86 <MotionDI_update+0x3616>
 8014fb0:	1ad3      	subs	r3, r2, r3
 8014fb2:	9320      	str	r3, [sp, #128]	; 0x80
 8014fb4:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 8014fb8:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 8014fbc:	9221      	str	r2, [sp, #132]	; 0x84
 8014fbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014fc0:	9325      	str	r3, [sp, #148]	; 0x94
 8014fc2:	429a      	cmp	r2, r3
 8014fc4:	f000 8654 	beq.w	8015c70 <MotionDI_update+0x3600>
 8014fc8:	461a      	mov	r2, r3
 8014fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fcc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014fce:	3301      	adds	r3, #1
 8014fd0:	9224      	str	r2, [sp, #144]	; 0x90
 8014fd2:	1a5b      	subs	r3, r3, r1
 8014fd4:	4611      	mov	r1, r2
 8014fd6:	fb93 f2f2 	sdiv	r2, r3, r2
 8014fda:	fb01 3312 	mls	r3, r1, r2, r3
 8014fde:	b21a      	sxth	r2, r3
 8014fe0:	2a00      	cmp	r2, #0
 8014fe2:	da01      	bge.n	8014fe8 <MotionDI_update+0x2978>
 8014fe4:	440b      	add	r3, r1
 8014fe6:	b21a      	sxth	r2, r3
 8014fe8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014fea:	b20b      	sxth	r3, r1
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	dd27      	ble.n	8015040 <MotionDI_update+0x29d0>
 8014ff0:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8014ff2:	1e4b      	subs	r3, r1, #1
 8014ff4:	46ae      	mov	lr, r5
 8014ff6:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 8014ffa:	1bc0      	subs	r0, r0, r7
 8014ffc:	b29f      	uxth	r7, r3
 8014ffe:	460d      	mov	r5, r1
 8015000:	3701      	adds	r7, #1
 8015002:	4417      	add	r7, r2
 8015004:	e003      	b.n	801500e <MotionDI_update+0x299e>
 8015006:	65d9      	str	r1, [r3, #92]	; 0x5c
 8015008:	3201      	adds	r2, #1
 801500a:	4297      	cmp	r7, r2
 801500c:	d013      	beq.n	8015036 <MotionDI_update+0x29c6>
 801500e:	fb92 f3fc 	sdiv	r3, r2, ip
 8015012:	fb0c 2313 	mls	r3, ip, r3, r2
 8015016:	b21b      	sxth	r3, r3
 8015018:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801501c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015020:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015022:	1841      	adds	r1, r0, r1
 8015024:	d5ef      	bpl.n	8015006 <MotionDI_update+0x2996>
 8015026:	f105 39ff 	add.w	r9, r5, #4294967295
 801502a:	65d9      	str	r1, [r3, #92]	; 0x5c
 801502c:	2d00      	cmp	r5, #0
 801502e:	d0eb      	beq.n	8015008 <MotionDI_update+0x2998>
 8015030:	fa1f f589 	uxth.w	r5, r9
 8015034:	e7e8      	b.n	8015008 <MotionDI_update+0x2998>
 8015036:	462b      	mov	r3, r5
 8015038:	951c      	str	r5, [sp, #112]	; 0x70
 801503a:	4675      	mov	r5, lr
 801503c:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 8015040:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015042:	6573      	str	r3, [r6, #84]	; 0x54
 8015044:	f7ff bb7d 	b.w	8014742 <MotionDI_update+0x20d2>
 8015048:	4618      	mov	r0, r3
 801504a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801504c:	1a59      	subs	r1, r3, r1
 801504e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015050:	3901      	subs	r1, #1
 8015052:	eba3 0e00 	sub.w	lr, r3, r0
 8015056:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 801505a:	fb03 e111 	mls	r1, r3, r1, lr
 801505e:	e415      	b.n	801488c <MotionDI_update+0x221c>
 8015060:	4a07      	ldr	r2, [pc, #28]	; (8015080 <MotionDI_update+0x2a10>)
 8015062:	4293      	cmp	r3, r2
 8015064:	f240 85bd 	bls.w	8015be2 <MotionDI_update+0x3572>
 8015068:	7d33      	ldrb	r3, [r6, #20]
 801506a:	3b00      	subs	r3, #0
 801506c:	bf18      	it	ne
 801506e:	2301      	movne	r3, #1
 8015070:	7533      	strb	r3, [r6, #20]
 8015072:	f7fd bd7a 	b.w	8012b6a <MotionDI_update+0x4fa>
 8015076:	bf00      	nop
 8015078:	20002a20 	.word	0x20002a20
 801507c:	3a03126f 	.word	0x3a03126f
 8015080:	000d2f00 	.word	0x000d2f00
 8015084:	00000000 	.word	0x00000000
 8015088:	aa58      	add	r2, sp, #352	; 0x160
 801508a:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 801508e:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8015092:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015096:	9218      	str	r2, [sp, #96]	; 0x60
 8015098:	aa33      	add	r2, sp, #204	; 0xcc
 801509a:	60b3      	str	r3, [r6, #8]
 801509c:	921c      	str	r2, [sp, #112]	; 0x70
 801509e:	aa65      	add	r2, sp, #404	; 0x194
 80150a0:	7d33      	ldrb	r3, [r6, #20]
 80150a2:	f8a6 e1c8 	strh.w	lr, [r6, #456]	; 0x1c8
 80150a6:	9219      	str	r2, [sp, #100]	; 0x64
 80150a8:	f7fe b9c1 	b.w	801342e <MotionDI_update+0xdbe>
 80150ac:	ab33      	add	r3, sp, #204	; 0xcc
 80150ae:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 80150b2:	931c      	str	r3, [sp, #112]	; 0x70
 80150b4:	ab65      	add	r3, sp, #404	; 0x194
 80150b6:	9319      	str	r3, [sp, #100]	; 0x64
 80150b8:	2300      	movs	r3, #0
 80150ba:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 80150be:	2300      	movs	r3, #0
 80150c0:	f8d6 21c4 	ldr.w	r2, [r6, #452]	; 0x1c4
 80150c4:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 80150c8:	e9c6 2302 	strd	r2, r3, [r6, #8]
 80150cc:	7d33      	ldrb	r3, [r6, #20]
 80150ce:	f7fe b9ae 	b.w	801342e <MotionDI_update+0xdbe>
 80150d2:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 8015084 <MotionDI_update+0x2a14>
 80150d6:	f7fd be2d 	b.w	8012d34 <MotionDI_update+0x6c4>
 80150da:	2b05      	cmp	r3, #5
 80150dc:	f63f ac2c 	bhi.w	8014938 <MotionDI_update+0x22c8>
 80150e0:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
 80150e4:	a858      	add	r0, sp, #352	; 0x160
 80150e6:	2200      	movs	r2, #0
 80150e8:	7d33      	ldrb	r3, [r6, #20]
 80150ea:	9018      	str	r0, [sp, #96]	; 0x60
 80150ec:	60b1      	str	r1, [r6, #8]
 80150ee:	e6a3      	b.n	8014e38 <MotionDI_update+0x27c8>
 80150f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150f2:	3301      	adds	r3, #1
 80150f4:	fb93 fefa 	sdiv	lr, r3, sl
 80150f8:	fb0a 3e1e 	mls	lr, sl, lr, r3
 80150fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80150fe:	fa0f f38e 	sxth.w	r3, lr
 8015102:	e6e3      	b.n	8014ecc <MotionDI_update+0x285c>
 8015104:	a865      	add	r0, sp, #404	; 0x194
 8015106:	49b5      	ldr	r1, [pc, #724]	; (80153dc <MotionDI_update+0x2d6c>)
 8015108:	af33      	add	r7, sp, #204	; 0xcc
 801510a:	2300      	movs	r3, #0
 801510c:	9019      	str	r0, [sp, #100]	; 0x64
 801510e:	f04f 0e00 	mov.w	lr, #0
 8015112:	971c      	str	r7, [sp, #112]	; 0x70
 8015114:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 8015118:	af46      	add	r7, sp, #280	; 0x118
 801511a:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 801511e:	2270      	movs	r2, #112	; 0x70
 8015120:	f8c7 c010 	str.w	ip, [r7, #16]
 8015124:	f8c7 c020 	str.w	ip, [r7, #32]
 8015128:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801512c:	f8c7 e004 	str.w	lr, [r7, #4]
 8015130:	f8c7 e008 	str.w	lr, [r7, #8]
 8015134:	f8c7 e00c 	str.w	lr, [r7, #12]
 8015138:	f8c7 e014 	str.w	lr, [r7, #20]
 801513c:	f8c7 e018 	str.w	lr, [r7, #24]
 8015140:	f8c7 e01c 	str.w	lr, [r7, #28]
 8015144:	f8c7 e000 	str.w	lr, [r7]
 8015148:	f8c8 3000 	str.w	r3, [r8]
 801514c:	f8c8 3004 	str.w	r3, [r8, #4]
 8015150:	f8c8 3008 	str.w	r3, [r8, #8]
 8015154:	f8c9 3018 	str.w	r3, [r9, #24]
 8015158:	971e      	str	r7, [sp, #120]	; 0x78
 801515a:	c903      	ldmia	r1, {r0, r1}
 801515c:	e9c9 3300 	strd	r3, r3, [r9]
 8015160:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
 8015164:	0c09      	lsrs	r1, r1, #16
 8015166:	9033      	str	r0, [sp, #204]	; 0xcc
 8015168:	f88d 10d2 	strb.w	r1, [sp, #210]	; 0xd2
 801516c:	4619      	mov	r1, r3
 801516e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015170:	e9c9 3302 	strd	r3, r3, [r9, #8]
 8015174:	e9c9 3304 	strd	r3, r3, [r9, #16]
 8015178:	f000 fe5c 	bl	8015e34 <memset>
 801517c:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 8015180:	f8b6 1052 	ldrh.w	r1, [r6, #82]	; 0x52
 8015184:	f9b6 3058 	ldrsh.w	r3, [r6, #88]	; 0x58
 8015188:	428a      	cmp	r2, r1
 801518a:	f103 0301 	add.w	r3, r3, #1
 801518e:	f000 85b4 	beq.w	8015cfa <MotionDI_update+0x368a>
 8015192:	1a9b      	subs	r3, r3, r2
 8015194:	fb93 f0f1 	sdiv	r0, r3, r1
 8015198:	fb01 3310 	mls	r3, r1, r0, r3
 801519c:	b21f      	sxth	r7, r3
 801519e:	2f00      	cmp	r7, #0
 80151a0:	da01      	bge.n	80151a6 <MotionDI_update+0x2b36>
 80151a2:	440b      	add	r3, r1
 80151a4:	b21f      	sxth	r7, r3
 80151a6:	2a00      	cmp	r2, #0
 80151a8:	f000 859f 	beq.w	8015cea <MotionDI_update+0x367a>
 80151ac:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80153e0 <MotionDI_update+0x2d70>
 80151b0:	2000      	movs	r0, #0
 80151b2:	eeb0 6a66 	vmov.f32	s12, s13
 80151b6:	eef0 5a66 	vmov.f32	s11, s13
 80151ba:	eb00 0c07 	add.w	ip, r0, r7
 80151be:	3001      	adds	r0, #1
 80151c0:	fb9c f3f1 	sdiv	r3, ip, r1
 80151c4:	fb01 c313 	mls	r3, r1, r3, ip
 80151c8:	fa5f fc80 	uxtb.w	ip, r0
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	4562      	cmp	r2, ip
 80151d0:	4660      	mov	r0, ip
 80151d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80151d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80151da:	f9b3 e060 	ldrsh.w	lr, [r3, #96]	; 0x60
 80151de:	ee05 ea10 	vmov	s10, lr
 80151e2:	f9b3 e062 	ldrsh.w	lr, [r3, #98]	; 0x62
 80151e6:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80151ea:	ee07 ea10 	vmov	s14, lr
 80151ee:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80151f2:	ee07 3a90 	vmov	s15, r3
 80151f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151fe:	ee75 5a85 	vadd.f32	s11, s11, s10
 8015202:	ee36 6a07 	vadd.f32	s12, s12, s14
 8015206:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801520a:	d8d6      	bhi.n	80151ba <MotionDI_update+0x2b4a>
 801520c:	ee07 2a10 	vmov	s14, r2
 8015210:	eddf 7a73 	vldr	s15, [pc, #460]	; 80153e0 <MotionDI_update+0x2d70>
 8015214:	2000      	movs	r0, #0
 8015216:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801521a:	eef0 3a67 	vmov.f32	s7, s15
 801521e:	eeb0 4a67 	vmov.f32	s8, s15
 8015222:	ee86 aa07 	vdiv.f32	s20, s12, s14
 8015226:	ee86 9a87 	vdiv.f32	s18, s13, s14
 801522a:	eec5 aa87 	vdiv.f32	s21, s11, s14
 801522e:	eef0 4a67 	vmov.f32	s9, s15
 8015232:	eeb0 5a67 	vmov.f32	s10, s15
 8015236:	eef0 5a67 	vmov.f32	s11, s15
 801523a:	eb00 0c07 	add.w	ip, r0, r7
 801523e:	3001      	adds	r0, #1
 8015240:	fb9c f3f1 	sdiv	r3, ip, r1
 8015244:	fb01 c313 	mls	r3, r1, r3, ip
 8015248:	fa5f fc80 	uxtb.w	ip, r0
 801524c:	b2db      	uxtb	r3, r3
 801524e:	4562      	cmp	r2, ip
 8015250:	4660      	mov	r0, ip
 8015252:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015256:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801525a:	f9b3 e060 	ldrsh.w	lr, [r3, #96]	; 0x60
 801525e:	ee06 ea10 	vmov	s12, lr
 8015262:	f9b3 e062 	ldrsh.w	lr, [r3, #98]	; 0x62
 8015266:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 801526a:	ee06 ea90 	vmov	s13, lr
 801526e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015272:	ee07 3a10 	vmov	s14, r3
 8015276:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801527a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801527e:	ee36 6a6a 	vsub.f32	s12, s12, s21
 8015282:	ee76 6aca 	vsub.f32	s13, s13, s20
 8015286:	ee37 7a49 	vsub.f32	s14, s14, s18
 801528a:	eee6 5a06 	vfma.f32	s11, s12, s12
 801528e:	eea6 5a26 	vfma.f32	s10, s12, s13
 8015292:	eea6 4aa6 	vfma.f32	s8, s13, s13
 8015296:	eee6 4a07 	vfma.f32	s9, s12, s14
 801529a:	eee6 3a87 	vfma.f32	s7, s13, s14
 801529e:	eee7 7a07 	vfma.f32	s15, s14, s14
 80152a2:	d8ca      	bhi.n	801523a <MotionDI_update+0x2bca>
 80152a4:	edc9 5a00 	vstr	s11, [r9]
 80152a8:	ed89 5a01 	vstr	s10, [r9, #4]
 80152ac:	edc9 4a02 	vstr	s9, [r9, #8]
 80152b0:	ed89 4a03 	vstr	s8, [r9, #12]
 80152b4:	edc9 3a04 	vstr	s7, [r9, #16]
 80152b8:	edc9 7a05 	vstr	s15, [r9, #20]
 80152bc:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 80152c0:	f8d9 2000 	ldr.w	r2, [r9]
 80152c4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80152c8:	4641      	mov	r1, r8
 80152ca:	f8ca 2000 	str.w	r2, [sl]
 80152ce:	4650      	mov	r0, sl
 80152d0:	f8d9 2014 	ldr.w	r2, [r9, #20]
 80152d4:	f8ca 3010 	str.w	r3, [sl, #16]
 80152d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80152dc:	f8ca 2020 	str.w	r2, [sl, #32]
 80152e0:	f8ca 3004 	str.w	r3, [sl, #4]
 80152e4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80152e8:	f8ca 300c 	str.w	r3, [sl, #12]
 80152ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80152f0:	f8ca 2008 	str.w	r2, [sl, #8]
 80152f4:	f8ca 2018 	str.w	r2, [sl, #24]
 80152f8:	f8ca 3014 	str.w	r3, [sl, #20]
 80152fc:	f8ca 301c 	str.w	r3, [sl, #28]
 8015300:	f7f6 fbc6 	bl	800ba90 <st_accCal_MEMS_EIG3>
 8015304:	ed98 7a01 	vldr	s14, [r8, #4]
 8015308:	eef2 5a0e 	vmov.f32	s11, #46	; 0x41700000  15.0
 801530c:	ed98 6a00 	vldr	s12, [r8]
 8015310:	edd8 7a02 	vldr	s15, [r8, #8]
 8015314:	eeb0 7ac7 	vabs.f32	s14, s14
 8015318:	eeb0 6ac6 	vabs.f32	s12, s12
 801531c:	eef0 7ae7 	vabs.f32	s15, s15
 8015320:	fec7 6a46 	vminnm.f32	s13, s14, s12
 8015324:	fe87 7a06 	vmaxnm.f32	s14, s14, s12
 8015328:	fec6 6ae7 	vminnm.f32	s13, s13, s15
 801532c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8015330:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8015334:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801533c:	f73f aebc 	bgt.w	80150b8 <MotionDI_update+0x2a48>
 8015340:	eddf 7a27 	vldr	s15, [pc, #156]	; 80153e0 <MotionDI_update+0x2d70>
 8015344:	2200      	movs	r2, #0
 8015346:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015348:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 801534c:	f8c9 2018 	str.w	r2, [r9, #24]
 8015350:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8015354:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8015358:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 801535c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 8015360:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8015364:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8015368:	e9c9 2200 	strd	r2, r2, [r9]
 801536c:	e9c9 2202 	strd	r2, r2, [r9, #8]
 8015370:	e9c9 2204 	strd	r2, r2, [r9, #16]
 8015374:	2900      	cmp	r1, #0
 8015376:	f000 80cd 	beq.w	8015514 <MotionDI_update+0x2ea4>
 801537a:	ed93 7a00 	vldr	s14, [r3]
 801537e:	eeb0 4a67 	vmov.f32	s8, s15
 8015382:	eef0 3a67 	vmov.f32	s7, s15
 8015386:	f8b6 0052 	ldrh.w	r0, [r6, #82]	; 0x52
 801538a:	eef0 da67 	vmov.f32	s27, s15
 801538e:	ed8d 7a1f 	vstr	s14, [sp, #124]	; 0x7c
 8015392:	eeb0 ea67 	vmov.f32	s28, s15
 8015396:	ed93 7a07 	vldr	s14, [r3, #28]
 801539a:	eef0 ea67 	vmov.f32	s29, s15
 801539e:	ed93 fa0d 	vldr	s30, [r3, #52]	; 0x34
 80153a2:	ed93 da01 	vldr	s26, [r3, #4]
 80153a6:	edd3 ca02 	vldr	s25, [r3, #8]
 80153aa:	ed93 ca08 	vldr	s24, [r3, #32]
 80153ae:	edd3 ba03 	vldr	s23, [r3, #12]
 80153b2:	ed93 ba04 	vldr	s22, [r3, #16]
 80153b6:	ed93 0a05 	vldr	s0, [r3, #20]
 80153ba:	edd3 0a09 	vldr	s1, [r3, #36]	; 0x24
 80153be:	ed93 1a0a 	vldr	s2, [r3, #40]	; 0x28
 80153c2:	edd3 1a0b 	vldr	s3, [r3, #44]	; 0x2c
 80153c6:	ed93 2a0e 	vldr	s4, [r3, #56]	; 0x38
 80153ca:	edd3 2a0f 	vldr	s5, [r3, #60]	; 0x3c
 80153ce:	ed93 3a10 	vldr	s6, [r3, #64]	; 0x40
 80153d2:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
 80153d6:	ed8d 8a21 	vstr	s16, [sp, #132]	; 0x84
 80153da:	e003      	b.n	80153e4 <MotionDI_update+0x2d74>
 80153dc:	0801c8d4 	.word	0x0801c8d4
 80153e0:	00000000 	.word	0x00000000
 80153e4:	eb02 0c07 	add.w	ip, r2, r7
 80153e8:	ed9d 8a1f 	vldr	s16, [sp, #124]	; 0x7c
 80153ec:	3201      	adds	r2, #1
 80153ee:	fb9c f3f0 	sdiv	r3, ip, r0
 80153f2:	fb00 c313 	mls	r3, r0, r3, ip
 80153f6:	fa5f fc82 	uxtb.w	ip, r2
 80153fa:	b2db      	uxtb	r3, r3
 80153fc:	458c      	cmp	ip, r1
 80153fe:	4662      	mov	r2, ip
 8015400:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015404:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015408:	f9b3 e060 	ldrsh.w	lr, [r3, #96]	; 0x60
 801540c:	ee06 ea10 	vmov	s12, lr
 8015410:	f9b3 e062 	ldrsh.w	lr, [r3, #98]	; 0x62
 8015414:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8015418:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801541c:	ee06 ea90 	vmov	s13, lr
 8015420:	ee07 3a10 	vmov	s14, r3
 8015424:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015428:	ee36 6a6a 	vsub.f32	s12, s12, s21
 801542c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015430:	ee76 6aca 	vsub.f32	s13, s13, s20
 8015434:	ee66 4a06 	vmul.f32	s9, s12, s12
 8015438:	ee37 7a49 	vsub.f32	s14, s14, s18
 801543c:	ee26 5aa6 	vmul.f32	s10, s13, s13
 8015440:	eea4 8aa4 	vfma.f32	s16, s9, s9
 8015444:	ee67 5a07 	vmul.f32	s11, s14, s14
 8015448:	ee66 fa26 	vmul.f32	s31, s12, s13
 801544c:	eee6 ba24 	vfma.f32	s23, s12, s9
 8015450:	eea6 baa4 	vfma.f32	s22, s13, s9
 8015454:	eea7 0a24 	vfma.f32	s0, s14, s9
 8015458:	ed8d 8a1f 	vstr	s16, [sp, #124]	; 0x7c
 801545c:	eee6 0a05 	vfma.f32	s1, s12, s10
 8015460:	ed9d 8a20 	vldr	s16, [sp, #128]	; 0x80
 8015464:	eea6 2a25 	vfma.f32	s4, s12, s11
 8015468:	ee7e eaa4 	vadd.f32	s29, s29, s9
 801546c:	eea5 8a05 	vfma.f32	s16, s10, s10
 8015470:	ee66 4a07 	vmul.f32	s9, s12, s14
 8015474:	ee26 6a87 	vmul.f32	s12, s13, s14
 8015478:	eea6 1a85 	vfma.f32	s2, s13, s10
 801547c:	eee7 1a05 	vfma.f32	s3, s14, s10
 8015480:	eea5 faa5 	vfma.f32	s30, s11, s11
 8015484:	eee6 2aa5 	vfma.f32	s5, s13, s11
 8015488:	ed8d 8a20 	vstr	s16, [sp, #128]	; 0x80
 801548c:	eea7 3a25 	vfma.f32	s6, s14, s11
 8015490:	eeaf daaf 	vfma.f32	s26, s31, s31
 8015494:	eee4 caa4 	vfma.f32	s25, s9, s9
 8015498:	eea6 ca06 	vfma.f32	s24, s12, s12
 801549c:	ee3e ea05 	vadd.f32	s28, s28, s10
 80154a0:	ee7d daa5 	vadd.f32	s27, s27, s11
 80154a4:	ee77 7aaf 	vadd.f32	s15, s15, s31
 80154a8:	ee34 4a24 	vadd.f32	s8, s8, s9
 80154ac:	ee73 3a86 	vadd.f32	s7, s7, s12
 80154b0:	d398      	bcc.n	80153e4 <MotionDI_update+0x2d74>
 80154b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80154b4:	ed9d 7a1f 	vldr	s14, [sp, #124]	; 0x7c
 80154b8:	ed9d 8a21 	vldr	s16, [sp, #132]	; 0x84
 80154bc:	ed83 7a00 	vstr	s14, [r3]
 80154c0:	ed9d 7a20 	vldr	s14, [sp, #128]	; 0x80
 80154c4:	ed83 fa0d 	vstr	s30, [r3, #52]	; 0x34
 80154c8:	ed83 7a07 	vstr	s14, [r3, #28]
 80154cc:	edc3 ea12 	vstr	s29, [r3, #72]	; 0x48
 80154d0:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 80154d4:	edc3 da19 	vstr	s27, [r3, #100]	; 0x64
 80154d8:	ed83 da01 	vstr	s26, [r3, #4]
 80154dc:	edc3 ca02 	vstr	s25, [r3, #8]
 80154e0:	ed83 ca08 	vstr	s24, [r3, #32]
 80154e4:	edc3 ba03 	vstr	s23, [r3, #12]
 80154e8:	ed83 ba04 	vstr	s22, [r3, #16]
 80154ec:	ed83 0a05 	vstr	s0, [r3, #20]
 80154f0:	edc3 0a09 	vstr	s1, [r3, #36]	; 0x24
 80154f4:	ed83 1a0a 	vstr	s2, [r3, #40]	; 0x28
 80154f8:	edc3 1a0b 	vstr	s3, [r3, #44]	; 0x2c
 80154fc:	ed83 2a0e 	vstr	s4, [r3, #56]	; 0x38
 8015500:	edc3 2a0f 	vstr	s5, [r3, #60]	; 0x3c
 8015504:	ed83 3a10 	vstr	s6, [r3, #64]	; 0x40
 8015508:	edc3 3a17 	vstr	s7, [r3, #92]	; 0x5c
 801550c:	ed83 4a14 	vstr	s8, [r3, #80]	; 0x50
 8015510:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8015514:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015516:	ee07 1a90 	vmov	s15, r1
 801551a:	951f      	str	r5, [sp, #124]	; 0x7c
 801551c:	f04f 0801 	mov.w	r8, #1
 8015520:	4618      	mov	r0, r3
 8015522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015524:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801552a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801552c:	4605      	mov	r5, r0
 801552e:	6182      	str	r2, [r0, #24]
 8015530:	2200      	movs	r2, #0
 8015532:	6443      	str	r3, [r0, #68]	; 0x44
 8015534:	2300      	movs	r3, #0
 8015536:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 801553a:	edc0 7a1b 	vstr	s15, [r0, #108]	; 0x6c
 801553e:	6301      	str	r1, [r0, #48]	; 0x30
 8015540:	6543      	str	r3, [r0, #84]	; 0x54
 8015542:	6603      	str	r3, [r0, #96]	; 0x60
 8015544:	6683      	str	r3, [r0, #104]	; 0x68
 8015546:	f108 33ff 	add.w	r3, r8, #4294967295
 801554a:	f81e 0b01 	ldrb.w	r0, [lr], #1
 801554e:	fa5f fc88 	uxtb.w	ip, r8
 8015552:	fb10 f100 	smulbb	r1, r0, r0
 8015556:	fb08 f303 	mul.w	r3, r8, r3
 801555a:	2b00      	cmp	r3, #0
 801555c:	ee07 1a90 	vmov	s15, r1
 8015560:	bfb8      	it	lt
 8015562:	3301      	addlt	r3, #1
 8015564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015568:	f1b8 0f07 	cmp.w	r8, #7
 801556c:	ea4f 0363 	mov.w	r3, r3, asr #1
 8015570:	f1c3 0300 	rsb	r3, r3, #0
 8015574:	eb02 0103 	add.w	r1, r2, r3
 8015578:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801557c:	ed91 7a00 	vldr	s14, [r1]
 8015580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015584:	edc1 7a00 	vstr	s15, [r1]
 8015588:	d07a      	beq.n	8015680 <MotionDI_update+0x3010>
 801558a:	f89e 7000 	ldrb.w	r7, [lr]
 801558e:	1c51      	adds	r1, r2, #1
 8015590:	f1bc 0f06 	cmp.w	ip, #6
 8015594:	fb17 f700 	smulbb	r7, r7, r0
 8015598:	4419      	add	r1, r3
 801559a:	ee07 7a90 	vmov	s15, r7
 801559e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80155a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155a6:	ed91 7a00 	vldr	s14, [r1]
 80155aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155ae:	edc1 7a00 	vstr	s15, [r1]
 80155b2:	d065      	beq.n	8015680 <MotionDI_update+0x3010>
 80155b4:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80155b8:	1c91      	adds	r1, r2, #2
 80155ba:	f1bc 0f05 	cmp.w	ip, #5
 80155be:	fb17 f700 	smulbb	r7, r7, r0
 80155c2:	4419      	add	r1, r3
 80155c4:	ee07 7a90 	vmov	s15, r7
 80155c8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80155cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155d0:	ed91 7a00 	vldr	s14, [r1]
 80155d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155d8:	edc1 7a00 	vstr	s15, [r1]
 80155dc:	d050      	beq.n	8015680 <MotionDI_update+0x3010>
 80155de:	f89e 7002 	ldrb.w	r7, [lr, #2]
 80155e2:	1cd1      	adds	r1, r2, #3
 80155e4:	f1bc 0f04 	cmp.w	ip, #4
 80155e8:	fb17 f700 	smulbb	r7, r7, r0
 80155ec:	4419      	add	r1, r3
 80155ee:	ee07 7a90 	vmov	s15, r7
 80155f2:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80155f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80155fa:	ed91 7a00 	vldr	s14, [r1]
 80155fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015602:	edc1 7a00 	vstr	s15, [r1]
 8015606:	d03b      	beq.n	8015680 <MotionDI_update+0x3010>
 8015608:	f89e 7003 	ldrb.w	r7, [lr, #3]
 801560c:	1d11      	adds	r1, r2, #4
 801560e:	f1bc 0f03 	cmp.w	ip, #3
 8015612:	fb17 f700 	smulbb	r7, r7, r0
 8015616:	4419      	add	r1, r3
 8015618:	ee07 7a90 	vmov	s15, r7
 801561c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8015620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015624:	ed91 7a00 	vldr	s14, [r1]
 8015628:	ee67 7a87 	vmul.f32	s15, s15, s14
 801562c:	edc1 7a00 	vstr	s15, [r1]
 8015630:	d026      	beq.n	8015680 <MotionDI_update+0x3010>
 8015632:	f89e 7004 	ldrb.w	r7, [lr, #4]
 8015636:	1d51      	adds	r1, r2, #5
 8015638:	f1bc 0f01 	cmp.w	ip, #1
 801563c:	fb17 f700 	smulbb	r7, r7, r0
 8015640:	4419      	add	r1, r3
 8015642:	ee07 7a90 	vmov	s15, r7
 8015646:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801564a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801564e:	ed91 7a00 	vldr	s14, [r1]
 8015652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015656:	edc1 7a00 	vstr	s15, [r1]
 801565a:	d111      	bne.n	8015680 <MotionDI_update+0x3010>
 801565c:	f89e 1005 	ldrb.w	r1, [lr, #5]
 8015660:	1d97      	adds	r7, r2, #6
 8015662:	fb11 f100 	smulbb	r1, r1, r0
 8015666:	443b      	add	r3, r7
 8015668:	ee07 1a90 	vmov	s15, r1
 801566c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015674:	ed93 7a00 	vldr	s14, [r3]
 8015678:	ee67 7a87 	vmul.f32	s15, s15, s14
 801567c:	edc3 7a00 	vstr	s15, [r3]
 8015680:	f108 0801 	add.w	r8, r8, #1
 8015684:	3208      	adds	r2, #8
 8015686:	f1b8 0f08 	cmp.w	r8, #8
 801568a:	f47f af5c 	bne.w	8015546 <MotionDI_update+0x2ed6>
 801568e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015690:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8015692:	4613      	mov	r3, r2
 8015694:	edd3 6a00 	vldr	s13, [r3]
 8015698:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 801569c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80156a0:	ece3 7a01 	vstmia	r3!, {s15}
 80156a4:	455b      	cmp	r3, fp
 80156a6:	d1f5      	bne.n	8015694 <MotionDI_update+0x3024>
 80156a8:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80156aa:	4649      	mov	r1, r9
 80156ac:	4638      	mov	r0, r7
 80156ae:	f7f6 fae1 	bl	800bc74 <st_accCal_MEMS_ellipsoidFit7>
 80156b2:	ed99 3a04 	vldr	s6, [r9, #16]
 80156b6:	edd9 2a03 	vldr	s5, [r9, #12]
 80156ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80156be:	eeb1 7a43 	vneg.f32	s14, s6
 80156c2:	ed99 1a01 	vldr	s2, [r9, #4]
 80156c6:	eef1 7a62 	vneg.f32	s15, s5
 80156ca:	ed99 2a00 	vldr	s4, [r9]
 80156ce:	edd9 3a05 	vldr	s7, [r9, #20]
 80156d2:	eec7 ba01 	vdiv.f32	s23, s14, s2
 80156d6:	ed97 4a07 	vldr	s8, [r7, #28]
 80156da:	edd9 1a02 	vldr	s3, [r9, #8]
 80156de:	ed97 da02 	vldr	s26, [r7, #8]
 80156e2:	edd7 5a01 	vldr	s11, [r7, #4]
 80156e6:	edd7 4a08 	vldr	s9, [r7, #32]
 80156ea:	ee87 ca82 	vdiv.f32	s24, s15, s4
 80156ee:	ed97 7a00 	vldr	s14, [r7]
 80156f2:	edd9 0a06 	vldr	s1, [r9, #24]
 80156f6:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 80156fa:	ed97 ea03 	vldr	s28, [r7, #12]
 80156fe:	edd7 fa0d 	vldr	s31, [r7, #52]	; 0x34
 8015702:	eeb1 0a63 	vneg.f32	s0, s7
 8015706:	edd7 ca0a 	vldr	s25, [r7, #40]	; 0x28
 801570a:	ee21 4a04 	vmul.f32	s8, s2, s8
 801570e:	edd7 7a04 	vldr	s15, [r7, #16]
 8015712:	ee61 6a8d 	vmul.f32	s13, s3, s26
 8015716:	edd7 ea05 	vldr	s29, [r7, #20]
 801571a:	ee80 ba21 	vdiv.f32	s22, s0, s3
 801571e:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 8015722:	ed97 fa0f 	vldr	s30, [r7, #60]	; 0x3c
 8015726:	ed8d 0a21 	vstr	s0, [sp, #132]	; 0x84
 801572a:	edd7 da13 	vldr	s27, [r7, #76]	; 0x4c
 801572e:	eea2 4a25 	vfma.f32	s8, s4, s11
 8015732:	eee1 6a25 	vfma.f32	s13, s2, s11
 8015736:	ee63 5a2b 	vmul.f32	s11, s6, s23
 801573a:	ee21 0a2c 	vmul.f32	s0, s2, s25
 801573e:	eee2 5a8c 	vfma.f32	s11, s5, s24
 8015742:	eea1 4aa4 	vfma.f32	s8, s3, s9
 8015746:	ee61 4a24 	vmul.f32	s9, s2, s9
 801574a:	eee2 6a07 	vfma.f32	s13, s4, s14
 801574e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8015752:	eea2 0a27 	vfma.f32	s0, s4, s15
 8015756:	eee2 4a0d 	vfma.f32	s9, s4, s26
 801575a:	ed97 da18 	vldr	s26, [r7, #96]	; 0x60
 801575e:	ee70 5aa5 	vadd.f32	s11, s1, s11
 8015762:	eea2 4a85 	vfma.f32	s8, s5, s10
 8015766:	ee21 5a05 	vmul.f32	s10, s2, s10
 801576a:	eee2 6a8e 	vfma.f32	s13, s5, s28
 801576e:	eee3 5a8b 	vfma.f32	s11, s7, s22
 8015772:	eee1 4aaf 	vfma.f32	s9, s3, s31
 8015776:	edd7 fa17 	vldr	s31, [r7, #92]	; 0x5c
 801577a:	eea2 5a0e 	vfma.f32	s10, s4, s28
 801577e:	ed97 ea11 	vldr	s28, [r7, #68]	; 0x44
 8015782:	eea3 4a2c 	vfma.f32	s8, s6, s25
 8015786:	edcd fa1f 	vstr	s31, [sp, #124]	; 0x7c
 801578a:	edd7 fa06 	vldr	s31, [r7, #24]
 801578e:	eea1 0a8f 	vfma.f32	s0, s3, s30
 8015792:	eee3 6a27 	vfma.f32	s13, s6, s15
 8015796:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801579a:	eef0 5ae5 	vabs.f32	s11, s11
 801579e:	eee2 4aa7 	vfma.f32	s9, s5, s15
 80157a2:	eea1 5aa7 	vfma.f32	s10, s3, s15
 80157a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80157aa:	eef1 cae5 	vsqrt.f32	s25, s11
 80157ae:	edd7 5a0b 	vldr	s11, [r7, #44]	; 0x2c
 80157b2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80157b6:	ee60 7a87 	vmul.f32	s15, s1, s14
 80157ba:	eee3 6aae 	vfma.f32	s13, s7, s29
 80157be:	ee21 7a07 	vmul.f32	s14, s2, s14
 80157c2:	eee3 7aa5 	vfma.f32	s15, s7, s11
 80157c6:	ee61 5a25 	vmul.f32	s11, s2, s11
 80157ca:	eee3 4a0f 	vfma.f32	s9, s6, s30
 80157ce:	ed97 fa10 	vldr	s30, [r7, #64]	; 0x40
 80157d2:	eea2 7a2f 	vfma.f32	s14, s4, s31
 80157d6:	eee0 6aaf 	vfma.f32	s13, s1, s31
 80157da:	eddd fa20 	vldr	s31, [sp, #128]	; 0x80
 80157de:	eee2 5a2e 	vfma.f32	s11, s4, s29
 80157e2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80157e6:	ed97 4a14 	vldr	s8, [r7, #80]	; 0x50
 80157ea:	ee60 ea8e 	vmul.f32	s29, s1, s28
 80157ee:	eea2 5aaf 	vfma.f32	s10, s5, s31
 80157f2:	edd7 fa15 	vldr	s31, [r7, #84]	; 0x54
 80157f6:	ee67 7a81 	vmul.f32	s15, s15, s2
 80157fa:	eee3 ea8f 	vfma.f32	s29, s7, s30
 80157fe:	eea1 7a8e 	vfma.f32	s14, s3, s28
 8015802:	eee2 7a26 	vfma.f32	s15, s4, s13
 8015806:	eea2 0aad 	vfma.f32	s0, s5, s27
 801580a:	eea3 5a2d 	vfma.f32	s10, s6, s27
 801580e:	ee60 daaf 	vmul.f32	s27, s1, s31
 8015812:	ee7e 4aa4 	vadd.f32	s9, s29, s9
 8015816:	eddd ea1f 	vldr	s29, [sp, #124]	; 0x7c
 801581a:	eef1 6ac1 	vsqrt.f32	s13, s2
 801581e:	eee1 7aa4 	vfma.f32	s15, s3, s9
 8015822:	eea2 7aaf 	vfma.f32	s14, s5, s31
 8015826:	eeb0 1a6d 	vmov.f32	s2, s27
 801582a:	ee69 daac 	vmul.f32	s27, s19, s25
 801582e:	eee1 5a8f 	vfma.f32	s11, s3, s30
 8015832:	eea3 1a84 	vfma.f32	s2, s7, s8
 8015836:	eeb0 ea67 	vmov.f32	s28, s15
 801583a:	eef1 7ae1 	vsqrt.f32	s15, s3
 801583e:	eec6 1a2d 	vdiv.f32	s3, s12, s27
 8015842:	ee60 da8d 	vmul.f32	s27, s1, s26
 8015846:	eef1 4ac2 	vsqrt.f32	s9, s4
 801584a:	ed9d 2a21 	vldr	s4, [sp, #132]	; 0x84
 801584e:	eea3 7a0d 	vfma.f32	s14, s6, s26
 8015852:	eea3 0a02 	vfma.f32	s0, s6, s4
 8015856:	eeb0 2a6d 	vmov.f32	s4, s27
 801585a:	edd7 da19 	vldr	s27, [r7, #100]	; 0x64
 801585e:	eee2 5a84 	vfma.f32	s11, s5, s8
 8015862:	ed97 4a1b 	vldr	s8, [r7, #108]	; 0x6c
 8015866:	ee31 1a05 	vadd.f32	s2, s2, s10
 801586a:	ed97 5a1a 	vldr	s10, [r7, #104]	; 0x68
 801586e:	eea3 2aae 	vfma.f32	s4, s7, s29
 8015872:	eea3 7a85 	vfma.f32	s14, s7, s10
 8015876:	eea2 ea81 	vfma.f32	s28, s5, s2
 801587a:	eddf 2aec 	vldr	s5, [pc, #944]	; 8015c2c <MotionDI_update+0x35bc>
 801587e:	ee20 1a85 	vmul.f32	s2, s1, s10
 8015882:	eee3 5a2e 	vfma.f32	s11, s6, s29
 8015886:	ee61 6aa6 	vmul.f32	s13, s3, s13
 801588a:	ee32 da00 	vadd.f32	s26, s4, s0
 801588e:	eeb0 2a41 	vmov.f32	s4, s2
 8015892:	eea0 7a84 	vfma.f32	s14, s1, s8
 8015896:	eea3 ea0d 	vfma.f32	s28, s6, s26
 801589a:	eea3 2aad 	vfma.f32	s4, s7, s27
 801589e:	eeb0 0a65 	vmov.f32	s0, s11
 80158a2:	ee61 5aa4 	vmul.f32	s11, s3, s9
 80158a6:	eef4 6ac6 	vcmpe.f32	s13, s12
 80158aa:	eef0 4a47 	vmov.f32	s9, s14
 80158ae:	eeb0 7a4e 	vmov.f32	s14, s28
 80158b2:	ee32 2a00 	vadd.f32	s4, s4, s0
 80158b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158ba:	ee61 7aa7 	vmul.f32	s15, s3, s15
 80158be:	eea3 7a82 	vfma.f32	s14, s7, s4
 80158c2:	bf4c      	ite	mi
 80158c4:	ee36 6a66 	vsubmi.f32	s12, s12, s13
 80158c8:	ee36 6ac6 	vsubpl.f32	s12, s13, s12
 80158cc:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80158d0:	eea0 7aa4 	vfma.f32	s14, s1, s9
 80158d4:	ee35 5a25 	vadd.f32	s10, s10, s11
 80158d8:	ee25 5a22 	vmul.f32	s10, s10, s5
 80158dc:	eef0 4a47 	vmov.f32	s9, s14
 80158e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80158e4:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80158e8:	eef4 5ac7 	vcmpe.f32	s11, s14
 80158ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f0:	bf4c      	ite	mi
 80158f2:	ee77 3a65 	vsubmi.f32	s7, s14, s11
 80158f6:	ee75 3ac7 	vsubpl.f32	s7, s11, s14
 80158fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80158fe:	fe86 6a23 	vmaxnm.f32	s12, s12, s7
 8015902:	eddf 3acb 	vldr	s7, [pc, #812]	; 8015c30 <MotionDI_update+0x35c0>
 8015906:	eef4 7ac7 	vcmpe.f32	s15, s14
 801590a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590e:	bf4c      	ite	mi
 8015910:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8015914:	ee37 7ac7 	vsubpl.f32	s14, s15, s14
 8015918:	fe86 7a07 	vmaxnm.f32	s14, s12, s14
 801591c:	eeb0 6ac5 	vabs.f32	s12, s10
 8015920:	fe86 6a07 	vmaxnm.f32	s12, s12, s14
 8015924:	eeb4 6a63 	vcmp.f32	s12, s7
 8015928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801592c:	f57f abc4 	bpl.w	80150b8 <MotionDI_update+0x2a48>
 8015930:	ed9f 6ac0 	vldr	s12, [pc, #768]	; 8015c34 <MotionDI_update+0x35c4>
 8015934:	eeb4 7a46 	vcmp.f32	s14, s12
 8015938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801593c:	f57f abbc 	bpl.w	80150b8 <MotionDI_update+0x2a48>
 8015940:	eeb0 7ae4 	vabs.f32	s14, s9
 8015944:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 8015948:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801594c:	eec7 3a04 	vdiv.f32	s7, s14, s8
 8015950:	eef1 4ae3 	vsqrt.f32	s9, s7
 8015954:	eeb1 7ae4 	vsqrt.f32	s14, s9
 8015958:	ee27 7a05 	vmul.f32	s14, s14, s10
 801595c:	ee87 3a2c 	vdiv.f32	s6, s14, s25
 8015960:	eeb4 3ac6 	vcmpe.f32	s6, s12
 8015964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015968:	f73f aba6 	bgt.w	80150b8 <MotionDI_update+0x2a48>
 801596c:	eddf 3ab2 	vldr	s7, [pc, #712]	; 8015c38 <MotionDI_update+0x35c8>
 8015970:	ee3b 5a8a 	vadd.f32	s10, s23, s20
 8015974:	ee7c 4a2a 	vadd.f32	s9, s24, s21
 8015978:	ed9f 4ab0 	vldr	s8, [pc, #704]	; 8015c3c <MotionDI_update+0x35cc>
 801597c:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8015980:	981e      	ldr	r0, [sp, #120]	; 0x78
 8015982:	ee65 5aa3 	vmul.f32	s11, s11, s7
 8015986:	feb8 5a45 	vrinta.f32	s10, s10
 801598a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801598e:	fef8 4a64 	vrinta.f32	s9, s9
 8015992:	ee3b 6a09 	vadd.f32	s12, s22, s18
 8015996:	feb8 7a47 	vrinta.f32	s14, s14
 801599a:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 801599e:	fef8 6a65 	vrinta.f32	s13, s11
 80159a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80159a6:	fef8 7a67 	vrinta.f32	s15, s15
 80159aa:	ee66 6a84 	vmul.f32	s13, s13, s8
 80159ae:	f10d 03aa 	add.w	r3, sp, #170	; 0xaa
 80159b2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80159b6:	feb8 6a46 	vrinta.f32	s12, s12
 80159ba:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 80159be:	ee15 7a10 	vmov	r7, s10
 80159c2:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 80159c6:	9300      	str	r3, [sp, #0]
 80159c8:	4601      	mov	r1, r0
 80159ca:	edc0 6a00 	vstr	s13, [r0]
 80159ce:	ed80 7a04 	vstr	s14, [r0, #16]
 80159d2:	aa2b      	add	r2, sp, #172	; 0xac
 80159d4:	edc0 7a08 	vstr	s15, [r0, #32]
 80159d8:	ee14 0a90 	vmov	r0, s9
 80159dc:	f8ad 70be 	strh.w	r7, [sp, #190]	; 0xbe
 80159e0:	ee16 7a10 	vmov	r7, s12
 80159e4:	ab2c      	add	r3, sp, #176	; 0xb0
 80159e6:	f8ad 00bc 	strh.w	r0, [sp, #188]	; 0xbc
 80159ea:	eeb0 0a69 	vmov.f32	s0, s19
 80159ee:	a82f      	add	r0, sp, #188	; 0xbc
 80159f0:	edc6 8a04 	vstr	s17, [r6, #16]
 80159f4:	f8ad 70c0 	strh.w	r7, [sp, #192]	; 0xc0
 80159f8:	f7f7 fd80 	bl	800d4fc <getAccStats.constprop.0>
 80159fc:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 8015a00:	231e      	movs	r3, #30
 8015a02:	f89d 20aa 	ldrb.w	r2, [sp, #170]	; 0xaa
 8015a06:	fb03 f301 	mul.w	r3, r3, r1
 8015a0a:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8015c40 <MotionDI_update+0x35d0>
 8015a0e:	ee07 2a10 	vmov	s14, r2
 8015a12:	ee07 3a90 	vmov	s15, r3
 8015a16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a2a:	f73f ab45 	bgt.w	80150b8 <MotionDI_update+0x2a48>
 8015a2e:	eddd 2a2c 	vldr	s5, [sp, #176]	; 0xb0
 8015a32:	eddf 7a84 	vldr	s15, [pc, #528]	; 8015c44 <MotionDI_update+0x35d4>
 8015a36:	eef4 2ae7 	vcmpe.f32	s5, s15
 8015a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a3e:	f73f ab3b 	bgt.w	80150b8 <MotionDI_update+0x2a48>
 8015a42:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8015a46:	eef4 2ae7 	vcmpe.f32	s5, s15
 8015a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a4e:	dd04      	ble.n	8015a5a <MotionDI_update+0x33ea>
 8015a50:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 8015a54:	4293      	cmp	r3, r2
 8015a56:	f67f ab2f 	bls.w	80150b8 <MotionDI_update+0x2a48>
 8015a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d16f      	bne.n	8015b40 <MotionDI_update+0x34d0>
 8015a60:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 8015a64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015a68:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8015a6c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8015a70:	ee07 2a10 	vmov	s14, r2
 8015a74:	f9bd 20c0 	ldrsh.w	r2, [sp, #192]	; 0xc0
 8015a78:	ee06 3a90 	vmov	s13, r3
 8015a7c:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8015a80:	ee07 2a90 	vmov	s15, r2
 8015a84:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 8015a88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015a8c:	2b01      	cmp	r3, #1
 8015a8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a92:	edd6 4a06 	vldr	s9, [r6, #24]
 8015a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a9a:	fe45 5a86 	vseleq.f32	s11, s11, s12
 8015a9e:	ee35 5a65 	vsub.f32	s10, s10, s11
 8015aa2:	edd6 1a07 	vldr	s3, [r6, #28]
 8015aa6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8015aaa:	ed96 2a08 	vldr	s4, [r6, #32]
 8015aae:	ee27 7a25 	vmul.f32	s14, s14, s11
 8015ab2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015ab4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015ab8:	eee4 6a85 	vfma.f32	s13, s9, s10
 8015abc:	edd3 3a00 	vldr	s7, [r3]
 8015ac0:	eea5 7a21 	vfma.f32	s14, s10, s3
 8015ac4:	ed93 4a04 	vldr	s8, [r3, #16]
 8015ac8:	eee5 7a02 	vfma.f32	s15, s10, s4
 8015acc:	edd3 4a08 	vldr	s9, [r3, #32]
 8015ad0:	ee73 3ac6 	vsub.f32	s7, s7, s12
 8015ad4:	ed9f 5a56 	vldr	s10, [pc, #344]	; 8015c30 <MotionDI_update+0x35c0>
 8015ad8:	ee34 4a46 	vsub.f32	s8, s8, s12
 8015adc:	ee74 4ac6 	vsub.f32	s9, s9, s12
 8015ae0:	ee63 3a85 	vmul.f32	s7, s7, s10
 8015ae4:	ee24 4a05 	vmul.f32	s8, s8, s10
 8015ae8:	ee64 4a85 	vmul.f32	s9, s9, s10
 8015aec:	ee66 6a85 	vmul.f32	s13, s13, s10
 8015af0:	ee27 7a05 	vmul.f32	s14, s14, s10
 8015af4:	ee67 7a85 	vmul.f32	s15, s15, s10
 8015af8:	eeb0 5a46 	vmov.f32	s10, s12
 8015afc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015b00:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015b04:	eea5 5aa3 	vfma.f32	s10, s11, s7
 8015b08:	ee16 2a90 	vmov	r2, s13
 8015b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015b10:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
 8015b14:	ee17 2a10 	vmov	r2, s14
 8015b18:	f8ad 20be 	strh.w	r2, [sp, #190]	; 0xbe
 8015b1c:	ee17 2a90 	vmov	r2, s15
 8015b20:	eef0 3a45 	vmov.f32	s7, s10
 8015b24:	eeb0 5a46 	vmov.f32	s10, s12
 8015b28:	f8ad 20c0 	strh.w	r2, [sp, #192]	; 0xc0
 8015b2c:	eea5 6aa4 	vfma.f32	s12, s11, s9
 8015b30:	edc3 3a00 	vstr	s7, [r3]
 8015b34:	eea5 5a84 	vfma.f32	s10, s11, s8
 8015b38:	ed83 6a08 	vstr	s12, [r3, #32]
 8015b3c:	ed83 5a04 	vstr	s10, [r3, #16]
 8015b40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b44:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 8015b48:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8015b4c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015c48 <MotionDI_update+0x35d8>
 8015b50:	ee07 2a10 	vmov	s14, r2
 8015b54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015b58:	f9bd 20c0 	ldrsh.w	r2, [sp, #192]	; 0xc0
 8015b5c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015b5e:	ee06 3a90 	vmov	s13, r3
 8015b62:	f240 1303 	movw	r3, #259	; 0x103
 8015b66:	ee07 2a90 	vmov	s15, r2
 8015b6a:	ee82 6a83 	vdiv.f32	s12, s5, s6
 8015b6e:	8003      	strh	r3, [r0, #0]
 8015b70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015b72:	6819      	ldr	r1, [r3, #0]
 8015b74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015b78:	691a      	ldr	r2, [r3, #16]
 8015b7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b7e:	6a1b      	ldr	r3, [r3, #32]
 8015b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b84:	6101      	str	r1, [r0, #16]
 8015b86:	edc0 6a01 	vstr	s13, [r0, #4]
 8015b8a:	ed80 7a02 	vstr	s14, [r0, #8]
 8015b8e:	edc0 7a03 	vstr	s15, [r0, #12]
 8015b92:	6202      	str	r2, [r0, #32]
 8015b94:	6303      	str	r3, [r0, #48]	; 0x30
 8015b96:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8015b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b9e:	f340 80da 	ble.w	8015d56 <MotionDI_update+0x36e6>
 8015ba2:	2302      	movs	r3, #2
 8015ba4:	7003      	strb	r3, [r0, #0]
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	f8d6 c048 	ldr.w	ip, [r6, #72]	; 0x48
 8015bac:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8015bb0:	f1bc 0f00 	cmp.w	ip, #0
 8015bb4:	d003      	beq.n	8015bbe <MotionDI_update+0x354e>
 8015bb6:	7d33      	ldrb	r3, [r6, #20]
 8015bb8:	2b03      	cmp	r3, #3
 8015bba:	f43e afd2 	beq.w	8014b62 <MotionDI_update+0x24f2>
 8015bbe:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8015bc2:	4f22      	ldr	r7, [pc, #136]	; (8015c4c <MotionDI_update+0x35dc>)
 8015bc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015bc8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015bca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015bce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015bd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015bd4:	f8dc c000 	ldr.w	ip, [ip]
 8015bd8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015bda:	f8c7 c000 	str.w	ip, [r7]
 8015bde:	f7ff b831 	b.w	8014c44 <MotionDI_update+0x25d4>
 8015be2:	4a1b      	ldr	r2, [pc, #108]	; (8015c50 <MotionDI_update+0x35e0>)
 8015be4:	4293      	cmp	r3, r2
 8015be6:	f67f a90c 	bls.w	8014e02 <MotionDI_update+0x2792>
 8015bea:	7d33      	ldrb	r3, [r6, #20]
 8015bec:	2b02      	cmp	r3, #2
 8015bee:	bf28      	it	cs
 8015bf0:	2302      	movcs	r3, #2
 8015bf2:	7533      	strb	r3, [r6, #20]
 8015bf4:	f7fc bfb9 	b.w	8012b6a <MotionDI_update+0x4fa>
 8015bf8:	4916      	ldr	r1, [pc, #88]	; (8015c54 <MotionDI_update+0x35e4>)
 8015bfa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015bfe:	4608      	mov	r0, r1
 8015c00:	460a      	mov	r2, r1
 8015c02:	edd1 6a00 	vldr	s13, [r1]
 8015c06:	ed72 7a01 	vldmdb	r2!, {s15}
 8015c0a:	3004      	adds	r0, #4
 8015c0c:	ed90 7a00 	vldr	s14, [r0]
 8015c10:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015c14:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015c18:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015c1c:	edc4 6a46 	vstr	s13, [r4, #280]	; 0x118
 8015c20:	edc4 7a45 	vstr	s15, [r4, #276]	; 0x114
 8015c24:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 8015c28:	f7fe b867 	b.w	8013cfa <MotionDI_update+0x168a>
 8015c2c:	3eaaaaab 	.word	0x3eaaaaab
 8015c30:	3e4ccccd 	.word	0x3e4ccccd
 8015c34:	3e99999a 	.word	0x3e99999a
 8015c38:	49742400 	.word	0x49742400
 8015c3c:	358637bd 	.word	0x358637bd
 8015c40:	3c23d70a 	.word	0x3c23d70a
 8015c44:	3e19999a 	.word	0x3e19999a
 8015c48:	3d75c28f 	.word	0x3d75c28f
 8015c4c:	200025d4 	.word	0x200025d4
 8015c50:	00069780 	.word	0x00069780
 8015c54:	20001b2c 	.word	0x20001b2c
 8015c58:	00000000 	.word	0x00000000
 8015c5c:	7fc00000 	.word	0x7fc00000
 8015c60:	47a8c000 	.word	0x47a8c000
 8015c64:	367e3344 	.word	0x367e3344
 8015c68:	3df5c28f 	.word	0x3df5c28f
 8015c6c:	3dcccccd 	.word	0x3dcccccd
 8015c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c72:	4611      	mov	r1, r2
 8015c74:	9224      	str	r2, [sp, #144]	; 0x90
 8015c76:	3301      	adds	r3, #1
 8015c78:	fb93 f2f2 	sdiv	r2, r3, r2
 8015c7c:	fb01 3212 	mls	r2, r1, r2, r3
 8015c80:	b212      	sxth	r2, r2
 8015c82:	f7ff b9b1 	b.w	8014fe8 <MotionDI_update+0x2978>
 8015c86:	9720      	str	r7, [sp, #128]	; 0x80
 8015c88:	f7ff b994 	b.w	8014fb4 <MotionDI_update+0x2944>
 8015c8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c8e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015c90:	3201      	adds	r2, #1
 8015c92:	fb92 f3f1 	sdiv	r3, r2, r1
 8015c96:	fb01 2313 	mls	r3, r1, r3, r2
 8015c9a:	b21b      	sxth	r3, r3
 8015c9c:	9319      	str	r3, [sp, #100]	; 0x64
 8015c9e:	f7fe be7a 	b.w	8014996 <MotionDI_update+0x2326>
 8015ca2:	eef1 6a47 	vneg.f32	s13, s14
 8015ca6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cae:	f57e ae19 	bpl.w	80148e4 <MotionDI_update+0x2274>
 8015cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cb6:	edc6 7a08 	vstr	s15, [r6, #32]
 8015cba:	f7fe be13 	b.w	80148e4 <MotionDI_update+0x2274>
 8015cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cc2:	edc6 7a07 	vstr	s15, [r6, #28]
 8015cc6:	f7ff b88a 	b.w	8014dde <MotionDI_update+0x276e>
 8015cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015cce:	edc6 7a06 	vstr	s15, [r6, #24]
 8015cd2:	f7ff b86c 	b.w	8014dae <MotionDI_update+0x273e>
 8015cd6:	4699      	mov	r9, r3
 8015cd8:	46f2      	mov	sl, lr
 8015cda:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 8015c58 <MotionDI_update+0x35e8>
 8015cde:	f7fe bea6 	b.w	8014a2e <MotionDI_update+0x23be>
 8015ce2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ce6:	f7fe bf5c 	b.w	8014ba2 <MotionDI_update+0x2532>
 8015cea:	ed1f 9a24 	vldr	s18, [pc, #-144]	; 8015c5c <MotionDI_update+0x35ec>
 8015cee:	eeb0 aa49 	vmov.f32	s20, s18
 8015cf2:	eef0 aa49 	vmov.f32	s21, s18
 8015cf6:	f7ff bae1 	b.w	80152bc <MotionDI_update+0x2c4c>
 8015cfa:	fb93 f7f2 	sdiv	r7, r3, r2
 8015cfe:	fb02 3317 	mls	r3, r2, r7, r3
 8015d02:	b21f      	sxth	r7, r3
 8015d04:	f7ff ba4f 	b.w	80151a6 <MotionDI_update+0x2b36>
 8015d08:	aa33      	add	r2, sp, #204	; 0xcc
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8015d10:	edc6 8a04 	vstr	s17, [r6, #16]
 8015d14:	921c      	str	r2, [sp, #112]	; 0x70
 8015d16:	aa65      	add	r2, sp, #404	; 0x194
 8015d18:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8015d1c:	9219      	str	r2, [sp, #100]	; 0x64
 8015d1e:	f7ff b9ce 	b.w	80150be <MotionDI_update+0x2a4e>
 8015d22:	f206 660c 	addw	r6, r6, #1548	; 0x60c
 8015d26:	f7fc bcd4 	b.w	80126d2 <MotionDI_update+0x62>
 8015d2a:	4689      	mov	r9, r1
 8015d2c:	f7fe b80d 	b.w	8013d4a <MotionDI_update+0x16da>
 8015d30:	ed5f 6a35 	vldr	s13, [pc, #-212]	; 8015c60 <MotionDI_update+0x35f0>
 8015d34:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8015d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d3c:	d517      	bpl.n	8015d6e <MotionDI_update+0x36fe>
 8015d3e:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8015d42:	ed5f 6a38 	vldr	s13, [pc, #-224]	; 8015c64 <MotionDI_update+0x35f4>
 8015d46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015d4a:	ee38 7a07 	vadd.f32	s14, s16, s14
 8015d4e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015d52:	f7fe bf26 	b.w	8014ba2 <MotionDI_update+0x2532>
 8015d56:	ed5f 7a3c 	vldr	s15, [pc, #-240]	; 8015c68 <MotionDI_update+0x35f8>
 8015d5a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d62:	f77f af20 	ble.w	8015ba6 <MotionDI_update+0x3536>
 8015d66:	2301      	movs	r3, #1
 8015d68:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015d6a:	7013      	strb	r3, [r2, #0]
 8015d6c:	e71b      	b.n	8015ba6 <MotionDI_update+0x3536>
 8015d6e:	ed5f 7a41 	vldr	s15, [pc, #-260]	; 8015c6c <MotionDI_update+0x35fc>
 8015d72:	f7fe bf16 	b.w	8014ba2 <MotionDI_update+0x2532>
 8015d76:	bf00      	nop

08015d78 <MotionDI_GetLibVersion>:
 8015d78:	4b10      	ldr	r3, [pc, #64]	; (8015dbc <MotionDI_GetLibVersion+0x44>)
 8015d7a:	b4f0      	push	{r4, r5, r6, r7}
 8015d7c:	f893 7644 	ldrb.w	r7, [r3, #1604]	; 0x644
 8015d80:	b08a      	sub	sp, #40	; 0x28
 8015d82:	b1b7      	cbz	r7, 8015db2 <MotionDI_GetLibVersion+0x3a>
 8015d84:	4f0e      	ldr	r7, [pc, #56]	; (8015dc0 <MotionDI_GetLibVersion+0x48>)
 8015d86:	4604      	mov	r4, r0
 8015d88:	ad01      	add	r5, sp, #4
 8015d8a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015d8c:	683f      	ldr	r7, [r7, #0]
 8015d8e:	462e      	mov	r6, r5
 8015d90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d92:	0c3b      	lsrs	r3, r7, #16
 8015d94:	f825 7b02 	strh.w	r7, [r5], #2
 8015d98:	2712      	movs	r7, #18
 8015d9a:	702b      	strb	r3, [r5, #0]
 8015d9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015d9e:	f8b6 c000 	ldrh.w	ip, [r6]
 8015da2:	78b5      	ldrb	r5, [r6, #2]
 8015da4:	6020      	str	r0, [r4, #0]
 8015da6:	6061      	str	r1, [r4, #4]
 8015da8:	60a2      	str	r2, [r4, #8]
 8015daa:	60e3      	str	r3, [r4, #12]
 8015dac:	f8a4 c010 	strh.w	ip, [r4, #16]
 8015db0:	74a5      	strb	r5, [r4, #18]
 8015db2:	4638      	mov	r0, r7
 8015db4:	b00a      	add	sp, #40	; 0x28
 8015db6:	bcf0      	pop	{r4, r5, r6, r7}
 8015db8:	4770      	bx	lr
 8015dba:	bf00      	nop
 8015dbc:	20001448 	.word	0x20001448
 8015dc0:	0801c884 	.word	0x0801c884

08015dc4 <__errno>:
 8015dc4:	4b01      	ldr	r3, [pc, #4]	; (8015dcc <__errno+0x8>)
 8015dc6:	6818      	ldr	r0, [r3, #0]
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop
 8015dcc:	20001250 	.word	0x20001250

08015dd0 <__libc_init_array>:
 8015dd0:	b570      	push	{r4, r5, r6, lr}
 8015dd2:	4d0d      	ldr	r5, [pc, #52]	; (8015e08 <__libc_init_array+0x38>)
 8015dd4:	4c0d      	ldr	r4, [pc, #52]	; (8015e0c <__libc_init_array+0x3c>)
 8015dd6:	1b64      	subs	r4, r4, r5
 8015dd8:	10a4      	asrs	r4, r4, #2
 8015dda:	2600      	movs	r6, #0
 8015ddc:	42a6      	cmp	r6, r4
 8015dde:	d109      	bne.n	8015df4 <__libc_init_array+0x24>
 8015de0:	4d0b      	ldr	r5, [pc, #44]	; (8015e10 <__libc_init_array+0x40>)
 8015de2:	4c0c      	ldr	r4, [pc, #48]	; (8015e14 <__libc_init_array+0x44>)
 8015de4:	f006 fc64 	bl	801c6b0 <_init>
 8015de8:	1b64      	subs	r4, r4, r5
 8015dea:	10a4      	asrs	r4, r4, #2
 8015dec:	2600      	movs	r6, #0
 8015dee:	42a6      	cmp	r6, r4
 8015df0:	d105      	bne.n	8015dfe <__libc_init_array+0x2e>
 8015df2:	bd70      	pop	{r4, r5, r6, pc}
 8015df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8015df8:	4798      	blx	r3
 8015dfa:	3601      	adds	r6, #1
 8015dfc:	e7ee      	b.n	8015ddc <__libc_init_array+0xc>
 8015dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e02:	4798      	blx	r3
 8015e04:	3601      	adds	r6, #1
 8015e06:	e7f2      	b.n	8015dee <__libc_init_array+0x1e>
 8015e08:	0801d210 	.word	0x0801d210
 8015e0c:	0801d210 	.word	0x0801d210
 8015e10:	0801d210 	.word	0x0801d210
 8015e14:	0801d214 	.word	0x0801d214

08015e18 <memcpy>:
 8015e18:	440a      	add	r2, r1
 8015e1a:	4291      	cmp	r1, r2
 8015e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e20:	d100      	bne.n	8015e24 <memcpy+0xc>
 8015e22:	4770      	bx	lr
 8015e24:	b510      	push	{r4, lr}
 8015e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e2e:	4291      	cmp	r1, r2
 8015e30:	d1f9      	bne.n	8015e26 <memcpy+0xe>
 8015e32:	bd10      	pop	{r4, pc}

08015e34 <memset>:
 8015e34:	4402      	add	r2, r0
 8015e36:	4603      	mov	r3, r0
 8015e38:	4293      	cmp	r3, r2
 8015e3a:	d100      	bne.n	8015e3e <memset+0xa>
 8015e3c:	4770      	bx	lr
 8015e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8015e42:	e7f9      	b.n	8015e38 <memset+0x4>

08015e44 <__cvt>:
 8015e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e48:	ec55 4b10 	vmov	r4, r5, d0
 8015e4c:	2d00      	cmp	r5, #0
 8015e4e:	460e      	mov	r6, r1
 8015e50:	4619      	mov	r1, r3
 8015e52:	462b      	mov	r3, r5
 8015e54:	bfbb      	ittet	lt
 8015e56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015e5a:	461d      	movlt	r5, r3
 8015e5c:	2300      	movge	r3, #0
 8015e5e:	232d      	movlt	r3, #45	; 0x2d
 8015e60:	700b      	strb	r3, [r1, #0]
 8015e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015e68:	4691      	mov	r9, r2
 8015e6a:	f023 0820 	bic.w	r8, r3, #32
 8015e6e:	bfbc      	itt	lt
 8015e70:	4622      	movlt	r2, r4
 8015e72:	4614      	movlt	r4, r2
 8015e74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015e78:	d005      	beq.n	8015e86 <__cvt+0x42>
 8015e7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015e7e:	d100      	bne.n	8015e82 <__cvt+0x3e>
 8015e80:	3601      	adds	r6, #1
 8015e82:	2102      	movs	r1, #2
 8015e84:	e000      	b.n	8015e88 <__cvt+0x44>
 8015e86:	2103      	movs	r1, #3
 8015e88:	ab03      	add	r3, sp, #12
 8015e8a:	9301      	str	r3, [sp, #4]
 8015e8c:	ab02      	add	r3, sp, #8
 8015e8e:	9300      	str	r3, [sp, #0]
 8015e90:	ec45 4b10 	vmov	d0, r4, r5
 8015e94:	4653      	mov	r3, sl
 8015e96:	4632      	mov	r2, r6
 8015e98:	f001 fdea 	bl	8017a70 <_dtoa_r>
 8015e9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015ea0:	4607      	mov	r7, r0
 8015ea2:	d102      	bne.n	8015eaa <__cvt+0x66>
 8015ea4:	f019 0f01 	tst.w	r9, #1
 8015ea8:	d022      	beq.n	8015ef0 <__cvt+0xac>
 8015eaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015eae:	eb07 0906 	add.w	r9, r7, r6
 8015eb2:	d110      	bne.n	8015ed6 <__cvt+0x92>
 8015eb4:	783b      	ldrb	r3, [r7, #0]
 8015eb6:	2b30      	cmp	r3, #48	; 0x30
 8015eb8:	d10a      	bne.n	8015ed0 <__cvt+0x8c>
 8015eba:	2200      	movs	r2, #0
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	4629      	mov	r1, r5
 8015ec2:	f7ea fe21 	bl	8000b08 <__aeabi_dcmpeq>
 8015ec6:	b918      	cbnz	r0, 8015ed0 <__cvt+0x8c>
 8015ec8:	f1c6 0601 	rsb	r6, r6, #1
 8015ecc:	f8ca 6000 	str.w	r6, [sl]
 8015ed0:	f8da 3000 	ldr.w	r3, [sl]
 8015ed4:	4499      	add	r9, r3
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	2300      	movs	r3, #0
 8015eda:	4620      	mov	r0, r4
 8015edc:	4629      	mov	r1, r5
 8015ede:	f7ea fe13 	bl	8000b08 <__aeabi_dcmpeq>
 8015ee2:	b108      	cbz	r0, 8015ee8 <__cvt+0xa4>
 8015ee4:	f8cd 900c 	str.w	r9, [sp, #12]
 8015ee8:	2230      	movs	r2, #48	; 0x30
 8015eea:	9b03      	ldr	r3, [sp, #12]
 8015eec:	454b      	cmp	r3, r9
 8015eee:	d307      	bcc.n	8015f00 <__cvt+0xbc>
 8015ef0:	9b03      	ldr	r3, [sp, #12]
 8015ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ef4:	1bdb      	subs	r3, r3, r7
 8015ef6:	4638      	mov	r0, r7
 8015ef8:	6013      	str	r3, [r2, #0]
 8015efa:	b004      	add	sp, #16
 8015efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f00:	1c59      	adds	r1, r3, #1
 8015f02:	9103      	str	r1, [sp, #12]
 8015f04:	701a      	strb	r2, [r3, #0]
 8015f06:	e7f0      	b.n	8015eea <__cvt+0xa6>

08015f08 <__exponent>:
 8015f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	2900      	cmp	r1, #0
 8015f0e:	bfb8      	it	lt
 8015f10:	4249      	neglt	r1, r1
 8015f12:	f803 2b02 	strb.w	r2, [r3], #2
 8015f16:	bfb4      	ite	lt
 8015f18:	222d      	movlt	r2, #45	; 0x2d
 8015f1a:	222b      	movge	r2, #43	; 0x2b
 8015f1c:	2909      	cmp	r1, #9
 8015f1e:	7042      	strb	r2, [r0, #1]
 8015f20:	dd2a      	ble.n	8015f78 <__exponent+0x70>
 8015f22:	f10d 0407 	add.w	r4, sp, #7
 8015f26:	46a4      	mov	ip, r4
 8015f28:	270a      	movs	r7, #10
 8015f2a:	46a6      	mov	lr, r4
 8015f2c:	460a      	mov	r2, r1
 8015f2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8015f32:	fb07 1516 	mls	r5, r7, r6, r1
 8015f36:	3530      	adds	r5, #48	; 0x30
 8015f38:	2a63      	cmp	r2, #99	; 0x63
 8015f3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8015f3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015f42:	4631      	mov	r1, r6
 8015f44:	dcf1      	bgt.n	8015f2a <__exponent+0x22>
 8015f46:	3130      	adds	r1, #48	; 0x30
 8015f48:	f1ae 0502 	sub.w	r5, lr, #2
 8015f4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015f50:	1c44      	adds	r4, r0, #1
 8015f52:	4629      	mov	r1, r5
 8015f54:	4561      	cmp	r1, ip
 8015f56:	d30a      	bcc.n	8015f6e <__exponent+0x66>
 8015f58:	f10d 0209 	add.w	r2, sp, #9
 8015f5c:	eba2 020e 	sub.w	r2, r2, lr
 8015f60:	4565      	cmp	r5, ip
 8015f62:	bf88      	it	hi
 8015f64:	2200      	movhi	r2, #0
 8015f66:	4413      	add	r3, r2
 8015f68:	1a18      	subs	r0, r3, r0
 8015f6a:	b003      	add	sp, #12
 8015f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015f76:	e7ed      	b.n	8015f54 <__exponent+0x4c>
 8015f78:	2330      	movs	r3, #48	; 0x30
 8015f7a:	3130      	adds	r1, #48	; 0x30
 8015f7c:	7083      	strb	r3, [r0, #2]
 8015f7e:	70c1      	strb	r1, [r0, #3]
 8015f80:	1d03      	adds	r3, r0, #4
 8015f82:	e7f1      	b.n	8015f68 <__exponent+0x60>

08015f84 <_printf_float>:
 8015f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f88:	ed2d 8b02 	vpush	{d8}
 8015f8c:	b08d      	sub	sp, #52	; 0x34
 8015f8e:	460c      	mov	r4, r1
 8015f90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015f94:	4616      	mov	r6, r2
 8015f96:	461f      	mov	r7, r3
 8015f98:	4605      	mov	r5, r0
 8015f9a:	f002 fec5 	bl	8018d28 <_localeconv_r>
 8015f9e:	f8d0 a000 	ldr.w	sl, [r0]
 8015fa2:	4650      	mov	r0, sl
 8015fa4:	f7ea f934 	bl	8000210 <strlen>
 8015fa8:	2300      	movs	r3, #0
 8015faa:	930a      	str	r3, [sp, #40]	; 0x28
 8015fac:	6823      	ldr	r3, [r4, #0]
 8015fae:	9305      	str	r3, [sp, #20]
 8015fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8015fb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015fb8:	3307      	adds	r3, #7
 8015fba:	f023 0307 	bic.w	r3, r3, #7
 8015fbe:	f103 0208 	add.w	r2, r3, #8
 8015fc2:	f8c8 2000 	str.w	r2, [r8]
 8015fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015fce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015fd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015fd6:	9307      	str	r3, [sp, #28]
 8015fd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8015fdc:	ee08 0a10 	vmov	s16, r0
 8015fe0:	4b9f      	ldr	r3, [pc, #636]	; (8016260 <_printf_float+0x2dc>)
 8015fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8015fea:	f7ea fdbf 	bl	8000b6c <__aeabi_dcmpun>
 8015fee:	bb88      	cbnz	r0, 8016054 <_printf_float+0xd0>
 8015ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ff4:	4b9a      	ldr	r3, [pc, #616]	; (8016260 <_printf_float+0x2dc>)
 8015ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8015ffa:	f7ea fd99 	bl	8000b30 <__aeabi_dcmple>
 8015ffe:	bb48      	cbnz	r0, 8016054 <_printf_float+0xd0>
 8016000:	2200      	movs	r2, #0
 8016002:	2300      	movs	r3, #0
 8016004:	4640      	mov	r0, r8
 8016006:	4649      	mov	r1, r9
 8016008:	f7ea fd88 	bl	8000b1c <__aeabi_dcmplt>
 801600c:	b110      	cbz	r0, 8016014 <_printf_float+0x90>
 801600e:	232d      	movs	r3, #45	; 0x2d
 8016010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016014:	4b93      	ldr	r3, [pc, #588]	; (8016264 <_printf_float+0x2e0>)
 8016016:	4894      	ldr	r0, [pc, #592]	; (8016268 <_printf_float+0x2e4>)
 8016018:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801601c:	bf94      	ite	ls
 801601e:	4698      	movls	r8, r3
 8016020:	4680      	movhi	r8, r0
 8016022:	2303      	movs	r3, #3
 8016024:	6123      	str	r3, [r4, #16]
 8016026:	9b05      	ldr	r3, [sp, #20]
 8016028:	f023 0204 	bic.w	r2, r3, #4
 801602c:	6022      	str	r2, [r4, #0]
 801602e:	f04f 0900 	mov.w	r9, #0
 8016032:	9700      	str	r7, [sp, #0]
 8016034:	4633      	mov	r3, r6
 8016036:	aa0b      	add	r2, sp, #44	; 0x2c
 8016038:	4621      	mov	r1, r4
 801603a:	4628      	mov	r0, r5
 801603c:	f000 f9d8 	bl	80163f0 <_printf_common>
 8016040:	3001      	adds	r0, #1
 8016042:	f040 8090 	bne.w	8016166 <_printf_float+0x1e2>
 8016046:	f04f 30ff 	mov.w	r0, #4294967295
 801604a:	b00d      	add	sp, #52	; 0x34
 801604c:	ecbd 8b02 	vpop	{d8}
 8016050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016054:	4642      	mov	r2, r8
 8016056:	464b      	mov	r3, r9
 8016058:	4640      	mov	r0, r8
 801605a:	4649      	mov	r1, r9
 801605c:	f7ea fd86 	bl	8000b6c <__aeabi_dcmpun>
 8016060:	b140      	cbz	r0, 8016074 <_printf_float+0xf0>
 8016062:	464b      	mov	r3, r9
 8016064:	2b00      	cmp	r3, #0
 8016066:	bfbc      	itt	lt
 8016068:	232d      	movlt	r3, #45	; 0x2d
 801606a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801606e:	487f      	ldr	r0, [pc, #508]	; (801626c <_printf_float+0x2e8>)
 8016070:	4b7f      	ldr	r3, [pc, #508]	; (8016270 <_printf_float+0x2ec>)
 8016072:	e7d1      	b.n	8016018 <_printf_float+0x94>
 8016074:	6863      	ldr	r3, [r4, #4]
 8016076:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801607a:	9206      	str	r2, [sp, #24]
 801607c:	1c5a      	adds	r2, r3, #1
 801607e:	d13f      	bne.n	8016100 <_printf_float+0x17c>
 8016080:	2306      	movs	r3, #6
 8016082:	6063      	str	r3, [r4, #4]
 8016084:	9b05      	ldr	r3, [sp, #20]
 8016086:	6861      	ldr	r1, [r4, #4]
 8016088:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801608c:	2300      	movs	r3, #0
 801608e:	9303      	str	r3, [sp, #12]
 8016090:	ab0a      	add	r3, sp, #40	; 0x28
 8016092:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016096:	ab09      	add	r3, sp, #36	; 0x24
 8016098:	ec49 8b10 	vmov	d0, r8, r9
 801609c:	9300      	str	r3, [sp, #0]
 801609e:	6022      	str	r2, [r4, #0]
 80160a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80160a4:	4628      	mov	r0, r5
 80160a6:	f7ff fecd 	bl	8015e44 <__cvt>
 80160aa:	9b06      	ldr	r3, [sp, #24]
 80160ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80160ae:	2b47      	cmp	r3, #71	; 0x47
 80160b0:	4680      	mov	r8, r0
 80160b2:	d108      	bne.n	80160c6 <_printf_float+0x142>
 80160b4:	1cc8      	adds	r0, r1, #3
 80160b6:	db02      	blt.n	80160be <_printf_float+0x13a>
 80160b8:	6863      	ldr	r3, [r4, #4]
 80160ba:	4299      	cmp	r1, r3
 80160bc:	dd41      	ble.n	8016142 <_printf_float+0x1be>
 80160be:	f1ab 0b02 	sub.w	fp, fp, #2
 80160c2:	fa5f fb8b 	uxtb.w	fp, fp
 80160c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80160ca:	d820      	bhi.n	801610e <_printf_float+0x18a>
 80160cc:	3901      	subs	r1, #1
 80160ce:	465a      	mov	r2, fp
 80160d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80160d4:	9109      	str	r1, [sp, #36]	; 0x24
 80160d6:	f7ff ff17 	bl	8015f08 <__exponent>
 80160da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160dc:	1813      	adds	r3, r2, r0
 80160de:	2a01      	cmp	r2, #1
 80160e0:	4681      	mov	r9, r0
 80160e2:	6123      	str	r3, [r4, #16]
 80160e4:	dc02      	bgt.n	80160ec <_printf_float+0x168>
 80160e6:	6822      	ldr	r2, [r4, #0]
 80160e8:	07d2      	lsls	r2, r2, #31
 80160ea:	d501      	bpl.n	80160f0 <_printf_float+0x16c>
 80160ec:	3301      	adds	r3, #1
 80160ee:	6123      	str	r3, [r4, #16]
 80160f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d09c      	beq.n	8016032 <_printf_float+0xae>
 80160f8:	232d      	movs	r3, #45	; 0x2d
 80160fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160fe:	e798      	b.n	8016032 <_printf_float+0xae>
 8016100:	9a06      	ldr	r2, [sp, #24]
 8016102:	2a47      	cmp	r2, #71	; 0x47
 8016104:	d1be      	bne.n	8016084 <_printf_float+0x100>
 8016106:	2b00      	cmp	r3, #0
 8016108:	d1bc      	bne.n	8016084 <_printf_float+0x100>
 801610a:	2301      	movs	r3, #1
 801610c:	e7b9      	b.n	8016082 <_printf_float+0xfe>
 801610e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016112:	d118      	bne.n	8016146 <_printf_float+0x1c2>
 8016114:	2900      	cmp	r1, #0
 8016116:	6863      	ldr	r3, [r4, #4]
 8016118:	dd0b      	ble.n	8016132 <_printf_float+0x1ae>
 801611a:	6121      	str	r1, [r4, #16]
 801611c:	b913      	cbnz	r3, 8016124 <_printf_float+0x1a0>
 801611e:	6822      	ldr	r2, [r4, #0]
 8016120:	07d0      	lsls	r0, r2, #31
 8016122:	d502      	bpl.n	801612a <_printf_float+0x1a6>
 8016124:	3301      	adds	r3, #1
 8016126:	440b      	add	r3, r1
 8016128:	6123      	str	r3, [r4, #16]
 801612a:	65a1      	str	r1, [r4, #88]	; 0x58
 801612c:	f04f 0900 	mov.w	r9, #0
 8016130:	e7de      	b.n	80160f0 <_printf_float+0x16c>
 8016132:	b913      	cbnz	r3, 801613a <_printf_float+0x1b6>
 8016134:	6822      	ldr	r2, [r4, #0]
 8016136:	07d2      	lsls	r2, r2, #31
 8016138:	d501      	bpl.n	801613e <_printf_float+0x1ba>
 801613a:	3302      	adds	r3, #2
 801613c:	e7f4      	b.n	8016128 <_printf_float+0x1a4>
 801613e:	2301      	movs	r3, #1
 8016140:	e7f2      	b.n	8016128 <_printf_float+0x1a4>
 8016142:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016148:	4299      	cmp	r1, r3
 801614a:	db05      	blt.n	8016158 <_printf_float+0x1d4>
 801614c:	6823      	ldr	r3, [r4, #0]
 801614e:	6121      	str	r1, [r4, #16]
 8016150:	07d8      	lsls	r0, r3, #31
 8016152:	d5ea      	bpl.n	801612a <_printf_float+0x1a6>
 8016154:	1c4b      	adds	r3, r1, #1
 8016156:	e7e7      	b.n	8016128 <_printf_float+0x1a4>
 8016158:	2900      	cmp	r1, #0
 801615a:	bfd4      	ite	le
 801615c:	f1c1 0202 	rsble	r2, r1, #2
 8016160:	2201      	movgt	r2, #1
 8016162:	4413      	add	r3, r2
 8016164:	e7e0      	b.n	8016128 <_printf_float+0x1a4>
 8016166:	6823      	ldr	r3, [r4, #0]
 8016168:	055a      	lsls	r2, r3, #21
 801616a:	d407      	bmi.n	801617c <_printf_float+0x1f8>
 801616c:	6923      	ldr	r3, [r4, #16]
 801616e:	4642      	mov	r2, r8
 8016170:	4631      	mov	r1, r6
 8016172:	4628      	mov	r0, r5
 8016174:	47b8      	blx	r7
 8016176:	3001      	adds	r0, #1
 8016178:	d12c      	bne.n	80161d4 <_printf_float+0x250>
 801617a:	e764      	b.n	8016046 <_printf_float+0xc2>
 801617c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016180:	f240 80e0 	bls.w	8016344 <_printf_float+0x3c0>
 8016184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016188:	2200      	movs	r2, #0
 801618a:	2300      	movs	r3, #0
 801618c:	f7ea fcbc 	bl	8000b08 <__aeabi_dcmpeq>
 8016190:	2800      	cmp	r0, #0
 8016192:	d034      	beq.n	80161fe <_printf_float+0x27a>
 8016194:	4a37      	ldr	r2, [pc, #220]	; (8016274 <_printf_float+0x2f0>)
 8016196:	2301      	movs	r3, #1
 8016198:	4631      	mov	r1, r6
 801619a:	4628      	mov	r0, r5
 801619c:	47b8      	blx	r7
 801619e:	3001      	adds	r0, #1
 80161a0:	f43f af51 	beq.w	8016046 <_printf_float+0xc2>
 80161a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80161a8:	429a      	cmp	r2, r3
 80161aa:	db02      	blt.n	80161b2 <_printf_float+0x22e>
 80161ac:	6823      	ldr	r3, [r4, #0]
 80161ae:	07d8      	lsls	r0, r3, #31
 80161b0:	d510      	bpl.n	80161d4 <_printf_float+0x250>
 80161b2:	ee18 3a10 	vmov	r3, s16
 80161b6:	4652      	mov	r2, sl
 80161b8:	4631      	mov	r1, r6
 80161ba:	4628      	mov	r0, r5
 80161bc:	47b8      	blx	r7
 80161be:	3001      	adds	r0, #1
 80161c0:	f43f af41 	beq.w	8016046 <_printf_float+0xc2>
 80161c4:	f04f 0800 	mov.w	r8, #0
 80161c8:	f104 091a 	add.w	r9, r4, #26
 80161cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161ce:	3b01      	subs	r3, #1
 80161d0:	4543      	cmp	r3, r8
 80161d2:	dc09      	bgt.n	80161e8 <_printf_float+0x264>
 80161d4:	6823      	ldr	r3, [r4, #0]
 80161d6:	079b      	lsls	r3, r3, #30
 80161d8:	f100 8105 	bmi.w	80163e6 <_printf_float+0x462>
 80161dc:	68e0      	ldr	r0, [r4, #12]
 80161de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161e0:	4298      	cmp	r0, r3
 80161e2:	bfb8      	it	lt
 80161e4:	4618      	movlt	r0, r3
 80161e6:	e730      	b.n	801604a <_printf_float+0xc6>
 80161e8:	2301      	movs	r3, #1
 80161ea:	464a      	mov	r2, r9
 80161ec:	4631      	mov	r1, r6
 80161ee:	4628      	mov	r0, r5
 80161f0:	47b8      	blx	r7
 80161f2:	3001      	adds	r0, #1
 80161f4:	f43f af27 	beq.w	8016046 <_printf_float+0xc2>
 80161f8:	f108 0801 	add.w	r8, r8, #1
 80161fc:	e7e6      	b.n	80161cc <_printf_float+0x248>
 80161fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016200:	2b00      	cmp	r3, #0
 8016202:	dc39      	bgt.n	8016278 <_printf_float+0x2f4>
 8016204:	4a1b      	ldr	r2, [pc, #108]	; (8016274 <_printf_float+0x2f0>)
 8016206:	2301      	movs	r3, #1
 8016208:	4631      	mov	r1, r6
 801620a:	4628      	mov	r0, r5
 801620c:	47b8      	blx	r7
 801620e:	3001      	adds	r0, #1
 8016210:	f43f af19 	beq.w	8016046 <_printf_float+0xc2>
 8016214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016218:	4313      	orrs	r3, r2
 801621a:	d102      	bne.n	8016222 <_printf_float+0x29e>
 801621c:	6823      	ldr	r3, [r4, #0]
 801621e:	07d9      	lsls	r1, r3, #31
 8016220:	d5d8      	bpl.n	80161d4 <_printf_float+0x250>
 8016222:	ee18 3a10 	vmov	r3, s16
 8016226:	4652      	mov	r2, sl
 8016228:	4631      	mov	r1, r6
 801622a:	4628      	mov	r0, r5
 801622c:	47b8      	blx	r7
 801622e:	3001      	adds	r0, #1
 8016230:	f43f af09 	beq.w	8016046 <_printf_float+0xc2>
 8016234:	f04f 0900 	mov.w	r9, #0
 8016238:	f104 0a1a 	add.w	sl, r4, #26
 801623c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801623e:	425b      	negs	r3, r3
 8016240:	454b      	cmp	r3, r9
 8016242:	dc01      	bgt.n	8016248 <_printf_float+0x2c4>
 8016244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016246:	e792      	b.n	801616e <_printf_float+0x1ea>
 8016248:	2301      	movs	r3, #1
 801624a:	4652      	mov	r2, sl
 801624c:	4631      	mov	r1, r6
 801624e:	4628      	mov	r0, r5
 8016250:	47b8      	blx	r7
 8016252:	3001      	adds	r0, #1
 8016254:	f43f aef7 	beq.w	8016046 <_printf_float+0xc2>
 8016258:	f109 0901 	add.w	r9, r9, #1
 801625c:	e7ee      	b.n	801623c <_printf_float+0x2b8>
 801625e:	bf00      	nop
 8016260:	7fefffff 	.word	0x7fefffff
 8016264:	0801c8e0 	.word	0x0801c8e0
 8016268:	0801c8e4 	.word	0x0801c8e4
 801626c:	0801c8ec 	.word	0x0801c8ec
 8016270:	0801c8e8 	.word	0x0801c8e8
 8016274:	0801c8f0 	.word	0x0801c8f0
 8016278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801627a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801627c:	429a      	cmp	r2, r3
 801627e:	bfa8      	it	ge
 8016280:	461a      	movge	r2, r3
 8016282:	2a00      	cmp	r2, #0
 8016284:	4691      	mov	r9, r2
 8016286:	dc37      	bgt.n	80162f8 <_printf_float+0x374>
 8016288:	f04f 0b00 	mov.w	fp, #0
 801628c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016290:	f104 021a 	add.w	r2, r4, #26
 8016294:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016296:	9305      	str	r3, [sp, #20]
 8016298:	eba3 0309 	sub.w	r3, r3, r9
 801629c:	455b      	cmp	r3, fp
 801629e:	dc33      	bgt.n	8016308 <_printf_float+0x384>
 80162a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162a4:	429a      	cmp	r2, r3
 80162a6:	db3b      	blt.n	8016320 <_printf_float+0x39c>
 80162a8:	6823      	ldr	r3, [r4, #0]
 80162aa:	07da      	lsls	r2, r3, #31
 80162ac:	d438      	bmi.n	8016320 <_printf_float+0x39c>
 80162ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162b0:	9b05      	ldr	r3, [sp, #20]
 80162b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80162b4:	1ad3      	subs	r3, r2, r3
 80162b6:	eba2 0901 	sub.w	r9, r2, r1
 80162ba:	4599      	cmp	r9, r3
 80162bc:	bfa8      	it	ge
 80162be:	4699      	movge	r9, r3
 80162c0:	f1b9 0f00 	cmp.w	r9, #0
 80162c4:	dc35      	bgt.n	8016332 <_printf_float+0x3ae>
 80162c6:	f04f 0800 	mov.w	r8, #0
 80162ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80162ce:	f104 0a1a 	add.w	sl, r4, #26
 80162d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162d6:	1a9b      	subs	r3, r3, r2
 80162d8:	eba3 0309 	sub.w	r3, r3, r9
 80162dc:	4543      	cmp	r3, r8
 80162de:	f77f af79 	ble.w	80161d4 <_printf_float+0x250>
 80162e2:	2301      	movs	r3, #1
 80162e4:	4652      	mov	r2, sl
 80162e6:	4631      	mov	r1, r6
 80162e8:	4628      	mov	r0, r5
 80162ea:	47b8      	blx	r7
 80162ec:	3001      	adds	r0, #1
 80162ee:	f43f aeaa 	beq.w	8016046 <_printf_float+0xc2>
 80162f2:	f108 0801 	add.w	r8, r8, #1
 80162f6:	e7ec      	b.n	80162d2 <_printf_float+0x34e>
 80162f8:	4613      	mov	r3, r2
 80162fa:	4631      	mov	r1, r6
 80162fc:	4642      	mov	r2, r8
 80162fe:	4628      	mov	r0, r5
 8016300:	47b8      	blx	r7
 8016302:	3001      	adds	r0, #1
 8016304:	d1c0      	bne.n	8016288 <_printf_float+0x304>
 8016306:	e69e      	b.n	8016046 <_printf_float+0xc2>
 8016308:	2301      	movs	r3, #1
 801630a:	4631      	mov	r1, r6
 801630c:	4628      	mov	r0, r5
 801630e:	9205      	str	r2, [sp, #20]
 8016310:	47b8      	blx	r7
 8016312:	3001      	adds	r0, #1
 8016314:	f43f ae97 	beq.w	8016046 <_printf_float+0xc2>
 8016318:	9a05      	ldr	r2, [sp, #20]
 801631a:	f10b 0b01 	add.w	fp, fp, #1
 801631e:	e7b9      	b.n	8016294 <_printf_float+0x310>
 8016320:	ee18 3a10 	vmov	r3, s16
 8016324:	4652      	mov	r2, sl
 8016326:	4631      	mov	r1, r6
 8016328:	4628      	mov	r0, r5
 801632a:	47b8      	blx	r7
 801632c:	3001      	adds	r0, #1
 801632e:	d1be      	bne.n	80162ae <_printf_float+0x32a>
 8016330:	e689      	b.n	8016046 <_printf_float+0xc2>
 8016332:	9a05      	ldr	r2, [sp, #20]
 8016334:	464b      	mov	r3, r9
 8016336:	4442      	add	r2, r8
 8016338:	4631      	mov	r1, r6
 801633a:	4628      	mov	r0, r5
 801633c:	47b8      	blx	r7
 801633e:	3001      	adds	r0, #1
 8016340:	d1c1      	bne.n	80162c6 <_printf_float+0x342>
 8016342:	e680      	b.n	8016046 <_printf_float+0xc2>
 8016344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016346:	2a01      	cmp	r2, #1
 8016348:	dc01      	bgt.n	801634e <_printf_float+0x3ca>
 801634a:	07db      	lsls	r3, r3, #31
 801634c:	d538      	bpl.n	80163c0 <_printf_float+0x43c>
 801634e:	2301      	movs	r3, #1
 8016350:	4642      	mov	r2, r8
 8016352:	4631      	mov	r1, r6
 8016354:	4628      	mov	r0, r5
 8016356:	47b8      	blx	r7
 8016358:	3001      	adds	r0, #1
 801635a:	f43f ae74 	beq.w	8016046 <_printf_float+0xc2>
 801635e:	ee18 3a10 	vmov	r3, s16
 8016362:	4652      	mov	r2, sl
 8016364:	4631      	mov	r1, r6
 8016366:	4628      	mov	r0, r5
 8016368:	47b8      	blx	r7
 801636a:	3001      	adds	r0, #1
 801636c:	f43f ae6b 	beq.w	8016046 <_printf_float+0xc2>
 8016370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016374:	2200      	movs	r2, #0
 8016376:	2300      	movs	r3, #0
 8016378:	f7ea fbc6 	bl	8000b08 <__aeabi_dcmpeq>
 801637c:	b9d8      	cbnz	r0, 80163b6 <_printf_float+0x432>
 801637e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016380:	f108 0201 	add.w	r2, r8, #1
 8016384:	3b01      	subs	r3, #1
 8016386:	4631      	mov	r1, r6
 8016388:	4628      	mov	r0, r5
 801638a:	47b8      	blx	r7
 801638c:	3001      	adds	r0, #1
 801638e:	d10e      	bne.n	80163ae <_printf_float+0x42a>
 8016390:	e659      	b.n	8016046 <_printf_float+0xc2>
 8016392:	2301      	movs	r3, #1
 8016394:	4652      	mov	r2, sl
 8016396:	4631      	mov	r1, r6
 8016398:	4628      	mov	r0, r5
 801639a:	47b8      	blx	r7
 801639c:	3001      	adds	r0, #1
 801639e:	f43f ae52 	beq.w	8016046 <_printf_float+0xc2>
 80163a2:	f108 0801 	add.w	r8, r8, #1
 80163a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163a8:	3b01      	subs	r3, #1
 80163aa:	4543      	cmp	r3, r8
 80163ac:	dcf1      	bgt.n	8016392 <_printf_float+0x40e>
 80163ae:	464b      	mov	r3, r9
 80163b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80163b4:	e6dc      	b.n	8016170 <_printf_float+0x1ec>
 80163b6:	f04f 0800 	mov.w	r8, #0
 80163ba:	f104 0a1a 	add.w	sl, r4, #26
 80163be:	e7f2      	b.n	80163a6 <_printf_float+0x422>
 80163c0:	2301      	movs	r3, #1
 80163c2:	4642      	mov	r2, r8
 80163c4:	e7df      	b.n	8016386 <_printf_float+0x402>
 80163c6:	2301      	movs	r3, #1
 80163c8:	464a      	mov	r2, r9
 80163ca:	4631      	mov	r1, r6
 80163cc:	4628      	mov	r0, r5
 80163ce:	47b8      	blx	r7
 80163d0:	3001      	adds	r0, #1
 80163d2:	f43f ae38 	beq.w	8016046 <_printf_float+0xc2>
 80163d6:	f108 0801 	add.w	r8, r8, #1
 80163da:	68e3      	ldr	r3, [r4, #12]
 80163dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163de:	1a5b      	subs	r3, r3, r1
 80163e0:	4543      	cmp	r3, r8
 80163e2:	dcf0      	bgt.n	80163c6 <_printf_float+0x442>
 80163e4:	e6fa      	b.n	80161dc <_printf_float+0x258>
 80163e6:	f04f 0800 	mov.w	r8, #0
 80163ea:	f104 0919 	add.w	r9, r4, #25
 80163ee:	e7f4      	b.n	80163da <_printf_float+0x456>

080163f0 <_printf_common>:
 80163f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163f4:	4616      	mov	r6, r2
 80163f6:	4699      	mov	r9, r3
 80163f8:	688a      	ldr	r2, [r1, #8]
 80163fa:	690b      	ldr	r3, [r1, #16]
 80163fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016400:	4293      	cmp	r3, r2
 8016402:	bfb8      	it	lt
 8016404:	4613      	movlt	r3, r2
 8016406:	6033      	str	r3, [r6, #0]
 8016408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801640c:	4607      	mov	r7, r0
 801640e:	460c      	mov	r4, r1
 8016410:	b10a      	cbz	r2, 8016416 <_printf_common+0x26>
 8016412:	3301      	adds	r3, #1
 8016414:	6033      	str	r3, [r6, #0]
 8016416:	6823      	ldr	r3, [r4, #0]
 8016418:	0699      	lsls	r1, r3, #26
 801641a:	bf42      	ittt	mi
 801641c:	6833      	ldrmi	r3, [r6, #0]
 801641e:	3302      	addmi	r3, #2
 8016420:	6033      	strmi	r3, [r6, #0]
 8016422:	6825      	ldr	r5, [r4, #0]
 8016424:	f015 0506 	ands.w	r5, r5, #6
 8016428:	d106      	bne.n	8016438 <_printf_common+0x48>
 801642a:	f104 0a19 	add.w	sl, r4, #25
 801642e:	68e3      	ldr	r3, [r4, #12]
 8016430:	6832      	ldr	r2, [r6, #0]
 8016432:	1a9b      	subs	r3, r3, r2
 8016434:	42ab      	cmp	r3, r5
 8016436:	dc26      	bgt.n	8016486 <_printf_common+0x96>
 8016438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801643c:	1e13      	subs	r3, r2, #0
 801643e:	6822      	ldr	r2, [r4, #0]
 8016440:	bf18      	it	ne
 8016442:	2301      	movne	r3, #1
 8016444:	0692      	lsls	r2, r2, #26
 8016446:	d42b      	bmi.n	80164a0 <_printf_common+0xb0>
 8016448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801644c:	4649      	mov	r1, r9
 801644e:	4638      	mov	r0, r7
 8016450:	47c0      	blx	r8
 8016452:	3001      	adds	r0, #1
 8016454:	d01e      	beq.n	8016494 <_printf_common+0xa4>
 8016456:	6823      	ldr	r3, [r4, #0]
 8016458:	68e5      	ldr	r5, [r4, #12]
 801645a:	6832      	ldr	r2, [r6, #0]
 801645c:	f003 0306 	and.w	r3, r3, #6
 8016460:	2b04      	cmp	r3, #4
 8016462:	bf08      	it	eq
 8016464:	1aad      	subeq	r5, r5, r2
 8016466:	68a3      	ldr	r3, [r4, #8]
 8016468:	6922      	ldr	r2, [r4, #16]
 801646a:	bf0c      	ite	eq
 801646c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016470:	2500      	movne	r5, #0
 8016472:	4293      	cmp	r3, r2
 8016474:	bfc4      	itt	gt
 8016476:	1a9b      	subgt	r3, r3, r2
 8016478:	18ed      	addgt	r5, r5, r3
 801647a:	2600      	movs	r6, #0
 801647c:	341a      	adds	r4, #26
 801647e:	42b5      	cmp	r5, r6
 8016480:	d11a      	bne.n	80164b8 <_printf_common+0xc8>
 8016482:	2000      	movs	r0, #0
 8016484:	e008      	b.n	8016498 <_printf_common+0xa8>
 8016486:	2301      	movs	r3, #1
 8016488:	4652      	mov	r2, sl
 801648a:	4649      	mov	r1, r9
 801648c:	4638      	mov	r0, r7
 801648e:	47c0      	blx	r8
 8016490:	3001      	adds	r0, #1
 8016492:	d103      	bne.n	801649c <_printf_common+0xac>
 8016494:	f04f 30ff 	mov.w	r0, #4294967295
 8016498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801649c:	3501      	adds	r5, #1
 801649e:	e7c6      	b.n	801642e <_printf_common+0x3e>
 80164a0:	18e1      	adds	r1, r4, r3
 80164a2:	1c5a      	adds	r2, r3, #1
 80164a4:	2030      	movs	r0, #48	; 0x30
 80164a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80164aa:	4422      	add	r2, r4
 80164ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80164b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80164b4:	3302      	adds	r3, #2
 80164b6:	e7c7      	b.n	8016448 <_printf_common+0x58>
 80164b8:	2301      	movs	r3, #1
 80164ba:	4622      	mov	r2, r4
 80164bc:	4649      	mov	r1, r9
 80164be:	4638      	mov	r0, r7
 80164c0:	47c0      	blx	r8
 80164c2:	3001      	adds	r0, #1
 80164c4:	d0e6      	beq.n	8016494 <_printf_common+0xa4>
 80164c6:	3601      	adds	r6, #1
 80164c8:	e7d9      	b.n	801647e <_printf_common+0x8e>
	...

080164cc <_printf_i>:
 80164cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80164d0:	460c      	mov	r4, r1
 80164d2:	4691      	mov	r9, r2
 80164d4:	7e27      	ldrb	r7, [r4, #24]
 80164d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80164d8:	2f78      	cmp	r7, #120	; 0x78
 80164da:	4680      	mov	r8, r0
 80164dc:	469a      	mov	sl, r3
 80164de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80164e2:	d807      	bhi.n	80164f4 <_printf_i+0x28>
 80164e4:	2f62      	cmp	r7, #98	; 0x62
 80164e6:	d80a      	bhi.n	80164fe <_printf_i+0x32>
 80164e8:	2f00      	cmp	r7, #0
 80164ea:	f000 80d8 	beq.w	801669e <_printf_i+0x1d2>
 80164ee:	2f58      	cmp	r7, #88	; 0x58
 80164f0:	f000 80a3 	beq.w	801663a <_printf_i+0x16e>
 80164f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80164f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80164fc:	e03a      	b.n	8016574 <_printf_i+0xa8>
 80164fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016502:	2b15      	cmp	r3, #21
 8016504:	d8f6      	bhi.n	80164f4 <_printf_i+0x28>
 8016506:	a001      	add	r0, pc, #4	; (adr r0, 801650c <_printf_i+0x40>)
 8016508:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801650c:	08016565 	.word	0x08016565
 8016510:	08016579 	.word	0x08016579
 8016514:	080164f5 	.word	0x080164f5
 8016518:	080164f5 	.word	0x080164f5
 801651c:	080164f5 	.word	0x080164f5
 8016520:	080164f5 	.word	0x080164f5
 8016524:	08016579 	.word	0x08016579
 8016528:	080164f5 	.word	0x080164f5
 801652c:	080164f5 	.word	0x080164f5
 8016530:	080164f5 	.word	0x080164f5
 8016534:	080164f5 	.word	0x080164f5
 8016538:	08016685 	.word	0x08016685
 801653c:	080165a9 	.word	0x080165a9
 8016540:	08016667 	.word	0x08016667
 8016544:	080164f5 	.word	0x080164f5
 8016548:	080164f5 	.word	0x080164f5
 801654c:	080166a7 	.word	0x080166a7
 8016550:	080164f5 	.word	0x080164f5
 8016554:	080165a9 	.word	0x080165a9
 8016558:	080164f5 	.word	0x080164f5
 801655c:	080164f5 	.word	0x080164f5
 8016560:	0801666f 	.word	0x0801666f
 8016564:	680b      	ldr	r3, [r1, #0]
 8016566:	1d1a      	adds	r2, r3, #4
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	600a      	str	r2, [r1, #0]
 801656c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016574:	2301      	movs	r3, #1
 8016576:	e0a3      	b.n	80166c0 <_printf_i+0x1f4>
 8016578:	6825      	ldr	r5, [r4, #0]
 801657a:	6808      	ldr	r0, [r1, #0]
 801657c:	062e      	lsls	r6, r5, #24
 801657e:	f100 0304 	add.w	r3, r0, #4
 8016582:	d50a      	bpl.n	801659a <_printf_i+0xce>
 8016584:	6805      	ldr	r5, [r0, #0]
 8016586:	600b      	str	r3, [r1, #0]
 8016588:	2d00      	cmp	r5, #0
 801658a:	da03      	bge.n	8016594 <_printf_i+0xc8>
 801658c:	232d      	movs	r3, #45	; 0x2d
 801658e:	426d      	negs	r5, r5
 8016590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016594:	485e      	ldr	r0, [pc, #376]	; (8016710 <_printf_i+0x244>)
 8016596:	230a      	movs	r3, #10
 8016598:	e019      	b.n	80165ce <_printf_i+0x102>
 801659a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801659e:	6805      	ldr	r5, [r0, #0]
 80165a0:	600b      	str	r3, [r1, #0]
 80165a2:	bf18      	it	ne
 80165a4:	b22d      	sxthne	r5, r5
 80165a6:	e7ef      	b.n	8016588 <_printf_i+0xbc>
 80165a8:	680b      	ldr	r3, [r1, #0]
 80165aa:	6825      	ldr	r5, [r4, #0]
 80165ac:	1d18      	adds	r0, r3, #4
 80165ae:	6008      	str	r0, [r1, #0]
 80165b0:	0628      	lsls	r0, r5, #24
 80165b2:	d501      	bpl.n	80165b8 <_printf_i+0xec>
 80165b4:	681d      	ldr	r5, [r3, #0]
 80165b6:	e002      	b.n	80165be <_printf_i+0xf2>
 80165b8:	0669      	lsls	r1, r5, #25
 80165ba:	d5fb      	bpl.n	80165b4 <_printf_i+0xe8>
 80165bc:	881d      	ldrh	r5, [r3, #0]
 80165be:	4854      	ldr	r0, [pc, #336]	; (8016710 <_printf_i+0x244>)
 80165c0:	2f6f      	cmp	r7, #111	; 0x6f
 80165c2:	bf0c      	ite	eq
 80165c4:	2308      	moveq	r3, #8
 80165c6:	230a      	movne	r3, #10
 80165c8:	2100      	movs	r1, #0
 80165ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80165ce:	6866      	ldr	r6, [r4, #4]
 80165d0:	60a6      	str	r6, [r4, #8]
 80165d2:	2e00      	cmp	r6, #0
 80165d4:	bfa2      	ittt	ge
 80165d6:	6821      	ldrge	r1, [r4, #0]
 80165d8:	f021 0104 	bicge.w	r1, r1, #4
 80165dc:	6021      	strge	r1, [r4, #0]
 80165de:	b90d      	cbnz	r5, 80165e4 <_printf_i+0x118>
 80165e0:	2e00      	cmp	r6, #0
 80165e2:	d04d      	beq.n	8016680 <_printf_i+0x1b4>
 80165e4:	4616      	mov	r6, r2
 80165e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80165ea:	fb03 5711 	mls	r7, r3, r1, r5
 80165ee:	5dc7      	ldrb	r7, [r0, r7]
 80165f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80165f4:	462f      	mov	r7, r5
 80165f6:	42bb      	cmp	r3, r7
 80165f8:	460d      	mov	r5, r1
 80165fa:	d9f4      	bls.n	80165e6 <_printf_i+0x11a>
 80165fc:	2b08      	cmp	r3, #8
 80165fe:	d10b      	bne.n	8016618 <_printf_i+0x14c>
 8016600:	6823      	ldr	r3, [r4, #0]
 8016602:	07df      	lsls	r7, r3, #31
 8016604:	d508      	bpl.n	8016618 <_printf_i+0x14c>
 8016606:	6923      	ldr	r3, [r4, #16]
 8016608:	6861      	ldr	r1, [r4, #4]
 801660a:	4299      	cmp	r1, r3
 801660c:	bfde      	ittt	le
 801660e:	2330      	movle	r3, #48	; 0x30
 8016610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016614:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016618:	1b92      	subs	r2, r2, r6
 801661a:	6122      	str	r2, [r4, #16]
 801661c:	f8cd a000 	str.w	sl, [sp]
 8016620:	464b      	mov	r3, r9
 8016622:	aa03      	add	r2, sp, #12
 8016624:	4621      	mov	r1, r4
 8016626:	4640      	mov	r0, r8
 8016628:	f7ff fee2 	bl	80163f0 <_printf_common>
 801662c:	3001      	adds	r0, #1
 801662e:	d14c      	bne.n	80166ca <_printf_i+0x1fe>
 8016630:	f04f 30ff 	mov.w	r0, #4294967295
 8016634:	b004      	add	sp, #16
 8016636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801663a:	4835      	ldr	r0, [pc, #212]	; (8016710 <_printf_i+0x244>)
 801663c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016640:	6823      	ldr	r3, [r4, #0]
 8016642:	680e      	ldr	r6, [r1, #0]
 8016644:	061f      	lsls	r7, r3, #24
 8016646:	f856 5b04 	ldr.w	r5, [r6], #4
 801664a:	600e      	str	r6, [r1, #0]
 801664c:	d514      	bpl.n	8016678 <_printf_i+0x1ac>
 801664e:	07d9      	lsls	r1, r3, #31
 8016650:	bf44      	itt	mi
 8016652:	f043 0320 	orrmi.w	r3, r3, #32
 8016656:	6023      	strmi	r3, [r4, #0]
 8016658:	b91d      	cbnz	r5, 8016662 <_printf_i+0x196>
 801665a:	6823      	ldr	r3, [r4, #0]
 801665c:	f023 0320 	bic.w	r3, r3, #32
 8016660:	6023      	str	r3, [r4, #0]
 8016662:	2310      	movs	r3, #16
 8016664:	e7b0      	b.n	80165c8 <_printf_i+0xfc>
 8016666:	6823      	ldr	r3, [r4, #0]
 8016668:	f043 0320 	orr.w	r3, r3, #32
 801666c:	6023      	str	r3, [r4, #0]
 801666e:	2378      	movs	r3, #120	; 0x78
 8016670:	4828      	ldr	r0, [pc, #160]	; (8016714 <_printf_i+0x248>)
 8016672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016676:	e7e3      	b.n	8016640 <_printf_i+0x174>
 8016678:	065e      	lsls	r6, r3, #25
 801667a:	bf48      	it	mi
 801667c:	b2ad      	uxthmi	r5, r5
 801667e:	e7e6      	b.n	801664e <_printf_i+0x182>
 8016680:	4616      	mov	r6, r2
 8016682:	e7bb      	b.n	80165fc <_printf_i+0x130>
 8016684:	680b      	ldr	r3, [r1, #0]
 8016686:	6826      	ldr	r6, [r4, #0]
 8016688:	6960      	ldr	r0, [r4, #20]
 801668a:	1d1d      	adds	r5, r3, #4
 801668c:	600d      	str	r5, [r1, #0]
 801668e:	0635      	lsls	r5, r6, #24
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	d501      	bpl.n	8016698 <_printf_i+0x1cc>
 8016694:	6018      	str	r0, [r3, #0]
 8016696:	e002      	b.n	801669e <_printf_i+0x1d2>
 8016698:	0671      	lsls	r1, r6, #25
 801669a:	d5fb      	bpl.n	8016694 <_printf_i+0x1c8>
 801669c:	8018      	strh	r0, [r3, #0]
 801669e:	2300      	movs	r3, #0
 80166a0:	6123      	str	r3, [r4, #16]
 80166a2:	4616      	mov	r6, r2
 80166a4:	e7ba      	b.n	801661c <_printf_i+0x150>
 80166a6:	680b      	ldr	r3, [r1, #0]
 80166a8:	1d1a      	adds	r2, r3, #4
 80166aa:	600a      	str	r2, [r1, #0]
 80166ac:	681e      	ldr	r6, [r3, #0]
 80166ae:	6862      	ldr	r2, [r4, #4]
 80166b0:	2100      	movs	r1, #0
 80166b2:	4630      	mov	r0, r6
 80166b4:	f7e9 fdb4 	bl	8000220 <memchr>
 80166b8:	b108      	cbz	r0, 80166be <_printf_i+0x1f2>
 80166ba:	1b80      	subs	r0, r0, r6
 80166bc:	6060      	str	r0, [r4, #4]
 80166be:	6863      	ldr	r3, [r4, #4]
 80166c0:	6123      	str	r3, [r4, #16]
 80166c2:	2300      	movs	r3, #0
 80166c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80166c8:	e7a8      	b.n	801661c <_printf_i+0x150>
 80166ca:	6923      	ldr	r3, [r4, #16]
 80166cc:	4632      	mov	r2, r6
 80166ce:	4649      	mov	r1, r9
 80166d0:	4640      	mov	r0, r8
 80166d2:	47d0      	blx	sl
 80166d4:	3001      	adds	r0, #1
 80166d6:	d0ab      	beq.n	8016630 <_printf_i+0x164>
 80166d8:	6823      	ldr	r3, [r4, #0]
 80166da:	079b      	lsls	r3, r3, #30
 80166dc:	d413      	bmi.n	8016706 <_printf_i+0x23a>
 80166de:	68e0      	ldr	r0, [r4, #12]
 80166e0:	9b03      	ldr	r3, [sp, #12]
 80166e2:	4298      	cmp	r0, r3
 80166e4:	bfb8      	it	lt
 80166e6:	4618      	movlt	r0, r3
 80166e8:	e7a4      	b.n	8016634 <_printf_i+0x168>
 80166ea:	2301      	movs	r3, #1
 80166ec:	4632      	mov	r2, r6
 80166ee:	4649      	mov	r1, r9
 80166f0:	4640      	mov	r0, r8
 80166f2:	47d0      	blx	sl
 80166f4:	3001      	adds	r0, #1
 80166f6:	d09b      	beq.n	8016630 <_printf_i+0x164>
 80166f8:	3501      	adds	r5, #1
 80166fa:	68e3      	ldr	r3, [r4, #12]
 80166fc:	9903      	ldr	r1, [sp, #12]
 80166fe:	1a5b      	subs	r3, r3, r1
 8016700:	42ab      	cmp	r3, r5
 8016702:	dcf2      	bgt.n	80166ea <_printf_i+0x21e>
 8016704:	e7eb      	b.n	80166de <_printf_i+0x212>
 8016706:	2500      	movs	r5, #0
 8016708:	f104 0619 	add.w	r6, r4, #25
 801670c:	e7f5      	b.n	80166fa <_printf_i+0x22e>
 801670e:	bf00      	nop
 8016710:	0801c8f2 	.word	0x0801c8f2
 8016714:	0801c903 	.word	0x0801c903

08016718 <_scanf_float>:
 8016718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801671c:	b087      	sub	sp, #28
 801671e:	4617      	mov	r7, r2
 8016720:	9303      	str	r3, [sp, #12]
 8016722:	688b      	ldr	r3, [r1, #8]
 8016724:	1e5a      	subs	r2, r3, #1
 8016726:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801672a:	bf83      	ittte	hi
 801672c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016730:	195b      	addhi	r3, r3, r5
 8016732:	9302      	strhi	r3, [sp, #8]
 8016734:	2300      	movls	r3, #0
 8016736:	bf86      	itte	hi
 8016738:	f240 135d 	movwhi	r3, #349	; 0x15d
 801673c:	608b      	strhi	r3, [r1, #8]
 801673e:	9302      	strls	r3, [sp, #8]
 8016740:	680b      	ldr	r3, [r1, #0]
 8016742:	468b      	mov	fp, r1
 8016744:	2500      	movs	r5, #0
 8016746:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801674a:	f84b 3b1c 	str.w	r3, [fp], #28
 801674e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016752:	4680      	mov	r8, r0
 8016754:	460c      	mov	r4, r1
 8016756:	465e      	mov	r6, fp
 8016758:	46aa      	mov	sl, r5
 801675a:	46a9      	mov	r9, r5
 801675c:	9501      	str	r5, [sp, #4]
 801675e:	68a2      	ldr	r2, [r4, #8]
 8016760:	b152      	cbz	r2, 8016778 <_scanf_float+0x60>
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	781b      	ldrb	r3, [r3, #0]
 8016766:	2b4e      	cmp	r3, #78	; 0x4e
 8016768:	d864      	bhi.n	8016834 <_scanf_float+0x11c>
 801676a:	2b40      	cmp	r3, #64	; 0x40
 801676c:	d83c      	bhi.n	80167e8 <_scanf_float+0xd0>
 801676e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016772:	b2c8      	uxtb	r0, r1
 8016774:	280e      	cmp	r0, #14
 8016776:	d93a      	bls.n	80167ee <_scanf_float+0xd6>
 8016778:	f1b9 0f00 	cmp.w	r9, #0
 801677c:	d003      	beq.n	8016786 <_scanf_float+0x6e>
 801677e:	6823      	ldr	r3, [r4, #0]
 8016780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016784:	6023      	str	r3, [r4, #0]
 8016786:	f10a 3aff 	add.w	sl, sl, #4294967295
 801678a:	f1ba 0f01 	cmp.w	sl, #1
 801678e:	f200 8113 	bhi.w	80169b8 <_scanf_float+0x2a0>
 8016792:	455e      	cmp	r6, fp
 8016794:	f200 8105 	bhi.w	80169a2 <_scanf_float+0x28a>
 8016798:	2501      	movs	r5, #1
 801679a:	4628      	mov	r0, r5
 801679c:	b007      	add	sp, #28
 801679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80167a6:	2a0d      	cmp	r2, #13
 80167a8:	d8e6      	bhi.n	8016778 <_scanf_float+0x60>
 80167aa:	a101      	add	r1, pc, #4	; (adr r1, 80167b0 <_scanf_float+0x98>)
 80167ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80167b0:	080168ef 	.word	0x080168ef
 80167b4:	08016779 	.word	0x08016779
 80167b8:	08016779 	.word	0x08016779
 80167bc:	08016779 	.word	0x08016779
 80167c0:	0801694f 	.word	0x0801694f
 80167c4:	08016927 	.word	0x08016927
 80167c8:	08016779 	.word	0x08016779
 80167cc:	08016779 	.word	0x08016779
 80167d0:	080168fd 	.word	0x080168fd
 80167d4:	08016779 	.word	0x08016779
 80167d8:	08016779 	.word	0x08016779
 80167dc:	08016779 	.word	0x08016779
 80167e0:	08016779 	.word	0x08016779
 80167e4:	080168b5 	.word	0x080168b5
 80167e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80167ec:	e7db      	b.n	80167a6 <_scanf_float+0x8e>
 80167ee:	290e      	cmp	r1, #14
 80167f0:	d8c2      	bhi.n	8016778 <_scanf_float+0x60>
 80167f2:	a001      	add	r0, pc, #4	; (adr r0, 80167f8 <_scanf_float+0xe0>)
 80167f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80167f8:	080168a7 	.word	0x080168a7
 80167fc:	08016779 	.word	0x08016779
 8016800:	080168a7 	.word	0x080168a7
 8016804:	0801693b 	.word	0x0801693b
 8016808:	08016779 	.word	0x08016779
 801680c:	08016855 	.word	0x08016855
 8016810:	08016891 	.word	0x08016891
 8016814:	08016891 	.word	0x08016891
 8016818:	08016891 	.word	0x08016891
 801681c:	08016891 	.word	0x08016891
 8016820:	08016891 	.word	0x08016891
 8016824:	08016891 	.word	0x08016891
 8016828:	08016891 	.word	0x08016891
 801682c:	08016891 	.word	0x08016891
 8016830:	08016891 	.word	0x08016891
 8016834:	2b6e      	cmp	r3, #110	; 0x6e
 8016836:	d809      	bhi.n	801684c <_scanf_float+0x134>
 8016838:	2b60      	cmp	r3, #96	; 0x60
 801683a:	d8b2      	bhi.n	80167a2 <_scanf_float+0x8a>
 801683c:	2b54      	cmp	r3, #84	; 0x54
 801683e:	d077      	beq.n	8016930 <_scanf_float+0x218>
 8016840:	2b59      	cmp	r3, #89	; 0x59
 8016842:	d199      	bne.n	8016778 <_scanf_float+0x60>
 8016844:	2d07      	cmp	r5, #7
 8016846:	d197      	bne.n	8016778 <_scanf_float+0x60>
 8016848:	2508      	movs	r5, #8
 801684a:	e029      	b.n	80168a0 <_scanf_float+0x188>
 801684c:	2b74      	cmp	r3, #116	; 0x74
 801684e:	d06f      	beq.n	8016930 <_scanf_float+0x218>
 8016850:	2b79      	cmp	r3, #121	; 0x79
 8016852:	e7f6      	b.n	8016842 <_scanf_float+0x12a>
 8016854:	6821      	ldr	r1, [r4, #0]
 8016856:	05c8      	lsls	r0, r1, #23
 8016858:	d51a      	bpl.n	8016890 <_scanf_float+0x178>
 801685a:	9b02      	ldr	r3, [sp, #8]
 801685c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016860:	6021      	str	r1, [r4, #0]
 8016862:	f109 0901 	add.w	r9, r9, #1
 8016866:	b11b      	cbz	r3, 8016870 <_scanf_float+0x158>
 8016868:	3b01      	subs	r3, #1
 801686a:	3201      	adds	r2, #1
 801686c:	9302      	str	r3, [sp, #8]
 801686e:	60a2      	str	r2, [r4, #8]
 8016870:	68a3      	ldr	r3, [r4, #8]
 8016872:	3b01      	subs	r3, #1
 8016874:	60a3      	str	r3, [r4, #8]
 8016876:	6923      	ldr	r3, [r4, #16]
 8016878:	3301      	adds	r3, #1
 801687a:	6123      	str	r3, [r4, #16]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	3b01      	subs	r3, #1
 8016880:	2b00      	cmp	r3, #0
 8016882:	607b      	str	r3, [r7, #4]
 8016884:	f340 8084 	ble.w	8016990 <_scanf_float+0x278>
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	3301      	adds	r3, #1
 801688c:	603b      	str	r3, [r7, #0]
 801688e:	e766      	b.n	801675e <_scanf_float+0x46>
 8016890:	eb1a 0f05 	cmn.w	sl, r5
 8016894:	f47f af70 	bne.w	8016778 <_scanf_float+0x60>
 8016898:	6822      	ldr	r2, [r4, #0]
 801689a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801689e:	6022      	str	r2, [r4, #0]
 80168a0:	f806 3b01 	strb.w	r3, [r6], #1
 80168a4:	e7e4      	b.n	8016870 <_scanf_float+0x158>
 80168a6:	6822      	ldr	r2, [r4, #0]
 80168a8:	0610      	lsls	r0, r2, #24
 80168aa:	f57f af65 	bpl.w	8016778 <_scanf_float+0x60>
 80168ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80168b2:	e7f4      	b.n	801689e <_scanf_float+0x186>
 80168b4:	f1ba 0f00 	cmp.w	sl, #0
 80168b8:	d10e      	bne.n	80168d8 <_scanf_float+0x1c0>
 80168ba:	f1b9 0f00 	cmp.w	r9, #0
 80168be:	d10e      	bne.n	80168de <_scanf_float+0x1c6>
 80168c0:	6822      	ldr	r2, [r4, #0]
 80168c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80168c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80168ca:	d108      	bne.n	80168de <_scanf_float+0x1c6>
 80168cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80168d0:	6022      	str	r2, [r4, #0]
 80168d2:	f04f 0a01 	mov.w	sl, #1
 80168d6:	e7e3      	b.n	80168a0 <_scanf_float+0x188>
 80168d8:	f1ba 0f02 	cmp.w	sl, #2
 80168dc:	d055      	beq.n	801698a <_scanf_float+0x272>
 80168de:	2d01      	cmp	r5, #1
 80168e0:	d002      	beq.n	80168e8 <_scanf_float+0x1d0>
 80168e2:	2d04      	cmp	r5, #4
 80168e4:	f47f af48 	bne.w	8016778 <_scanf_float+0x60>
 80168e8:	3501      	adds	r5, #1
 80168ea:	b2ed      	uxtb	r5, r5
 80168ec:	e7d8      	b.n	80168a0 <_scanf_float+0x188>
 80168ee:	f1ba 0f01 	cmp.w	sl, #1
 80168f2:	f47f af41 	bne.w	8016778 <_scanf_float+0x60>
 80168f6:	f04f 0a02 	mov.w	sl, #2
 80168fa:	e7d1      	b.n	80168a0 <_scanf_float+0x188>
 80168fc:	b97d      	cbnz	r5, 801691e <_scanf_float+0x206>
 80168fe:	f1b9 0f00 	cmp.w	r9, #0
 8016902:	f47f af3c 	bne.w	801677e <_scanf_float+0x66>
 8016906:	6822      	ldr	r2, [r4, #0]
 8016908:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801690c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016910:	f47f af39 	bne.w	8016786 <_scanf_float+0x6e>
 8016914:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016918:	6022      	str	r2, [r4, #0]
 801691a:	2501      	movs	r5, #1
 801691c:	e7c0      	b.n	80168a0 <_scanf_float+0x188>
 801691e:	2d03      	cmp	r5, #3
 8016920:	d0e2      	beq.n	80168e8 <_scanf_float+0x1d0>
 8016922:	2d05      	cmp	r5, #5
 8016924:	e7de      	b.n	80168e4 <_scanf_float+0x1cc>
 8016926:	2d02      	cmp	r5, #2
 8016928:	f47f af26 	bne.w	8016778 <_scanf_float+0x60>
 801692c:	2503      	movs	r5, #3
 801692e:	e7b7      	b.n	80168a0 <_scanf_float+0x188>
 8016930:	2d06      	cmp	r5, #6
 8016932:	f47f af21 	bne.w	8016778 <_scanf_float+0x60>
 8016936:	2507      	movs	r5, #7
 8016938:	e7b2      	b.n	80168a0 <_scanf_float+0x188>
 801693a:	6822      	ldr	r2, [r4, #0]
 801693c:	0591      	lsls	r1, r2, #22
 801693e:	f57f af1b 	bpl.w	8016778 <_scanf_float+0x60>
 8016942:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016946:	6022      	str	r2, [r4, #0]
 8016948:	f8cd 9004 	str.w	r9, [sp, #4]
 801694c:	e7a8      	b.n	80168a0 <_scanf_float+0x188>
 801694e:	6822      	ldr	r2, [r4, #0]
 8016950:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016954:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016958:	d006      	beq.n	8016968 <_scanf_float+0x250>
 801695a:	0550      	lsls	r0, r2, #21
 801695c:	f57f af0c 	bpl.w	8016778 <_scanf_float+0x60>
 8016960:	f1b9 0f00 	cmp.w	r9, #0
 8016964:	f43f af0f 	beq.w	8016786 <_scanf_float+0x6e>
 8016968:	0591      	lsls	r1, r2, #22
 801696a:	bf58      	it	pl
 801696c:	9901      	ldrpl	r1, [sp, #4]
 801696e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016972:	bf58      	it	pl
 8016974:	eba9 0101 	subpl.w	r1, r9, r1
 8016978:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801697c:	bf58      	it	pl
 801697e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016982:	6022      	str	r2, [r4, #0]
 8016984:	f04f 0900 	mov.w	r9, #0
 8016988:	e78a      	b.n	80168a0 <_scanf_float+0x188>
 801698a:	f04f 0a03 	mov.w	sl, #3
 801698e:	e787      	b.n	80168a0 <_scanf_float+0x188>
 8016990:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016994:	4639      	mov	r1, r7
 8016996:	4640      	mov	r0, r8
 8016998:	4798      	blx	r3
 801699a:	2800      	cmp	r0, #0
 801699c:	f43f aedf 	beq.w	801675e <_scanf_float+0x46>
 80169a0:	e6ea      	b.n	8016778 <_scanf_float+0x60>
 80169a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80169aa:	463a      	mov	r2, r7
 80169ac:	4640      	mov	r0, r8
 80169ae:	4798      	blx	r3
 80169b0:	6923      	ldr	r3, [r4, #16]
 80169b2:	3b01      	subs	r3, #1
 80169b4:	6123      	str	r3, [r4, #16]
 80169b6:	e6ec      	b.n	8016792 <_scanf_float+0x7a>
 80169b8:	1e6b      	subs	r3, r5, #1
 80169ba:	2b06      	cmp	r3, #6
 80169bc:	d825      	bhi.n	8016a0a <_scanf_float+0x2f2>
 80169be:	2d02      	cmp	r5, #2
 80169c0:	d836      	bhi.n	8016a30 <_scanf_float+0x318>
 80169c2:	455e      	cmp	r6, fp
 80169c4:	f67f aee8 	bls.w	8016798 <_scanf_float+0x80>
 80169c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80169d0:	463a      	mov	r2, r7
 80169d2:	4640      	mov	r0, r8
 80169d4:	4798      	blx	r3
 80169d6:	6923      	ldr	r3, [r4, #16]
 80169d8:	3b01      	subs	r3, #1
 80169da:	6123      	str	r3, [r4, #16]
 80169dc:	e7f1      	b.n	80169c2 <_scanf_float+0x2aa>
 80169de:	9802      	ldr	r0, [sp, #8]
 80169e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80169e8:	9002      	str	r0, [sp, #8]
 80169ea:	463a      	mov	r2, r7
 80169ec:	4640      	mov	r0, r8
 80169ee:	4798      	blx	r3
 80169f0:	6923      	ldr	r3, [r4, #16]
 80169f2:	3b01      	subs	r3, #1
 80169f4:	6123      	str	r3, [r4, #16]
 80169f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80169fa:	fa5f fa8a 	uxtb.w	sl, sl
 80169fe:	f1ba 0f02 	cmp.w	sl, #2
 8016a02:	d1ec      	bne.n	80169de <_scanf_float+0x2c6>
 8016a04:	3d03      	subs	r5, #3
 8016a06:	b2ed      	uxtb	r5, r5
 8016a08:	1b76      	subs	r6, r6, r5
 8016a0a:	6823      	ldr	r3, [r4, #0]
 8016a0c:	05da      	lsls	r2, r3, #23
 8016a0e:	d52f      	bpl.n	8016a70 <_scanf_float+0x358>
 8016a10:	055b      	lsls	r3, r3, #21
 8016a12:	d510      	bpl.n	8016a36 <_scanf_float+0x31e>
 8016a14:	455e      	cmp	r6, fp
 8016a16:	f67f aebf 	bls.w	8016798 <_scanf_float+0x80>
 8016a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016a22:	463a      	mov	r2, r7
 8016a24:	4640      	mov	r0, r8
 8016a26:	4798      	blx	r3
 8016a28:	6923      	ldr	r3, [r4, #16]
 8016a2a:	3b01      	subs	r3, #1
 8016a2c:	6123      	str	r3, [r4, #16]
 8016a2e:	e7f1      	b.n	8016a14 <_scanf_float+0x2fc>
 8016a30:	46aa      	mov	sl, r5
 8016a32:	9602      	str	r6, [sp, #8]
 8016a34:	e7df      	b.n	80169f6 <_scanf_float+0x2de>
 8016a36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016a3a:	6923      	ldr	r3, [r4, #16]
 8016a3c:	2965      	cmp	r1, #101	; 0x65
 8016a3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016a42:	f106 35ff 	add.w	r5, r6, #4294967295
 8016a46:	6123      	str	r3, [r4, #16]
 8016a48:	d00c      	beq.n	8016a64 <_scanf_float+0x34c>
 8016a4a:	2945      	cmp	r1, #69	; 0x45
 8016a4c:	d00a      	beq.n	8016a64 <_scanf_float+0x34c>
 8016a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a52:	463a      	mov	r2, r7
 8016a54:	4640      	mov	r0, r8
 8016a56:	4798      	blx	r3
 8016a58:	6923      	ldr	r3, [r4, #16]
 8016a5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016a5e:	3b01      	subs	r3, #1
 8016a60:	1eb5      	subs	r5, r6, #2
 8016a62:	6123      	str	r3, [r4, #16]
 8016a64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016a68:	463a      	mov	r2, r7
 8016a6a:	4640      	mov	r0, r8
 8016a6c:	4798      	blx	r3
 8016a6e:	462e      	mov	r6, r5
 8016a70:	6825      	ldr	r5, [r4, #0]
 8016a72:	f015 0510 	ands.w	r5, r5, #16
 8016a76:	d158      	bne.n	8016b2a <_scanf_float+0x412>
 8016a78:	7035      	strb	r5, [r6, #0]
 8016a7a:	6823      	ldr	r3, [r4, #0]
 8016a7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016a84:	d11c      	bne.n	8016ac0 <_scanf_float+0x3a8>
 8016a86:	9b01      	ldr	r3, [sp, #4]
 8016a88:	454b      	cmp	r3, r9
 8016a8a:	eba3 0209 	sub.w	r2, r3, r9
 8016a8e:	d124      	bne.n	8016ada <_scanf_float+0x3c2>
 8016a90:	2200      	movs	r2, #0
 8016a92:	4659      	mov	r1, fp
 8016a94:	4640      	mov	r0, r8
 8016a96:	f000 fed1 	bl	801783c <_strtod_r>
 8016a9a:	9b03      	ldr	r3, [sp, #12]
 8016a9c:	6821      	ldr	r1, [r4, #0]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	f011 0f02 	tst.w	r1, #2
 8016aa4:	ec57 6b10 	vmov	r6, r7, d0
 8016aa8:	f103 0204 	add.w	r2, r3, #4
 8016aac:	d020      	beq.n	8016af0 <_scanf_float+0x3d8>
 8016aae:	9903      	ldr	r1, [sp, #12]
 8016ab0:	600a      	str	r2, [r1, #0]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	e9c3 6700 	strd	r6, r7, [r3]
 8016ab8:	68e3      	ldr	r3, [r4, #12]
 8016aba:	3301      	adds	r3, #1
 8016abc:	60e3      	str	r3, [r4, #12]
 8016abe:	e66c      	b.n	801679a <_scanf_float+0x82>
 8016ac0:	9b04      	ldr	r3, [sp, #16]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d0e4      	beq.n	8016a90 <_scanf_float+0x378>
 8016ac6:	9905      	ldr	r1, [sp, #20]
 8016ac8:	230a      	movs	r3, #10
 8016aca:	462a      	mov	r2, r5
 8016acc:	3101      	adds	r1, #1
 8016ace:	4640      	mov	r0, r8
 8016ad0:	f000 ff3e 	bl	8017950 <_strtol_r>
 8016ad4:	9b04      	ldr	r3, [sp, #16]
 8016ad6:	9e05      	ldr	r6, [sp, #20]
 8016ad8:	1ac2      	subs	r2, r0, r3
 8016ada:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016ade:	429e      	cmp	r6, r3
 8016ae0:	bf28      	it	cs
 8016ae2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016ae6:	4912      	ldr	r1, [pc, #72]	; (8016b30 <_scanf_float+0x418>)
 8016ae8:	4630      	mov	r0, r6
 8016aea:	f000 f85f 	bl	8016bac <siprintf>
 8016aee:	e7cf      	b.n	8016a90 <_scanf_float+0x378>
 8016af0:	f011 0f04 	tst.w	r1, #4
 8016af4:	9903      	ldr	r1, [sp, #12]
 8016af6:	600a      	str	r2, [r1, #0]
 8016af8:	d1db      	bne.n	8016ab2 <_scanf_float+0x39a>
 8016afa:	f8d3 8000 	ldr.w	r8, [r3]
 8016afe:	ee10 2a10 	vmov	r2, s0
 8016b02:	ee10 0a10 	vmov	r0, s0
 8016b06:	463b      	mov	r3, r7
 8016b08:	4639      	mov	r1, r7
 8016b0a:	f7ea f82f 	bl	8000b6c <__aeabi_dcmpun>
 8016b0e:	b128      	cbz	r0, 8016b1c <_scanf_float+0x404>
 8016b10:	4808      	ldr	r0, [pc, #32]	; (8016b34 <_scanf_float+0x41c>)
 8016b12:	f000 f811 	bl	8016b38 <nanf>
 8016b16:	ed88 0a00 	vstr	s0, [r8]
 8016b1a:	e7cd      	b.n	8016ab8 <_scanf_float+0x3a0>
 8016b1c:	4630      	mov	r0, r6
 8016b1e:	4639      	mov	r1, r7
 8016b20:	f7ea f882 	bl	8000c28 <__aeabi_d2f>
 8016b24:	f8c8 0000 	str.w	r0, [r8]
 8016b28:	e7c6      	b.n	8016ab8 <_scanf_float+0x3a0>
 8016b2a:	2500      	movs	r5, #0
 8016b2c:	e635      	b.n	801679a <_scanf_float+0x82>
 8016b2e:	bf00      	nop
 8016b30:	0801c914 	.word	0x0801c914
 8016b34:	0801cd30 	.word	0x0801cd30

08016b38 <nanf>:
 8016b38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016b40 <nanf+0x8>
 8016b3c:	4770      	bx	lr
 8016b3e:	bf00      	nop
 8016b40:	7fc00000 	.word	0x7fc00000

08016b44 <sniprintf>:
 8016b44:	b40c      	push	{r2, r3}
 8016b46:	b530      	push	{r4, r5, lr}
 8016b48:	4b17      	ldr	r3, [pc, #92]	; (8016ba8 <sniprintf+0x64>)
 8016b4a:	1e0c      	subs	r4, r1, #0
 8016b4c:	681d      	ldr	r5, [r3, #0]
 8016b4e:	b09d      	sub	sp, #116	; 0x74
 8016b50:	da08      	bge.n	8016b64 <sniprintf+0x20>
 8016b52:	238b      	movs	r3, #139	; 0x8b
 8016b54:	602b      	str	r3, [r5, #0]
 8016b56:	f04f 30ff 	mov.w	r0, #4294967295
 8016b5a:	b01d      	add	sp, #116	; 0x74
 8016b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016b60:	b002      	add	sp, #8
 8016b62:	4770      	bx	lr
 8016b64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016b68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016b6c:	bf14      	ite	ne
 8016b6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016b72:	4623      	moveq	r3, r4
 8016b74:	9304      	str	r3, [sp, #16]
 8016b76:	9307      	str	r3, [sp, #28]
 8016b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b7c:	9002      	str	r0, [sp, #8]
 8016b7e:	9006      	str	r0, [sp, #24]
 8016b80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016b84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016b86:	ab21      	add	r3, sp, #132	; 0x84
 8016b88:	a902      	add	r1, sp, #8
 8016b8a:	4628      	mov	r0, r5
 8016b8c:	9301      	str	r3, [sp, #4]
 8016b8e:	f002 feb9 	bl	8019904 <_svfiprintf_r>
 8016b92:	1c43      	adds	r3, r0, #1
 8016b94:	bfbc      	itt	lt
 8016b96:	238b      	movlt	r3, #139	; 0x8b
 8016b98:	602b      	strlt	r3, [r5, #0]
 8016b9a:	2c00      	cmp	r4, #0
 8016b9c:	d0dd      	beq.n	8016b5a <sniprintf+0x16>
 8016b9e:	9b02      	ldr	r3, [sp, #8]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	701a      	strb	r2, [r3, #0]
 8016ba4:	e7d9      	b.n	8016b5a <sniprintf+0x16>
 8016ba6:	bf00      	nop
 8016ba8:	20001250 	.word	0x20001250

08016bac <siprintf>:
 8016bac:	b40e      	push	{r1, r2, r3}
 8016bae:	b500      	push	{lr}
 8016bb0:	b09c      	sub	sp, #112	; 0x70
 8016bb2:	ab1d      	add	r3, sp, #116	; 0x74
 8016bb4:	9002      	str	r0, [sp, #8]
 8016bb6:	9006      	str	r0, [sp, #24]
 8016bb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016bbc:	4809      	ldr	r0, [pc, #36]	; (8016be4 <siprintf+0x38>)
 8016bbe:	9107      	str	r1, [sp, #28]
 8016bc0:	9104      	str	r1, [sp, #16]
 8016bc2:	4909      	ldr	r1, [pc, #36]	; (8016be8 <siprintf+0x3c>)
 8016bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bc8:	9105      	str	r1, [sp, #20]
 8016bca:	6800      	ldr	r0, [r0, #0]
 8016bcc:	9301      	str	r3, [sp, #4]
 8016bce:	a902      	add	r1, sp, #8
 8016bd0:	f002 fe98 	bl	8019904 <_svfiprintf_r>
 8016bd4:	9b02      	ldr	r3, [sp, #8]
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	701a      	strb	r2, [r3, #0]
 8016bda:	b01c      	add	sp, #112	; 0x70
 8016bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016be0:	b003      	add	sp, #12
 8016be2:	4770      	bx	lr
 8016be4:	20001250 	.word	0x20001250
 8016be8:	ffff0208 	.word	0xffff0208

08016bec <sulp>:
 8016bec:	b570      	push	{r4, r5, r6, lr}
 8016bee:	4604      	mov	r4, r0
 8016bf0:	460d      	mov	r5, r1
 8016bf2:	ec45 4b10 	vmov	d0, r4, r5
 8016bf6:	4616      	mov	r6, r2
 8016bf8:	f002 fc20 	bl	801943c <__ulp>
 8016bfc:	ec51 0b10 	vmov	r0, r1, d0
 8016c00:	b17e      	cbz	r6, 8016c22 <sulp+0x36>
 8016c02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016c06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	dd09      	ble.n	8016c22 <sulp+0x36>
 8016c0e:	051b      	lsls	r3, r3, #20
 8016c10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016c14:	2400      	movs	r4, #0
 8016c16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016c1a:	4622      	mov	r2, r4
 8016c1c:	462b      	mov	r3, r5
 8016c1e:	f7e9 fd0b 	bl	8000638 <__aeabi_dmul>
 8016c22:	bd70      	pop	{r4, r5, r6, pc}
 8016c24:	0000      	movs	r0, r0
	...

08016c28 <_strtod_l>:
 8016c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c2c:	b0a3      	sub	sp, #140	; 0x8c
 8016c2e:	461f      	mov	r7, r3
 8016c30:	2300      	movs	r3, #0
 8016c32:	931e      	str	r3, [sp, #120]	; 0x78
 8016c34:	4ba4      	ldr	r3, [pc, #656]	; (8016ec8 <_strtod_l+0x2a0>)
 8016c36:	9219      	str	r2, [sp, #100]	; 0x64
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	9307      	str	r3, [sp, #28]
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	4618      	mov	r0, r3
 8016c40:	4688      	mov	r8, r1
 8016c42:	f7e9 fae5 	bl	8000210 <strlen>
 8016c46:	f04f 0a00 	mov.w	sl, #0
 8016c4a:	4605      	mov	r5, r0
 8016c4c:	f04f 0b00 	mov.w	fp, #0
 8016c50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016c54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016c56:	781a      	ldrb	r2, [r3, #0]
 8016c58:	2a2b      	cmp	r2, #43	; 0x2b
 8016c5a:	d04c      	beq.n	8016cf6 <_strtod_l+0xce>
 8016c5c:	d839      	bhi.n	8016cd2 <_strtod_l+0xaa>
 8016c5e:	2a0d      	cmp	r2, #13
 8016c60:	d832      	bhi.n	8016cc8 <_strtod_l+0xa0>
 8016c62:	2a08      	cmp	r2, #8
 8016c64:	d832      	bhi.n	8016ccc <_strtod_l+0xa4>
 8016c66:	2a00      	cmp	r2, #0
 8016c68:	d03c      	beq.n	8016ce4 <_strtod_l+0xbc>
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	930e      	str	r3, [sp, #56]	; 0x38
 8016c6e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016c70:	7833      	ldrb	r3, [r6, #0]
 8016c72:	2b30      	cmp	r3, #48	; 0x30
 8016c74:	f040 80b4 	bne.w	8016de0 <_strtod_l+0x1b8>
 8016c78:	7873      	ldrb	r3, [r6, #1]
 8016c7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016c7e:	2b58      	cmp	r3, #88	; 0x58
 8016c80:	d16c      	bne.n	8016d5c <_strtod_l+0x134>
 8016c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c84:	9301      	str	r3, [sp, #4]
 8016c86:	ab1e      	add	r3, sp, #120	; 0x78
 8016c88:	9702      	str	r7, [sp, #8]
 8016c8a:	9300      	str	r3, [sp, #0]
 8016c8c:	4a8f      	ldr	r2, [pc, #572]	; (8016ecc <_strtod_l+0x2a4>)
 8016c8e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016c90:	a91d      	add	r1, sp, #116	; 0x74
 8016c92:	4620      	mov	r0, r4
 8016c94:	f001 fd40 	bl	8018718 <__gethex>
 8016c98:	f010 0707 	ands.w	r7, r0, #7
 8016c9c:	4605      	mov	r5, r0
 8016c9e:	d005      	beq.n	8016cac <_strtod_l+0x84>
 8016ca0:	2f06      	cmp	r7, #6
 8016ca2:	d12a      	bne.n	8016cfa <_strtod_l+0xd2>
 8016ca4:	3601      	adds	r6, #1
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	961d      	str	r6, [sp, #116]	; 0x74
 8016caa:	930e      	str	r3, [sp, #56]	; 0x38
 8016cac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	f040 8596 	bne.w	80177e0 <_strtod_l+0xbb8>
 8016cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016cb6:	b1db      	cbz	r3, 8016cf0 <_strtod_l+0xc8>
 8016cb8:	4652      	mov	r2, sl
 8016cba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016cbe:	ec43 2b10 	vmov	d0, r2, r3
 8016cc2:	b023      	add	sp, #140	; 0x8c
 8016cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc8:	2a20      	cmp	r2, #32
 8016cca:	d1ce      	bne.n	8016c6a <_strtod_l+0x42>
 8016ccc:	3301      	adds	r3, #1
 8016cce:	931d      	str	r3, [sp, #116]	; 0x74
 8016cd0:	e7c0      	b.n	8016c54 <_strtod_l+0x2c>
 8016cd2:	2a2d      	cmp	r2, #45	; 0x2d
 8016cd4:	d1c9      	bne.n	8016c6a <_strtod_l+0x42>
 8016cd6:	2201      	movs	r2, #1
 8016cd8:	920e      	str	r2, [sp, #56]	; 0x38
 8016cda:	1c5a      	adds	r2, r3, #1
 8016cdc:	921d      	str	r2, [sp, #116]	; 0x74
 8016cde:	785b      	ldrb	r3, [r3, #1]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d1c4      	bne.n	8016c6e <_strtod_l+0x46>
 8016ce4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016ce6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	f040 8576 	bne.w	80177dc <_strtod_l+0xbb4>
 8016cf0:	4652      	mov	r2, sl
 8016cf2:	465b      	mov	r3, fp
 8016cf4:	e7e3      	b.n	8016cbe <_strtod_l+0x96>
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	e7ee      	b.n	8016cd8 <_strtod_l+0xb0>
 8016cfa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016cfc:	b13a      	cbz	r2, 8016d0e <_strtod_l+0xe6>
 8016cfe:	2135      	movs	r1, #53	; 0x35
 8016d00:	a820      	add	r0, sp, #128	; 0x80
 8016d02:	f002 fca6 	bl	8019652 <__copybits>
 8016d06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016d08:	4620      	mov	r0, r4
 8016d0a:	f002 f86b 	bl	8018de4 <_Bfree>
 8016d0e:	3f01      	subs	r7, #1
 8016d10:	2f05      	cmp	r7, #5
 8016d12:	d807      	bhi.n	8016d24 <_strtod_l+0xfc>
 8016d14:	e8df f007 	tbb	[pc, r7]
 8016d18:	1d180b0e 	.word	0x1d180b0e
 8016d1c:	030e      	.short	0x030e
 8016d1e:	f04f 0b00 	mov.w	fp, #0
 8016d22:	46da      	mov	sl, fp
 8016d24:	0728      	lsls	r0, r5, #28
 8016d26:	d5c1      	bpl.n	8016cac <_strtod_l+0x84>
 8016d28:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016d2c:	e7be      	b.n	8016cac <_strtod_l+0x84>
 8016d2e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016d32:	e7f7      	b.n	8016d24 <_strtod_l+0xfc>
 8016d34:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016d38:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016d3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016d3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016d42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016d46:	e7ed      	b.n	8016d24 <_strtod_l+0xfc>
 8016d48:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016ed0 <_strtod_l+0x2a8>
 8016d4c:	f04f 0a00 	mov.w	sl, #0
 8016d50:	e7e8      	b.n	8016d24 <_strtod_l+0xfc>
 8016d52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016d56:	f04f 3aff 	mov.w	sl, #4294967295
 8016d5a:	e7e3      	b.n	8016d24 <_strtod_l+0xfc>
 8016d5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d5e:	1c5a      	adds	r2, r3, #1
 8016d60:	921d      	str	r2, [sp, #116]	; 0x74
 8016d62:	785b      	ldrb	r3, [r3, #1]
 8016d64:	2b30      	cmp	r3, #48	; 0x30
 8016d66:	d0f9      	beq.n	8016d5c <_strtod_l+0x134>
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d09f      	beq.n	8016cac <_strtod_l+0x84>
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	f04f 0900 	mov.w	r9, #0
 8016d72:	9304      	str	r3, [sp, #16]
 8016d74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d76:	930a      	str	r3, [sp, #40]	; 0x28
 8016d78:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016d7c:	464f      	mov	r7, r9
 8016d7e:	220a      	movs	r2, #10
 8016d80:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016d82:	7806      	ldrb	r6, [r0, #0]
 8016d84:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016d88:	b2d9      	uxtb	r1, r3
 8016d8a:	2909      	cmp	r1, #9
 8016d8c:	d92a      	bls.n	8016de4 <_strtod_l+0x1bc>
 8016d8e:	9907      	ldr	r1, [sp, #28]
 8016d90:	462a      	mov	r2, r5
 8016d92:	f002 fed1 	bl	8019b38 <strncmp>
 8016d96:	b398      	cbz	r0, 8016e00 <_strtod_l+0x1d8>
 8016d98:	2000      	movs	r0, #0
 8016d9a:	4633      	mov	r3, r6
 8016d9c:	463d      	mov	r5, r7
 8016d9e:	9007      	str	r0, [sp, #28]
 8016da0:	4602      	mov	r2, r0
 8016da2:	2b65      	cmp	r3, #101	; 0x65
 8016da4:	d001      	beq.n	8016daa <_strtod_l+0x182>
 8016da6:	2b45      	cmp	r3, #69	; 0x45
 8016da8:	d118      	bne.n	8016ddc <_strtod_l+0x1b4>
 8016daa:	b91d      	cbnz	r5, 8016db4 <_strtod_l+0x18c>
 8016dac:	9b04      	ldr	r3, [sp, #16]
 8016dae:	4303      	orrs	r3, r0
 8016db0:	d098      	beq.n	8016ce4 <_strtod_l+0xbc>
 8016db2:	2500      	movs	r5, #0
 8016db4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016db8:	f108 0301 	add.w	r3, r8, #1
 8016dbc:	931d      	str	r3, [sp, #116]	; 0x74
 8016dbe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016dc2:	2b2b      	cmp	r3, #43	; 0x2b
 8016dc4:	d075      	beq.n	8016eb2 <_strtod_l+0x28a>
 8016dc6:	2b2d      	cmp	r3, #45	; 0x2d
 8016dc8:	d07b      	beq.n	8016ec2 <_strtod_l+0x29a>
 8016dca:	f04f 0c00 	mov.w	ip, #0
 8016dce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016dd2:	2909      	cmp	r1, #9
 8016dd4:	f240 8082 	bls.w	8016edc <_strtod_l+0x2b4>
 8016dd8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016ddc:	2600      	movs	r6, #0
 8016dde:	e09d      	b.n	8016f1c <_strtod_l+0x2f4>
 8016de0:	2300      	movs	r3, #0
 8016de2:	e7c4      	b.n	8016d6e <_strtod_l+0x146>
 8016de4:	2f08      	cmp	r7, #8
 8016de6:	bfd8      	it	le
 8016de8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016dea:	f100 0001 	add.w	r0, r0, #1
 8016dee:	bfda      	itte	le
 8016df0:	fb02 3301 	mlale	r3, r2, r1, r3
 8016df4:	9309      	strle	r3, [sp, #36]	; 0x24
 8016df6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016dfa:	3701      	adds	r7, #1
 8016dfc:	901d      	str	r0, [sp, #116]	; 0x74
 8016dfe:	e7bf      	b.n	8016d80 <_strtod_l+0x158>
 8016e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e02:	195a      	adds	r2, r3, r5
 8016e04:	921d      	str	r2, [sp, #116]	; 0x74
 8016e06:	5d5b      	ldrb	r3, [r3, r5]
 8016e08:	2f00      	cmp	r7, #0
 8016e0a:	d037      	beq.n	8016e7c <_strtod_l+0x254>
 8016e0c:	9007      	str	r0, [sp, #28]
 8016e0e:	463d      	mov	r5, r7
 8016e10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016e14:	2a09      	cmp	r2, #9
 8016e16:	d912      	bls.n	8016e3e <_strtod_l+0x216>
 8016e18:	2201      	movs	r2, #1
 8016e1a:	e7c2      	b.n	8016da2 <_strtod_l+0x17a>
 8016e1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e1e:	1c5a      	adds	r2, r3, #1
 8016e20:	921d      	str	r2, [sp, #116]	; 0x74
 8016e22:	785b      	ldrb	r3, [r3, #1]
 8016e24:	3001      	adds	r0, #1
 8016e26:	2b30      	cmp	r3, #48	; 0x30
 8016e28:	d0f8      	beq.n	8016e1c <_strtod_l+0x1f4>
 8016e2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016e2e:	2a08      	cmp	r2, #8
 8016e30:	f200 84db 	bhi.w	80177ea <_strtod_l+0xbc2>
 8016e34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016e36:	9007      	str	r0, [sp, #28]
 8016e38:	2000      	movs	r0, #0
 8016e3a:	920a      	str	r2, [sp, #40]	; 0x28
 8016e3c:	4605      	mov	r5, r0
 8016e3e:	3b30      	subs	r3, #48	; 0x30
 8016e40:	f100 0201 	add.w	r2, r0, #1
 8016e44:	d014      	beq.n	8016e70 <_strtod_l+0x248>
 8016e46:	9907      	ldr	r1, [sp, #28]
 8016e48:	4411      	add	r1, r2
 8016e4a:	9107      	str	r1, [sp, #28]
 8016e4c:	462a      	mov	r2, r5
 8016e4e:	eb00 0e05 	add.w	lr, r0, r5
 8016e52:	210a      	movs	r1, #10
 8016e54:	4572      	cmp	r2, lr
 8016e56:	d113      	bne.n	8016e80 <_strtod_l+0x258>
 8016e58:	182a      	adds	r2, r5, r0
 8016e5a:	2a08      	cmp	r2, #8
 8016e5c:	f105 0501 	add.w	r5, r5, #1
 8016e60:	4405      	add	r5, r0
 8016e62:	dc1c      	bgt.n	8016e9e <_strtod_l+0x276>
 8016e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016e66:	220a      	movs	r2, #10
 8016e68:	fb02 3301 	mla	r3, r2, r1, r3
 8016e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e6e:	2200      	movs	r2, #0
 8016e70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e72:	1c59      	adds	r1, r3, #1
 8016e74:	911d      	str	r1, [sp, #116]	; 0x74
 8016e76:	785b      	ldrb	r3, [r3, #1]
 8016e78:	4610      	mov	r0, r2
 8016e7a:	e7c9      	b.n	8016e10 <_strtod_l+0x1e8>
 8016e7c:	4638      	mov	r0, r7
 8016e7e:	e7d2      	b.n	8016e26 <_strtod_l+0x1fe>
 8016e80:	2a08      	cmp	r2, #8
 8016e82:	dc04      	bgt.n	8016e8e <_strtod_l+0x266>
 8016e84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016e86:	434e      	muls	r6, r1
 8016e88:	9609      	str	r6, [sp, #36]	; 0x24
 8016e8a:	3201      	adds	r2, #1
 8016e8c:	e7e2      	b.n	8016e54 <_strtod_l+0x22c>
 8016e8e:	f102 0c01 	add.w	ip, r2, #1
 8016e92:	f1bc 0f10 	cmp.w	ip, #16
 8016e96:	bfd8      	it	le
 8016e98:	fb01 f909 	mulle.w	r9, r1, r9
 8016e9c:	e7f5      	b.n	8016e8a <_strtod_l+0x262>
 8016e9e:	2d10      	cmp	r5, #16
 8016ea0:	bfdc      	itt	le
 8016ea2:	220a      	movle	r2, #10
 8016ea4:	fb02 3909 	mlale	r9, r2, r9, r3
 8016ea8:	e7e1      	b.n	8016e6e <_strtod_l+0x246>
 8016eaa:	2300      	movs	r3, #0
 8016eac:	9307      	str	r3, [sp, #28]
 8016eae:	2201      	movs	r2, #1
 8016eb0:	e77c      	b.n	8016dac <_strtod_l+0x184>
 8016eb2:	f04f 0c00 	mov.w	ip, #0
 8016eb6:	f108 0302 	add.w	r3, r8, #2
 8016eba:	931d      	str	r3, [sp, #116]	; 0x74
 8016ebc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016ec0:	e785      	b.n	8016dce <_strtod_l+0x1a6>
 8016ec2:	f04f 0c01 	mov.w	ip, #1
 8016ec6:	e7f6      	b.n	8016eb6 <_strtod_l+0x28e>
 8016ec8:	0801cb70 	.word	0x0801cb70
 8016ecc:	0801c91c 	.word	0x0801c91c
 8016ed0:	7ff00000 	.word	0x7ff00000
 8016ed4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ed6:	1c59      	adds	r1, r3, #1
 8016ed8:	911d      	str	r1, [sp, #116]	; 0x74
 8016eda:	785b      	ldrb	r3, [r3, #1]
 8016edc:	2b30      	cmp	r3, #48	; 0x30
 8016ede:	d0f9      	beq.n	8016ed4 <_strtod_l+0x2ac>
 8016ee0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016ee4:	2908      	cmp	r1, #8
 8016ee6:	f63f af79 	bhi.w	8016ddc <_strtod_l+0x1b4>
 8016eea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016eee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ef0:	9308      	str	r3, [sp, #32]
 8016ef2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ef4:	1c59      	adds	r1, r3, #1
 8016ef6:	911d      	str	r1, [sp, #116]	; 0x74
 8016ef8:	785b      	ldrb	r3, [r3, #1]
 8016efa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8016efe:	2e09      	cmp	r6, #9
 8016f00:	d937      	bls.n	8016f72 <_strtod_l+0x34a>
 8016f02:	9e08      	ldr	r6, [sp, #32]
 8016f04:	1b89      	subs	r1, r1, r6
 8016f06:	2908      	cmp	r1, #8
 8016f08:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016f0c:	dc02      	bgt.n	8016f14 <_strtod_l+0x2ec>
 8016f0e:	4576      	cmp	r6, lr
 8016f10:	bfa8      	it	ge
 8016f12:	4676      	movge	r6, lr
 8016f14:	f1bc 0f00 	cmp.w	ip, #0
 8016f18:	d000      	beq.n	8016f1c <_strtod_l+0x2f4>
 8016f1a:	4276      	negs	r6, r6
 8016f1c:	2d00      	cmp	r5, #0
 8016f1e:	d14f      	bne.n	8016fc0 <_strtod_l+0x398>
 8016f20:	9904      	ldr	r1, [sp, #16]
 8016f22:	4301      	orrs	r1, r0
 8016f24:	f47f aec2 	bne.w	8016cac <_strtod_l+0x84>
 8016f28:	2a00      	cmp	r2, #0
 8016f2a:	f47f aedb 	bne.w	8016ce4 <_strtod_l+0xbc>
 8016f2e:	2b69      	cmp	r3, #105	; 0x69
 8016f30:	d027      	beq.n	8016f82 <_strtod_l+0x35a>
 8016f32:	dc24      	bgt.n	8016f7e <_strtod_l+0x356>
 8016f34:	2b49      	cmp	r3, #73	; 0x49
 8016f36:	d024      	beq.n	8016f82 <_strtod_l+0x35a>
 8016f38:	2b4e      	cmp	r3, #78	; 0x4e
 8016f3a:	f47f aed3 	bne.w	8016ce4 <_strtod_l+0xbc>
 8016f3e:	499e      	ldr	r1, [pc, #632]	; (80171b8 <_strtod_l+0x590>)
 8016f40:	a81d      	add	r0, sp, #116	; 0x74
 8016f42:	f001 fe41 	bl	8018bc8 <__match>
 8016f46:	2800      	cmp	r0, #0
 8016f48:	f43f aecc 	beq.w	8016ce4 <_strtod_l+0xbc>
 8016f4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f4e:	781b      	ldrb	r3, [r3, #0]
 8016f50:	2b28      	cmp	r3, #40	; 0x28
 8016f52:	d12d      	bne.n	8016fb0 <_strtod_l+0x388>
 8016f54:	4999      	ldr	r1, [pc, #612]	; (80171bc <_strtod_l+0x594>)
 8016f56:	aa20      	add	r2, sp, #128	; 0x80
 8016f58:	a81d      	add	r0, sp, #116	; 0x74
 8016f5a:	f001 fe49 	bl	8018bf0 <__hexnan>
 8016f5e:	2805      	cmp	r0, #5
 8016f60:	d126      	bne.n	8016fb0 <_strtod_l+0x388>
 8016f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f64:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016f68:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016f6c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016f70:	e69c      	b.n	8016cac <_strtod_l+0x84>
 8016f72:	210a      	movs	r1, #10
 8016f74:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016f78:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016f7c:	e7b9      	b.n	8016ef2 <_strtod_l+0x2ca>
 8016f7e:	2b6e      	cmp	r3, #110	; 0x6e
 8016f80:	e7db      	b.n	8016f3a <_strtod_l+0x312>
 8016f82:	498f      	ldr	r1, [pc, #572]	; (80171c0 <_strtod_l+0x598>)
 8016f84:	a81d      	add	r0, sp, #116	; 0x74
 8016f86:	f001 fe1f 	bl	8018bc8 <__match>
 8016f8a:	2800      	cmp	r0, #0
 8016f8c:	f43f aeaa 	beq.w	8016ce4 <_strtod_l+0xbc>
 8016f90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f92:	498c      	ldr	r1, [pc, #560]	; (80171c4 <_strtod_l+0x59c>)
 8016f94:	3b01      	subs	r3, #1
 8016f96:	a81d      	add	r0, sp, #116	; 0x74
 8016f98:	931d      	str	r3, [sp, #116]	; 0x74
 8016f9a:	f001 fe15 	bl	8018bc8 <__match>
 8016f9e:	b910      	cbnz	r0, 8016fa6 <_strtod_l+0x37e>
 8016fa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	931d      	str	r3, [sp, #116]	; 0x74
 8016fa6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80171d4 <_strtod_l+0x5ac>
 8016faa:	f04f 0a00 	mov.w	sl, #0
 8016fae:	e67d      	b.n	8016cac <_strtod_l+0x84>
 8016fb0:	4885      	ldr	r0, [pc, #532]	; (80171c8 <_strtod_l+0x5a0>)
 8016fb2:	f002 fda9 	bl	8019b08 <nan>
 8016fb6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016fba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016fbe:	e675      	b.n	8016cac <_strtod_l+0x84>
 8016fc0:	9b07      	ldr	r3, [sp, #28]
 8016fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016fc4:	1af3      	subs	r3, r6, r3
 8016fc6:	2f00      	cmp	r7, #0
 8016fc8:	bf08      	it	eq
 8016fca:	462f      	moveq	r7, r5
 8016fcc:	2d10      	cmp	r5, #16
 8016fce:	9308      	str	r3, [sp, #32]
 8016fd0:	46a8      	mov	r8, r5
 8016fd2:	bfa8      	it	ge
 8016fd4:	f04f 0810 	movge.w	r8, #16
 8016fd8:	f7e9 fab4 	bl	8000544 <__aeabi_ui2d>
 8016fdc:	2d09      	cmp	r5, #9
 8016fde:	4682      	mov	sl, r0
 8016fe0:	468b      	mov	fp, r1
 8016fe2:	dd13      	ble.n	801700c <_strtod_l+0x3e4>
 8016fe4:	4b79      	ldr	r3, [pc, #484]	; (80171cc <_strtod_l+0x5a4>)
 8016fe6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016fea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016fee:	f7e9 fb23 	bl	8000638 <__aeabi_dmul>
 8016ff2:	4682      	mov	sl, r0
 8016ff4:	4648      	mov	r0, r9
 8016ff6:	468b      	mov	fp, r1
 8016ff8:	f7e9 faa4 	bl	8000544 <__aeabi_ui2d>
 8016ffc:	4602      	mov	r2, r0
 8016ffe:	460b      	mov	r3, r1
 8017000:	4650      	mov	r0, sl
 8017002:	4659      	mov	r1, fp
 8017004:	f7e9 f962 	bl	80002cc <__adddf3>
 8017008:	4682      	mov	sl, r0
 801700a:	468b      	mov	fp, r1
 801700c:	2d0f      	cmp	r5, #15
 801700e:	dc38      	bgt.n	8017082 <_strtod_l+0x45a>
 8017010:	9b08      	ldr	r3, [sp, #32]
 8017012:	2b00      	cmp	r3, #0
 8017014:	f43f ae4a 	beq.w	8016cac <_strtod_l+0x84>
 8017018:	dd24      	ble.n	8017064 <_strtod_l+0x43c>
 801701a:	2b16      	cmp	r3, #22
 801701c:	dc0b      	bgt.n	8017036 <_strtod_l+0x40e>
 801701e:	4d6b      	ldr	r5, [pc, #428]	; (80171cc <_strtod_l+0x5a4>)
 8017020:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017024:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017028:	4652      	mov	r2, sl
 801702a:	465b      	mov	r3, fp
 801702c:	f7e9 fb04 	bl	8000638 <__aeabi_dmul>
 8017030:	4682      	mov	sl, r0
 8017032:	468b      	mov	fp, r1
 8017034:	e63a      	b.n	8016cac <_strtod_l+0x84>
 8017036:	9a08      	ldr	r2, [sp, #32]
 8017038:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801703c:	4293      	cmp	r3, r2
 801703e:	db20      	blt.n	8017082 <_strtod_l+0x45a>
 8017040:	4c62      	ldr	r4, [pc, #392]	; (80171cc <_strtod_l+0x5a4>)
 8017042:	f1c5 050f 	rsb	r5, r5, #15
 8017046:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801704a:	4652      	mov	r2, sl
 801704c:	465b      	mov	r3, fp
 801704e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017052:	f7e9 faf1 	bl	8000638 <__aeabi_dmul>
 8017056:	9b08      	ldr	r3, [sp, #32]
 8017058:	1b5d      	subs	r5, r3, r5
 801705a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801705e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017062:	e7e3      	b.n	801702c <_strtod_l+0x404>
 8017064:	9b08      	ldr	r3, [sp, #32]
 8017066:	3316      	adds	r3, #22
 8017068:	db0b      	blt.n	8017082 <_strtod_l+0x45a>
 801706a:	9b07      	ldr	r3, [sp, #28]
 801706c:	4a57      	ldr	r2, [pc, #348]	; (80171cc <_strtod_l+0x5a4>)
 801706e:	1b9e      	subs	r6, r3, r6
 8017070:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017074:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017078:	4650      	mov	r0, sl
 801707a:	4659      	mov	r1, fp
 801707c:	f7e9 fc06 	bl	800088c <__aeabi_ddiv>
 8017080:	e7d6      	b.n	8017030 <_strtod_l+0x408>
 8017082:	9b08      	ldr	r3, [sp, #32]
 8017084:	eba5 0808 	sub.w	r8, r5, r8
 8017088:	4498      	add	r8, r3
 801708a:	f1b8 0f00 	cmp.w	r8, #0
 801708e:	dd71      	ble.n	8017174 <_strtod_l+0x54c>
 8017090:	f018 030f 	ands.w	r3, r8, #15
 8017094:	d00a      	beq.n	80170ac <_strtod_l+0x484>
 8017096:	494d      	ldr	r1, [pc, #308]	; (80171cc <_strtod_l+0x5a4>)
 8017098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801709c:	4652      	mov	r2, sl
 801709e:	465b      	mov	r3, fp
 80170a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170a4:	f7e9 fac8 	bl	8000638 <__aeabi_dmul>
 80170a8:	4682      	mov	sl, r0
 80170aa:	468b      	mov	fp, r1
 80170ac:	f038 080f 	bics.w	r8, r8, #15
 80170b0:	d04d      	beq.n	801714e <_strtod_l+0x526>
 80170b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80170b6:	dd22      	ble.n	80170fe <_strtod_l+0x4d6>
 80170b8:	2500      	movs	r5, #0
 80170ba:	462e      	mov	r6, r5
 80170bc:	9509      	str	r5, [sp, #36]	; 0x24
 80170be:	9507      	str	r5, [sp, #28]
 80170c0:	2322      	movs	r3, #34	; 0x22
 80170c2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80171d4 <_strtod_l+0x5ac>
 80170c6:	6023      	str	r3, [r4, #0]
 80170c8:	f04f 0a00 	mov.w	sl, #0
 80170cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	f43f adec 	beq.w	8016cac <_strtod_l+0x84>
 80170d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80170d6:	4620      	mov	r0, r4
 80170d8:	f001 fe84 	bl	8018de4 <_Bfree>
 80170dc:	9907      	ldr	r1, [sp, #28]
 80170de:	4620      	mov	r0, r4
 80170e0:	f001 fe80 	bl	8018de4 <_Bfree>
 80170e4:	4631      	mov	r1, r6
 80170e6:	4620      	mov	r0, r4
 80170e8:	f001 fe7c 	bl	8018de4 <_Bfree>
 80170ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170ee:	4620      	mov	r0, r4
 80170f0:	f001 fe78 	bl	8018de4 <_Bfree>
 80170f4:	4629      	mov	r1, r5
 80170f6:	4620      	mov	r0, r4
 80170f8:	f001 fe74 	bl	8018de4 <_Bfree>
 80170fc:	e5d6      	b.n	8016cac <_strtod_l+0x84>
 80170fe:	2300      	movs	r3, #0
 8017100:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017104:	4650      	mov	r0, sl
 8017106:	4659      	mov	r1, fp
 8017108:	4699      	mov	r9, r3
 801710a:	f1b8 0f01 	cmp.w	r8, #1
 801710e:	dc21      	bgt.n	8017154 <_strtod_l+0x52c>
 8017110:	b10b      	cbz	r3, 8017116 <_strtod_l+0x4ee>
 8017112:	4682      	mov	sl, r0
 8017114:	468b      	mov	fp, r1
 8017116:	4b2e      	ldr	r3, [pc, #184]	; (80171d0 <_strtod_l+0x5a8>)
 8017118:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801711c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017120:	4652      	mov	r2, sl
 8017122:	465b      	mov	r3, fp
 8017124:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017128:	f7e9 fa86 	bl	8000638 <__aeabi_dmul>
 801712c:	4b29      	ldr	r3, [pc, #164]	; (80171d4 <_strtod_l+0x5ac>)
 801712e:	460a      	mov	r2, r1
 8017130:	400b      	ands	r3, r1
 8017132:	4929      	ldr	r1, [pc, #164]	; (80171d8 <_strtod_l+0x5b0>)
 8017134:	428b      	cmp	r3, r1
 8017136:	4682      	mov	sl, r0
 8017138:	d8be      	bhi.n	80170b8 <_strtod_l+0x490>
 801713a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801713e:	428b      	cmp	r3, r1
 8017140:	bf86      	itte	hi
 8017142:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80171dc <_strtod_l+0x5b4>
 8017146:	f04f 3aff 	movhi.w	sl, #4294967295
 801714a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801714e:	2300      	movs	r3, #0
 8017150:	9304      	str	r3, [sp, #16]
 8017152:	e081      	b.n	8017258 <_strtod_l+0x630>
 8017154:	f018 0f01 	tst.w	r8, #1
 8017158:	d007      	beq.n	801716a <_strtod_l+0x542>
 801715a:	4b1d      	ldr	r3, [pc, #116]	; (80171d0 <_strtod_l+0x5a8>)
 801715c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017164:	f7e9 fa68 	bl	8000638 <__aeabi_dmul>
 8017168:	2301      	movs	r3, #1
 801716a:	f109 0901 	add.w	r9, r9, #1
 801716e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017172:	e7ca      	b.n	801710a <_strtod_l+0x4e2>
 8017174:	d0eb      	beq.n	801714e <_strtod_l+0x526>
 8017176:	f1c8 0800 	rsb	r8, r8, #0
 801717a:	f018 020f 	ands.w	r2, r8, #15
 801717e:	d00a      	beq.n	8017196 <_strtod_l+0x56e>
 8017180:	4b12      	ldr	r3, [pc, #72]	; (80171cc <_strtod_l+0x5a4>)
 8017182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017186:	4650      	mov	r0, sl
 8017188:	4659      	mov	r1, fp
 801718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801718e:	f7e9 fb7d 	bl	800088c <__aeabi_ddiv>
 8017192:	4682      	mov	sl, r0
 8017194:	468b      	mov	fp, r1
 8017196:	ea5f 1828 	movs.w	r8, r8, asr #4
 801719a:	d0d8      	beq.n	801714e <_strtod_l+0x526>
 801719c:	f1b8 0f1f 	cmp.w	r8, #31
 80171a0:	dd1e      	ble.n	80171e0 <_strtod_l+0x5b8>
 80171a2:	2500      	movs	r5, #0
 80171a4:	462e      	mov	r6, r5
 80171a6:	9509      	str	r5, [sp, #36]	; 0x24
 80171a8:	9507      	str	r5, [sp, #28]
 80171aa:	2322      	movs	r3, #34	; 0x22
 80171ac:	f04f 0a00 	mov.w	sl, #0
 80171b0:	f04f 0b00 	mov.w	fp, #0
 80171b4:	6023      	str	r3, [r4, #0]
 80171b6:	e789      	b.n	80170cc <_strtod_l+0x4a4>
 80171b8:	0801c8ed 	.word	0x0801c8ed
 80171bc:	0801c930 	.word	0x0801c930
 80171c0:	0801c8e5 	.word	0x0801c8e5
 80171c4:	0801ca74 	.word	0x0801ca74
 80171c8:	0801cd30 	.word	0x0801cd30
 80171cc:	0801cc10 	.word	0x0801cc10
 80171d0:	0801cbe8 	.word	0x0801cbe8
 80171d4:	7ff00000 	.word	0x7ff00000
 80171d8:	7ca00000 	.word	0x7ca00000
 80171dc:	7fefffff 	.word	0x7fefffff
 80171e0:	f018 0310 	ands.w	r3, r8, #16
 80171e4:	bf18      	it	ne
 80171e6:	236a      	movne	r3, #106	; 0x6a
 80171e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80175a0 <_strtod_l+0x978>
 80171ec:	9304      	str	r3, [sp, #16]
 80171ee:	4650      	mov	r0, sl
 80171f0:	4659      	mov	r1, fp
 80171f2:	2300      	movs	r3, #0
 80171f4:	f018 0f01 	tst.w	r8, #1
 80171f8:	d004      	beq.n	8017204 <_strtod_l+0x5dc>
 80171fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80171fe:	f7e9 fa1b 	bl	8000638 <__aeabi_dmul>
 8017202:	2301      	movs	r3, #1
 8017204:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017208:	f109 0908 	add.w	r9, r9, #8
 801720c:	d1f2      	bne.n	80171f4 <_strtod_l+0x5cc>
 801720e:	b10b      	cbz	r3, 8017214 <_strtod_l+0x5ec>
 8017210:	4682      	mov	sl, r0
 8017212:	468b      	mov	fp, r1
 8017214:	9b04      	ldr	r3, [sp, #16]
 8017216:	b1bb      	cbz	r3, 8017248 <_strtod_l+0x620>
 8017218:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801721c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017220:	2b00      	cmp	r3, #0
 8017222:	4659      	mov	r1, fp
 8017224:	dd10      	ble.n	8017248 <_strtod_l+0x620>
 8017226:	2b1f      	cmp	r3, #31
 8017228:	f340 8128 	ble.w	801747c <_strtod_l+0x854>
 801722c:	2b34      	cmp	r3, #52	; 0x34
 801722e:	bfde      	ittt	le
 8017230:	3b20      	suble	r3, #32
 8017232:	f04f 32ff 	movle.w	r2, #4294967295
 8017236:	fa02 f303 	lslle.w	r3, r2, r3
 801723a:	f04f 0a00 	mov.w	sl, #0
 801723e:	bfcc      	ite	gt
 8017240:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017244:	ea03 0b01 	andle.w	fp, r3, r1
 8017248:	2200      	movs	r2, #0
 801724a:	2300      	movs	r3, #0
 801724c:	4650      	mov	r0, sl
 801724e:	4659      	mov	r1, fp
 8017250:	f7e9 fc5a 	bl	8000b08 <__aeabi_dcmpeq>
 8017254:	2800      	cmp	r0, #0
 8017256:	d1a4      	bne.n	80171a2 <_strtod_l+0x57a>
 8017258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801725a:	9300      	str	r3, [sp, #0]
 801725c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801725e:	462b      	mov	r3, r5
 8017260:	463a      	mov	r2, r7
 8017262:	4620      	mov	r0, r4
 8017264:	f001 fe2a 	bl	8018ebc <__s2b>
 8017268:	9009      	str	r0, [sp, #36]	; 0x24
 801726a:	2800      	cmp	r0, #0
 801726c:	f43f af24 	beq.w	80170b8 <_strtod_l+0x490>
 8017270:	9b07      	ldr	r3, [sp, #28]
 8017272:	1b9e      	subs	r6, r3, r6
 8017274:	9b08      	ldr	r3, [sp, #32]
 8017276:	2b00      	cmp	r3, #0
 8017278:	bfb4      	ite	lt
 801727a:	4633      	movlt	r3, r6
 801727c:	2300      	movge	r3, #0
 801727e:	9310      	str	r3, [sp, #64]	; 0x40
 8017280:	9b08      	ldr	r3, [sp, #32]
 8017282:	2500      	movs	r5, #0
 8017284:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017288:	9318      	str	r3, [sp, #96]	; 0x60
 801728a:	462e      	mov	r6, r5
 801728c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801728e:	4620      	mov	r0, r4
 8017290:	6859      	ldr	r1, [r3, #4]
 8017292:	f001 fd67 	bl	8018d64 <_Balloc>
 8017296:	9007      	str	r0, [sp, #28]
 8017298:	2800      	cmp	r0, #0
 801729a:	f43f af11 	beq.w	80170c0 <_strtod_l+0x498>
 801729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172a0:	691a      	ldr	r2, [r3, #16]
 80172a2:	3202      	adds	r2, #2
 80172a4:	f103 010c 	add.w	r1, r3, #12
 80172a8:	0092      	lsls	r2, r2, #2
 80172aa:	300c      	adds	r0, #12
 80172ac:	f7fe fdb4 	bl	8015e18 <memcpy>
 80172b0:	ec4b ab10 	vmov	d0, sl, fp
 80172b4:	aa20      	add	r2, sp, #128	; 0x80
 80172b6:	a91f      	add	r1, sp, #124	; 0x7c
 80172b8:	4620      	mov	r0, r4
 80172ba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80172be:	f002 f939 	bl	8019534 <__d2b>
 80172c2:	901e      	str	r0, [sp, #120]	; 0x78
 80172c4:	2800      	cmp	r0, #0
 80172c6:	f43f aefb 	beq.w	80170c0 <_strtod_l+0x498>
 80172ca:	2101      	movs	r1, #1
 80172cc:	4620      	mov	r0, r4
 80172ce:	f001 fe8f 	bl	8018ff0 <__i2b>
 80172d2:	4606      	mov	r6, r0
 80172d4:	2800      	cmp	r0, #0
 80172d6:	f43f aef3 	beq.w	80170c0 <_strtod_l+0x498>
 80172da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80172dc:	9904      	ldr	r1, [sp, #16]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	bfab      	itete	ge
 80172e2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80172e4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80172e6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80172e8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80172ec:	bfac      	ite	ge
 80172ee:	eb03 0902 	addge.w	r9, r3, r2
 80172f2:	1ad7      	sublt	r7, r2, r3
 80172f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80172f6:	eba3 0801 	sub.w	r8, r3, r1
 80172fa:	4490      	add	r8, r2
 80172fc:	4ba3      	ldr	r3, [pc, #652]	; (801758c <_strtod_l+0x964>)
 80172fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8017302:	4598      	cmp	r8, r3
 8017304:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017308:	f280 80cc 	bge.w	80174a4 <_strtod_l+0x87c>
 801730c:	eba3 0308 	sub.w	r3, r3, r8
 8017310:	2b1f      	cmp	r3, #31
 8017312:	eba2 0203 	sub.w	r2, r2, r3
 8017316:	f04f 0101 	mov.w	r1, #1
 801731a:	f300 80b6 	bgt.w	801748a <_strtod_l+0x862>
 801731e:	fa01 f303 	lsl.w	r3, r1, r3
 8017322:	9311      	str	r3, [sp, #68]	; 0x44
 8017324:	2300      	movs	r3, #0
 8017326:	930c      	str	r3, [sp, #48]	; 0x30
 8017328:	eb09 0802 	add.w	r8, r9, r2
 801732c:	9b04      	ldr	r3, [sp, #16]
 801732e:	45c1      	cmp	r9, r8
 8017330:	4417      	add	r7, r2
 8017332:	441f      	add	r7, r3
 8017334:	464b      	mov	r3, r9
 8017336:	bfa8      	it	ge
 8017338:	4643      	movge	r3, r8
 801733a:	42bb      	cmp	r3, r7
 801733c:	bfa8      	it	ge
 801733e:	463b      	movge	r3, r7
 8017340:	2b00      	cmp	r3, #0
 8017342:	bfc2      	ittt	gt
 8017344:	eba8 0803 	subgt.w	r8, r8, r3
 8017348:	1aff      	subgt	r7, r7, r3
 801734a:	eba9 0903 	subgt.w	r9, r9, r3
 801734e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017350:	2b00      	cmp	r3, #0
 8017352:	dd17      	ble.n	8017384 <_strtod_l+0x75c>
 8017354:	4631      	mov	r1, r6
 8017356:	461a      	mov	r2, r3
 8017358:	4620      	mov	r0, r4
 801735a:	f001 ff05 	bl	8019168 <__pow5mult>
 801735e:	4606      	mov	r6, r0
 8017360:	2800      	cmp	r0, #0
 8017362:	f43f aead 	beq.w	80170c0 <_strtod_l+0x498>
 8017366:	4601      	mov	r1, r0
 8017368:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801736a:	4620      	mov	r0, r4
 801736c:	f001 fe56 	bl	801901c <__multiply>
 8017370:	900f      	str	r0, [sp, #60]	; 0x3c
 8017372:	2800      	cmp	r0, #0
 8017374:	f43f aea4 	beq.w	80170c0 <_strtod_l+0x498>
 8017378:	991e      	ldr	r1, [sp, #120]	; 0x78
 801737a:	4620      	mov	r0, r4
 801737c:	f001 fd32 	bl	8018de4 <_Bfree>
 8017380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017382:	931e      	str	r3, [sp, #120]	; 0x78
 8017384:	f1b8 0f00 	cmp.w	r8, #0
 8017388:	f300 8091 	bgt.w	80174ae <_strtod_l+0x886>
 801738c:	9b08      	ldr	r3, [sp, #32]
 801738e:	2b00      	cmp	r3, #0
 8017390:	dd08      	ble.n	80173a4 <_strtod_l+0x77c>
 8017392:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017394:	9907      	ldr	r1, [sp, #28]
 8017396:	4620      	mov	r0, r4
 8017398:	f001 fee6 	bl	8019168 <__pow5mult>
 801739c:	9007      	str	r0, [sp, #28]
 801739e:	2800      	cmp	r0, #0
 80173a0:	f43f ae8e 	beq.w	80170c0 <_strtod_l+0x498>
 80173a4:	2f00      	cmp	r7, #0
 80173a6:	dd08      	ble.n	80173ba <_strtod_l+0x792>
 80173a8:	9907      	ldr	r1, [sp, #28]
 80173aa:	463a      	mov	r2, r7
 80173ac:	4620      	mov	r0, r4
 80173ae:	f001 ff35 	bl	801921c <__lshift>
 80173b2:	9007      	str	r0, [sp, #28]
 80173b4:	2800      	cmp	r0, #0
 80173b6:	f43f ae83 	beq.w	80170c0 <_strtod_l+0x498>
 80173ba:	f1b9 0f00 	cmp.w	r9, #0
 80173be:	dd08      	ble.n	80173d2 <_strtod_l+0x7aa>
 80173c0:	4631      	mov	r1, r6
 80173c2:	464a      	mov	r2, r9
 80173c4:	4620      	mov	r0, r4
 80173c6:	f001 ff29 	bl	801921c <__lshift>
 80173ca:	4606      	mov	r6, r0
 80173cc:	2800      	cmp	r0, #0
 80173ce:	f43f ae77 	beq.w	80170c0 <_strtod_l+0x498>
 80173d2:	9a07      	ldr	r2, [sp, #28]
 80173d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80173d6:	4620      	mov	r0, r4
 80173d8:	f001 ffa8 	bl	801932c <__mdiff>
 80173dc:	4605      	mov	r5, r0
 80173de:	2800      	cmp	r0, #0
 80173e0:	f43f ae6e 	beq.w	80170c0 <_strtod_l+0x498>
 80173e4:	68c3      	ldr	r3, [r0, #12]
 80173e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80173e8:	2300      	movs	r3, #0
 80173ea:	60c3      	str	r3, [r0, #12]
 80173ec:	4631      	mov	r1, r6
 80173ee:	f001 ff81 	bl	80192f4 <__mcmp>
 80173f2:	2800      	cmp	r0, #0
 80173f4:	da65      	bge.n	80174c2 <_strtod_l+0x89a>
 80173f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173f8:	ea53 030a 	orrs.w	r3, r3, sl
 80173fc:	f040 8087 	bne.w	801750e <_strtod_l+0x8e6>
 8017400:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017404:	2b00      	cmp	r3, #0
 8017406:	f040 8082 	bne.w	801750e <_strtod_l+0x8e6>
 801740a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801740e:	0d1b      	lsrs	r3, r3, #20
 8017410:	051b      	lsls	r3, r3, #20
 8017412:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017416:	d97a      	bls.n	801750e <_strtod_l+0x8e6>
 8017418:	696b      	ldr	r3, [r5, #20]
 801741a:	b913      	cbnz	r3, 8017422 <_strtod_l+0x7fa>
 801741c:	692b      	ldr	r3, [r5, #16]
 801741e:	2b01      	cmp	r3, #1
 8017420:	dd75      	ble.n	801750e <_strtod_l+0x8e6>
 8017422:	4629      	mov	r1, r5
 8017424:	2201      	movs	r2, #1
 8017426:	4620      	mov	r0, r4
 8017428:	f001 fef8 	bl	801921c <__lshift>
 801742c:	4631      	mov	r1, r6
 801742e:	4605      	mov	r5, r0
 8017430:	f001 ff60 	bl	80192f4 <__mcmp>
 8017434:	2800      	cmp	r0, #0
 8017436:	dd6a      	ble.n	801750e <_strtod_l+0x8e6>
 8017438:	9904      	ldr	r1, [sp, #16]
 801743a:	4a55      	ldr	r2, [pc, #340]	; (8017590 <_strtod_l+0x968>)
 801743c:	465b      	mov	r3, fp
 801743e:	2900      	cmp	r1, #0
 8017440:	f000 8085 	beq.w	801754e <_strtod_l+0x926>
 8017444:	ea02 010b 	and.w	r1, r2, fp
 8017448:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801744c:	dc7f      	bgt.n	801754e <_strtod_l+0x926>
 801744e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017452:	f77f aeaa 	ble.w	80171aa <_strtod_l+0x582>
 8017456:	4a4f      	ldr	r2, [pc, #316]	; (8017594 <_strtod_l+0x96c>)
 8017458:	2300      	movs	r3, #0
 801745a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801745e:	4650      	mov	r0, sl
 8017460:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017464:	4659      	mov	r1, fp
 8017466:	f7e9 f8e7 	bl	8000638 <__aeabi_dmul>
 801746a:	460b      	mov	r3, r1
 801746c:	4303      	orrs	r3, r0
 801746e:	bf08      	it	eq
 8017470:	2322      	moveq	r3, #34	; 0x22
 8017472:	4682      	mov	sl, r0
 8017474:	468b      	mov	fp, r1
 8017476:	bf08      	it	eq
 8017478:	6023      	streq	r3, [r4, #0]
 801747a:	e62b      	b.n	80170d4 <_strtod_l+0x4ac>
 801747c:	f04f 32ff 	mov.w	r2, #4294967295
 8017480:	fa02 f303 	lsl.w	r3, r2, r3
 8017484:	ea03 0a0a 	and.w	sl, r3, sl
 8017488:	e6de      	b.n	8017248 <_strtod_l+0x620>
 801748a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801748e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017492:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017496:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801749a:	fa01 f308 	lsl.w	r3, r1, r8
 801749e:	930c      	str	r3, [sp, #48]	; 0x30
 80174a0:	9111      	str	r1, [sp, #68]	; 0x44
 80174a2:	e741      	b.n	8017328 <_strtod_l+0x700>
 80174a4:	2300      	movs	r3, #0
 80174a6:	930c      	str	r3, [sp, #48]	; 0x30
 80174a8:	2301      	movs	r3, #1
 80174aa:	9311      	str	r3, [sp, #68]	; 0x44
 80174ac:	e73c      	b.n	8017328 <_strtod_l+0x700>
 80174ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80174b0:	4642      	mov	r2, r8
 80174b2:	4620      	mov	r0, r4
 80174b4:	f001 feb2 	bl	801921c <__lshift>
 80174b8:	901e      	str	r0, [sp, #120]	; 0x78
 80174ba:	2800      	cmp	r0, #0
 80174bc:	f47f af66 	bne.w	801738c <_strtod_l+0x764>
 80174c0:	e5fe      	b.n	80170c0 <_strtod_l+0x498>
 80174c2:	465f      	mov	r7, fp
 80174c4:	d16e      	bne.n	80175a4 <_strtod_l+0x97c>
 80174c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80174c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80174cc:	b342      	cbz	r2, 8017520 <_strtod_l+0x8f8>
 80174ce:	4a32      	ldr	r2, [pc, #200]	; (8017598 <_strtod_l+0x970>)
 80174d0:	4293      	cmp	r3, r2
 80174d2:	d128      	bne.n	8017526 <_strtod_l+0x8fe>
 80174d4:	9b04      	ldr	r3, [sp, #16]
 80174d6:	4650      	mov	r0, sl
 80174d8:	b1eb      	cbz	r3, 8017516 <_strtod_l+0x8ee>
 80174da:	4a2d      	ldr	r2, [pc, #180]	; (8017590 <_strtod_l+0x968>)
 80174dc:	403a      	ands	r2, r7
 80174de:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80174e2:	f04f 31ff 	mov.w	r1, #4294967295
 80174e6:	d819      	bhi.n	801751c <_strtod_l+0x8f4>
 80174e8:	0d12      	lsrs	r2, r2, #20
 80174ea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80174ee:	fa01 f303 	lsl.w	r3, r1, r3
 80174f2:	4298      	cmp	r0, r3
 80174f4:	d117      	bne.n	8017526 <_strtod_l+0x8fe>
 80174f6:	4b29      	ldr	r3, [pc, #164]	; (801759c <_strtod_l+0x974>)
 80174f8:	429f      	cmp	r7, r3
 80174fa:	d102      	bne.n	8017502 <_strtod_l+0x8da>
 80174fc:	3001      	adds	r0, #1
 80174fe:	f43f addf 	beq.w	80170c0 <_strtod_l+0x498>
 8017502:	4b23      	ldr	r3, [pc, #140]	; (8017590 <_strtod_l+0x968>)
 8017504:	403b      	ands	r3, r7
 8017506:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801750a:	f04f 0a00 	mov.w	sl, #0
 801750e:	9b04      	ldr	r3, [sp, #16]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d1a0      	bne.n	8017456 <_strtod_l+0x82e>
 8017514:	e5de      	b.n	80170d4 <_strtod_l+0x4ac>
 8017516:	f04f 33ff 	mov.w	r3, #4294967295
 801751a:	e7ea      	b.n	80174f2 <_strtod_l+0x8ca>
 801751c:	460b      	mov	r3, r1
 801751e:	e7e8      	b.n	80174f2 <_strtod_l+0x8ca>
 8017520:	ea53 030a 	orrs.w	r3, r3, sl
 8017524:	d088      	beq.n	8017438 <_strtod_l+0x810>
 8017526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017528:	b1db      	cbz	r3, 8017562 <_strtod_l+0x93a>
 801752a:	423b      	tst	r3, r7
 801752c:	d0ef      	beq.n	801750e <_strtod_l+0x8e6>
 801752e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017530:	9a04      	ldr	r2, [sp, #16]
 8017532:	4650      	mov	r0, sl
 8017534:	4659      	mov	r1, fp
 8017536:	b1c3      	cbz	r3, 801756a <_strtod_l+0x942>
 8017538:	f7ff fb58 	bl	8016bec <sulp>
 801753c:	4602      	mov	r2, r0
 801753e:	460b      	mov	r3, r1
 8017540:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017544:	f7e8 fec2 	bl	80002cc <__adddf3>
 8017548:	4682      	mov	sl, r0
 801754a:	468b      	mov	fp, r1
 801754c:	e7df      	b.n	801750e <_strtod_l+0x8e6>
 801754e:	4013      	ands	r3, r2
 8017550:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017554:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017558:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801755c:	f04f 3aff 	mov.w	sl, #4294967295
 8017560:	e7d5      	b.n	801750e <_strtod_l+0x8e6>
 8017562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017564:	ea13 0f0a 	tst.w	r3, sl
 8017568:	e7e0      	b.n	801752c <_strtod_l+0x904>
 801756a:	f7ff fb3f 	bl	8016bec <sulp>
 801756e:	4602      	mov	r2, r0
 8017570:	460b      	mov	r3, r1
 8017572:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017576:	f7e8 fea7 	bl	80002c8 <__aeabi_dsub>
 801757a:	2200      	movs	r2, #0
 801757c:	2300      	movs	r3, #0
 801757e:	4682      	mov	sl, r0
 8017580:	468b      	mov	fp, r1
 8017582:	f7e9 fac1 	bl	8000b08 <__aeabi_dcmpeq>
 8017586:	2800      	cmp	r0, #0
 8017588:	d0c1      	beq.n	801750e <_strtod_l+0x8e6>
 801758a:	e60e      	b.n	80171aa <_strtod_l+0x582>
 801758c:	fffffc02 	.word	0xfffffc02
 8017590:	7ff00000 	.word	0x7ff00000
 8017594:	39500000 	.word	0x39500000
 8017598:	000fffff 	.word	0x000fffff
 801759c:	7fefffff 	.word	0x7fefffff
 80175a0:	0801c948 	.word	0x0801c948
 80175a4:	4631      	mov	r1, r6
 80175a6:	4628      	mov	r0, r5
 80175a8:	f002 f820 	bl	80195ec <__ratio>
 80175ac:	ec59 8b10 	vmov	r8, r9, d0
 80175b0:	ee10 0a10 	vmov	r0, s0
 80175b4:	2200      	movs	r2, #0
 80175b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80175ba:	4649      	mov	r1, r9
 80175bc:	f7e9 fab8 	bl	8000b30 <__aeabi_dcmple>
 80175c0:	2800      	cmp	r0, #0
 80175c2:	d07c      	beq.n	80176be <_strtod_l+0xa96>
 80175c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d04c      	beq.n	8017664 <_strtod_l+0xa3c>
 80175ca:	4b95      	ldr	r3, [pc, #596]	; (8017820 <_strtod_l+0xbf8>)
 80175cc:	2200      	movs	r2, #0
 80175ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80175d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017820 <_strtod_l+0xbf8>
 80175d6:	f04f 0800 	mov.w	r8, #0
 80175da:	4b92      	ldr	r3, [pc, #584]	; (8017824 <_strtod_l+0xbfc>)
 80175dc:	403b      	ands	r3, r7
 80175de:	9311      	str	r3, [sp, #68]	; 0x44
 80175e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80175e2:	4b91      	ldr	r3, [pc, #580]	; (8017828 <_strtod_l+0xc00>)
 80175e4:	429a      	cmp	r2, r3
 80175e6:	f040 80b2 	bne.w	801774e <_strtod_l+0xb26>
 80175ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80175ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80175f2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80175f6:	ec4b ab10 	vmov	d0, sl, fp
 80175fa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80175fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017602:	f001 ff1b 	bl	801943c <__ulp>
 8017606:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801760a:	ec53 2b10 	vmov	r2, r3, d0
 801760e:	f7e9 f813 	bl	8000638 <__aeabi_dmul>
 8017612:	4652      	mov	r2, sl
 8017614:	465b      	mov	r3, fp
 8017616:	f7e8 fe59 	bl	80002cc <__adddf3>
 801761a:	460b      	mov	r3, r1
 801761c:	4981      	ldr	r1, [pc, #516]	; (8017824 <_strtod_l+0xbfc>)
 801761e:	4a83      	ldr	r2, [pc, #524]	; (801782c <_strtod_l+0xc04>)
 8017620:	4019      	ands	r1, r3
 8017622:	4291      	cmp	r1, r2
 8017624:	4682      	mov	sl, r0
 8017626:	d95e      	bls.n	80176e6 <_strtod_l+0xabe>
 8017628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801762a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801762e:	4293      	cmp	r3, r2
 8017630:	d103      	bne.n	801763a <_strtod_l+0xa12>
 8017632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017634:	3301      	adds	r3, #1
 8017636:	f43f ad43 	beq.w	80170c0 <_strtod_l+0x498>
 801763a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017838 <_strtod_l+0xc10>
 801763e:	f04f 3aff 	mov.w	sl, #4294967295
 8017642:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017644:	4620      	mov	r0, r4
 8017646:	f001 fbcd 	bl	8018de4 <_Bfree>
 801764a:	9907      	ldr	r1, [sp, #28]
 801764c:	4620      	mov	r0, r4
 801764e:	f001 fbc9 	bl	8018de4 <_Bfree>
 8017652:	4631      	mov	r1, r6
 8017654:	4620      	mov	r0, r4
 8017656:	f001 fbc5 	bl	8018de4 <_Bfree>
 801765a:	4629      	mov	r1, r5
 801765c:	4620      	mov	r0, r4
 801765e:	f001 fbc1 	bl	8018de4 <_Bfree>
 8017662:	e613      	b.n	801728c <_strtod_l+0x664>
 8017664:	f1ba 0f00 	cmp.w	sl, #0
 8017668:	d11b      	bne.n	80176a2 <_strtod_l+0xa7a>
 801766a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801766e:	b9f3      	cbnz	r3, 80176ae <_strtod_l+0xa86>
 8017670:	4b6b      	ldr	r3, [pc, #428]	; (8017820 <_strtod_l+0xbf8>)
 8017672:	2200      	movs	r2, #0
 8017674:	4640      	mov	r0, r8
 8017676:	4649      	mov	r1, r9
 8017678:	f7e9 fa50 	bl	8000b1c <__aeabi_dcmplt>
 801767c:	b9d0      	cbnz	r0, 80176b4 <_strtod_l+0xa8c>
 801767e:	4640      	mov	r0, r8
 8017680:	4649      	mov	r1, r9
 8017682:	4b6b      	ldr	r3, [pc, #428]	; (8017830 <_strtod_l+0xc08>)
 8017684:	2200      	movs	r2, #0
 8017686:	f7e8 ffd7 	bl	8000638 <__aeabi_dmul>
 801768a:	4680      	mov	r8, r0
 801768c:	4689      	mov	r9, r1
 801768e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017692:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017696:	931b      	str	r3, [sp, #108]	; 0x6c
 8017698:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801769c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80176a0:	e79b      	b.n	80175da <_strtod_l+0x9b2>
 80176a2:	f1ba 0f01 	cmp.w	sl, #1
 80176a6:	d102      	bne.n	80176ae <_strtod_l+0xa86>
 80176a8:	2f00      	cmp	r7, #0
 80176aa:	f43f ad7e 	beq.w	80171aa <_strtod_l+0x582>
 80176ae:	4b61      	ldr	r3, [pc, #388]	; (8017834 <_strtod_l+0xc0c>)
 80176b0:	2200      	movs	r2, #0
 80176b2:	e78c      	b.n	80175ce <_strtod_l+0x9a6>
 80176b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017830 <_strtod_l+0xc08>
 80176b8:	f04f 0800 	mov.w	r8, #0
 80176bc:	e7e7      	b.n	801768e <_strtod_l+0xa66>
 80176be:	4b5c      	ldr	r3, [pc, #368]	; (8017830 <_strtod_l+0xc08>)
 80176c0:	4640      	mov	r0, r8
 80176c2:	4649      	mov	r1, r9
 80176c4:	2200      	movs	r2, #0
 80176c6:	f7e8 ffb7 	bl	8000638 <__aeabi_dmul>
 80176ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176cc:	4680      	mov	r8, r0
 80176ce:	4689      	mov	r9, r1
 80176d0:	b933      	cbnz	r3, 80176e0 <_strtod_l+0xab8>
 80176d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80176d6:	9012      	str	r0, [sp, #72]	; 0x48
 80176d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80176da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80176de:	e7dd      	b.n	801769c <_strtod_l+0xa74>
 80176e0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80176e4:	e7f9      	b.n	80176da <_strtod_l+0xab2>
 80176e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80176ea:	9b04      	ldr	r3, [sp, #16]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d1a8      	bne.n	8017642 <_strtod_l+0xa1a>
 80176f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80176f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80176f6:	0d1b      	lsrs	r3, r3, #20
 80176f8:	051b      	lsls	r3, r3, #20
 80176fa:	429a      	cmp	r2, r3
 80176fc:	d1a1      	bne.n	8017642 <_strtod_l+0xa1a>
 80176fe:	4640      	mov	r0, r8
 8017700:	4649      	mov	r1, r9
 8017702:	f7e9 fc57 	bl	8000fb4 <__aeabi_d2lz>
 8017706:	f7e8 ff69 	bl	80005dc <__aeabi_l2d>
 801770a:	4602      	mov	r2, r0
 801770c:	460b      	mov	r3, r1
 801770e:	4640      	mov	r0, r8
 8017710:	4649      	mov	r1, r9
 8017712:	f7e8 fdd9 	bl	80002c8 <__aeabi_dsub>
 8017716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017718:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801771c:	ea43 030a 	orr.w	r3, r3, sl
 8017720:	4313      	orrs	r3, r2
 8017722:	4680      	mov	r8, r0
 8017724:	4689      	mov	r9, r1
 8017726:	d053      	beq.n	80177d0 <_strtod_l+0xba8>
 8017728:	a335      	add	r3, pc, #212	; (adr r3, 8017800 <_strtod_l+0xbd8>)
 801772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801772e:	f7e9 f9f5 	bl	8000b1c <__aeabi_dcmplt>
 8017732:	2800      	cmp	r0, #0
 8017734:	f47f acce 	bne.w	80170d4 <_strtod_l+0x4ac>
 8017738:	a333      	add	r3, pc, #204	; (adr r3, 8017808 <_strtod_l+0xbe0>)
 801773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801773e:	4640      	mov	r0, r8
 8017740:	4649      	mov	r1, r9
 8017742:	f7e9 fa09 	bl	8000b58 <__aeabi_dcmpgt>
 8017746:	2800      	cmp	r0, #0
 8017748:	f43f af7b 	beq.w	8017642 <_strtod_l+0xa1a>
 801774c:	e4c2      	b.n	80170d4 <_strtod_l+0x4ac>
 801774e:	9b04      	ldr	r3, [sp, #16]
 8017750:	b333      	cbz	r3, 80177a0 <_strtod_l+0xb78>
 8017752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017754:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017758:	d822      	bhi.n	80177a0 <_strtod_l+0xb78>
 801775a:	a32d      	add	r3, pc, #180	; (adr r3, 8017810 <_strtod_l+0xbe8>)
 801775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017760:	4640      	mov	r0, r8
 8017762:	4649      	mov	r1, r9
 8017764:	f7e9 f9e4 	bl	8000b30 <__aeabi_dcmple>
 8017768:	b1a0      	cbz	r0, 8017794 <_strtod_l+0xb6c>
 801776a:	4649      	mov	r1, r9
 801776c:	4640      	mov	r0, r8
 801776e:	f7e9 fa3b 	bl	8000be8 <__aeabi_d2uiz>
 8017772:	2801      	cmp	r0, #1
 8017774:	bf38      	it	cc
 8017776:	2001      	movcc	r0, #1
 8017778:	f7e8 fee4 	bl	8000544 <__aeabi_ui2d>
 801777c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801777e:	4680      	mov	r8, r0
 8017780:	4689      	mov	r9, r1
 8017782:	bb13      	cbnz	r3, 80177ca <_strtod_l+0xba2>
 8017784:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017788:	9014      	str	r0, [sp, #80]	; 0x50
 801778a:	9315      	str	r3, [sp, #84]	; 0x54
 801778c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017790:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017796:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017798:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801779c:	1a9b      	subs	r3, r3, r2
 801779e:	930d      	str	r3, [sp, #52]	; 0x34
 80177a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80177a4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80177a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80177ac:	f001 fe46 	bl	801943c <__ulp>
 80177b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80177b4:	ec53 2b10 	vmov	r2, r3, d0
 80177b8:	f7e8 ff3e 	bl	8000638 <__aeabi_dmul>
 80177bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80177c0:	f7e8 fd84 	bl	80002cc <__adddf3>
 80177c4:	4682      	mov	sl, r0
 80177c6:	468b      	mov	fp, r1
 80177c8:	e78f      	b.n	80176ea <_strtod_l+0xac2>
 80177ca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80177ce:	e7dd      	b.n	801778c <_strtod_l+0xb64>
 80177d0:	a311      	add	r3, pc, #68	; (adr r3, 8017818 <_strtod_l+0xbf0>)
 80177d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177d6:	f7e9 f9a1 	bl	8000b1c <__aeabi_dcmplt>
 80177da:	e7b4      	b.n	8017746 <_strtod_l+0xb1e>
 80177dc:	2300      	movs	r3, #0
 80177de:	930e      	str	r3, [sp, #56]	; 0x38
 80177e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80177e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177e4:	6013      	str	r3, [r2, #0]
 80177e6:	f7ff ba65 	b.w	8016cb4 <_strtod_l+0x8c>
 80177ea:	2b65      	cmp	r3, #101	; 0x65
 80177ec:	f43f ab5d 	beq.w	8016eaa <_strtod_l+0x282>
 80177f0:	2b45      	cmp	r3, #69	; 0x45
 80177f2:	f43f ab5a 	beq.w	8016eaa <_strtod_l+0x282>
 80177f6:	2201      	movs	r2, #1
 80177f8:	f7ff bb92 	b.w	8016f20 <_strtod_l+0x2f8>
 80177fc:	f3af 8000 	nop.w
 8017800:	94a03595 	.word	0x94a03595
 8017804:	3fdfffff 	.word	0x3fdfffff
 8017808:	35afe535 	.word	0x35afe535
 801780c:	3fe00000 	.word	0x3fe00000
 8017810:	ffc00000 	.word	0xffc00000
 8017814:	41dfffff 	.word	0x41dfffff
 8017818:	94a03595 	.word	0x94a03595
 801781c:	3fcfffff 	.word	0x3fcfffff
 8017820:	3ff00000 	.word	0x3ff00000
 8017824:	7ff00000 	.word	0x7ff00000
 8017828:	7fe00000 	.word	0x7fe00000
 801782c:	7c9fffff 	.word	0x7c9fffff
 8017830:	3fe00000 	.word	0x3fe00000
 8017834:	bff00000 	.word	0xbff00000
 8017838:	7fefffff 	.word	0x7fefffff

0801783c <_strtod_r>:
 801783c:	4b01      	ldr	r3, [pc, #4]	; (8017844 <_strtod_r+0x8>)
 801783e:	f7ff b9f3 	b.w	8016c28 <_strtod_l>
 8017842:	bf00      	nop
 8017844:	200012b8 	.word	0x200012b8

08017848 <_strtol_l.isra.0>:
 8017848:	2b01      	cmp	r3, #1
 801784a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801784e:	d001      	beq.n	8017854 <_strtol_l.isra.0+0xc>
 8017850:	2b24      	cmp	r3, #36	; 0x24
 8017852:	d906      	bls.n	8017862 <_strtol_l.isra.0+0x1a>
 8017854:	f7fe fab6 	bl	8015dc4 <__errno>
 8017858:	2316      	movs	r3, #22
 801785a:	6003      	str	r3, [r0, #0]
 801785c:	2000      	movs	r0, #0
 801785e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017862:	4f3a      	ldr	r7, [pc, #232]	; (801794c <_strtol_l.isra.0+0x104>)
 8017864:	468e      	mov	lr, r1
 8017866:	4676      	mov	r6, lr
 8017868:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801786c:	5de5      	ldrb	r5, [r4, r7]
 801786e:	f015 0508 	ands.w	r5, r5, #8
 8017872:	d1f8      	bne.n	8017866 <_strtol_l.isra.0+0x1e>
 8017874:	2c2d      	cmp	r4, #45	; 0x2d
 8017876:	d134      	bne.n	80178e2 <_strtol_l.isra.0+0x9a>
 8017878:	f89e 4000 	ldrb.w	r4, [lr]
 801787c:	f04f 0801 	mov.w	r8, #1
 8017880:	f106 0e02 	add.w	lr, r6, #2
 8017884:	2b00      	cmp	r3, #0
 8017886:	d05c      	beq.n	8017942 <_strtol_l.isra.0+0xfa>
 8017888:	2b10      	cmp	r3, #16
 801788a:	d10c      	bne.n	80178a6 <_strtol_l.isra.0+0x5e>
 801788c:	2c30      	cmp	r4, #48	; 0x30
 801788e:	d10a      	bne.n	80178a6 <_strtol_l.isra.0+0x5e>
 8017890:	f89e 4000 	ldrb.w	r4, [lr]
 8017894:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017898:	2c58      	cmp	r4, #88	; 0x58
 801789a:	d14d      	bne.n	8017938 <_strtol_l.isra.0+0xf0>
 801789c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80178a0:	2310      	movs	r3, #16
 80178a2:	f10e 0e02 	add.w	lr, lr, #2
 80178a6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80178aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80178ae:	2600      	movs	r6, #0
 80178b0:	fbbc f9f3 	udiv	r9, ip, r3
 80178b4:	4635      	mov	r5, r6
 80178b6:	fb03 ca19 	mls	sl, r3, r9, ip
 80178ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80178be:	2f09      	cmp	r7, #9
 80178c0:	d818      	bhi.n	80178f4 <_strtol_l.isra.0+0xac>
 80178c2:	463c      	mov	r4, r7
 80178c4:	42a3      	cmp	r3, r4
 80178c6:	dd24      	ble.n	8017912 <_strtol_l.isra.0+0xca>
 80178c8:	2e00      	cmp	r6, #0
 80178ca:	db1f      	blt.n	801790c <_strtol_l.isra.0+0xc4>
 80178cc:	45a9      	cmp	r9, r5
 80178ce:	d31d      	bcc.n	801790c <_strtol_l.isra.0+0xc4>
 80178d0:	d101      	bne.n	80178d6 <_strtol_l.isra.0+0x8e>
 80178d2:	45a2      	cmp	sl, r4
 80178d4:	db1a      	blt.n	801790c <_strtol_l.isra.0+0xc4>
 80178d6:	fb05 4503 	mla	r5, r5, r3, r4
 80178da:	2601      	movs	r6, #1
 80178dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80178e0:	e7eb      	b.n	80178ba <_strtol_l.isra.0+0x72>
 80178e2:	2c2b      	cmp	r4, #43	; 0x2b
 80178e4:	bf08      	it	eq
 80178e6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80178ea:	46a8      	mov	r8, r5
 80178ec:	bf08      	it	eq
 80178ee:	f106 0e02 	addeq.w	lr, r6, #2
 80178f2:	e7c7      	b.n	8017884 <_strtol_l.isra.0+0x3c>
 80178f4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80178f8:	2f19      	cmp	r7, #25
 80178fa:	d801      	bhi.n	8017900 <_strtol_l.isra.0+0xb8>
 80178fc:	3c37      	subs	r4, #55	; 0x37
 80178fe:	e7e1      	b.n	80178c4 <_strtol_l.isra.0+0x7c>
 8017900:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017904:	2f19      	cmp	r7, #25
 8017906:	d804      	bhi.n	8017912 <_strtol_l.isra.0+0xca>
 8017908:	3c57      	subs	r4, #87	; 0x57
 801790a:	e7db      	b.n	80178c4 <_strtol_l.isra.0+0x7c>
 801790c:	f04f 36ff 	mov.w	r6, #4294967295
 8017910:	e7e4      	b.n	80178dc <_strtol_l.isra.0+0x94>
 8017912:	2e00      	cmp	r6, #0
 8017914:	da05      	bge.n	8017922 <_strtol_l.isra.0+0xda>
 8017916:	2322      	movs	r3, #34	; 0x22
 8017918:	6003      	str	r3, [r0, #0]
 801791a:	4665      	mov	r5, ip
 801791c:	b942      	cbnz	r2, 8017930 <_strtol_l.isra.0+0xe8>
 801791e:	4628      	mov	r0, r5
 8017920:	e79d      	b.n	801785e <_strtol_l.isra.0+0x16>
 8017922:	f1b8 0f00 	cmp.w	r8, #0
 8017926:	d000      	beq.n	801792a <_strtol_l.isra.0+0xe2>
 8017928:	426d      	negs	r5, r5
 801792a:	2a00      	cmp	r2, #0
 801792c:	d0f7      	beq.n	801791e <_strtol_l.isra.0+0xd6>
 801792e:	b10e      	cbz	r6, 8017934 <_strtol_l.isra.0+0xec>
 8017930:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017934:	6011      	str	r1, [r2, #0]
 8017936:	e7f2      	b.n	801791e <_strtol_l.isra.0+0xd6>
 8017938:	2430      	movs	r4, #48	; 0x30
 801793a:	2b00      	cmp	r3, #0
 801793c:	d1b3      	bne.n	80178a6 <_strtol_l.isra.0+0x5e>
 801793e:	2308      	movs	r3, #8
 8017940:	e7b1      	b.n	80178a6 <_strtol_l.isra.0+0x5e>
 8017942:	2c30      	cmp	r4, #48	; 0x30
 8017944:	d0a4      	beq.n	8017890 <_strtol_l.isra.0+0x48>
 8017946:	230a      	movs	r3, #10
 8017948:	e7ad      	b.n	80178a6 <_strtol_l.isra.0+0x5e>
 801794a:	bf00      	nop
 801794c:	0801c971 	.word	0x0801c971

08017950 <_strtol_r>:
 8017950:	f7ff bf7a 	b.w	8017848 <_strtol_l.isra.0>

08017954 <quorem>:
 8017954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017958:	6903      	ldr	r3, [r0, #16]
 801795a:	690c      	ldr	r4, [r1, #16]
 801795c:	42a3      	cmp	r3, r4
 801795e:	4607      	mov	r7, r0
 8017960:	f2c0 8081 	blt.w	8017a66 <quorem+0x112>
 8017964:	3c01      	subs	r4, #1
 8017966:	f101 0814 	add.w	r8, r1, #20
 801796a:	f100 0514 	add.w	r5, r0, #20
 801796e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017972:	9301      	str	r3, [sp, #4]
 8017974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801797c:	3301      	adds	r3, #1
 801797e:	429a      	cmp	r2, r3
 8017980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017988:	fbb2 f6f3 	udiv	r6, r2, r3
 801798c:	d331      	bcc.n	80179f2 <quorem+0x9e>
 801798e:	f04f 0e00 	mov.w	lr, #0
 8017992:	4640      	mov	r0, r8
 8017994:	46ac      	mov	ip, r5
 8017996:	46f2      	mov	sl, lr
 8017998:	f850 2b04 	ldr.w	r2, [r0], #4
 801799c:	b293      	uxth	r3, r2
 801799e:	fb06 e303 	mla	r3, r6, r3, lr
 80179a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	ebaa 0303 	sub.w	r3, sl, r3
 80179ac:	0c12      	lsrs	r2, r2, #16
 80179ae:	f8dc a000 	ldr.w	sl, [ip]
 80179b2:	fb06 e202 	mla	r2, r6, r2, lr
 80179b6:	fa13 f38a 	uxtah	r3, r3, sl
 80179ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80179be:	fa1f fa82 	uxth.w	sl, r2
 80179c2:	f8dc 2000 	ldr.w	r2, [ip]
 80179c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80179ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80179ce:	b29b      	uxth	r3, r3
 80179d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80179d4:	4581      	cmp	r9, r0
 80179d6:	f84c 3b04 	str.w	r3, [ip], #4
 80179da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80179de:	d2db      	bcs.n	8017998 <quorem+0x44>
 80179e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80179e4:	b92b      	cbnz	r3, 80179f2 <quorem+0x9e>
 80179e6:	9b01      	ldr	r3, [sp, #4]
 80179e8:	3b04      	subs	r3, #4
 80179ea:	429d      	cmp	r5, r3
 80179ec:	461a      	mov	r2, r3
 80179ee:	d32e      	bcc.n	8017a4e <quorem+0xfa>
 80179f0:	613c      	str	r4, [r7, #16]
 80179f2:	4638      	mov	r0, r7
 80179f4:	f001 fc7e 	bl	80192f4 <__mcmp>
 80179f8:	2800      	cmp	r0, #0
 80179fa:	db24      	blt.n	8017a46 <quorem+0xf2>
 80179fc:	3601      	adds	r6, #1
 80179fe:	4628      	mov	r0, r5
 8017a00:	f04f 0c00 	mov.w	ip, #0
 8017a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8017a08:	f8d0 e000 	ldr.w	lr, [r0]
 8017a0c:	b293      	uxth	r3, r2
 8017a0e:	ebac 0303 	sub.w	r3, ip, r3
 8017a12:	0c12      	lsrs	r2, r2, #16
 8017a14:	fa13 f38e 	uxtah	r3, r3, lr
 8017a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017a20:	b29b      	uxth	r3, r3
 8017a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a26:	45c1      	cmp	r9, r8
 8017a28:	f840 3b04 	str.w	r3, [r0], #4
 8017a2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017a30:	d2e8      	bcs.n	8017a04 <quorem+0xb0>
 8017a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017a3a:	b922      	cbnz	r2, 8017a46 <quorem+0xf2>
 8017a3c:	3b04      	subs	r3, #4
 8017a3e:	429d      	cmp	r5, r3
 8017a40:	461a      	mov	r2, r3
 8017a42:	d30a      	bcc.n	8017a5a <quorem+0x106>
 8017a44:	613c      	str	r4, [r7, #16]
 8017a46:	4630      	mov	r0, r6
 8017a48:	b003      	add	sp, #12
 8017a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a4e:	6812      	ldr	r2, [r2, #0]
 8017a50:	3b04      	subs	r3, #4
 8017a52:	2a00      	cmp	r2, #0
 8017a54:	d1cc      	bne.n	80179f0 <quorem+0x9c>
 8017a56:	3c01      	subs	r4, #1
 8017a58:	e7c7      	b.n	80179ea <quorem+0x96>
 8017a5a:	6812      	ldr	r2, [r2, #0]
 8017a5c:	3b04      	subs	r3, #4
 8017a5e:	2a00      	cmp	r2, #0
 8017a60:	d1f0      	bne.n	8017a44 <quorem+0xf0>
 8017a62:	3c01      	subs	r4, #1
 8017a64:	e7eb      	b.n	8017a3e <quorem+0xea>
 8017a66:	2000      	movs	r0, #0
 8017a68:	e7ee      	b.n	8017a48 <quorem+0xf4>
 8017a6a:	0000      	movs	r0, r0
 8017a6c:	0000      	movs	r0, r0
	...

08017a70 <_dtoa_r>:
 8017a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a74:	ed2d 8b02 	vpush	{d8}
 8017a78:	ec57 6b10 	vmov	r6, r7, d0
 8017a7c:	b095      	sub	sp, #84	; 0x54
 8017a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017a84:	9105      	str	r1, [sp, #20]
 8017a86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8017a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a90:	b975      	cbnz	r5, 8017ab0 <_dtoa_r+0x40>
 8017a92:	2010      	movs	r0, #16
 8017a94:	f001 f94c 	bl	8018d30 <malloc>
 8017a98:	4602      	mov	r2, r0
 8017a9a:	6260      	str	r0, [r4, #36]	; 0x24
 8017a9c:	b920      	cbnz	r0, 8017aa8 <_dtoa_r+0x38>
 8017a9e:	4bb2      	ldr	r3, [pc, #712]	; (8017d68 <_dtoa_r+0x2f8>)
 8017aa0:	21ea      	movs	r1, #234	; 0xea
 8017aa2:	48b2      	ldr	r0, [pc, #712]	; (8017d6c <_dtoa_r+0x2fc>)
 8017aa4:	f002 f868 	bl	8019b78 <__assert_func>
 8017aa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017aac:	6005      	str	r5, [r0, #0]
 8017aae:	60c5      	str	r5, [r0, #12]
 8017ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ab2:	6819      	ldr	r1, [r3, #0]
 8017ab4:	b151      	cbz	r1, 8017acc <_dtoa_r+0x5c>
 8017ab6:	685a      	ldr	r2, [r3, #4]
 8017ab8:	604a      	str	r2, [r1, #4]
 8017aba:	2301      	movs	r3, #1
 8017abc:	4093      	lsls	r3, r2
 8017abe:	608b      	str	r3, [r1, #8]
 8017ac0:	4620      	mov	r0, r4
 8017ac2:	f001 f98f 	bl	8018de4 <_Bfree>
 8017ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ac8:	2200      	movs	r2, #0
 8017aca:	601a      	str	r2, [r3, #0]
 8017acc:	1e3b      	subs	r3, r7, #0
 8017ace:	bfb9      	ittee	lt
 8017ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017ad4:	9303      	strlt	r3, [sp, #12]
 8017ad6:	2300      	movge	r3, #0
 8017ad8:	f8c8 3000 	strge.w	r3, [r8]
 8017adc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017ae0:	4ba3      	ldr	r3, [pc, #652]	; (8017d70 <_dtoa_r+0x300>)
 8017ae2:	bfbc      	itt	lt
 8017ae4:	2201      	movlt	r2, #1
 8017ae6:	f8c8 2000 	strlt.w	r2, [r8]
 8017aea:	ea33 0309 	bics.w	r3, r3, r9
 8017aee:	d11b      	bne.n	8017b28 <_dtoa_r+0xb8>
 8017af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017af2:	f242 730f 	movw	r3, #9999	; 0x270f
 8017af6:	6013      	str	r3, [r2, #0]
 8017af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017afc:	4333      	orrs	r3, r6
 8017afe:	f000 857a 	beq.w	80185f6 <_dtoa_r+0xb86>
 8017b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b04:	b963      	cbnz	r3, 8017b20 <_dtoa_r+0xb0>
 8017b06:	4b9b      	ldr	r3, [pc, #620]	; (8017d74 <_dtoa_r+0x304>)
 8017b08:	e024      	b.n	8017b54 <_dtoa_r+0xe4>
 8017b0a:	4b9b      	ldr	r3, [pc, #620]	; (8017d78 <_dtoa_r+0x308>)
 8017b0c:	9300      	str	r3, [sp, #0]
 8017b0e:	3308      	adds	r3, #8
 8017b10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017b12:	6013      	str	r3, [r2, #0]
 8017b14:	9800      	ldr	r0, [sp, #0]
 8017b16:	b015      	add	sp, #84	; 0x54
 8017b18:	ecbd 8b02 	vpop	{d8}
 8017b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b20:	4b94      	ldr	r3, [pc, #592]	; (8017d74 <_dtoa_r+0x304>)
 8017b22:	9300      	str	r3, [sp, #0]
 8017b24:	3303      	adds	r3, #3
 8017b26:	e7f3      	b.n	8017b10 <_dtoa_r+0xa0>
 8017b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	ec51 0b17 	vmov	r0, r1, d7
 8017b32:	2300      	movs	r3, #0
 8017b34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017b38:	f7e8 ffe6 	bl	8000b08 <__aeabi_dcmpeq>
 8017b3c:	4680      	mov	r8, r0
 8017b3e:	b158      	cbz	r0, 8017b58 <_dtoa_r+0xe8>
 8017b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017b42:	2301      	movs	r3, #1
 8017b44:	6013      	str	r3, [r2, #0]
 8017b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	f000 8551 	beq.w	80185f0 <_dtoa_r+0xb80>
 8017b4e:	488b      	ldr	r0, [pc, #556]	; (8017d7c <_dtoa_r+0x30c>)
 8017b50:	6018      	str	r0, [r3, #0]
 8017b52:	1e43      	subs	r3, r0, #1
 8017b54:	9300      	str	r3, [sp, #0]
 8017b56:	e7dd      	b.n	8017b14 <_dtoa_r+0xa4>
 8017b58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017b5c:	aa12      	add	r2, sp, #72	; 0x48
 8017b5e:	a913      	add	r1, sp, #76	; 0x4c
 8017b60:	4620      	mov	r0, r4
 8017b62:	f001 fce7 	bl	8019534 <__d2b>
 8017b66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017b6a:	4683      	mov	fp, r0
 8017b6c:	2d00      	cmp	r5, #0
 8017b6e:	d07c      	beq.n	8017c6a <_dtoa_r+0x1fa>
 8017b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017b7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017b7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017b82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017b86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017b8a:	4b7d      	ldr	r3, [pc, #500]	; (8017d80 <_dtoa_r+0x310>)
 8017b8c:	2200      	movs	r2, #0
 8017b8e:	4630      	mov	r0, r6
 8017b90:	4639      	mov	r1, r7
 8017b92:	f7e8 fb99 	bl	80002c8 <__aeabi_dsub>
 8017b96:	a36e      	add	r3, pc, #440	; (adr r3, 8017d50 <_dtoa_r+0x2e0>)
 8017b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b9c:	f7e8 fd4c 	bl	8000638 <__aeabi_dmul>
 8017ba0:	a36d      	add	r3, pc, #436	; (adr r3, 8017d58 <_dtoa_r+0x2e8>)
 8017ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ba6:	f7e8 fb91 	bl	80002cc <__adddf3>
 8017baa:	4606      	mov	r6, r0
 8017bac:	4628      	mov	r0, r5
 8017bae:	460f      	mov	r7, r1
 8017bb0:	f7e8 fcd8 	bl	8000564 <__aeabi_i2d>
 8017bb4:	a36a      	add	r3, pc, #424	; (adr r3, 8017d60 <_dtoa_r+0x2f0>)
 8017bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bba:	f7e8 fd3d 	bl	8000638 <__aeabi_dmul>
 8017bbe:	4602      	mov	r2, r0
 8017bc0:	460b      	mov	r3, r1
 8017bc2:	4630      	mov	r0, r6
 8017bc4:	4639      	mov	r1, r7
 8017bc6:	f7e8 fb81 	bl	80002cc <__adddf3>
 8017bca:	4606      	mov	r6, r0
 8017bcc:	460f      	mov	r7, r1
 8017bce:	f7e8 ffe3 	bl	8000b98 <__aeabi_d2iz>
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	4682      	mov	sl, r0
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	4630      	mov	r0, r6
 8017bda:	4639      	mov	r1, r7
 8017bdc:	f7e8 ff9e 	bl	8000b1c <__aeabi_dcmplt>
 8017be0:	b148      	cbz	r0, 8017bf6 <_dtoa_r+0x186>
 8017be2:	4650      	mov	r0, sl
 8017be4:	f7e8 fcbe 	bl	8000564 <__aeabi_i2d>
 8017be8:	4632      	mov	r2, r6
 8017bea:	463b      	mov	r3, r7
 8017bec:	f7e8 ff8c 	bl	8000b08 <__aeabi_dcmpeq>
 8017bf0:	b908      	cbnz	r0, 8017bf6 <_dtoa_r+0x186>
 8017bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017bf6:	f1ba 0f16 	cmp.w	sl, #22
 8017bfa:	d854      	bhi.n	8017ca6 <_dtoa_r+0x236>
 8017bfc:	4b61      	ldr	r3, [pc, #388]	; (8017d84 <_dtoa_r+0x314>)
 8017bfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017c0a:	f7e8 ff87 	bl	8000b1c <__aeabi_dcmplt>
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	d04b      	beq.n	8017caa <_dtoa_r+0x23a>
 8017c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c16:	2300      	movs	r3, #0
 8017c18:	930e      	str	r3, [sp, #56]	; 0x38
 8017c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017c1c:	1b5d      	subs	r5, r3, r5
 8017c1e:	1e6b      	subs	r3, r5, #1
 8017c20:	9304      	str	r3, [sp, #16]
 8017c22:	bf43      	ittte	mi
 8017c24:	2300      	movmi	r3, #0
 8017c26:	f1c5 0801 	rsbmi	r8, r5, #1
 8017c2a:	9304      	strmi	r3, [sp, #16]
 8017c2c:	f04f 0800 	movpl.w	r8, #0
 8017c30:	f1ba 0f00 	cmp.w	sl, #0
 8017c34:	db3b      	blt.n	8017cae <_dtoa_r+0x23e>
 8017c36:	9b04      	ldr	r3, [sp, #16]
 8017c38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017c3c:	4453      	add	r3, sl
 8017c3e:	9304      	str	r3, [sp, #16]
 8017c40:	2300      	movs	r3, #0
 8017c42:	9306      	str	r3, [sp, #24]
 8017c44:	9b05      	ldr	r3, [sp, #20]
 8017c46:	2b09      	cmp	r3, #9
 8017c48:	d869      	bhi.n	8017d1e <_dtoa_r+0x2ae>
 8017c4a:	2b05      	cmp	r3, #5
 8017c4c:	bfc4      	itt	gt
 8017c4e:	3b04      	subgt	r3, #4
 8017c50:	9305      	strgt	r3, [sp, #20]
 8017c52:	9b05      	ldr	r3, [sp, #20]
 8017c54:	f1a3 0302 	sub.w	r3, r3, #2
 8017c58:	bfcc      	ite	gt
 8017c5a:	2500      	movgt	r5, #0
 8017c5c:	2501      	movle	r5, #1
 8017c5e:	2b03      	cmp	r3, #3
 8017c60:	d869      	bhi.n	8017d36 <_dtoa_r+0x2c6>
 8017c62:	e8df f003 	tbb	[pc, r3]
 8017c66:	4e2c      	.short	0x4e2c
 8017c68:	5a4c      	.short	0x5a4c
 8017c6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017c6e:	441d      	add	r5, r3
 8017c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017c74:	2b20      	cmp	r3, #32
 8017c76:	bfc1      	itttt	gt
 8017c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017c7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017c80:	fa09 f303 	lslgt.w	r3, r9, r3
 8017c84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017c88:	bfda      	itte	le
 8017c8a:	f1c3 0320 	rsble	r3, r3, #32
 8017c8e:	fa06 f003 	lslle.w	r0, r6, r3
 8017c92:	4318      	orrgt	r0, r3
 8017c94:	f7e8 fc56 	bl	8000544 <__aeabi_ui2d>
 8017c98:	2301      	movs	r3, #1
 8017c9a:	4606      	mov	r6, r0
 8017c9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017ca0:	3d01      	subs	r5, #1
 8017ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8017ca4:	e771      	b.n	8017b8a <_dtoa_r+0x11a>
 8017ca6:	2301      	movs	r3, #1
 8017ca8:	e7b6      	b.n	8017c18 <_dtoa_r+0x1a8>
 8017caa:	900e      	str	r0, [sp, #56]	; 0x38
 8017cac:	e7b5      	b.n	8017c1a <_dtoa_r+0x1aa>
 8017cae:	f1ca 0300 	rsb	r3, sl, #0
 8017cb2:	9306      	str	r3, [sp, #24]
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	eba8 080a 	sub.w	r8, r8, sl
 8017cba:	930d      	str	r3, [sp, #52]	; 0x34
 8017cbc:	e7c2      	b.n	8017c44 <_dtoa_r+0x1d4>
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	9308      	str	r3, [sp, #32]
 8017cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	dc39      	bgt.n	8017d3c <_dtoa_r+0x2cc>
 8017cc8:	f04f 0901 	mov.w	r9, #1
 8017ccc:	f8cd 9004 	str.w	r9, [sp, #4]
 8017cd0:	464b      	mov	r3, r9
 8017cd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017cd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017cd8:	2200      	movs	r2, #0
 8017cda:	6042      	str	r2, [r0, #4]
 8017cdc:	2204      	movs	r2, #4
 8017cde:	f102 0614 	add.w	r6, r2, #20
 8017ce2:	429e      	cmp	r6, r3
 8017ce4:	6841      	ldr	r1, [r0, #4]
 8017ce6:	d92f      	bls.n	8017d48 <_dtoa_r+0x2d8>
 8017ce8:	4620      	mov	r0, r4
 8017cea:	f001 f83b 	bl	8018d64 <_Balloc>
 8017cee:	9000      	str	r0, [sp, #0]
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	d14b      	bne.n	8017d8c <_dtoa_r+0x31c>
 8017cf4:	4b24      	ldr	r3, [pc, #144]	; (8017d88 <_dtoa_r+0x318>)
 8017cf6:	4602      	mov	r2, r0
 8017cf8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017cfc:	e6d1      	b.n	8017aa2 <_dtoa_r+0x32>
 8017cfe:	2301      	movs	r3, #1
 8017d00:	e7de      	b.n	8017cc0 <_dtoa_r+0x250>
 8017d02:	2300      	movs	r3, #0
 8017d04:	9308      	str	r3, [sp, #32]
 8017d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d08:	eb0a 0903 	add.w	r9, sl, r3
 8017d0c:	f109 0301 	add.w	r3, r9, #1
 8017d10:	2b01      	cmp	r3, #1
 8017d12:	9301      	str	r3, [sp, #4]
 8017d14:	bfb8      	it	lt
 8017d16:	2301      	movlt	r3, #1
 8017d18:	e7dd      	b.n	8017cd6 <_dtoa_r+0x266>
 8017d1a:	2301      	movs	r3, #1
 8017d1c:	e7f2      	b.n	8017d04 <_dtoa_r+0x294>
 8017d1e:	2501      	movs	r5, #1
 8017d20:	2300      	movs	r3, #0
 8017d22:	9305      	str	r3, [sp, #20]
 8017d24:	9508      	str	r5, [sp, #32]
 8017d26:	f04f 39ff 	mov.w	r9, #4294967295
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017d30:	2312      	movs	r3, #18
 8017d32:	9209      	str	r2, [sp, #36]	; 0x24
 8017d34:	e7cf      	b.n	8017cd6 <_dtoa_r+0x266>
 8017d36:	2301      	movs	r3, #1
 8017d38:	9308      	str	r3, [sp, #32]
 8017d3a:	e7f4      	b.n	8017d26 <_dtoa_r+0x2b6>
 8017d3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017d40:	f8cd 9004 	str.w	r9, [sp, #4]
 8017d44:	464b      	mov	r3, r9
 8017d46:	e7c6      	b.n	8017cd6 <_dtoa_r+0x266>
 8017d48:	3101      	adds	r1, #1
 8017d4a:	6041      	str	r1, [r0, #4]
 8017d4c:	0052      	lsls	r2, r2, #1
 8017d4e:	e7c6      	b.n	8017cde <_dtoa_r+0x26e>
 8017d50:	636f4361 	.word	0x636f4361
 8017d54:	3fd287a7 	.word	0x3fd287a7
 8017d58:	8b60c8b3 	.word	0x8b60c8b3
 8017d5c:	3fc68a28 	.word	0x3fc68a28
 8017d60:	509f79fb 	.word	0x509f79fb
 8017d64:	3fd34413 	.word	0x3fd34413
 8017d68:	0801ca7e 	.word	0x0801ca7e
 8017d6c:	0801ca95 	.word	0x0801ca95
 8017d70:	7ff00000 	.word	0x7ff00000
 8017d74:	0801ca7a 	.word	0x0801ca7a
 8017d78:	0801ca71 	.word	0x0801ca71
 8017d7c:	0801c8f1 	.word	0x0801c8f1
 8017d80:	3ff80000 	.word	0x3ff80000
 8017d84:	0801cc10 	.word	0x0801cc10
 8017d88:	0801caf4 	.word	0x0801caf4
 8017d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d8e:	9a00      	ldr	r2, [sp, #0]
 8017d90:	601a      	str	r2, [r3, #0]
 8017d92:	9b01      	ldr	r3, [sp, #4]
 8017d94:	2b0e      	cmp	r3, #14
 8017d96:	f200 80ad 	bhi.w	8017ef4 <_dtoa_r+0x484>
 8017d9a:	2d00      	cmp	r5, #0
 8017d9c:	f000 80aa 	beq.w	8017ef4 <_dtoa_r+0x484>
 8017da0:	f1ba 0f00 	cmp.w	sl, #0
 8017da4:	dd36      	ble.n	8017e14 <_dtoa_r+0x3a4>
 8017da6:	4ac3      	ldr	r2, [pc, #780]	; (80180b4 <_dtoa_r+0x644>)
 8017da8:	f00a 030f 	and.w	r3, sl, #15
 8017dac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017db0:	ed93 7b00 	vldr	d7, [r3]
 8017db4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017db8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017dbc:	eeb0 8a47 	vmov.f32	s16, s14
 8017dc0:	eef0 8a67 	vmov.f32	s17, s15
 8017dc4:	d016      	beq.n	8017df4 <_dtoa_r+0x384>
 8017dc6:	4bbc      	ldr	r3, [pc, #752]	; (80180b8 <_dtoa_r+0x648>)
 8017dc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017dcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017dd0:	f7e8 fd5c 	bl	800088c <__aeabi_ddiv>
 8017dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017dd8:	f007 070f 	and.w	r7, r7, #15
 8017ddc:	2503      	movs	r5, #3
 8017dde:	4eb6      	ldr	r6, [pc, #728]	; (80180b8 <_dtoa_r+0x648>)
 8017de0:	b957      	cbnz	r7, 8017df8 <_dtoa_r+0x388>
 8017de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017de6:	ec53 2b18 	vmov	r2, r3, d8
 8017dea:	f7e8 fd4f 	bl	800088c <__aeabi_ddiv>
 8017dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017df2:	e029      	b.n	8017e48 <_dtoa_r+0x3d8>
 8017df4:	2502      	movs	r5, #2
 8017df6:	e7f2      	b.n	8017dde <_dtoa_r+0x36e>
 8017df8:	07f9      	lsls	r1, r7, #31
 8017dfa:	d508      	bpl.n	8017e0e <_dtoa_r+0x39e>
 8017dfc:	ec51 0b18 	vmov	r0, r1, d8
 8017e00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017e04:	f7e8 fc18 	bl	8000638 <__aeabi_dmul>
 8017e08:	ec41 0b18 	vmov	d8, r0, r1
 8017e0c:	3501      	adds	r5, #1
 8017e0e:	107f      	asrs	r7, r7, #1
 8017e10:	3608      	adds	r6, #8
 8017e12:	e7e5      	b.n	8017de0 <_dtoa_r+0x370>
 8017e14:	f000 80a6 	beq.w	8017f64 <_dtoa_r+0x4f4>
 8017e18:	f1ca 0600 	rsb	r6, sl, #0
 8017e1c:	4ba5      	ldr	r3, [pc, #660]	; (80180b4 <_dtoa_r+0x644>)
 8017e1e:	4fa6      	ldr	r7, [pc, #664]	; (80180b8 <_dtoa_r+0x648>)
 8017e20:	f006 020f 	and.w	r2, r6, #15
 8017e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e30:	f7e8 fc02 	bl	8000638 <__aeabi_dmul>
 8017e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e38:	1136      	asrs	r6, r6, #4
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	2502      	movs	r5, #2
 8017e3e:	2e00      	cmp	r6, #0
 8017e40:	f040 8085 	bne.w	8017f4e <_dtoa_r+0x4de>
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d1d2      	bne.n	8017dee <_dtoa_r+0x37e>
 8017e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	f000 808c 	beq.w	8017f68 <_dtoa_r+0x4f8>
 8017e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017e54:	4b99      	ldr	r3, [pc, #612]	; (80180bc <_dtoa_r+0x64c>)
 8017e56:	2200      	movs	r2, #0
 8017e58:	4630      	mov	r0, r6
 8017e5a:	4639      	mov	r1, r7
 8017e5c:	f7e8 fe5e 	bl	8000b1c <__aeabi_dcmplt>
 8017e60:	2800      	cmp	r0, #0
 8017e62:	f000 8081 	beq.w	8017f68 <_dtoa_r+0x4f8>
 8017e66:	9b01      	ldr	r3, [sp, #4]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d07d      	beq.n	8017f68 <_dtoa_r+0x4f8>
 8017e6c:	f1b9 0f00 	cmp.w	r9, #0
 8017e70:	dd3c      	ble.n	8017eec <_dtoa_r+0x47c>
 8017e72:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017e76:	9307      	str	r3, [sp, #28]
 8017e78:	2200      	movs	r2, #0
 8017e7a:	4b91      	ldr	r3, [pc, #580]	; (80180c0 <_dtoa_r+0x650>)
 8017e7c:	4630      	mov	r0, r6
 8017e7e:	4639      	mov	r1, r7
 8017e80:	f7e8 fbda 	bl	8000638 <__aeabi_dmul>
 8017e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e88:	3501      	adds	r5, #1
 8017e8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017e8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017e92:	4628      	mov	r0, r5
 8017e94:	f7e8 fb66 	bl	8000564 <__aeabi_i2d>
 8017e98:	4632      	mov	r2, r6
 8017e9a:	463b      	mov	r3, r7
 8017e9c:	f7e8 fbcc 	bl	8000638 <__aeabi_dmul>
 8017ea0:	4b88      	ldr	r3, [pc, #544]	; (80180c4 <_dtoa_r+0x654>)
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	f7e8 fa12 	bl	80002cc <__adddf3>
 8017ea8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017eb0:	9303      	str	r3, [sp, #12]
 8017eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d15c      	bne.n	8017f72 <_dtoa_r+0x502>
 8017eb8:	4b83      	ldr	r3, [pc, #524]	; (80180c8 <_dtoa_r+0x658>)
 8017eba:	2200      	movs	r2, #0
 8017ebc:	4630      	mov	r0, r6
 8017ebe:	4639      	mov	r1, r7
 8017ec0:	f7e8 fa02 	bl	80002c8 <__aeabi_dsub>
 8017ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ec8:	4606      	mov	r6, r0
 8017eca:	460f      	mov	r7, r1
 8017ecc:	f7e8 fe44 	bl	8000b58 <__aeabi_dcmpgt>
 8017ed0:	2800      	cmp	r0, #0
 8017ed2:	f040 8296 	bne.w	8018402 <_dtoa_r+0x992>
 8017ed6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017eda:	4630      	mov	r0, r6
 8017edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017ee0:	4639      	mov	r1, r7
 8017ee2:	f7e8 fe1b 	bl	8000b1c <__aeabi_dcmplt>
 8017ee6:	2800      	cmp	r0, #0
 8017ee8:	f040 8288 	bne.w	80183fc <_dtoa_r+0x98c>
 8017eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	f2c0 8158 	blt.w	80181ac <_dtoa_r+0x73c>
 8017efc:	f1ba 0f0e 	cmp.w	sl, #14
 8017f00:	f300 8154 	bgt.w	80181ac <_dtoa_r+0x73c>
 8017f04:	4b6b      	ldr	r3, [pc, #428]	; (80180b4 <_dtoa_r+0x644>)
 8017f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	f280 80e3 	bge.w	80180dc <_dtoa_r+0x66c>
 8017f16:	9b01      	ldr	r3, [sp, #4]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	f300 80df 	bgt.w	80180dc <_dtoa_r+0x66c>
 8017f1e:	f040 826d 	bne.w	80183fc <_dtoa_r+0x98c>
 8017f22:	4b69      	ldr	r3, [pc, #420]	; (80180c8 <_dtoa_r+0x658>)
 8017f24:	2200      	movs	r2, #0
 8017f26:	4640      	mov	r0, r8
 8017f28:	4649      	mov	r1, r9
 8017f2a:	f7e8 fb85 	bl	8000638 <__aeabi_dmul>
 8017f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f32:	f7e8 fe07 	bl	8000b44 <__aeabi_dcmpge>
 8017f36:	9e01      	ldr	r6, [sp, #4]
 8017f38:	4637      	mov	r7, r6
 8017f3a:	2800      	cmp	r0, #0
 8017f3c:	f040 8243 	bne.w	80183c6 <_dtoa_r+0x956>
 8017f40:	9d00      	ldr	r5, [sp, #0]
 8017f42:	2331      	movs	r3, #49	; 0x31
 8017f44:	f805 3b01 	strb.w	r3, [r5], #1
 8017f48:	f10a 0a01 	add.w	sl, sl, #1
 8017f4c:	e23f      	b.n	80183ce <_dtoa_r+0x95e>
 8017f4e:	07f2      	lsls	r2, r6, #31
 8017f50:	d505      	bpl.n	8017f5e <_dtoa_r+0x4ee>
 8017f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017f56:	f7e8 fb6f 	bl	8000638 <__aeabi_dmul>
 8017f5a:	3501      	adds	r5, #1
 8017f5c:	2301      	movs	r3, #1
 8017f5e:	1076      	asrs	r6, r6, #1
 8017f60:	3708      	adds	r7, #8
 8017f62:	e76c      	b.n	8017e3e <_dtoa_r+0x3ce>
 8017f64:	2502      	movs	r5, #2
 8017f66:	e76f      	b.n	8017e48 <_dtoa_r+0x3d8>
 8017f68:	9b01      	ldr	r3, [sp, #4]
 8017f6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8017f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8017f70:	e78d      	b.n	8017e8e <_dtoa_r+0x41e>
 8017f72:	9900      	ldr	r1, [sp, #0]
 8017f74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f78:	4b4e      	ldr	r3, [pc, #312]	; (80180b4 <_dtoa_r+0x644>)
 8017f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f7e:	4401      	add	r1, r0
 8017f80:	9102      	str	r1, [sp, #8]
 8017f82:	9908      	ldr	r1, [sp, #32]
 8017f84:	eeb0 8a47 	vmov.f32	s16, s14
 8017f88:	eef0 8a67 	vmov.f32	s17, s15
 8017f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017f94:	2900      	cmp	r1, #0
 8017f96:	d045      	beq.n	8018024 <_dtoa_r+0x5b4>
 8017f98:	494c      	ldr	r1, [pc, #304]	; (80180cc <_dtoa_r+0x65c>)
 8017f9a:	2000      	movs	r0, #0
 8017f9c:	f7e8 fc76 	bl	800088c <__aeabi_ddiv>
 8017fa0:	ec53 2b18 	vmov	r2, r3, d8
 8017fa4:	f7e8 f990 	bl	80002c8 <__aeabi_dsub>
 8017fa8:	9d00      	ldr	r5, [sp, #0]
 8017faa:	ec41 0b18 	vmov	d8, r0, r1
 8017fae:	4639      	mov	r1, r7
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	f7e8 fdf1 	bl	8000b98 <__aeabi_d2iz>
 8017fb6:	900c      	str	r0, [sp, #48]	; 0x30
 8017fb8:	f7e8 fad4 	bl	8000564 <__aeabi_i2d>
 8017fbc:	4602      	mov	r2, r0
 8017fbe:	460b      	mov	r3, r1
 8017fc0:	4630      	mov	r0, r6
 8017fc2:	4639      	mov	r1, r7
 8017fc4:	f7e8 f980 	bl	80002c8 <__aeabi_dsub>
 8017fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017fca:	3330      	adds	r3, #48	; 0x30
 8017fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8017fd0:	ec53 2b18 	vmov	r2, r3, d8
 8017fd4:	4606      	mov	r6, r0
 8017fd6:	460f      	mov	r7, r1
 8017fd8:	f7e8 fda0 	bl	8000b1c <__aeabi_dcmplt>
 8017fdc:	2800      	cmp	r0, #0
 8017fde:	d165      	bne.n	80180ac <_dtoa_r+0x63c>
 8017fe0:	4632      	mov	r2, r6
 8017fe2:	463b      	mov	r3, r7
 8017fe4:	4935      	ldr	r1, [pc, #212]	; (80180bc <_dtoa_r+0x64c>)
 8017fe6:	2000      	movs	r0, #0
 8017fe8:	f7e8 f96e 	bl	80002c8 <__aeabi_dsub>
 8017fec:	ec53 2b18 	vmov	r2, r3, d8
 8017ff0:	f7e8 fd94 	bl	8000b1c <__aeabi_dcmplt>
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	f040 80b9 	bne.w	801816c <_dtoa_r+0x6fc>
 8017ffa:	9b02      	ldr	r3, [sp, #8]
 8017ffc:	429d      	cmp	r5, r3
 8017ffe:	f43f af75 	beq.w	8017eec <_dtoa_r+0x47c>
 8018002:	4b2f      	ldr	r3, [pc, #188]	; (80180c0 <_dtoa_r+0x650>)
 8018004:	ec51 0b18 	vmov	r0, r1, d8
 8018008:	2200      	movs	r2, #0
 801800a:	f7e8 fb15 	bl	8000638 <__aeabi_dmul>
 801800e:	4b2c      	ldr	r3, [pc, #176]	; (80180c0 <_dtoa_r+0x650>)
 8018010:	ec41 0b18 	vmov	d8, r0, r1
 8018014:	2200      	movs	r2, #0
 8018016:	4630      	mov	r0, r6
 8018018:	4639      	mov	r1, r7
 801801a:	f7e8 fb0d 	bl	8000638 <__aeabi_dmul>
 801801e:	4606      	mov	r6, r0
 8018020:	460f      	mov	r7, r1
 8018022:	e7c4      	b.n	8017fae <_dtoa_r+0x53e>
 8018024:	ec51 0b17 	vmov	r0, r1, d7
 8018028:	f7e8 fb06 	bl	8000638 <__aeabi_dmul>
 801802c:	9b02      	ldr	r3, [sp, #8]
 801802e:	9d00      	ldr	r5, [sp, #0]
 8018030:	930c      	str	r3, [sp, #48]	; 0x30
 8018032:	ec41 0b18 	vmov	d8, r0, r1
 8018036:	4639      	mov	r1, r7
 8018038:	4630      	mov	r0, r6
 801803a:	f7e8 fdad 	bl	8000b98 <__aeabi_d2iz>
 801803e:	9011      	str	r0, [sp, #68]	; 0x44
 8018040:	f7e8 fa90 	bl	8000564 <__aeabi_i2d>
 8018044:	4602      	mov	r2, r0
 8018046:	460b      	mov	r3, r1
 8018048:	4630      	mov	r0, r6
 801804a:	4639      	mov	r1, r7
 801804c:	f7e8 f93c 	bl	80002c8 <__aeabi_dsub>
 8018050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018052:	3330      	adds	r3, #48	; 0x30
 8018054:	f805 3b01 	strb.w	r3, [r5], #1
 8018058:	9b02      	ldr	r3, [sp, #8]
 801805a:	429d      	cmp	r5, r3
 801805c:	4606      	mov	r6, r0
 801805e:	460f      	mov	r7, r1
 8018060:	f04f 0200 	mov.w	r2, #0
 8018064:	d134      	bne.n	80180d0 <_dtoa_r+0x660>
 8018066:	4b19      	ldr	r3, [pc, #100]	; (80180cc <_dtoa_r+0x65c>)
 8018068:	ec51 0b18 	vmov	r0, r1, d8
 801806c:	f7e8 f92e 	bl	80002cc <__adddf3>
 8018070:	4602      	mov	r2, r0
 8018072:	460b      	mov	r3, r1
 8018074:	4630      	mov	r0, r6
 8018076:	4639      	mov	r1, r7
 8018078:	f7e8 fd6e 	bl	8000b58 <__aeabi_dcmpgt>
 801807c:	2800      	cmp	r0, #0
 801807e:	d175      	bne.n	801816c <_dtoa_r+0x6fc>
 8018080:	ec53 2b18 	vmov	r2, r3, d8
 8018084:	4911      	ldr	r1, [pc, #68]	; (80180cc <_dtoa_r+0x65c>)
 8018086:	2000      	movs	r0, #0
 8018088:	f7e8 f91e 	bl	80002c8 <__aeabi_dsub>
 801808c:	4602      	mov	r2, r0
 801808e:	460b      	mov	r3, r1
 8018090:	4630      	mov	r0, r6
 8018092:	4639      	mov	r1, r7
 8018094:	f7e8 fd42 	bl	8000b1c <__aeabi_dcmplt>
 8018098:	2800      	cmp	r0, #0
 801809a:	f43f af27 	beq.w	8017eec <_dtoa_r+0x47c>
 801809e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80180a0:	1e6b      	subs	r3, r5, #1
 80180a2:	930c      	str	r3, [sp, #48]	; 0x30
 80180a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80180a8:	2b30      	cmp	r3, #48	; 0x30
 80180aa:	d0f8      	beq.n	801809e <_dtoa_r+0x62e>
 80180ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80180b0:	e04a      	b.n	8018148 <_dtoa_r+0x6d8>
 80180b2:	bf00      	nop
 80180b4:	0801cc10 	.word	0x0801cc10
 80180b8:	0801cbe8 	.word	0x0801cbe8
 80180bc:	3ff00000 	.word	0x3ff00000
 80180c0:	40240000 	.word	0x40240000
 80180c4:	401c0000 	.word	0x401c0000
 80180c8:	40140000 	.word	0x40140000
 80180cc:	3fe00000 	.word	0x3fe00000
 80180d0:	4baf      	ldr	r3, [pc, #700]	; (8018390 <_dtoa_r+0x920>)
 80180d2:	f7e8 fab1 	bl	8000638 <__aeabi_dmul>
 80180d6:	4606      	mov	r6, r0
 80180d8:	460f      	mov	r7, r1
 80180da:	e7ac      	b.n	8018036 <_dtoa_r+0x5c6>
 80180dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80180e0:	9d00      	ldr	r5, [sp, #0]
 80180e2:	4642      	mov	r2, r8
 80180e4:	464b      	mov	r3, r9
 80180e6:	4630      	mov	r0, r6
 80180e8:	4639      	mov	r1, r7
 80180ea:	f7e8 fbcf 	bl	800088c <__aeabi_ddiv>
 80180ee:	f7e8 fd53 	bl	8000b98 <__aeabi_d2iz>
 80180f2:	9002      	str	r0, [sp, #8]
 80180f4:	f7e8 fa36 	bl	8000564 <__aeabi_i2d>
 80180f8:	4642      	mov	r2, r8
 80180fa:	464b      	mov	r3, r9
 80180fc:	f7e8 fa9c 	bl	8000638 <__aeabi_dmul>
 8018100:	4602      	mov	r2, r0
 8018102:	460b      	mov	r3, r1
 8018104:	4630      	mov	r0, r6
 8018106:	4639      	mov	r1, r7
 8018108:	f7e8 f8de 	bl	80002c8 <__aeabi_dsub>
 801810c:	9e02      	ldr	r6, [sp, #8]
 801810e:	9f01      	ldr	r7, [sp, #4]
 8018110:	3630      	adds	r6, #48	; 0x30
 8018112:	f805 6b01 	strb.w	r6, [r5], #1
 8018116:	9e00      	ldr	r6, [sp, #0]
 8018118:	1bae      	subs	r6, r5, r6
 801811a:	42b7      	cmp	r7, r6
 801811c:	4602      	mov	r2, r0
 801811e:	460b      	mov	r3, r1
 8018120:	d137      	bne.n	8018192 <_dtoa_r+0x722>
 8018122:	f7e8 f8d3 	bl	80002cc <__adddf3>
 8018126:	4642      	mov	r2, r8
 8018128:	464b      	mov	r3, r9
 801812a:	4606      	mov	r6, r0
 801812c:	460f      	mov	r7, r1
 801812e:	f7e8 fd13 	bl	8000b58 <__aeabi_dcmpgt>
 8018132:	b9c8      	cbnz	r0, 8018168 <_dtoa_r+0x6f8>
 8018134:	4642      	mov	r2, r8
 8018136:	464b      	mov	r3, r9
 8018138:	4630      	mov	r0, r6
 801813a:	4639      	mov	r1, r7
 801813c:	f7e8 fce4 	bl	8000b08 <__aeabi_dcmpeq>
 8018140:	b110      	cbz	r0, 8018148 <_dtoa_r+0x6d8>
 8018142:	9b02      	ldr	r3, [sp, #8]
 8018144:	07d9      	lsls	r1, r3, #31
 8018146:	d40f      	bmi.n	8018168 <_dtoa_r+0x6f8>
 8018148:	4620      	mov	r0, r4
 801814a:	4659      	mov	r1, fp
 801814c:	f000 fe4a 	bl	8018de4 <_Bfree>
 8018150:	2300      	movs	r3, #0
 8018152:	702b      	strb	r3, [r5, #0]
 8018154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018156:	f10a 0001 	add.w	r0, sl, #1
 801815a:	6018      	str	r0, [r3, #0]
 801815c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801815e:	2b00      	cmp	r3, #0
 8018160:	f43f acd8 	beq.w	8017b14 <_dtoa_r+0xa4>
 8018164:	601d      	str	r5, [r3, #0]
 8018166:	e4d5      	b.n	8017b14 <_dtoa_r+0xa4>
 8018168:	f8cd a01c 	str.w	sl, [sp, #28]
 801816c:	462b      	mov	r3, r5
 801816e:	461d      	mov	r5, r3
 8018170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018174:	2a39      	cmp	r2, #57	; 0x39
 8018176:	d108      	bne.n	801818a <_dtoa_r+0x71a>
 8018178:	9a00      	ldr	r2, [sp, #0]
 801817a:	429a      	cmp	r2, r3
 801817c:	d1f7      	bne.n	801816e <_dtoa_r+0x6fe>
 801817e:	9a07      	ldr	r2, [sp, #28]
 8018180:	9900      	ldr	r1, [sp, #0]
 8018182:	3201      	adds	r2, #1
 8018184:	9207      	str	r2, [sp, #28]
 8018186:	2230      	movs	r2, #48	; 0x30
 8018188:	700a      	strb	r2, [r1, #0]
 801818a:	781a      	ldrb	r2, [r3, #0]
 801818c:	3201      	adds	r2, #1
 801818e:	701a      	strb	r2, [r3, #0]
 8018190:	e78c      	b.n	80180ac <_dtoa_r+0x63c>
 8018192:	4b7f      	ldr	r3, [pc, #508]	; (8018390 <_dtoa_r+0x920>)
 8018194:	2200      	movs	r2, #0
 8018196:	f7e8 fa4f 	bl	8000638 <__aeabi_dmul>
 801819a:	2200      	movs	r2, #0
 801819c:	2300      	movs	r3, #0
 801819e:	4606      	mov	r6, r0
 80181a0:	460f      	mov	r7, r1
 80181a2:	f7e8 fcb1 	bl	8000b08 <__aeabi_dcmpeq>
 80181a6:	2800      	cmp	r0, #0
 80181a8:	d09b      	beq.n	80180e2 <_dtoa_r+0x672>
 80181aa:	e7cd      	b.n	8018148 <_dtoa_r+0x6d8>
 80181ac:	9a08      	ldr	r2, [sp, #32]
 80181ae:	2a00      	cmp	r2, #0
 80181b0:	f000 80c4 	beq.w	801833c <_dtoa_r+0x8cc>
 80181b4:	9a05      	ldr	r2, [sp, #20]
 80181b6:	2a01      	cmp	r2, #1
 80181b8:	f300 80a8 	bgt.w	801830c <_dtoa_r+0x89c>
 80181bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80181be:	2a00      	cmp	r2, #0
 80181c0:	f000 80a0 	beq.w	8018304 <_dtoa_r+0x894>
 80181c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80181c8:	9e06      	ldr	r6, [sp, #24]
 80181ca:	4645      	mov	r5, r8
 80181cc:	9a04      	ldr	r2, [sp, #16]
 80181ce:	2101      	movs	r1, #1
 80181d0:	441a      	add	r2, r3
 80181d2:	4620      	mov	r0, r4
 80181d4:	4498      	add	r8, r3
 80181d6:	9204      	str	r2, [sp, #16]
 80181d8:	f000 ff0a 	bl	8018ff0 <__i2b>
 80181dc:	4607      	mov	r7, r0
 80181de:	2d00      	cmp	r5, #0
 80181e0:	dd0b      	ble.n	80181fa <_dtoa_r+0x78a>
 80181e2:	9b04      	ldr	r3, [sp, #16]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	dd08      	ble.n	80181fa <_dtoa_r+0x78a>
 80181e8:	42ab      	cmp	r3, r5
 80181ea:	9a04      	ldr	r2, [sp, #16]
 80181ec:	bfa8      	it	ge
 80181ee:	462b      	movge	r3, r5
 80181f0:	eba8 0803 	sub.w	r8, r8, r3
 80181f4:	1aed      	subs	r5, r5, r3
 80181f6:	1ad3      	subs	r3, r2, r3
 80181f8:	9304      	str	r3, [sp, #16]
 80181fa:	9b06      	ldr	r3, [sp, #24]
 80181fc:	b1fb      	cbz	r3, 801823e <_dtoa_r+0x7ce>
 80181fe:	9b08      	ldr	r3, [sp, #32]
 8018200:	2b00      	cmp	r3, #0
 8018202:	f000 809f 	beq.w	8018344 <_dtoa_r+0x8d4>
 8018206:	2e00      	cmp	r6, #0
 8018208:	dd11      	ble.n	801822e <_dtoa_r+0x7be>
 801820a:	4639      	mov	r1, r7
 801820c:	4632      	mov	r2, r6
 801820e:	4620      	mov	r0, r4
 8018210:	f000 ffaa 	bl	8019168 <__pow5mult>
 8018214:	465a      	mov	r2, fp
 8018216:	4601      	mov	r1, r0
 8018218:	4607      	mov	r7, r0
 801821a:	4620      	mov	r0, r4
 801821c:	f000 fefe 	bl	801901c <__multiply>
 8018220:	4659      	mov	r1, fp
 8018222:	9007      	str	r0, [sp, #28]
 8018224:	4620      	mov	r0, r4
 8018226:	f000 fddd 	bl	8018de4 <_Bfree>
 801822a:	9b07      	ldr	r3, [sp, #28]
 801822c:	469b      	mov	fp, r3
 801822e:	9b06      	ldr	r3, [sp, #24]
 8018230:	1b9a      	subs	r2, r3, r6
 8018232:	d004      	beq.n	801823e <_dtoa_r+0x7ce>
 8018234:	4659      	mov	r1, fp
 8018236:	4620      	mov	r0, r4
 8018238:	f000 ff96 	bl	8019168 <__pow5mult>
 801823c:	4683      	mov	fp, r0
 801823e:	2101      	movs	r1, #1
 8018240:	4620      	mov	r0, r4
 8018242:	f000 fed5 	bl	8018ff0 <__i2b>
 8018246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018248:	2b00      	cmp	r3, #0
 801824a:	4606      	mov	r6, r0
 801824c:	dd7c      	ble.n	8018348 <_dtoa_r+0x8d8>
 801824e:	461a      	mov	r2, r3
 8018250:	4601      	mov	r1, r0
 8018252:	4620      	mov	r0, r4
 8018254:	f000 ff88 	bl	8019168 <__pow5mult>
 8018258:	9b05      	ldr	r3, [sp, #20]
 801825a:	2b01      	cmp	r3, #1
 801825c:	4606      	mov	r6, r0
 801825e:	dd76      	ble.n	801834e <_dtoa_r+0x8de>
 8018260:	2300      	movs	r3, #0
 8018262:	9306      	str	r3, [sp, #24]
 8018264:	6933      	ldr	r3, [r6, #16]
 8018266:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801826a:	6918      	ldr	r0, [r3, #16]
 801826c:	f000 fe70 	bl	8018f50 <__hi0bits>
 8018270:	f1c0 0020 	rsb	r0, r0, #32
 8018274:	9b04      	ldr	r3, [sp, #16]
 8018276:	4418      	add	r0, r3
 8018278:	f010 001f 	ands.w	r0, r0, #31
 801827c:	f000 8086 	beq.w	801838c <_dtoa_r+0x91c>
 8018280:	f1c0 0320 	rsb	r3, r0, #32
 8018284:	2b04      	cmp	r3, #4
 8018286:	dd7f      	ble.n	8018388 <_dtoa_r+0x918>
 8018288:	f1c0 001c 	rsb	r0, r0, #28
 801828c:	9b04      	ldr	r3, [sp, #16]
 801828e:	4403      	add	r3, r0
 8018290:	4480      	add	r8, r0
 8018292:	4405      	add	r5, r0
 8018294:	9304      	str	r3, [sp, #16]
 8018296:	f1b8 0f00 	cmp.w	r8, #0
 801829a:	dd05      	ble.n	80182a8 <_dtoa_r+0x838>
 801829c:	4659      	mov	r1, fp
 801829e:	4642      	mov	r2, r8
 80182a0:	4620      	mov	r0, r4
 80182a2:	f000 ffbb 	bl	801921c <__lshift>
 80182a6:	4683      	mov	fp, r0
 80182a8:	9b04      	ldr	r3, [sp, #16]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	dd05      	ble.n	80182ba <_dtoa_r+0x84a>
 80182ae:	4631      	mov	r1, r6
 80182b0:	461a      	mov	r2, r3
 80182b2:	4620      	mov	r0, r4
 80182b4:	f000 ffb2 	bl	801921c <__lshift>
 80182b8:	4606      	mov	r6, r0
 80182ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d069      	beq.n	8018394 <_dtoa_r+0x924>
 80182c0:	4631      	mov	r1, r6
 80182c2:	4658      	mov	r0, fp
 80182c4:	f001 f816 	bl	80192f4 <__mcmp>
 80182c8:	2800      	cmp	r0, #0
 80182ca:	da63      	bge.n	8018394 <_dtoa_r+0x924>
 80182cc:	2300      	movs	r3, #0
 80182ce:	4659      	mov	r1, fp
 80182d0:	220a      	movs	r2, #10
 80182d2:	4620      	mov	r0, r4
 80182d4:	f000 fda8 	bl	8018e28 <__multadd>
 80182d8:	9b08      	ldr	r3, [sp, #32]
 80182da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80182de:	4683      	mov	fp, r0
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	f000 818f 	beq.w	8018604 <_dtoa_r+0xb94>
 80182e6:	4639      	mov	r1, r7
 80182e8:	2300      	movs	r3, #0
 80182ea:	220a      	movs	r2, #10
 80182ec:	4620      	mov	r0, r4
 80182ee:	f000 fd9b 	bl	8018e28 <__multadd>
 80182f2:	f1b9 0f00 	cmp.w	r9, #0
 80182f6:	4607      	mov	r7, r0
 80182f8:	f300 808e 	bgt.w	8018418 <_dtoa_r+0x9a8>
 80182fc:	9b05      	ldr	r3, [sp, #20]
 80182fe:	2b02      	cmp	r3, #2
 8018300:	dc50      	bgt.n	80183a4 <_dtoa_r+0x934>
 8018302:	e089      	b.n	8018418 <_dtoa_r+0x9a8>
 8018304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801830a:	e75d      	b.n	80181c8 <_dtoa_r+0x758>
 801830c:	9b01      	ldr	r3, [sp, #4]
 801830e:	1e5e      	subs	r6, r3, #1
 8018310:	9b06      	ldr	r3, [sp, #24]
 8018312:	42b3      	cmp	r3, r6
 8018314:	bfbf      	itttt	lt
 8018316:	9b06      	ldrlt	r3, [sp, #24]
 8018318:	9606      	strlt	r6, [sp, #24]
 801831a:	1af2      	sublt	r2, r6, r3
 801831c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801831e:	bfb6      	itet	lt
 8018320:	189b      	addlt	r3, r3, r2
 8018322:	1b9e      	subge	r6, r3, r6
 8018324:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018326:	9b01      	ldr	r3, [sp, #4]
 8018328:	bfb8      	it	lt
 801832a:	2600      	movlt	r6, #0
 801832c:	2b00      	cmp	r3, #0
 801832e:	bfb5      	itete	lt
 8018330:	eba8 0503 	sublt.w	r5, r8, r3
 8018334:	9b01      	ldrge	r3, [sp, #4]
 8018336:	2300      	movlt	r3, #0
 8018338:	4645      	movge	r5, r8
 801833a:	e747      	b.n	80181cc <_dtoa_r+0x75c>
 801833c:	9e06      	ldr	r6, [sp, #24]
 801833e:	9f08      	ldr	r7, [sp, #32]
 8018340:	4645      	mov	r5, r8
 8018342:	e74c      	b.n	80181de <_dtoa_r+0x76e>
 8018344:	9a06      	ldr	r2, [sp, #24]
 8018346:	e775      	b.n	8018234 <_dtoa_r+0x7c4>
 8018348:	9b05      	ldr	r3, [sp, #20]
 801834a:	2b01      	cmp	r3, #1
 801834c:	dc18      	bgt.n	8018380 <_dtoa_r+0x910>
 801834e:	9b02      	ldr	r3, [sp, #8]
 8018350:	b9b3      	cbnz	r3, 8018380 <_dtoa_r+0x910>
 8018352:	9b03      	ldr	r3, [sp, #12]
 8018354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018358:	b9a3      	cbnz	r3, 8018384 <_dtoa_r+0x914>
 801835a:	9b03      	ldr	r3, [sp, #12]
 801835c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018360:	0d1b      	lsrs	r3, r3, #20
 8018362:	051b      	lsls	r3, r3, #20
 8018364:	b12b      	cbz	r3, 8018372 <_dtoa_r+0x902>
 8018366:	9b04      	ldr	r3, [sp, #16]
 8018368:	3301      	adds	r3, #1
 801836a:	9304      	str	r3, [sp, #16]
 801836c:	f108 0801 	add.w	r8, r8, #1
 8018370:	2301      	movs	r3, #1
 8018372:	9306      	str	r3, [sp, #24]
 8018374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018376:	2b00      	cmp	r3, #0
 8018378:	f47f af74 	bne.w	8018264 <_dtoa_r+0x7f4>
 801837c:	2001      	movs	r0, #1
 801837e:	e779      	b.n	8018274 <_dtoa_r+0x804>
 8018380:	2300      	movs	r3, #0
 8018382:	e7f6      	b.n	8018372 <_dtoa_r+0x902>
 8018384:	9b02      	ldr	r3, [sp, #8]
 8018386:	e7f4      	b.n	8018372 <_dtoa_r+0x902>
 8018388:	d085      	beq.n	8018296 <_dtoa_r+0x826>
 801838a:	4618      	mov	r0, r3
 801838c:	301c      	adds	r0, #28
 801838e:	e77d      	b.n	801828c <_dtoa_r+0x81c>
 8018390:	40240000 	.word	0x40240000
 8018394:	9b01      	ldr	r3, [sp, #4]
 8018396:	2b00      	cmp	r3, #0
 8018398:	dc38      	bgt.n	801840c <_dtoa_r+0x99c>
 801839a:	9b05      	ldr	r3, [sp, #20]
 801839c:	2b02      	cmp	r3, #2
 801839e:	dd35      	ble.n	801840c <_dtoa_r+0x99c>
 80183a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80183a4:	f1b9 0f00 	cmp.w	r9, #0
 80183a8:	d10d      	bne.n	80183c6 <_dtoa_r+0x956>
 80183aa:	4631      	mov	r1, r6
 80183ac:	464b      	mov	r3, r9
 80183ae:	2205      	movs	r2, #5
 80183b0:	4620      	mov	r0, r4
 80183b2:	f000 fd39 	bl	8018e28 <__multadd>
 80183b6:	4601      	mov	r1, r0
 80183b8:	4606      	mov	r6, r0
 80183ba:	4658      	mov	r0, fp
 80183bc:	f000 ff9a 	bl	80192f4 <__mcmp>
 80183c0:	2800      	cmp	r0, #0
 80183c2:	f73f adbd 	bgt.w	8017f40 <_dtoa_r+0x4d0>
 80183c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183c8:	9d00      	ldr	r5, [sp, #0]
 80183ca:	ea6f 0a03 	mvn.w	sl, r3
 80183ce:	f04f 0800 	mov.w	r8, #0
 80183d2:	4631      	mov	r1, r6
 80183d4:	4620      	mov	r0, r4
 80183d6:	f000 fd05 	bl	8018de4 <_Bfree>
 80183da:	2f00      	cmp	r7, #0
 80183dc:	f43f aeb4 	beq.w	8018148 <_dtoa_r+0x6d8>
 80183e0:	f1b8 0f00 	cmp.w	r8, #0
 80183e4:	d005      	beq.n	80183f2 <_dtoa_r+0x982>
 80183e6:	45b8      	cmp	r8, r7
 80183e8:	d003      	beq.n	80183f2 <_dtoa_r+0x982>
 80183ea:	4641      	mov	r1, r8
 80183ec:	4620      	mov	r0, r4
 80183ee:	f000 fcf9 	bl	8018de4 <_Bfree>
 80183f2:	4639      	mov	r1, r7
 80183f4:	4620      	mov	r0, r4
 80183f6:	f000 fcf5 	bl	8018de4 <_Bfree>
 80183fa:	e6a5      	b.n	8018148 <_dtoa_r+0x6d8>
 80183fc:	2600      	movs	r6, #0
 80183fe:	4637      	mov	r7, r6
 8018400:	e7e1      	b.n	80183c6 <_dtoa_r+0x956>
 8018402:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018404:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018408:	4637      	mov	r7, r6
 801840a:	e599      	b.n	8017f40 <_dtoa_r+0x4d0>
 801840c:	9b08      	ldr	r3, [sp, #32]
 801840e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018412:	2b00      	cmp	r3, #0
 8018414:	f000 80fd 	beq.w	8018612 <_dtoa_r+0xba2>
 8018418:	2d00      	cmp	r5, #0
 801841a:	dd05      	ble.n	8018428 <_dtoa_r+0x9b8>
 801841c:	4639      	mov	r1, r7
 801841e:	462a      	mov	r2, r5
 8018420:	4620      	mov	r0, r4
 8018422:	f000 fefb 	bl	801921c <__lshift>
 8018426:	4607      	mov	r7, r0
 8018428:	9b06      	ldr	r3, [sp, #24]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d05c      	beq.n	80184e8 <_dtoa_r+0xa78>
 801842e:	6879      	ldr	r1, [r7, #4]
 8018430:	4620      	mov	r0, r4
 8018432:	f000 fc97 	bl	8018d64 <_Balloc>
 8018436:	4605      	mov	r5, r0
 8018438:	b928      	cbnz	r0, 8018446 <_dtoa_r+0x9d6>
 801843a:	4b80      	ldr	r3, [pc, #512]	; (801863c <_dtoa_r+0xbcc>)
 801843c:	4602      	mov	r2, r0
 801843e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018442:	f7ff bb2e 	b.w	8017aa2 <_dtoa_r+0x32>
 8018446:	693a      	ldr	r2, [r7, #16]
 8018448:	3202      	adds	r2, #2
 801844a:	0092      	lsls	r2, r2, #2
 801844c:	f107 010c 	add.w	r1, r7, #12
 8018450:	300c      	adds	r0, #12
 8018452:	f7fd fce1 	bl	8015e18 <memcpy>
 8018456:	2201      	movs	r2, #1
 8018458:	4629      	mov	r1, r5
 801845a:	4620      	mov	r0, r4
 801845c:	f000 fede 	bl	801921c <__lshift>
 8018460:	9b00      	ldr	r3, [sp, #0]
 8018462:	3301      	adds	r3, #1
 8018464:	9301      	str	r3, [sp, #4]
 8018466:	9b00      	ldr	r3, [sp, #0]
 8018468:	444b      	add	r3, r9
 801846a:	9307      	str	r3, [sp, #28]
 801846c:	9b02      	ldr	r3, [sp, #8]
 801846e:	f003 0301 	and.w	r3, r3, #1
 8018472:	46b8      	mov	r8, r7
 8018474:	9306      	str	r3, [sp, #24]
 8018476:	4607      	mov	r7, r0
 8018478:	9b01      	ldr	r3, [sp, #4]
 801847a:	4631      	mov	r1, r6
 801847c:	3b01      	subs	r3, #1
 801847e:	4658      	mov	r0, fp
 8018480:	9302      	str	r3, [sp, #8]
 8018482:	f7ff fa67 	bl	8017954 <quorem>
 8018486:	4603      	mov	r3, r0
 8018488:	3330      	adds	r3, #48	; 0x30
 801848a:	9004      	str	r0, [sp, #16]
 801848c:	4641      	mov	r1, r8
 801848e:	4658      	mov	r0, fp
 8018490:	9308      	str	r3, [sp, #32]
 8018492:	f000 ff2f 	bl	80192f4 <__mcmp>
 8018496:	463a      	mov	r2, r7
 8018498:	4681      	mov	r9, r0
 801849a:	4631      	mov	r1, r6
 801849c:	4620      	mov	r0, r4
 801849e:	f000 ff45 	bl	801932c <__mdiff>
 80184a2:	68c2      	ldr	r2, [r0, #12]
 80184a4:	9b08      	ldr	r3, [sp, #32]
 80184a6:	4605      	mov	r5, r0
 80184a8:	bb02      	cbnz	r2, 80184ec <_dtoa_r+0xa7c>
 80184aa:	4601      	mov	r1, r0
 80184ac:	4658      	mov	r0, fp
 80184ae:	f000 ff21 	bl	80192f4 <__mcmp>
 80184b2:	9b08      	ldr	r3, [sp, #32]
 80184b4:	4602      	mov	r2, r0
 80184b6:	4629      	mov	r1, r5
 80184b8:	4620      	mov	r0, r4
 80184ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80184be:	f000 fc91 	bl	8018de4 <_Bfree>
 80184c2:	9b05      	ldr	r3, [sp, #20]
 80184c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184c6:	9d01      	ldr	r5, [sp, #4]
 80184c8:	ea43 0102 	orr.w	r1, r3, r2
 80184cc:	9b06      	ldr	r3, [sp, #24]
 80184ce:	430b      	orrs	r3, r1
 80184d0:	9b08      	ldr	r3, [sp, #32]
 80184d2:	d10d      	bne.n	80184f0 <_dtoa_r+0xa80>
 80184d4:	2b39      	cmp	r3, #57	; 0x39
 80184d6:	d029      	beq.n	801852c <_dtoa_r+0xabc>
 80184d8:	f1b9 0f00 	cmp.w	r9, #0
 80184dc:	dd01      	ble.n	80184e2 <_dtoa_r+0xa72>
 80184de:	9b04      	ldr	r3, [sp, #16]
 80184e0:	3331      	adds	r3, #49	; 0x31
 80184e2:	9a02      	ldr	r2, [sp, #8]
 80184e4:	7013      	strb	r3, [r2, #0]
 80184e6:	e774      	b.n	80183d2 <_dtoa_r+0x962>
 80184e8:	4638      	mov	r0, r7
 80184ea:	e7b9      	b.n	8018460 <_dtoa_r+0x9f0>
 80184ec:	2201      	movs	r2, #1
 80184ee:	e7e2      	b.n	80184b6 <_dtoa_r+0xa46>
 80184f0:	f1b9 0f00 	cmp.w	r9, #0
 80184f4:	db06      	blt.n	8018504 <_dtoa_r+0xa94>
 80184f6:	9905      	ldr	r1, [sp, #20]
 80184f8:	ea41 0909 	orr.w	r9, r1, r9
 80184fc:	9906      	ldr	r1, [sp, #24]
 80184fe:	ea59 0101 	orrs.w	r1, r9, r1
 8018502:	d120      	bne.n	8018546 <_dtoa_r+0xad6>
 8018504:	2a00      	cmp	r2, #0
 8018506:	ddec      	ble.n	80184e2 <_dtoa_r+0xa72>
 8018508:	4659      	mov	r1, fp
 801850a:	2201      	movs	r2, #1
 801850c:	4620      	mov	r0, r4
 801850e:	9301      	str	r3, [sp, #4]
 8018510:	f000 fe84 	bl	801921c <__lshift>
 8018514:	4631      	mov	r1, r6
 8018516:	4683      	mov	fp, r0
 8018518:	f000 feec 	bl	80192f4 <__mcmp>
 801851c:	2800      	cmp	r0, #0
 801851e:	9b01      	ldr	r3, [sp, #4]
 8018520:	dc02      	bgt.n	8018528 <_dtoa_r+0xab8>
 8018522:	d1de      	bne.n	80184e2 <_dtoa_r+0xa72>
 8018524:	07da      	lsls	r2, r3, #31
 8018526:	d5dc      	bpl.n	80184e2 <_dtoa_r+0xa72>
 8018528:	2b39      	cmp	r3, #57	; 0x39
 801852a:	d1d8      	bne.n	80184de <_dtoa_r+0xa6e>
 801852c:	9a02      	ldr	r2, [sp, #8]
 801852e:	2339      	movs	r3, #57	; 0x39
 8018530:	7013      	strb	r3, [r2, #0]
 8018532:	462b      	mov	r3, r5
 8018534:	461d      	mov	r5, r3
 8018536:	3b01      	subs	r3, #1
 8018538:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801853c:	2a39      	cmp	r2, #57	; 0x39
 801853e:	d050      	beq.n	80185e2 <_dtoa_r+0xb72>
 8018540:	3201      	adds	r2, #1
 8018542:	701a      	strb	r2, [r3, #0]
 8018544:	e745      	b.n	80183d2 <_dtoa_r+0x962>
 8018546:	2a00      	cmp	r2, #0
 8018548:	dd03      	ble.n	8018552 <_dtoa_r+0xae2>
 801854a:	2b39      	cmp	r3, #57	; 0x39
 801854c:	d0ee      	beq.n	801852c <_dtoa_r+0xabc>
 801854e:	3301      	adds	r3, #1
 8018550:	e7c7      	b.n	80184e2 <_dtoa_r+0xa72>
 8018552:	9a01      	ldr	r2, [sp, #4]
 8018554:	9907      	ldr	r1, [sp, #28]
 8018556:	f802 3c01 	strb.w	r3, [r2, #-1]
 801855a:	428a      	cmp	r2, r1
 801855c:	d02a      	beq.n	80185b4 <_dtoa_r+0xb44>
 801855e:	4659      	mov	r1, fp
 8018560:	2300      	movs	r3, #0
 8018562:	220a      	movs	r2, #10
 8018564:	4620      	mov	r0, r4
 8018566:	f000 fc5f 	bl	8018e28 <__multadd>
 801856a:	45b8      	cmp	r8, r7
 801856c:	4683      	mov	fp, r0
 801856e:	f04f 0300 	mov.w	r3, #0
 8018572:	f04f 020a 	mov.w	r2, #10
 8018576:	4641      	mov	r1, r8
 8018578:	4620      	mov	r0, r4
 801857a:	d107      	bne.n	801858c <_dtoa_r+0xb1c>
 801857c:	f000 fc54 	bl	8018e28 <__multadd>
 8018580:	4680      	mov	r8, r0
 8018582:	4607      	mov	r7, r0
 8018584:	9b01      	ldr	r3, [sp, #4]
 8018586:	3301      	adds	r3, #1
 8018588:	9301      	str	r3, [sp, #4]
 801858a:	e775      	b.n	8018478 <_dtoa_r+0xa08>
 801858c:	f000 fc4c 	bl	8018e28 <__multadd>
 8018590:	4639      	mov	r1, r7
 8018592:	4680      	mov	r8, r0
 8018594:	2300      	movs	r3, #0
 8018596:	220a      	movs	r2, #10
 8018598:	4620      	mov	r0, r4
 801859a:	f000 fc45 	bl	8018e28 <__multadd>
 801859e:	4607      	mov	r7, r0
 80185a0:	e7f0      	b.n	8018584 <_dtoa_r+0xb14>
 80185a2:	f1b9 0f00 	cmp.w	r9, #0
 80185a6:	9a00      	ldr	r2, [sp, #0]
 80185a8:	bfcc      	ite	gt
 80185aa:	464d      	movgt	r5, r9
 80185ac:	2501      	movle	r5, #1
 80185ae:	4415      	add	r5, r2
 80185b0:	f04f 0800 	mov.w	r8, #0
 80185b4:	4659      	mov	r1, fp
 80185b6:	2201      	movs	r2, #1
 80185b8:	4620      	mov	r0, r4
 80185ba:	9301      	str	r3, [sp, #4]
 80185bc:	f000 fe2e 	bl	801921c <__lshift>
 80185c0:	4631      	mov	r1, r6
 80185c2:	4683      	mov	fp, r0
 80185c4:	f000 fe96 	bl	80192f4 <__mcmp>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	dcb2      	bgt.n	8018532 <_dtoa_r+0xac2>
 80185cc:	d102      	bne.n	80185d4 <_dtoa_r+0xb64>
 80185ce:	9b01      	ldr	r3, [sp, #4]
 80185d0:	07db      	lsls	r3, r3, #31
 80185d2:	d4ae      	bmi.n	8018532 <_dtoa_r+0xac2>
 80185d4:	462b      	mov	r3, r5
 80185d6:	461d      	mov	r5, r3
 80185d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80185dc:	2a30      	cmp	r2, #48	; 0x30
 80185de:	d0fa      	beq.n	80185d6 <_dtoa_r+0xb66>
 80185e0:	e6f7      	b.n	80183d2 <_dtoa_r+0x962>
 80185e2:	9a00      	ldr	r2, [sp, #0]
 80185e4:	429a      	cmp	r2, r3
 80185e6:	d1a5      	bne.n	8018534 <_dtoa_r+0xac4>
 80185e8:	f10a 0a01 	add.w	sl, sl, #1
 80185ec:	2331      	movs	r3, #49	; 0x31
 80185ee:	e779      	b.n	80184e4 <_dtoa_r+0xa74>
 80185f0:	4b13      	ldr	r3, [pc, #76]	; (8018640 <_dtoa_r+0xbd0>)
 80185f2:	f7ff baaf 	b.w	8017b54 <_dtoa_r+0xe4>
 80185f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	f47f aa86 	bne.w	8017b0a <_dtoa_r+0x9a>
 80185fe:	4b11      	ldr	r3, [pc, #68]	; (8018644 <_dtoa_r+0xbd4>)
 8018600:	f7ff baa8 	b.w	8017b54 <_dtoa_r+0xe4>
 8018604:	f1b9 0f00 	cmp.w	r9, #0
 8018608:	dc03      	bgt.n	8018612 <_dtoa_r+0xba2>
 801860a:	9b05      	ldr	r3, [sp, #20]
 801860c:	2b02      	cmp	r3, #2
 801860e:	f73f aec9 	bgt.w	80183a4 <_dtoa_r+0x934>
 8018612:	9d00      	ldr	r5, [sp, #0]
 8018614:	4631      	mov	r1, r6
 8018616:	4658      	mov	r0, fp
 8018618:	f7ff f99c 	bl	8017954 <quorem>
 801861c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018620:	f805 3b01 	strb.w	r3, [r5], #1
 8018624:	9a00      	ldr	r2, [sp, #0]
 8018626:	1aaa      	subs	r2, r5, r2
 8018628:	4591      	cmp	r9, r2
 801862a:	ddba      	ble.n	80185a2 <_dtoa_r+0xb32>
 801862c:	4659      	mov	r1, fp
 801862e:	2300      	movs	r3, #0
 8018630:	220a      	movs	r2, #10
 8018632:	4620      	mov	r0, r4
 8018634:	f000 fbf8 	bl	8018e28 <__multadd>
 8018638:	4683      	mov	fp, r0
 801863a:	e7eb      	b.n	8018614 <_dtoa_r+0xba4>
 801863c:	0801caf4 	.word	0x0801caf4
 8018640:	0801c8f0 	.word	0x0801c8f0
 8018644:	0801ca71 	.word	0x0801ca71

08018648 <rshift>:
 8018648:	6903      	ldr	r3, [r0, #16]
 801864a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801864e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018652:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018656:	f100 0414 	add.w	r4, r0, #20
 801865a:	dd45      	ble.n	80186e8 <rshift+0xa0>
 801865c:	f011 011f 	ands.w	r1, r1, #31
 8018660:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018664:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018668:	d10c      	bne.n	8018684 <rshift+0x3c>
 801866a:	f100 0710 	add.w	r7, r0, #16
 801866e:	4629      	mov	r1, r5
 8018670:	42b1      	cmp	r1, r6
 8018672:	d334      	bcc.n	80186de <rshift+0x96>
 8018674:	1a9b      	subs	r3, r3, r2
 8018676:	009b      	lsls	r3, r3, #2
 8018678:	1eea      	subs	r2, r5, #3
 801867a:	4296      	cmp	r6, r2
 801867c:	bf38      	it	cc
 801867e:	2300      	movcc	r3, #0
 8018680:	4423      	add	r3, r4
 8018682:	e015      	b.n	80186b0 <rshift+0x68>
 8018684:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018688:	f1c1 0820 	rsb	r8, r1, #32
 801868c:	40cf      	lsrs	r7, r1
 801868e:	f105 0e04 	add.w	lr, r5, #4
 8018692:	46a1      	mov	r9, r4
 8018694:	4576      	cmp	r6, lr
 8018696:	46f4      	mov	ip, lr
 8018698:	d815      	bhi.n	80186c6 <rshift+0x7e>
 801869a:	1a9b      	subs	r3, r3, r2
 801869c:	009a      	lsls	r2, r3, #2
 801869e:	3a04      	subs	r2, #4
 80186a0:	3501      	adds	r5, #1
 80186a2:	42ae      	cmp	r6, r5
 80186a4:	bf38      	it	cc
 80186a6:	2200      	movcc	r2, #0
 80186a8:	18a3      	adds	r3, r4, r2
 80186aa:	50a7      	str	r7, [r4, r2]
 80186ac:	b107      	cbz	r7, 80186b0 <rshift+0x68>
 80186ae:	3304      	adds	r3, #4
 80186b0:	1b1a      	subs	r2, r3, r4
 80186b2:	42a3      	cmp	r3, r4
 80186b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80186b8:	bf08      	it	eq
 80186ba:	2300      	moveq	r3, #0
 80186bc:	6102      	str	r2, [r0, #16]
 80186be:	bf08      	it	eq
 80186c0:	6143      	streq	r3, [r0, #20]
 80186c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186c6:	f8dc c000 	ldr.w	ip, [ip]
 80186ca:	fa0c fc08 	lsl.w	ip, ip, r8
 80186ce:	ea4c 0707 	orr.w	r7, ip, r7
 80186d2:	f849 7b04 	str.w	r7, [r9], #4
 80186d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80186da:	40cf      	lsrs	r7, r1
 80186dc:	e7da      	b.n	8018694 <rshift+0x4c>
 80186de:	f851 cb04 	ldr.w	ip, [r1], #4
 80186e2:	f847 cf04 	str.w	ip, [r7, #4]!
 80186e6:	e7c3      	b.n	8018670 <rshift+0x28>
 80186e8:	4623      	mov	r3, r4
 80186ea:	e7e1      	b.n	80186b0 <rshift+0x68>

080186ec <__hexdig_fun>:
 80186ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80186f0:	2b09      	cmp	r3, #9
 80186f2:	d802      	bhi.n	80186fa <__hexdig_fun+0xe>
 80186f4:	3820      	subs	r0, #32
 80186f6:	b2c0      	uxtb	r0, r0
 80186f8:	4770      	bx	lr
 80186fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80186fe:	2b05      	cmp	r3, #5
 8018700:	d801      	bhi.n	8018706 <__hexdig_fun+0x1a>
 8018702:	3847      	subs	r0, #71	; 0x47
 8018704:	e7f7      	b.n	80186f6 <__hexdig_fun+0xa>
 8018706:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801870a:	2b05      	cmp	r3, #5
 801870c:	d801      	bhi.n	8018712 <__hexdig_fun+0x26>
 801870e:	3827      	subs	r0, #39	; 0x27
 8018710:	e7f1      	b.n	80186f6 <__hexdig_fun+0xa>
 8018712:	2000      	movs	r0, #0
 8018714:	4770      	bx	lr
	...

08018718 <__gethex>:
 8018718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801871c:	ed2d 8b02 	vpush	{d8}
 8018720:	b089      	sub	sp, #36	; 0x24
 8018722:	ee08 0a10 	vmov	s16, r0
 8018726:	9304      	str	r3, [sp, #16]
 8018728:	4bbc      	ldr	r3, [pc, #752]	; (8018a1c <__gethex+0x304>)
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	9301      	str	r3, [sp, #4]
 801872e:	4618      	mov	r0, r3
 8018730:	468b      	mov	fp, r1
 8018732:	4690      	mov	r8, r2
 8018734:	f7e7 fd6c 	bl	8000210 <strlen>
 8018738:	9b01      	ldr	r3, [sp, #4]
 801873a:	f8db 2000 	ldr.w	r2, [fp]
 801873e:	4403      	add	r3, r0
 8018740:	4682      	mov	sl, r0
 8018742:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018746:	9305      	str	r3, [sp, #20]
 8018748:	1c93      	adds	r3, r2, #2
 801874a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801874e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018752:	32fe      	adds	r2, #254	; 0xfe
 8018754:	18d1      	adds	r1, r2, r3
 8018756:	461f      	mov	r7, r3
 8018758:	f813 0b01 	ldrb.w	r0, [r3], #1
 801875c:	9100      	str	r1, [sp, #0]
 801875e:	2830      	cmp	r0, #48	; 0x30
 8018760:	d0f8      	beq.n	8018754 <__gethex+0x3c>
 8018762:	f7ff ffc3 	bl	80186ec <__hexdig_fun>
 8018766:	4604      	mov	r4, r0
 8018768:	2800      	cmp	r0, #0
 801876a:	d13a      	bne.n	80187e2 <__gethex+0xca>
 801876c:	9901      	ldr	r1, [sp, #4]
 801876e:	4652      	mov	r2, sl
 8018770:	4638      	mov	r0, r7
 8018772:	f001 f9e1 	bl	8019b38 <strncmp>
 8018776:	4605      	mov	r5, r0
 8018778:	2800      	cmp	r0, #0
 801877a:	d168      	bne.n	801884e <__gethex+0x136>
 801877c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018780:	eb07 060a 	add.w	r6, r7, sl
 8018784:	f7ff ffb2 	bl	80186ec <__hexdig_fun>
 8018788:	2800      	cmp	r0, #0
 801878a:	d062      	beq.n	8018852 <__gethex+0x13a>
 801878c:	4633      	mov	r3, r6
 801878e:	7818      	ldrb	r0, [r3, #0]
 8018790:	2830      	cmp	r0, #48	; 0x30
 8018792:	461f      	mov	r7, r3
 8018794:	f103 0301 	add.w	r3, r3, #1
 8018798:	d0f9      	beq.n	801878e <__gethex+0x76>
 801879a:	f7ff ffa7 	bl	80186ec <__hexdig_fun>
 801879e:	2301      	movs	r3, #1
 80187a0:	fab0 f480 	clz	r4, r0
 80187a4:	0964      	lsrs	r4, r4, #5
 80187a6:	4635      	mov	r5, r6
 80187a8:	9300      	str	r3, [sp, #0]
 80187aa:	463a      	mov	r2, r7
 80187ac:	4616      	mov	r6, r2
 80187ae:	3201      	adds	r2, #1
 80187b0:	7830      	ldrb	r0, [r6, #0]
 80187b2:	f7ff ff9b 	bl	80186ec <__hexdig_fun>
 80187b6:	2800      	cmp	r0, #0
 80187b8:	d1f8      	bne.n	80187ac <__gethex+0x94>
 80187ba:	9901      	ldr	r1, [sp, #4]
 80187bc:	4652      	mov	r2, sl
 80187be:	4630      	mov	r0, r6
 80187c0:	f001 f9ba 	bl	8019b38 <strncmp>
 80187c4:	b980      	cbnz	r0, 80187e8 <__gethex+0xd0>
 80187c6:	b94d      	cbnz	r5, 80187dc <__gethex+0xc4>
 80187c8:	eb06 050a 	add.w	r5, r6, sl
 80187cc:	462a      	mov	r2, r5
 80187ce:	4616      	mov	r6, r2
 80187d0:	3201      	adds	r2, #1
 80187d2:	7830      	ldrb	r0, [r6, #0]
 80187d4:	f7ff ff8a 	bl	80186ec <__hexdig_fun>
 80187d8:	2800      	cmp	r0, #0
 80187da:	d1f8      	bne.n	80187ce <__gethex+0xb6>
 80187dc:	1bad      	subs	r5, r5, r6
 80187de:	00ad      	lsls	r5, r5, #2
 80187e0:	e004      	b.n	80187ec <__gethex+0xd4>
 80187e2:	2400      	movs	r4, #0
 80187e4:	4625      	mov	r5, r4
 80187e6:	e7e0      	b.n	80187aa <__gethex+0x92>
 80187e8:	2d00      	cmp	r5, #0
 80187ea:	d1f7      	bne.n	80187dc <__gethex+0xc4>
 80187ec:	7833      	ldrb	r3, [r6, #0]
 80187ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80187f2:	2b50      	cmp	r3, #80	; 0x50
 80187f4:	d13b      	bne.n	801886e <__gethex+0x156>
 80187f6:	7873      	ldrb	r3, [r6, #1]
 80187f8:	2b2b      	cmp	r3, #43	; 0x2b
 80187fa:	d02c      	beq.n	8018856 <__gethex+0x13e>
 80187fc:	2b2d      	cmp	r3, #45	; 0x2d
 80187fe:	d02e      	beq.n	801885e <__gethex+0x146>
 8018800:	1c71      	adds	r1, r6, #1
 8018802:	f04f 0900 	mov.w	r9, #0
 8018806:	7808      	ldrb	r0, [r1, #0]
 8018808:	f7ff ff70 	bl	80186ec <__hexdig_fun>
 801880c:	1e43      	subs	r3, r0, #1
 801880e:	b2db      	uxtb	r3, r3
 8018810:	2b18      	cmp	r3, #24
 8018812:	d82c      	bhi.n	801886e <__gethex+0x156>
 8018814:	f1a0 0210 	sub.w	r2, r0, #16
 8018818:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801881c:	f7ff ff66 	bl	80186ec <__hexdig_fun>
 8018820:	1e43      	subs	r3, r0, #1
 8018822:	b2db      	uxtb	r3, r3
 8018824:	2b18      	cmp	r3, #24
 8018826:	d91d      	bls.n	8018864 <__gethex+0x14c>
 8018828:	f1b9 0f00 	cmp.w	r9, #0
 801882c:	d000      	beq.n	8018830 <__gethex+0x118>
 801882e:	4252      	negs	r2, r2
 8018830:	4415      	add	r5, r2
 8018832:	f8cb 1000 	str.w	r1, [fp]
 8018836:	b1e4      	cbz	r4, 8018872 <__gethex+0x15a>
 8018838:	9b00      	ldr	r3, [sp, #0]
 801883a:	2b00      	cmp	r3, #0
 801883c:	bf14      	ite	ne
 801883e:	2700      	movne	r7, #0
 8018840:	2706      	moveq	r7, #6
 8018842:	4638      	mov	r0, r7
 8018844:	b009      	add	sp, #36	; 0x24
 8018846:	ecbd 8b02 	vpop	{d8}
 801884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801884e:	463e      	mov	r6, r7
 8018850:	4625      	mov	r5, r4
 8018852:	2401      	movs	r4, #1
 8018854:	e7ca      	b.n	80187ec <__gethex+0xd4>
 8018856:	f04f 0900 	mov.w	r9, #0
 801885a:	1cb1      	adds	r1, r6, #2
 801885c:	e7d3      	b.n	8018806 <__gethex+0xee>
 801885e:	f04f 0901 	mov.w	r9, #1
 8018862:	e7fa      	b.n	801885a <__gethex+0x142>
 8018864:	230a      	movs	r3, #10
 8018866:	fb03 0202 	mla	r2, r3, r2, r0
 801886a:	3a10      	subs	r2, #16
 801886c:	e7d4      	b.n	8018818 <__gethex+0x100>
 801886e:	4631      	mov	r1, r6
 8018870:	e7df      	b.n	8018832 <__gethex+0x11a>
 8018872:	1bf3      	subs	r3, r6, r7
 8018874:	3b01      	subs	r3, #1
 8018876:	4621      	mov	r1, r4
 8018878:	2b07      	cmp	r3, #7
 801887a:	dc0b      	bgt.n	8018894 <__gethex+0x17c>
 801887c:	ee18 0a10 	vmov	r0, s16
 8018880:	f000 fa70 	bl	8018d64 <_Balloc>
 8018884:	4604      	mov	r4, r0
 8018886:	b940      	cbnz	r0, 801889a <__gethex+0x182>
 8018888:	4b65      	ldr	r3, [pc, #404]	; (8018a20 <__gethex+0x308>)
 801888a:	4602      	mov	r2, r0
 801888c:	21de      	movs	r1, #222	; 0xde
 801888e:	4865      	ldr	r0, [pc, #404]	; (8018a24 <__gethex+0x30c>)
 8018890:	f001 f972 	bl	8019b78 <__assert_func>
 8018894:	3101      	adds	r1, #1
 8018896:	105b      	asrs	r3, r3, #1
 8018898:	e7ee      	b.n	8018878 <__gethex+0x160>
 801889a:	f100 0914 	add.w	r9, r0, #20
 801889e:	f04f 0b00 	mov.w	fp, #0
 80188a2:	f1ca 0301 	rsb	r3, sl, #1
 80188a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80188aa:	f8cd b000 	str.w	fp, [sp]
 80188ae:	9306      	str	r3, [sp, #24]
 80188b0:	42b7      	cmp	r7, r6
 80188b2:	d340      	bcc.n	8018936 <__gethex+0x21e>
 80188b4:	9802      	ldr	r0, [sp, #8]
 80188b6:	9b00      	ldr	r3, [sp, #0]
 80188b8:	f840 3b04 	str.w	r3, [r0], #4
 80188bc:	eba0 0009 	sub.w	r0, r0, r9
 80188c0:	1080      	asrs	r0, r0, #2
 80188c2:	0146      	lsls	r6, r0, #5
 80188c4:	6120      	str	r0, [r4, #16]
 80188c6:	4618      	mov	r0, r3
 80188c8:	f000 fb42 	bl	8018f50 <__hi0bits>
 80188cc:	1a30      	subs	r0, r6, r0
 80188ce:	f8d8 6000 	ldr.w	r6, [r8]
 80188d2:	42b0      	cmp	r0, r6
 80188d4:	dd63      	ble.n	801899e <__gethex+0x286>
 80188d6:	1b87      	subs	r7, r0, r6
 80188d8:	4639      	mov	r1, r7
 80188da:	4620      	mov	r0, r4
 80188dc:	f000 fedc 	bl	8019698 <__any_on>
 80188e0:	4682      	mov	sl, r0
 80188e2:	b1a8      	cbz	r0, 8018910 <__gethex+0x1f8>
 80188e4:	1e7b      	subs	r3, r7, #1
 80188e6:	1159      	asrs	r1, r3, #5
 80188e8:	f003 021f 	and.w	r2, r3, #31
 80188ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80188f0:	f04f 0a01 	mov.w	sl, #1
 80188f4:	fa0a f202 	lsl.w	r2, sl, r2
 80188f8:	420a      	tst	r2, r1
 80188fa:	d009      	beq.n	8018910 <__gethex+0x1f8>
 80188fc:	4553      	cmp	r3, sl
 80188fe:	dd05      	ble.n	801890c <__gethex+0x1f4>
 8018900:	1eb9      	subs	r1, r7, #2
 8018902:	4620      	mov	r0, r4
 8018904:	f000 fec8 	bl	8019698 <__any_on>
 8018908:	2800      	cmp	r0, #0
 801890a:	d145      	bne.n	8018998 <__gethex+0x280>
 801890c:	f04f 0a02 	mov.w	sl, #2
 8018910:	4639      	mov	r1, r7
 8018912:	4620      	mov	r0, r4
 8018914:	f7ff fe98 	bl	8018648 <rshift>
 8018918:	443d      	add	r5, r7
 801891a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801891e:	42ab      	cmp	r3, r5
 8018920:	da4c      	bge.n	80189bc <__gethex+0x2a4>
 8018922:	ee18 0a10 	vmov	r0, s16
 8018926:	4621      	mov	r1, r4
 8018928:	f000 fa5c 	bl	8018de4 <_Bfree>
 801892c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801892e:	2300      	movs	r3, #0
 8018930:	6013      	str	r3, [r2, #0]
 8018932:	27a3      	movs	r7, #163	; 0xa3
 8018934:	e785      	b.n	8018842 <__gethex+0x12a>
 8018936:	1e73      	subs	r3, r6, #1
 8018938:	9a05      	ldr	r2, [sp, #20]
 801893a:	9303      	str	r3, [sp, #12]
 801893c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018940:	4293      	cmp	r3, r2
 8018942:	d019      	beq.n	8018978 <__gethex+0x260>
 8018944:	f1bb 0f20 	cmp.w	fp, #32
 8018948:	d107      	bne.n	801895a <__gethex+0x242>
 801894a:	9b02      	ldr	r3, [sp, #8]
 801894c:	9a00      	ldr	r2, [sp, #0]
 801894e:	f843 2b04 	str.w	r2, [r3], #4
 8018952:	9302      	str	r3, [sp, #8]
 8018954:	2300      	movs	r3, #0
 8018956:	9300      	str	r3, [sp, #0]
 8018958:	469b      	mov	fp, r3
 801895a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801895e:	f7ff fec5 	bl	80186ec <__hexdig_fun>
 8018962:	9b00      	ldr	r3, [sp, #0]
 8018964:	f000 000f 	and.w	r0, r0, #15
 8018968:	fa00 f00b 	lsl.w	r0, r0, fp
 801896c:	4303      	orrs	r3, r0
 801896e:	9300      	str	r3, [sp, #0]
 8018970:	f10b 0b04 	add.w	fp, fp, #4
 8018974:	9b03      	ldr	r3, [sp, #12]
 8018976:	e00d      	b.n	8018994 <__gethex+0x27c>
 8018978:	9b03      	ldr	r3, [sp, #12]
 801897a:	9a06      	ldr	r2, [sp, #24]
 801897c:	4413      	add	r3, r2
 801897e:	42bb      	cmp	r3, r7
 8018980:	d3e0      	bcc.n	8018944 <__gethex+0x22c>
 8018982:	4618      	mov	r0, r3
 8018984:	9901      	ldr	r1, [sp, #4]
 8018986:	9307      	str	r3, [sp, #28]
 8018988:	4652      	mov	r2, sl
 801898a:	f001 f8d5 	bl	8019b38 <strncmp>
 801898e:	9b07      	ldr	r3, [sp, #28]
 8018990:	2800      	cmp	r0, #0
 8018992:	d1d7      	bne.n	8018944 <__gethex+0x22c>
 8018994:	461e      	mov	r6, r3
 8018996:	e78b      	b.n	80188b0 <__gethex+0x198>
 8018998:	f04f 0a03 	mov.w	sl, #3
 801899c:	e7b8      	b.n	8018910 <__gethex+0x1f8>
 801899e:	da0a      	bge.n	80189b6 <__gethex+0x29e>
 80189a0:	1a37      	subs	r7, r6, r0
 80189a2:	4621      	mov	r1, r4
 80189a4:	ee18 0a10 	vmov	r0, s16
 80189a8:	463a      	mov	r2, r7
 80189aa:	f000 fc37 	bl	801921c <__lshift>
 80189ae:	1bed      	subs	r5, r5, r7
 80189b0:	4604      	mov	r4, r0
 80189b2:	f100 0914 	add.w	r9, r0, #20
 80189b6:	f04f 0a00 	mov.w	sl, #0
 80189ba:	e7ae      	b.n	801891a <__gethex+0x202>
 80189bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80189c0:	42a8      	cmp	r0, r5
 80189c2:	dd72      	ble.n	8018aaa <__gethex+0x392>
 80189c4:	1b45      	subs	r5, r0, r5
 80189c6:	42ae      	cmp	r6, r5
 80189c8:	dc36      	bgt.n	8018a38 <__gethex+0x320>
 80189ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80189ce:	2b02      	cmp	r3, #2
 80189d0:	d02a      	beq.n	8018a28 <__gethex+0x310>
 80189d2:	2b03      	cmp	r3, #3
 80189d4:	d02c      	beq.n	8018a30 <__gethex+0x318>
 80189d6:	2b01      	cmp	r3, #1
 80189d8:	d115      	bne.n	8018a06 <__gethex+0x2ee>
 80189da:	42ae      	cmp	r6, r5
 80189dc:	d113      	bne.n	8018a06 <__gethex+0x2ee>
 80189de:	2e01      	cmp	r6, #1
 80189e0:	d10b      	bne.n	80189fa <__gethex+0x2e2>
 80189e2:	9a04      	ldr	r2, [sp, #16]
 80189e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80189e8:	6013      	str	r3, [r2, #0]
 80189ea:	2301      	movs	r3, #1
 80189ec:	6123      	str	r3, [r4, #16]
 80189ee:	f8c9 3000 	str.w	r3, [r9]
 80189f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80189f4:	2762      	movs	r7, #98	; 0x62
 80189f6:	601c      	str	r4, [r3, #0]
 80189f8:	e723      	b.n	8018842 <__gethex+0x12a>
 80189fa:	1e71      	subs	r1, r6, #1
 80189fc:	4620      	mov	r0, r4
 80189fe:	f000 fe4b 	bl	8019698 <__any_on>
 8018a02:	2800      	cmp	r0, #0
 8018a04:	d1ed      	bne.n	80189e2 <__gethex+0x2ca>
 8018a06:	ee18 0a10 	vmov	r0, s16
 8018a0a:	4621      	mov	r1, r4
 8018a0c:	f000 f9ea 	bl	8018de4 <_Bfree>
 8018a10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018a12:	2300      	movs	r3, #0
 8018a14:	6013      	str	r3, [r2, #0]
 8018a16:	2750      	movs	r7, #80	; 0x50
 8018a18:	e713      	b.n	8018842 <__gethex+0x12a>
 8018a1a:	bf00      	nop
 8018a1c:	0801cb70 	.word	0x0801cb70
 8018a20:	0801caf4 	.word	0x0801caf4
 8018a24:	0801cb05 	.word	0x0801cb05
 8018a28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d1eb      	bne.n	8018a06 <__gethex+0x2ee>
 8018a2e:	e7d8      	b.n	80189e2 <__gethex+0x2ca>
 8018a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d1d5      	bne.n	80189e2 <__gethex+0x2ca>
 8018a36:	e7e6      	b.n	8018a06 <__gethex+0x2ee>
 8018a38:	1e6f      	subs	r7, r5, #1
 8018a3a:	f1ba 0f00 	cmp.w	sl, #0
 8018a3e:	d131      	bne.n	8018aa4 <__gethex+0x38c>
 8018a40:	b127      	cbz	r7, 8018a4c <__gethex+0x334>
 8018a42:	4639      	mov	r1, r7
 8018a44:	4620      	mov	r0, r4
 8018a46:	f000 fe27 	bl	8019698 <__any_on>
 8018a4a:	4682      	mov	sl, r0
 8018a4c:	117b      	asrs	r3, r7, #5
 8018a4e:	2101      	movs	r1, #1
 8018a50:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018a54:	f007 071f 	and.w	r7, r7, #31
 8018a58:	fa01 f707 	lsl.w	r7, r1, r7
 8018a5c:	421f      	tst	r7, r3
 8018a5e:	4629      	mov	r1, r5
 8018a60:	4620      	mov	r0, r4
 8018a62:	bf18      	it	ne
 8018a64:	f04a 0a02 	orrne.w	sl, sl, #2
 8018a68:	1b76      	subs	r6, r6, r5
 8018a6a:	f7ff fded 	bl	8018648 <rshift>
 8018a6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018a72:	2702      	movs	r7, #2
 8018a74:	f1ba 0f00 	cmp.w	sl, #0
 8018a78:	d048      	beq.n	8018b0c <__gethex+0x3f4>
 8018a7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018a7e:	2b02      	cmp	r3, #2
 8018a80:	d015      	beq.n	8018aae <__gethex+0x396>
 8018a82:	2b03      	cmp	r3, #3
 8018a84:	d017      	beq.n	8018ab6 <__gethex+0x39e>
 8018a86:	2b01      	cmp	r3, #1
 8018a88:	d109      	bne.n	8018a9e <__gethex+0x386>
 8018a8a:	f01a 0f02 	tst.w	sl, #2
 8018a8e:	d006      	beq.n	8018a9e <__gethex+0x386>
 8018a90:	f8d9 0000 	ldr.w	r0, [r9]
 8018a94:	ea4a 0a00 	orr.w	sl, sl, r0
 8018a98:	f01a 0f01 	tst.w	sl, #1
 8018a9c:	d10e      	bne.n	8018abc <__gethex+0x3a4>
 8018a9e:	f047 0710 	orr.w	r7, r7, #16
 8018aa2:	e033      	b.n	8018b0c <__gethex+0x3f4>
 8018aa4:	f04f 0a01 	mov.w	sl, #1
 8018aa8:	e7d0      	b.n	8018a4c <__gethex+0x334>
 8018aaa:	2701      	movs	r7, #1
 8018aac:	e7e2      	b.n	8018a74 <__gethex+0x35c>
 8018aae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ab0:	f1c3 0301 	rsb	r3, r3, #1
 8018ab4:	9315      	str	r3, [sp, #84]	; 0x54
 8018ab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d0f0      	beq.n	8018a9e <__gethex+0x386>
 8018abc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018ac0:	f104 0314 	add.w	r3, r4, #20
 8018ac4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018ac8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018acc:	f04f 0c00 	mov.w	ip, #0
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ad6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018ada:	d01c      	beq.n	8018b16 <__gethex+0x3fe>
 8018adc:	3201      	adds	r2, #1
 8018ade:	6002      	str	r2, [r0, #0]
 8018ae0:	2f02      	cmp	r7, #2
 8018ae2:	f104 0314 	add.w	r3, r4, #20
 8018ae6:	d13f      	bne.n	8018b68 <__gethex+0x450>
 8018ae8:	f8d8 2000 	ldr.w	r2, [r8]
 8018aec:	3a01      	subs	r2, #1
 8018aee:	42b2      	cmp	r2, r6
 8018af0:	d10a      	bne.n	8018b08 <__gethex+0x3f0>
 8018af2:	1171      	asrs	r1, r6, #5
 8018af4:	2201      	movs	r2, #1
 8018af6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018afa:	f006 061f 	and.w	r6, r6, #31
 8018afe:	fa02 f606 	lsl.w	r6, r2, r6
 8018b02:	421e      	tst	r6, r3
 8018b04:	bf18      	it	ne
 8018b06:	4617      	movne	r7, r2
 8018b08:	f047 0720 	orr.w	r7, r7, #32
 8018b0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b0e:	601c      	str	r4, [r3, #0]
 8018b10:	9b04      	ldr	r3, [sp, #16]
 8018b12:	601d      	str	r5, [r3, #0]
 8018b14:	e695      	b.n	8018842 <__gethex+0x12a>
 8018b16:	4299      	cmp	r1, r3
 8018b18:	f843 cc04 	str.w	ip, [r3, #-4]
 8018b1c:	d8d8      	bhi.n	8018ad0 <__gethex+0x3b8>
 8018b1e:	68a3      	ldr	r3, [r4, #8]
 8018b20:	459b      	cmp	fp, r3
 8018b22:	db19      	blt.n	8018b58 <__gethex+0x440>
 8018b24:	6861      	ldr	r1, [r4, #4]
 8018b26:	ee18 0a10 	vmov	r0, s16
 8018b2a:	3101      	adds	r1, #1
 8018b2c:	f000 f91a 	bl	8018d64 <_Balloc>
 8018b30:	4681      	mov	r9, r0
 8018b32:	b918      	cbnz	r0, 8018b3c <__gethex+0x424>
 8018b34:	4b1a      	ldr	r3, [pc, #104]	; (8018ba0 <__gethex+0x488>)
 8018b36:	4602      	mov	r2, r0
 8018b38:	2184      	movs	r1, #132	; 0x84
 8018b3a:	e6a8      	b.n	801888e <__gethex+0x176>
 8018b3c:	6922      	ldr	r2, [r4, #16]
 8018b3e:	3202      	adds	r2, #2
 8018b40:	f104 010c 	add.w	r1, r4, #12
 8018b44:	0092      	lsls	r2, r2, #2
 8018b46:	300c      	adds	r0, #12
 8018b48:	f7fd f966 	bl	8015e18 <memcpy>
 8018b4c:	4621      	mov	r1, r4
 8018b4e:	ee18 0a10 	vmov	r0, s16
 8018b52:	f000 f947 	bl	8018de4 <_Bfree>
 8018b56:	464c      	mov	r4, r9
 8018b58:	6923      	ldr	r3, [r4, #16]
 8018b5a:	1c5a      	adds	r2, r3, #1
 8018b5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018b60:	6122      	str	r2, [r4, #16]
 8018b62:	2201      	movs	r2, #1
 8018b64:	615a      	str	r2, [r3, #20]
 8018b66:	e7bb      	b.n	8018ae0 <__gethex+0x3c8>
 8018b68:	6922      	ldr	r2, [r4, #16]
 8018b6a:	455a      	cmp	r2, fp
 8018b6c:	dd0b      	ble.n	8018b86 <__gethex+0x46e>
 8018b6e:	2101      	movs	r1, #1
 8018b70:	4620      	mov	r0, r4
 8018b72:	f7ff fd69 	bl	8018648 <rshift>
 8018b76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b7a:	3501      	adds	r5, #1
 8018b7c:	42ab      	cmp	r3, r5
 8018b7e:	f6ff aed0 	blt.w	8018922 <__gethex+0x20a>
 8018b82:	2701      	movs	r7, #1
 8018b84:	e7c0      	b.n	8018b08 <__gethex+0x3f0>
 8018b86:	f016 061f 	ands.w	r6, r6, #31
 8018b8a:	d0fa      	beq.n	8018b82 <__gethex+0x46a>
 8018b8c:	449a      	add	sl, r3
 8018b8e:	f1c6 0620 	rsb	r6, r6, #32
 8018b92:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018b96:	f000 f9db 	bl	8018f50 <__hi0bits>
 8018b9a:	42b0      	cmp	r0, r6
 8018b9c:	dbe7      	blt.n	8018b6e <__gethex+0x456>
 8018b9e:	e7f0      	b.n	8018b82 <__gethex+0x46a>
 8018ba0:	0801caf4 	.word	0x0801caf4

08018ba4 <L_shift>:
 8018ba4:	f1c2 0208 	rsb	r2, r2, #8
 8018ba8:	0092      	lsls	r2, r2, #2
 8018baa:	b570      	push	{r4, r5, r6, lr}
 8018bac:	f1c2 0620 	rsb	r6, r2, #32
 8018bb0:	6843      	ldr	r3, [r0, #4]
 8018bb2:	6804      	ldr	r4, [r0, #0]
 8018bb4:	fa03 f506 	lsl.w	r5, r3, r6
 8018bb8:	432c      	orrs	r4, r5
 8018bba:	40d3      	lsrs	r3, r2
 8018bbc:	6004      	str	r4, [r0, #0]
 8018bbe:	f840 3f04 	str.w	r3, [r0, #4]!
 8018bc2:	4288      	cmp	r0, r1
 8018bc4:	d3f4      	bcc.n	8018bb0 <L_shift+0xc>
 8018bc6:	bd70      	pop	{r4, r5, r6, pc}

08018bc8 <__match>:
 8018bc8:	b530      	push	{r4, r5, lr}
 8018bca:	6803      	ldr	r3, [r0, #0]
 8018bcc:	3301      	adds	r3, #1
 8018bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018bd2:	b914      	cbnz	r4, 8018bda <__match+0x12>
 8018bd4:	6003      	str	r3, [r0, #0]
 8018bd6:	2001      	movs	r0, #1
 8018bd8:	bd30      	pop	{r4, r5, pc}
 8018bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018bde:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018be2:	2d19      	cmp	r5, #25
 8018be4:	bf98      	it	ls
 8018be6:	3220      	addls	r2, #32
 8018be8:	42a2      	cmp	r2, r4
 8018bea:	d0f0      	beq.n	8018bce <__match+0x6>
 8018bec:	2000      	movs	r0, #0
 8018bee:	e7f3      	b.n	8018bd8 <__match+0x10>

08018bf0 <__hexnan>:
 8018bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf4:	680b      	ldr	r3, [r1, #0]
 8018bf6:	6801      	ldr	r1, [r0, #0]
 8018bf8:	115e      	asrs	r6, r3, #5
 8018bfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018bfe:	f013 031f 	ands.w	r3, r3, #31
 8018c02:	b087      	sub	sp, #28
 8018c04:	bf18      	it	ne
 8018c06:	3604      	addne	r6, #4
 8018c08:	2500      	movs	r5, #0
 8018c0a:	1f37      	subs	r7, r6, #4
 8018c0c:	4682      	mov	sl, r0
 8018c0e:	4690      	mov	r8, r2
 8018c10:	9301      	str	r3, [sp, #4]
 8018c12:	f846 5c04 	str.w	r5, [r6, #-4]
 8018c16:	46b9      	mov	r9, r7
 8018c18:	463c      	mov	r4, r7
 8018c1a:	9502      	str	r5, [sp, #8]
 8018c1c:	46ab      	mov	fp, r5
 8018c1e:	784a      	ldrb	r2, [r1, #1]
 8018c20:	1c4b      	adds	r3, r1, #1
 8018c22:	9303      	str	r3, [sp, #12]
 8018c24:	b342      	cbz	r2, 8018c78 <__hexnan+0x88>
 8018c26:	4610      	mov	r0, r2
 8018c28:	9105      	str	r1, [sp, #20]
 8018c2a:	9204      	str	r2, [sp, #16]
 8018c2c:	f7ff fd5e 	bl	80186ec <__hexdig_fun>
 8018c30:	2800      	cmp	r0, #0
 8018c32:	d14f      	bne.n	8018cd4 <__hexnan+0xe4>
 8018c34:	9a04      	ldr	r2, [sp, #16]
 8018c36:	9905      	ldr	r1, [sp, #20]
 8018c38:	2a20      	cmp	r2, #32
 8018c3a:	d818      	bhi.n	8018c6e <__hexnan+0x7e>
 8018c3c:	9b02      	ldr	r3, [sp, #8]
 8018c3e:	459b      	cmp	fp, r3
 8018c40:	dd13      	ble.n	8018c6a <__hexnan+0x7a>
 8018c42:	454c      	cmp	r4, r9
 8018c44:	d206      	bcs.n	8018c54 <__hexnan+0x64>
 8018c46:	2d07      	cmp	r5, #7
 8018c48:	dc04      	bgt.n	8018c54 <__hexnan+0x64>
 8018c4a:	462a      	mov	r2, r5
 8018c4c:	4649      	mov	r1, r9
 8018c4e:	4620      	mov	r0, r4
 8018c50:	f7ff ffa8 	bl	8018ba4 <L_shift>
 8018c54:	4544      	cmp	r4, r8
 8018c56:	d950      	bls.n	8018cfa <__hexnan+0x10a>
 8018c58:	2300      	movs	r3, #0
 8018c5a:	f1a4 0904 	sub.w	r9, r4, #4
 8018c5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8018c62:	f8cd b008 	str.w	fp, [sp, #8]
 8018c66:	464c      	mov	r4, r9
 8018c68:	461d      	mov	r5, r3
 8018c6a:	9903      	ldr	r1, [sp, #12]
 8018c6c:	e7d7      	b.n	8018c1e <__hexnan+0x2e>
 8018c6e:	2a29      	cmp	r2, #41	; 0x29
 8018c70:	d156      	bne.n	8018d20 <__hexnan+0x130>
 8018c72:	3102      	adds	r1, #2
 8018c74:	f8ca 1000 	str.w	r1, [sl]
 8018c78:	f1bb 0f00 	cmp.w	fp, #0
 8018c7c:	d050      	beq.n	8018d20 <__hexnan+0x130>
 8018c7e:	454c      	cmp	r4, r9
 8018c80:	d206      	bcs.n	8018c90 <__hexnan+0xa0>
 8018c82:	2d07      	cmp	r5, #7
 8018c84:	dc04      	bgt.n	8018c90 <__hexnan+0xa0>
 8018c86:	462a      	mov	r2, r5
 8018c88:	4649      	mov	r1, r9
 8018c8a:	4620      	mov	r0, r4
 8018c8c:	f7ff ff8a 	bl	8018ba4 <L_shift>
 8018c90:	4544      	cmp	r4, r8
 8018c92:	d934      	bls.n	8018cfe <__hexnan+0x10e>
 8018c94:	f1a8 0204 	sub.w	r2, r8, #4
 8018c98:	4623      	mov	r3, r4
 8018c9a:	f853 1b04 	ldr.w	r1, [r3], #4
 8018c9e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018ca2:	429f      	cmp	r7, r3
 8018ca4:	d2f9      	bcs.n	8018c9a <__hexnan+0xaa>
 8018ca6:	1b3b      	subs	r3, r7, r4
 8018ca8:	f023 0303 	bic.w	r3, r3, #3
 8018cac:	3304      	adds	r3, #4
 8018cae:	3401      	adds	r4, #1
 8018cb0:	3e03      	subs	r6, #3
 8018cb2:	42b4      	cmp	r4, r6
 8018cb4:	bf88      	it	hi
 8018cb6:	2304      	movhi	r3, #4
 8018cb8:	4443      	add	r3, r8
 8018cba:	2200      	movs	r2, #0
 8018cbc:	f843 2b04 	str.w	r2, [r3], #4
 8018cc0:	429f      	cmp	r7, r3
 8018cc2:	d2fb      	bcs.n	8018cbc <__hexnan+0xcc>
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	b91b      	cbnz	r3, 8018cd0 <__hexnan+0xe0>
 8018cc8:	4547      	cmp	r7, r8
 8018cca:	d127      	bne.n	8018d1c <__hexnan+0x12c>
 8018ccc:	2301      	movs	r3, #1
 8018cce:	603b      	str	r3, [r7, #0]
 8018cd0:	2005      	movs	r0, #5
 8018cd2:	e026      	b.n	8018d22 <__hexnan+0x132>
 8018cd4:	3501      	adds	r5, #1
 8018cd6:	2d08      	cmp	r5, #8
 8018cd8:	f10b 0b01 	add.w	fp, fp, #1
 8018cdc:	dd06      	ble.n	8018cec <__hexnan+0xfc>
 8018cde:	4544      	cmp	r4, r8
 8018ce0:	d9c3      	bls.n	8018c6a <__hexnan+0x7a>
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	f844 3c04 	str.w	r3, [r4, #-4]
 8018ce8:	2501      	movs	r5, #1
 8018cea:	3c04      	subs	r4, #4
 8018cec:	6822      	ldr	r2, [r4, #0]
 8018cee:	f000 000f 	and.w	r0, r0, #15
 8018cf2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018cf6:	6022      	str	r2, [r4, #0]
 8018cf8:	e7b7      	b.n	8018c6a <__hexnan+0x7a>
 8018cfa:	2508      	movs	r5, #8
 8018cfc:	e7b5      	b.n	8018c6a <__hexnan+0x7a>
 8018cfe:	9b01      	ldr	r3, [sp, #4]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d0df      	beq.n	8018cc4 <__hexnan+0xd4>
 8018d04:	f04f 32ff 	mov.w	r2, #4294967295
 8018d08:	f1c3 0320 	rsb	r3, r3, #32
 8018d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8018d10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018d14:	401a      	ands	r2, r3
 8018d16:	f846 2c04 	str.w	r2, [r6, #-4]
 8018d1a:	e7d3      	b.n	8018cc4 <__hexnan+0xd4>
 8018d1c:	3f04      	subs	r7, #4
 8018d1e:	e7d1      	b.n	8018cc4 <__hexnan+0xd4>
 8018d20:	2004      	movs	r0, #4
 8018d22:	b007      	add	sp, #28
 8018d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d28 <_localeconv_r>:
 8018d28:	4800      	ldr	r0, [pc, #0]	; (8018d2c <_localeconv_r+0x4>)
 8018d2a:	4770      	bx	lr
 8018d2c:	200013a8 	.word	0x200013a8

08018d30 <malloc>:
 8018d30:	4b02      	ldr	r3, [pc, #8]	; (8018d3c <malloc+0xc>)
 8018d32:	4601      	mov	r1, r0
 8018d34:	6818      	ldr	r0, [r3, #0]
 8018d36:	f000 bd2f 	b.w	8019798 <_malloc_r>
 8018d3a:	bf00      	nop
 8018d3c:	20001250 	.word	0x20001250

08018d40 <__ascii_mbtowc>:
 8018d40:	b082      	sub	sp, #8
 8018d42:	b901      	cbnz	r1, 8018d46 <__ascii_mbtowc+0x6>
 8018d44:	a901      	add	r1, sp, #4
 8018d46:	b142      	cbz	r2, 8018d5a <__ascii_mbtowc+0x1a>
 8018d48:	b14b      	cbz	r3, 8018d5e <__ascii_mbtowc+0x1e>
 8018d4a:	7813      	ldrb	r3, [r2, #0]
 8018d4c:	600b      	str	r3, [r1, #0]
 8018d4e:	7812      	ldrb	r2, [r2, #0]
 8018d50:	1e10      	subs	r0, r2, #0
 8018d52:	bf18      	it	ne
 8018d54:	2001      	movne	r0, #1
 8018d56:	b002      	add	sp, #8
 8018d58:	4770      	bx	lr
 8018d5a:	4610      	mov	r0, r2
 8018d5c:	e7fb      	b.n	8018d56 <__ascii_mbtowc+0x16>
 8018d5e:	f06f 0001 	mvn.w	r0, #1
 8018d62:	e7f8      	b.n	8018d56 <__ascii_mbtowc+0x16>

08018d64 <_Balloc>:
 8018d64:	b570      	push	{r4, r5, r6, lr}
 8018d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018d68:	4604      	mov	r4, r0
 8018d6a:	460d      	mov	r5, r1
 8018d6c:	b976      	cbnz	r6, 8018d8c <_Balloc+0x28>
 8018d6e:	2010      	movs	r0, #16
 8018d70:	f7ff ffde 	bl	8018d30 <malloc>
 8018d74:	4602      	mov	r2, r0
 8018d76:	6260      	str	r0, [r4, #36]	; 0x24
 8018d78:	b920      	cbnz	r0, 8018d84 <_Balloc+0x20>
 8018d7a:	4b18      	ldr	r3, [pc, #96]	; (8018ddc <_Balloc+0x78>)
 8018d7c:	4818      	ldr	r0, [pc, #96]	; (8018de0 <_Balloc+0x7c>)
 8018d7e:	2166      	movs	r1, #102	; 0x66
 8018d80:	f000 fefa 	bl	8019b78 <__assert_func>
 8018d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018d88:	6006      	str	r6, [r0, #0]
 8018d8a:	60c6      	str	r6, [r0, #12]
 8018d8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018d8e:	68f3      	ldr	r3, [r6, #12]
 8018d90:	b183      	cbz	r3, 8018db4 <_Balloc+0x50>
 8018d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d94:	68db      	ldr	r3, [r3, #12]
 8018d96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018d9a:	b9b8      	cbnz	r0, 8018dcc <_Balloc+0x68>
 8018d9c:	2101      	movs	r1, #1
 8018d9e:	fa01 f605 	lsl.w	r6, r1, r5
 8018da2:	1d72      	adds	r2, r6, #5
 8018da4:	0092      	lsls	r2, r2, #2
 8018da6:	4620      	mov	r0, r4
 8018da8:	f000 fc97 	bl	80196da <_calloc_r>
 8018dac:	b160      	cbz	r0, 8018dc8 <_Balloc+0x64>
 8018dae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018db2:	e00e      	b.n	8018dd2 <_Balloc+0x6e>
 8018db4:	2221      	movs	r2, #33	; 0x21
 8018db6:	2104      	movs	r1, #4
 8018db8:	4620      	mov	r0, r4
 8018dba:	f000 fc8e 	bl	80196da <_calloc_r>
 8018dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018dc0:	60f0      	str	r0, [r6, #12]
 8018dc2:	68db      	ldr	r3, [r3, #12]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d1e4      	bne.n	8018d92 <_Balloc+0x2e>
 8018dc8:	2000      	movs	r0, #0
 8018dca:	bd70      	pop	{r4, r5, r6, pc}
 8018dcc:	6802      	ldr	r2, [r0, #0]
 8018dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018dd8:	e7f7      	b.n	8018dca <_Balloc+0x66>
 8018dda:	bf00      	nop
 8018ddc:	0801ca7e 	.word	0x0801ca7e
 8018de0:	0801cb84 	.word	0x0801cb84

08018de4 <_Bfree>:
 8018de4:	b570      	push	{r4, r5, r6, lr}
 8018de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018de8:	4605      	mov	r5, r0
 8018dea:	460c      	mov	r4, r1
 8018dec:	b976      	cbnz	r6, 8018e0c <_Bfree+0x28>
 8018dee:	2010      	movs	r0, #16
 8018df0:	f7ff ff9e 	bl	8018d30 <malloc>
 8018df4:	4602      	mov	r2, r0
 8018df6:	6268      	str	r0, [r5, #36]	; 0x24
 8018df8:	b920      	cbnz	r0, 8018e04 <_Bfree+0x20>
 8018dfa:	4b09      	ldr	r3, [pc, #36]	; (8018e20 <_Bfree+0x3c>)
 8018dfc:	4809      	ldr	r0, [pc, #36]	; (8018e24 <_Bfree+0x40>)
 8018dfe:	218a      	movs	r1, #138	; 0x8a
 8018e00:	f000 feba 	bl	8019b78 <__assert_func>
 8018e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e08:	6006      	str	r6, [r0, #0]
 8018e0a:	60c6      	str	r6, [r0, #12]
 8018e0c:	b13c      	cbz	r4, 8018e1e <_Bfree+0x3a>
 8018e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018e10:	6862      	ldr	r2, [r4, #4]
 8018e12:	68db      	ldr	r3, [r3, #12]
 8018e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018e18:	6021      	str	r1, [r4, #0]
 8018e1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018e1e:	bd70      	pop	{r4, r5, r6, pc}
 8018e20:	0801ca7e 	.word	0x0801ca7e
 8018e24:	0801cb84 	.word	0x0801cb84

08018e28 <__multadd>:
 8018e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e2c:	690e      	ldr	r6, [r1, #16]
 8018e2e:	4607      	mov	r7, r0
 8018e30:	4698      	mov	r8, r3
 8018e32:	460c      	mov	r4, r1
 8018e34:	f101 0014 	add.w	r0, r1, #20
 8018e38:	2300      	movs	r3, #0
 8018e3a:	6805      	ldr	r5, [r0, #0]
 8018e3c:	b2a9      	uxth	r1, r5
 8018e3e:	fb02 8101 	mla	r1, r2, r1, r8
 8018e42:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018e46:	0c2d      	lsrs	r5, r5, #16
 8018e48:	fb02 c505 	mla	r5, r2, r5, ip
 8018e4c:	b289      	uxth	r1, r1
 8018e4e:	3301      	adds	r3, #1
 8018e50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018e54:	429e      	cmp	r6, r3
 8018e56:	f840 1b04 	str.w	r1, [r0], #4
 8018e5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018e5e:	dcec      	bgt.n	8018e3a <__multadd+0x12>
 8018e60:	f1b8 0f00 	cmp.w	r8, #0
 8018e64:	d022      	beq.n	8018eac <__multadd+0x84>
 8018e66:	68a3      	ldr	r3, [r4, #8]
 8018e68:	42b3      	cmp	r3, r6
 8018e6a:	dc19      	bgt.n	8018ea0 <__multadd+0x78>
 8018e6c:	6861      	ldr	r1, [r4, #4]
 8018e6e:	4638      	mov	r0, r7
 8018e70:	3101      	adds	r1, #1
 8018e72:	f7ff ff77 	bl	8018d64 <_Balloc>
 8018e76:	4605      	mov	r5, r0
 8018e78:	b928      	cbnz	r0, 8018e86 <__multadd+0x5e>
 8018e7a:	4602      	mov	r2, r0
 8018e7c:	4b0d      	ldr	r3, [pc, #52]	; (8018eb4 <__multadd+0x8c>)
 8018e7e:	480e      	ldr	r0, [pc, #56]	; (8018eb8 <__multadd+0x90>)
 8018e80:	21b5      	movs	r1, #181	; 0xb5
 8018e82:	f000 fe79 	bl	8019b78 <__assert_func>
 8018e86:	6922      	ldr	r2, [r4, #16]
 8018e88:	3202      	adds	r2, #2
 8018e8a:	f104 010c 	add.w	r1, r4, #12
 8018e8e:	0092      	lsls	r2, r2, #2
 8018e90:	300c      	adds	r0, #12
 8018e92:	f7fc ffc1 	bl	8015e18 <memcpy>
 8018e96:	4621      	mov	r1, r4
 8018e98:	4638      	mov	r0, r7
 8018e9a:	f7ff ffa3 	bl	8018de4 <_Bfree>
 8018e9e:	462c      	mov	r4, r5
 8018ea0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018ea4:	3601      	adds	r6, #1
 8018ea6:	f8c3 8014 	str.w	r8, [r3, #20]
 8018eaa:	6126      	str	r6, [r4, #16]
 8018eac:	4620      	mov	r0, r4
 8018eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eb2:	bf00      	nop
 8018eb4:	0801caf4 	.word	0x0801caf4
 8018eb8:	0801cb84 	.word	0x0801cb84

08018ebc <__s2b>:
 8018ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ec0:	460c      	mov	r4, r1
 8018ec2:	4615      	mov	r5, r2
 8018ec4:	461f      	mov	r7, r3
 8018ec6:	2209      	movs	r2, #9
 8018ec8:	3308      	adds	r3, #8
 8018eca:	4606      	mov	r6, r0
 8018ecc:	fb93 f3f2 	sdiv	r3, r3, r2
 8018ed0:	2100      	movs	r1, #0
 8018ed2:	2201      	movs	r2, #1
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	db09      	blt.n	8018eec <__s2b+0x30>
 8018ed8:	4630      	mov	r0, r6
 8018eda:	f7ff ff43 	bl	8018d64 <_Balloc>
 8018ede:	b940      	cbnz	r0, 8018ef2 <__s2b+0x36>
 8018ee0:	4602      	mov	r2, r0
 8018ee2:	4b19      	ldr	r3, [pc, #100]	; (8018f48 <__s2b+0x8c>)
 8018ee4:	4819      	ldr	r0, [pc, #100]	; (8018f4c <__s2b+0x90>)
 8018ee6:	21ce      	movs	r1, #206	; 0xce
 8018ee8:	f000 fe46 	bl	8019b78 <__assert_func>
 8018eec:	0052      	lsls	r2, r2, #1
 8018eee:	3101      	adds	r1, #1
 8018ef0:	e7f0      	b.n	8018ed4 <__s2b+0x18>
 8018ef2:	9b08      	ldr	r3, [sp, #32]
 8018ef4:	6143      	str	r3, [r0, #20]
 8018ef6:	2d09      	cmp	r5, #9
 8018ef8:	f04f 0301 	mov.w	r3, #1
 8018efc:	6103      	str	r3, [r0, #16]
 8018efe:	dd16      	ble.n	8018f2e <__s2b+0x72>
 8018f00:	f104 0909 	add.w	r9, r4, #9
 8018f04:	46c8      	mov	r8, r9
 8018f06:	442c      	add	r4, r5
 8018f08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018f0c:	4601      	mov	r1, r0
 8018f0e:	3b30      	subs	r3, #48	; 0x30
 8018f10:	220a      	movs	r2, #10
 8018f12:	4630      	mov	r0, r6
 8018f14:	f7ff ff88 	bl	8018e28 <__multadd>
 8018f18:	45a0      	cmp	r8, r4
 8018f1a:	d1f5      	bne.n	8018f08 <__s2b+0x4c>
 8018f1c:	f1a5 0408 	sub.w	r4, r5, #8
 8018f20:	444c      	add	r4, r9
 8018f22:	1b2d      	subs	r5, r5, r4
 8018f24:	1963      	adds	r3, r4, r5
 8018f26:	42bb      	cmp	r3, r7
 8018f28:	db04      	blt.n	8018f34 <__s2b+0x78>
 8018f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f2e:	340a      	adds	r4, #10
 8018f30:	2509      	movs	r5, #9
 8018f32:	e7f6      	b.n	8018f22 <__s2b+0x66>
 8018f34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018f38:	4601      	mov	r1, r0
 8018f3a:	3b30      	subs	r3, #48	; 0x30
 8018f3c:	220a      	movs	r2, #10
 8018f3e:	4630      	mov	r0, r6
 8018f40:	f7ff ff72 	bl	8018e28 <__multadd>
 8018f44:	e7ee      	b.n	8018f24 <__s2b+0x68>
 8018f46:	bf00      	nop
 8018f48:	0801caf4 	.word	0x0801caf4
 8018f4c:	0801cb84 	.word	0x0801cb84

08018f50 <__hi0bits>:
 8018f50:	0c03      	lsrs	r3, r0, #16
 8018f52:	041b      	lsls	r3, r3, #16
 8018f54:	b9d3      	cbnz	r3, 8018f8c <__hi0bits+0x3c>
 8018f56:	0400      	lsls	r0, r0, #16
 8018f58:	2310      	movs	r3, #16
 8018f5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018f5e:	bf04      	itt	eq
 8018f60:	0200      	lsleq	r0, r0, #8
 8018f62:	3308      	addeq	r3, #8
 8018f64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018f68:	bf04      	itt	eq
 8018f6a:	0100      	lsleq	r0, r0, #4
 8018f6c:	3304      	addeq	r3, #4
 8018f6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018f72:	bf04      	itt	eq
 8018f74:	0080      	lsleq	r0, r0, #2
 8018f76:	3302      	addeq	r3, #2
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	db05      	blt.n	8018f88 <__hi0bits+0x38>
 8018f7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018f80:	f103 0301 	add.w	r3, r3, #1
 8018f84:	bf08      	it	eq
 8018f86:	2320      	moveq	r3, #32
 8018f88:	4618      	mov	r0, r3
 8018f8a:	4770      	bx	lr
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	e7e4      	b.n	8018f5a <__hi0bits+0xa>

08018f90 <__lo0bits>:
 8018f90:	6803      	ldr	r3, [r0, #0]
 8018f92:	f013 0207 	ands.w	r2, r3, #7
 8018f96:	4601      	mov	r1, r0
 8018f98:	d00b      	beq.n	8018fb2 <__lo0bits+0x22>
 8018f9a:	07da      	lsls	r2, r3, #31
 8018f9c:	d424      	bmi.n	8018fe8 <__lo0bits+0x58>
 8018f9e:	0798      	lsls	r0, r3, #30
 8018fa0:	bf49      	itett	mi
 8018fa2:	085b      	lsrmi	r3, r3, #1
 8018fa4:	089b      	lsrpl	r3, r3, #2
 8018fa6:	2001      	movmi	r0, #1
 8018fa8:	600b      	strmi	r3, [r1, #0]
 8018faa:	bf5c      	itt	pl
 8018fac:	600b      	strpl	r3, [r1, #0]
 8018fae:	2002      	movpl	r0, #2
 8018fb0:	4770      	bx	lr
 8018fb2:	b298      	uxth	r0, r3
 8018fb4:	b9b0      	cbnz	r0, 8018fe4 <__lo0bits+0x54>
 8018fb6:	0c1b      	lsrs	r3, r3, #16
 8018fb8:	2010      	movs	r0, #16
 8018fba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018fbe:	bf04      	itt	eq
 8018fc0:	0a1b      	lsreq	r3, r3, #8
 8018fc2:	3008      	addeq	r0, #8
 8018fc4:	071a      	lsls	r2, r3, #28
 8018fc6:	bf04      	itt	eq
 8018fc8:	091b      	lsreq	r3, r3, #4
 8018fca:	3004      	addeq	r0, #4
 8018fcc:	079a      	lsls	r2, r3, #30
 8018fce:	bf04      	itt	eq
 8018fd0:	089b      	lsreq	r3, r3, #2
 8018fd2:	3002      	addeq	r0, #2
 8018fd4:	07da      	lsls	r2, r3, #31
 8018fd6:	d403      	bmi.n	8018fe0 <__lo0bits+0x50>
 8018fd8:	085b      	lsrs	r3, r3, #1
 8018fda:	f100 0001 	add.w	r0, r0, #1
 8018fde:	d005      	beq.n	8018fec <__lo0bits+0x5c>
 8018fe0:	600b      	str	r3, [r1, #0]
 8018fe2:	4770      	bx	lr
 8018fe4:	4610      	mov	r0, r2
 8018fe6:	e7e8      	b.n	8018fba <__lo0bits+0x2a>
 8018fe8:	2000      	movs	r0, #0
 8018fea:	4770      	bx	lr
 8018fec:	2020      	movs	r0, #32
 8018fee:	4770      	bx	lr

08018ff0 <__i2b>:
 8018ff0:	b510      	push	{r4, lr}
 8018ff2:	460c      	mov	r4, r1
 8018ff4:	2101      	movs	r1, #1
 8018ff6:	f7ff feb5 	bl	8018d64 <_Balloc>
 8018ffa:	4602      	mov	r2, r0
 8018ffc:	b928      	cbnz	r0, 801900a <__i2b+0x1a>
 8018ffe:	4b05      	ldr	r3, [pc, #20]	; (8019014 <__i2b+0x24>)
 8019000:	4805      	ldr	r0, [pc, #20]	; (8019018 <__i2b+0x28>)
 8019002:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019006:	f000 fdb7 	bl	8019b78 <__assert_func>
 801900a:	2301      	movs	r3, #1
 801900c:	6144      	str	r4, [r0, #20]
 801900e:	6103      	str	r3, [r0, #16]
 8019010:	bd10      	pop	{r4, pc}
 8019012:	bf00      	nop
 8019014:	0801caf4 	.word	0x0801caf4
 8019018:	0801cb84 	.word	0x0801cb84

0801901c <__multiply>:
 801901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019020:	4614      	mov	r4, r2
 8019022:	690a      	ldr	r2, [r1, #16]
 8019024:	6923      	ldr	r3, [r4, #16]
 8019026:	429a      	cmp	r2, r3
 8019028:	bfb8      	it	lt
 801902a:	460b      	movlt	r3, r1
 801902c:	460d      	mov	r5, r1
 801902e:	bfbc      	itt	lt
 8019030:	4625      	movlt	r5, r4
 8019032:	461c      	movlt	r4, r3
 8019034:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019038:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801903c:	68ab      	ldr	r3, [r5, #8]
 801903e:	6869      	ldr	r1, [r5, #4]
 8019040:	eb0a 0709 	add.w	r7, sl, r9
 8019044:	42bb      	cmp	r3, r7
 8019046:	b085      	sub	sp, #20
 8019048:	bfb8      	it	lt
 801904a:	3101      	addlt	r1, #1
 801904c:	f7ff fe8a 	bl	8018d64 <_Balloc>
 8019050:	b930      	cbnz	r0, 8019060 <__multiply+0x44>
 8019052:	4602      	mov	r2, r0
 8019054:	4b42      	ldr	r3, [pc, #264]	; (8019160 <__multiply+0x144>)
 8019056:	4843      	ldr	r0, [pc, #268]	; (8019164 <__multiply+0x148>)
 8019058:	f240 115d 	movw	r1, #349	; 0x15d
 801905c:	f000 fd8c 	bl	8019b78 <__assert_func>
 8019060:	f100 0614 	add.w	r6, r0, #20
 8019064:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019068:	4633      	mov	r3, r6
 801906a:	2200      	movs	r2, #0
 801906c:	4543      	cmp	r3, r8
 801906e:	d31e      	bcc.n	80190ae <__multiply+0x92>
 8019070:	f105 0c14 	add.w	ip, r5, #20
 8019074:	f104 0314 	add.w	r3, r4, #20
 8019078:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801907c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019080:	9202      	str	r2, [sp, #8]
 8019082:	ebac 0205 	sub.w	r2, ip, r5
 8019086:	3a15      	subs	r2, #21
 8019088:	f022 0203 	bic.w	r2, r2, #3
 801908c:	3204      	adds	r2, #4
 801908e:	f105 0115 	add.w	r1, r5, #21
 8019092:	458c      	cmp	ip, r1
 8019094:	bf38      	it	cc
 8019096:	2204      	movcc	r2, #4
 8019098:	9201      	str	r2, [sp, #4]
 801909a:	9a02      	ldr	r2, [sp, #8]
 801909c:	9303      	str	r3, [sp, #12]
 801909e:	429a      	cmp	r2, r3
 80190a0:	d808      	bhi.n	80190b4 <__multiply+0x98>
 80190a2:	2f00      	cmp	r7, #0
 80190a4:	dc55      	bgt.n	8019152 <__multiply+0x136>
 80190a6:	6107      	str	r7, [r0, #16]
 80190a8:	b005      	add	sp, #20
 80190aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ae:	f843 2b04 	str.w	r2, [r3], #4
 80190b2:	e7db      	b.n	801906c <__multiply+0x50>
 80190b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80190b8:	f1ba 0f00 	cmp.w	sl, #0
 80190bc:	d020      	beq.n	8019100 <__multiply+0xe4>
 80190be:	f105 0e14 	add.w	lr, r5, #20
 80190c2:	46b1      	mov	r9, r6
 80190c4:	2200      	movs	r2, #0
 80190c6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80190ca:	f8d9 b000 	ldr.w	fp, [r9]
 80190ce:	b2a1      	uxth	r1, r4
 80190d0:	fa1f fb8b 	uxth.w	fp, fp
 80190d4:	fb0a b101 	mla	r1, sl, r1, fp
 80190d8:	4411      	add	r1, r2
 80190da:	f8d9 2000 	ldr.w	r2, [r9]
 80190de:	0c24      	lsrs	r4, r4, #16
 80190e0:	0c12      	lsrs	r2, r2, #16
 80190e2:	fb0a 2404 	mla	r4, sl, r4, r2
 80190e6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80190ea:	b289      	uxth	r1, r1
 80190ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80190f0:	45f4      	cmp	ip, lr
 80190f2:	f849 1b04 	str.w	r1, [r9], #4
 80190f6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80190fa:	d8e4      	bhi.n	80190c6 <__multiply+0xaa>
 80190fc:	9901      	ldr	r1, [sp, #4]
 80190fe:	5072      	str	r2, [r6, r1]
 8019100:	9a03      	ldr	r2, [sp, #12]
 8019102:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019106:	3304      	adds	r3, #4
 8019108:	f1b9 0f00 	cmp.w	r9, #0
 801910c:	d01f      	beq.n	801914e <__multiply+0x132>
 801910e:	6834      	ldr	r4, [r6, #0]
 8019110:	f105 0114 	add.w	r1, r5, #20
 8019114:	46b6      	mov	lr, r6
 8019116:	f04f 0a00 	mov.w	sl, #0
 801911a:	880a      	ldrh	r2, [r1, #0]
 801911c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019120:	fb09 b202 	mla	r2, r9, r2, fp
 8019124:	4492      	add	sl, r2
 8019126:	b2a4      	uxth	r4, r4
 8019128:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801912c:	f84e 4b04 	str.w	r4, [lr], #4
 8019130:	f851 4b04 	ldr.w	r4, [r1], #4
 8019134:	f8be 2000 	ldrh.w	r2, [lr]
 8019138:	0c24      	lsrs	r4, r4, #16
 801913a:	fb09 2404 	mla	r4, r9, r4, r2
 801913e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019142:	458c      	cmp	ip, r1
 8019144:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019148:	d8e7      	bhi.n	801911a <__multiply+0xfe>
 801914a:	9a01      	ldr	r2, [sp, #4]
 801914c:	50b4      	str	r4, [r6, r2]
 801914e:	3604      	adds	r6, #4
 8019150:	e7a3      	b.n	801909a <__multiply+0x7e>
 8019152:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019156:	2b00      	cmp	r3, #0
 8019158:	d1a5      	bne.n	80190a6 <__multiply+0x8a>
 801915a:	3f01      	subs	r7, #1
 801915c:	e7a1      	b.n	80190a2 <__multiply+0x86>
 801915e:	bf00      	nop
 8019160:	0801caf4 	.word	0x0801caf4
 8019164:	0801cb84 	.word	0x0801cb84

08019168 <__pow5mult>:
 8019168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801916c:	4615      	mov	r5, r2
 801916e:	f012 0203 	ands.w	r2, r2, #3
 8019172:	4606      	mov	r6, r0
 8019174:	460f      	mov	r7, r1
 8019176:	d007      	beq.n	8019188 <__pow5mult+0x20>
 8019178:	4c25      	ldr	r4, [pc, #148]	; (8019210 <__pow5mult+0xa8>)
 801917a:	3a01      	subs	r2, #1
 801917c:	2300      	movs	r3, #0
 801917e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019182:	f7ff fe51 	bl	8018e28 <__multadd>
 8019186:	4607      	mov	r7, r0
 8019188:	10ad      	asrs	r5, r5, #2
 801918a:	d03d      	beq.n	8019208 <__pow5mult+0xa0>
 801918c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801918e:	b97c      	cbnz	r4, 80191b0 <__pow5mult+0x48>
 8019190:	2010      	movs	r0, #16
 8019192:	f7ff fdcd 	bl	8018d30 <malloc>
 8019196:	4602      	mov	r2, r0
 8019198:	6270      	str	r0, [r6, #36]	; 0x24
 801919a:	b928      	cbnz	r0, 80191a8 <__pow5mult+0x40>
 801919c:	4b1d      	ldr	r3, [pc, #116]	; (8019214 <__pow5mult+0xac>)
 801919e:	481e      	ldr	r0, [pc, #120]	; (8019218 <__pow5mult+0xb0>)
 80191a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80191a4:	f000 fce8 	bl	8019b78 <__assert_func>
 80191a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80191ac:	6004      	str	r4, [r0, #0]
 80191ae:	60c4      	str	r4, [r0, #12]
 80191b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80191b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80191b8:	b94c      	cbnz	r4, 80191ce <__pow5mult+0x66>
 80191ba:	f240 2171 	movw	r1, #625	; 0x271
 80191be:	4630      	mov	r0, r6
 80191c0:	f7ff ff16 	bl	8018ff0 <__i2b>
 80191c4:	2300      	movs	r3, #0
 80191c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80191ca:	4604      	mov	r4, r0
 80191cc:	6003      	str	r3, [r0, #0]
 80191ce:	f04f 0900 	mov.w	r9, #0
 80191d2:	07eb      	lsls	r3, r5, #31
 80191d4:	d50a      	bpl.n	80191ec <__pow5mult+0x84>
 80191d6:	4639      	mov	r1, r7
 80191d8:	4622      	mov	r2, r4
 80191da:	4630      	mov	r0, r6
 80191dc:	f7ff ff1e 	bl	801901c <__multiply>
 80191e0:	4639      	mov	r1, r7
 80191e2:	4680      	mov	r8, r0
 80191e4:	4630      	mov	r0, r6
 80191e6:	f7ff fdfd 	bl	8018de4 <_Bfree>
 80191ea:	4647      	mov	r7, r8
 80191ec:	106d      	asrs	r5, r5, #1
 80191ee:	d00b      	beq.n	8019208 <__pow5mult+0xa0>
 80191f0:	6820      	ldr	r0, [r4, #0]
 80191f2:	b938      	cbnz	r0, 8019204 <__pow5mult+0x9c>
 80191f4:	4622      	mov	r2, r4
 80191f6:	4621      	mov	r1, r4
 80191f8:	4630      	mov	r0, r6
 80191fa:	f7ff ff0f 	bl	801901c <__multiply>
 80191fe:	6020      	str	r0, [r4, #0]
 8019200:	f8c0 9000 	str.w	r9, [r0]
 8019204:	4604      	mov	r4, r0
 8019206:	e7e4      	b.n	80191d2 <__pow5mult+0x6a>
 8019208:	4638      	mov	r0, r7
 801920a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801920e:	bf00      	nop
 8019210:	0801ccd8 	.word	0x0801ccd8
 8019214:	0801ca7e 	.word	0x0801ca7e
 8019218:	0801cb84 	.word	0x0801cb84

0801921c <__lshift>:
 801921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019220:	460c      	mov	r4, r1
 8019222:	6849      	ldr	r1, [r1, #4]
 8019224:	6923      	ldr	r3, [r4, #16]
 8019226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801922a:	68a3      	ldr	r3, [r4, #8]
 801922c:	4607      	mov	r7, r0
 801922e:	4691      	mov	r9, r2
 8019230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019234:	f108 0601 	add.w	r6, r8, #1
 8019238:	42b3      	cmp	r3, r6
 801923a:	db0b      	blt.n	8019254 <__lshift+0x38>
 801923c:	4638      	mov	r0, r7
 801923e:	f7ff fd91 	bl	8018d64 <_Balloc>
 8019242:	4605      	mov	r5, r0
 8019244:	b948      	cbnz	r0, 801925a <__lshift+0x3e>
 8019246:	4602      	mov	r2, r0
 8019248:	4b28      	ldr	r3, [pc, #160]	; (80192ec <__lshift+0xd0>)
 801924a:	4829      	ldr	r0, [pc, #164]	; (80192f0 <__lshift+0xd4>)
 801924c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019250:	f000 fc92 	bl	8019b78 <__assert_func>
 8019254:	3101      	adds	r1, #1
 8019256:	005b      	lsls	r3, r3, #1
 8019258:	e7ee      	b.n	8019238 <__lshift+0x1c>
 801925a:	2300      	movs	r3, #0
 801925c:	f100 0114 	add.w	r1, r0, #20
 8019260:	f100 0210 	add.w	r2, r0, #16
 8019264:	4618      	mov	r0, r3
 8019266:	4553      	cmp	r3, sl
 8019268:	db33      	blt.n	80192d2 <__lshift+0xb6>
 801926a:	6920      	ldr	r0, [r4, #16]
 801926c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019270:	f104 0314 	add.w	r3, r4, #20
 8019274:	f019 091f 	ands.w	r9, r9, #31
 8019278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801927c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019280:	d02b      	beq.n	80192da <__lshift+0xbe>
 8019282:	f1c9 0e20 	rsb	lr, r9, #32
 8019286:	468a      	mov	sl, r1
 8019288:	2200      	movs	r2, #0
 801928a:	6818      	ldr	r0, [r3, #0]
 801928c:	fa00 f009 	lsl.w	r0, r0, r9
 8019290:	4302      	orrs	r2, r0
 8019292:	f84a 2b04 	str.w	r2, [sl], #4
 8019296:	f853 2b04 	ldr.w	r2, [r3], #4
 801929a:	459c      	cmp	ip, r3
 801929c:	fa22 f20e 	lsr.w	r2, r2, lr
 80192a0:	d8f3      	bhi.n	801928a <__lshift+0x6e>
 80192a2:	ebac 0304 	sub.w	r3, ip, r4
 80192a6:	3b15      	subs	r3, #21
 80192a8:	f023 0303 	bic.w	r3, r3, #3
 80192ac:	3304      	adds	r3, #4
 80192ae:	f104 0015 	add.w	r0, r4, #21
 80192b2:	4584      	cmp	ip, r0
 80192b4:	bf38      	it	cc
 80192b6:	2304      	movcc	r3, #4
 80192b8:	50ca      	str	r2, [r1, r3]
 80192ba:	b10a      	cbz	r2, 80192c0 <__lshift+0xa4>
 80192bc:	f108 0602 	add.w	r6, r8, #2
 80192c0:	3e01      	subs	r6, #1
 80192c2:	4638      	mov	r0, r7
 80192c4:	612e      	str	r6, [r5, #16]
 80192c6:	4621      	mov	r1, r4
 80192c8:	f7ff fd8c 	bl	8018de4 <_Bfree>
 80192cc:	4628      	mov	r0, r5
 80192ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80192d6:	3301      	adds	r3, #1
 80192d8:	e7c5      	b.n	8019266 <__lshift+0x4a>
 80192da:	3904      	subs	r1, #4
 80192dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80192e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80192e4:	459c      	cmp	ip, r3
 80192e6:	d8f9      	bhi.n	80192dc <__lshift+0xc0>
 80192e8:	e7ea      	b.n	80192c0 <__lshift+0xa4>
 80192ea:	bf00      	nop
 80192ec:	0801caf4 	.word	0x0801caf4
 80192f0:	0801cb84 	.word	0x0801cb84

080192f4 <__mcmp>:
 80192f4:	b530      	push	{r4, r5, lr}
 80192f6:	6902      	ldr	r2, [r0, #16]
 80192f8:	690c      	ldr	r4, [r1, #16]
 80192fa:	1b12      	subs	r2, r2, r4
 80192fc:	d10e      	bne.n	801931c <__mcmp+0x28>
 80192fe:	f100 0314 	add.w	r3, r0, #20
 8019302:	3114      	adds	r1, #20
 8019304:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019308:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801930c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019310:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019314:	42a5      	cmp	r5, r4
 8019316:	d003      	beq.n	8019320 <__mcmp+0x2c>
 8019318:	d305      	bcc.n	8019326 <__mcmp+0x32>
 801931a:	2201      	movs	r2, #1
 801931c:	4610      	mov	r0, r2
 801931e:	bd30      	pop	{r4, r5, pc}
 8019320:	4283      	cmp	r3, r0
 8019322:	d3f3      	bcc.n	801930c <__mcmp+0x18>
 8019324:	e7fa      	b.n	801931c <__mcmp+0x28>
 8019326:	f04f 32ff 	mov.w	r2, #4294967295
 801932a:	e7f7      	b.n	801931c <__mcmp+0x28>

0801932c <__mdiff>:
 801932c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019330:	460c      	mov	r4, r1
 8019332:	4606      	mov	r6, r0
 8019334:	4611      	mov	r1, r2
 8019336:	4620      	mov	r0, r4
 8019338:	4617      	mov	r7, r2
 801933a:	f7ff ffdb 	bl	80192f4 <__mcmp>
 801933e:	1e05      	subs	r5, r0, #0
 8019340:	d110      	bne.n	8019364 <__mdiff+0x38>
 8019342:	4629      	mov	r1, r5
 8019344:	4630      	mov	r0, r6
 8019346:	f7ff fd0d 	bl	8018d64 <_Balloc>
 801934a:	b930      	cbnz	r0, 801935a <__mdiff+0x2e>
 801934c:	4b39      	ldr	r3, [pc, #228]	; (8019434 <__mdiff+0x108>)
 801934e:	4602      	mov	r2, r0
 8019350:	f240 2132 	movw	r1, #562	; 0x232
 8019354:	4838      	ldr	r0, [pc, #224]	; (8019438 <__mdiff+0x10c>)
 8019356:	f000 fc0f 	bl	8019b78 <__assert_func>
 801935a:	2301      	movs	r3, #1
 801935c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019364:	bfa4      	itt	ge
 8019366:	463b      	movge	r3, r7
 8019368:	4627      	movge	r7, r4
 801936a:	4630      	mov	r0, r6
 801936c:	6879      	ldr	r1, [r7, #4]
 801936e:	bfa6      	itte	ge
 8019370:	461c      	movge	r4, r3
 8019372:	2500      	movge	r5, #0
 8019374:	2501      	movlt	r5, #1
 8019376:	f7ff fcf5 	bl	8018d64 <_Balloc>
 801937a:	b920      	cbnz	r0, 8019386 <__mdiff+0x5a>
 801937c:	4b2d      	ldr	r3, [pc, #180]	; (8019434 <__mdiff+0x108>)
 801937e:	4602      	mov	r2, r0
 8019380:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019384:	e7e6      	b.n	8019354 <__mdiff+0x28>
 8019386:	693e      	ldr	r6, [r7, #16]
 8019388:	60c5      	str	r5, [r0, #12]
 801938a:	6925      	ldr	r5, [r4, #16]
 801938c:	f107 0114 	add.w	r1, r7, #20
 8019390:	f104 0914 	add.w	r9, r4, #20
 8019394:	f100 0e14 	add.w	lr, r0, #20
 8019398:	f107 0210 	add.w	r2, r7, #16
 801939c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80193a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80193a4:	46f2      	mov	sl, lr
 80193a6:	2700      	movs	r7, #0
 80193a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80193ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80193b0:	fa1f f883 	uxth.w	r8, r3
 80193b4:	fa17 f78b 	uxtah	r7, r7, fp
 80193b8:	0c1b      	lsrs	r3, r3, #16
 80193ba:	eba7 0808 	sub.w	r8, r7, r8
 80193be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80193c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80193c6:	fa1f f888 	uxth.w	r8, r8
 80193ca:	141f      	asrs	r7, r3, #16
 80193cc:	454d      	cmp	r5, r9
 80193ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80193d2:	f84a 3b04 	str.w	r3, [sl], #4
 80193d6:	d8e7      	bhi.n	80193a8 <__mdiff+0x7c>
 80193d8:	1b2b      	subs	r3, r5, r4
 80193da:	3b15      	subs	r3, #21
 80193dc:	f023 0303 	bic.w	r3, r3, #3
 80193e0:	3304      	adds	r3, #4
 80193e2:	3415      	adds	r4, #21
 80193e4:	42a5      	cmp	r5, r4
 80193e6:	bf38      	it	cc
 80193e8:	2304      	movcc	r3, #4
 80193ea:	4419      	add	r1, r3
 80193ec:	4473      	add	r3, lr
 80193ee:	469e      	mov	lr, r3
 80193f0:	460d      	mov	r5, r1
 80193f2:	4565      	cmp	r5, ip
 80193f4:	d30e      	bcc.n	8019414 <__mdiff+0xe8>
 80193f6:	f10c 0203 	add.w	r2, ip, #3
 80193fa:	1a52      	subs	r2, r2, r1
 80193fc:	f022 0203 	bic.w	r2, r2, #3
 8019400:	3903      	subs	r1, #3
 8019402:	458c      	cmp	ip, r1
 8019404:	bf38      	it	cc
 8019406:	2200      	movcc	r2, #0
 8019408:	441a      	add	r2, r3
 801940a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801940e:	b17b      	cbz	r3, 8019430 <__mdiff+0x104>
 8019410:	6106      	str	r6, [r0, #16]
 8019412:	e7a5      	b.n	8019360 <__mdiff+0x34>
 8019414:	f855 8b04 	ldr.w	r8, [r5], #4
 8019418:	fa17 f488 	uxtah	r4, r7, r8
 801941c:	1422      	asrs	r2, r4, #16
 801941e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019422:	b2a4      	uxth	r4, r4
 8019424:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019428:	f84e 4b04 	str.w	r4, [lr], #4
 801942c:	1417      	asrs	r7, r2, #16
 801942e:	e7e0      	b.n	80193f2 <__mdiff+0xc6>
 8019430:	3e01      	subs	r6, #1
 8019432:	e7ea      	b.n	801940a <__mdiff+0xde>
 8019434:	0801caf4 	.word	0x0801caf4
 8019438:	0801cb84 	.word	0x0801cb84

0801943c <__ulp>:
 801943c:	b082      	sub	sp, #8
 801943e:	ed8d 0b00 	vstr	d0, [sp]
 8019442:	9b01      	ldr	r3, [sp, #4]
 8019444:	4912      	ldr	r1, [pc, #72]	; (8019490 <__ulp+0x54>)
 8019446:	4019      	ands	r1, r3
 8019448:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801944c:	2900      	cmp	r1, #0
 801944e:	dd05      	ble.n	801945c <__ulp+0x20>
 8019450:	2200      	movs	r2, #0
 8019452:	460b      	mov	r3, r1
 8019454:	ec43 2b10 	vmov	d0, r2, r3
 8019458:	b002      	add	sp, #8
 801945a:	4770      	bx	lr
 801945c:	4249      	negs	r1, r1
 801945e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019462:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019466:	f04f 0200 	mov.w	r2, #0
 801946a:	f04f 0300 	mov.w	r3, #0
 801946e:	da04      	bge.n	801947a <__ulp+0x3e>
 8019470:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019474:	fa41 f300 	asr.w	r3, r1, r0
 8019478:	e7ec      	b.n	8019454 <__ulp+0x18>
 801947a:	f1a0 0114 	sub.w	r1, r0, #20
 801947e:	291e      	cmp	r1, #30
 8019480:	bfda      	itte	le
 8019482:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019486:	fa20 f101 	lsrle.w	r1, r0, r1
 801948a:	2101      	movgt	r1, #1
 801948c:	460a      	mov	r2, r1
 801948e:	e7e1      	b.n	8019454 <__ulp+0x18>
 8019490:	7ff00000 	.word	0x7ff00000

08019494 <__b2d>:
 8019494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019496:	6905      	ldr	r5, [r0, #16]
 8019498:	f100 0714 	add.w	r7, r0, #20
 801949c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80194a0:	1f2e      	subs	r6, r5, #4
 80194a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80194a6:	4620      	mov	r0, r4
 80194a8:	f7ff fd52 	bl	8018f50 <__hi0bits>
 80194ac:	f1c0 0320 	rsb	r3, r0, #32
 80194b0:	280a      	cmp	r0, #10
 80194b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019530 <__b2d+0x9c>
 80194b6:	600b      	str	r3, [r1, #0]
 80194b8:	dc14      	bgt.n	80194e4 <__b2d+0x50>
 80194ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80194be:	fa24 f10e 	lsr.w	r1, r4, lr
 80194c2:	42b7      	cmp	r7, r6
 80194c4:	ea41 030c 	orr.w	r3, r1, ip
 80194c8:	bf34      	ite	cc
 80194ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80194ce:	2100      	movcs	r1, #0
 80194d0:	3015      	adds	r0, #21
 80194d2:	fa04 f000 	lsl.w	r0, r4, r0
 80194d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80194da:	ea40 0201 	orr.w	r2, r0, r1
 80194de:	ec43 2b10 	vmov	d0, r2, r3
 80194e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194e4:	42b7      	cmp	r7, r6
 80194e6:	bf3a      	itte	cc
 80194e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80194ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80194f0:	2100      	movcs	r1, #0
 80194f2:	380b      	subs	r0, #11
 80194f4:	d017      	beq.n	8019526 <__b2d+0x92>
 80194f6:	f1c0 0c20 	rsb	ip, r0, #32
 80194fa:	fa04 f500 	lsl.w	r5, r4, r0
 80194fe:	42be      	cmp	r6, r7
 8019500:	fa21 f40c 	lsr.w	r4, r1, ip
 8019504:	ea45 0504 	orr.w	r5, r5, r4
 8019508:	bf8c      	ite	hi
 801950a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801950e:	2400      	movls	r4, #0
 8019510:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019514:	fa01 f000 	lsl.w	r0, r1, r0
 8019518:	fa24 f40c 	lsr.w	r4, r4, ip
 801951c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019520:	ea40 0204 	orr.w	r2, r0, r4
 8019524:	e7db      	b.n	80194de <__b2d+0x4a>
 8019526:	ea44 030c 	orr.w	r3, r4, ip
 801952a:	460a      	mov	r2, r1
 801952c:	e7d7      	b.n	80194de <__b2d+0x4a>
 801952e:	bf00      	nop
 8019530:	3ff00000 	.word	0x3ff00000

08019534 <__d2b>:
 8019534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019538:	4689      	mov	r9, r1
 801953a:	2101      	movs	r1, #1
 801953c:	ec57 6b10 	vmov	r6, r7, d0
 8019540:	4690      	mov	r8, r2
 8019542:	f7ff fc0f 	bl	8018d64 <_Balloc>
 8019546:	4604      	mov	r4, r0
 8019548:	b930      	cbnz	r0, 8019558 <__d2b+0x24>
 801954a:	4602      	mov	r2, r0
 801954c:	4b25      	ldr	r3, [pc, #148]	; (80195e4 <__d2b+0xb0>)
 801954e:	4826      	ldr	r0, [pc, #152]	; (80195e8 <__d2b+0xb4>)
 8019550:	f240 310a 	movw	r1, #778	; 0x30a
 8019554:	f000 fb10 	bl	8019b78 <__assert_func>
 8019558:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801955c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019560:	bb35      	cbnz	r5, 80195b0 <__d2b+0x7c>
 8019562:	2e00      	cmp	r6, #0
 8019564:	9301      	str	r3, [sp, #4]
 8019566:	d028      	beq.n	80195ba <__d2b+0x86>
 8019568:	4668      	mov	r0, sp
 801956a:	9600      	str	r6, [sp, #0]
 801956c:	f7ff fd10 	bl	8018f90 <__lo0bits>
 8019570:	9900      	ldr	r1, [sp, #0]
 8019572:	b300      	cbz	r0, 80195b6 <__d2b+0x82>
 8019574:	9a01      	ldr	r2, [sp, #4]
 8019576:	f1c0 0320 	rsb	r3, r0, #32
 801957a:	fa02 f303 	lsl.w	r3, r2, r3
 801957e:	430b      	orrs	r3, r1
 8019580:	40c2      	lsrs	r2, r0
 8019582:	6163      	str	r3, [r4, #20]
 8019584:	9201      	str	r2, [sp, #4]
 8019586:	9b01      	ldr	r3, [sp, #4]
 8019588:	61a3      	str	r3, [r4, #24]
 801958a:	2b00      	cmp	r3, #0
 801958c:	bf14      	ite	ne
 801958e:	2202      	movne	r2, #2
 8019590:	2201      	moveq	r2, #1
 8019592:	6122      	str	r2, [r4, #16]
 8019594:	b1d5      	cbz	r5, 80195cc <__d2b+0x98>
 8019596:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801959a:	4405      	add	r5, r0
 801959c:	f8c9 5000 	str.w	r5, [r9]
 80195a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80195a4:	f8c8 0000 	str.w	r0, [r8]
 80195a8:	4620      	mov	r0, r4
 80195aa:	b003      	add	sp, #12
 80195ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80195b4:	e7d5      	b.n	8019562 <__d2b+0x2e>
 80195b6:	6161      	str	r1, [r4, #20]
 80195b8:	e7e5      	b.n	8019586 <__d2b+0x52>
 80195ba:	a801      	add	r0, sp, #4
 80195bc:	f7ff fce8 	bl	8018f90 <__lo0bits>
 80195c0:	9b01      	ldr	r3, [sp, #4]
 80195c2:	6163      	str	r3, [r4, #20]
 80195c4:	2201      	movs	r2, #1
 80195c6:	6122      	str	r2, [r4, #16]
 80195c8:	3020      	adds	r0, #32
 80195ca:	e7e3      	b.n	8019594 <__d2b+0x60>
 80195cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80195d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80195d4:	f8c9 0000 	str.w	r0, [r9]
 80195d8:	6918      	ldr	r0, [r3, #16]
 80195da:	f7ff fcb9 	bl	8018f50 <__hi0bits>
 80195de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80195e2:	e7df      	b.n	80195a4 <__d2b+0x70>
 80195e4:	0801caf4 	.word	0x0801caf4
 80195e8:	0801cb84 	.word	0x0801cb84

080195ec <__ratio>:
 80195ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f0:	4688      	mov	r8, r1
 80195f2:	4669      	mov	r1, sp
 80195f4:	4681      	mov	r9, r0
 80195f6:	f7ff ff4d 	bl	8019494 <__b2d>
 80195fa:	a901      	add	r1, sp, #4
 80195fc:	4640      	mov	r0, r8
 80195fe:	ec55 4b10 	vmov	r4, r5, d0
 8019602:	f7ff ff47 	bl	8019494 <__b2d>
 8019606:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801960a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801960e:	eba3 0c02 	sub.w	ip, r3, r2
 8019612:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019616:	1a9b      	subs	r3, r3, r2
 8019618:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801961c:	ec51 0b10 	vmov	r0, r1, d0
 8019620:	2b00      	cmp	r3, #0
 8019622:	bfd6      	itet	le
 8019624:	460a      	movle	r2, r1
 8019626:	462a      	movgt	r2, r5
 8019628:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801962c:	468b      	mov	fp, r1
 801962e:	462f      	mov	r7, r5
 8019630:	bfd4      	ite	le
 8019632:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019636:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801963a:	4620      	mov	r0, r4
 801963c:	ee10 2a10 	vmov	r2, s0
 8019640:	465b      	mov	r3, fp
 8019642:	4639      	mov	r1, r7
 8019644:	f7e7 f922 	bl	800088c <__aeabi_ddiv>
 8019648:	ec41 0b10 	vmov	d0, r0, r1
 801964c:	b003      	add	sp, #12
 801964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019652 <__copybits>:
 8019652:	3901      	subs	r1, #1
 8019654:	b570      	push	{r4, r5, r6, lr}
 8019656:	1149      	asrs	r1, r1, #5
 8019658:	6914      	ldr	r4, [r2, #16]
 801965a:	3101      	adds	r1, #1
 801965c:	f102 0314 	add.w	r3, r2, #20
 8019660:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019664:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019668:	1f05      	subs	r5, r0, #4
 801966a:	42a3      	cmp	r3, r4
 801966c:	d30c      	bcc.n	8019688 <__copybits+0x36>
 801966e:	1aa3      	subs	r3, r4, r2
 8019670:	3b11      	subs	r3, #17
 8019672:	f023 0303 	bic.w	r3, r3, #3
 8019676:	3211      	adds	r2, #17
 8019678:	42a2      	cmp	r2, r4
 801967a:	bf88      	it	hi
 801967c:	2300      	movhi	r3, #0
 801967e:	4418      	add	r0, r3
 8019680:	2300      	movs	r3, #0
 8019682:	4288      	cmp	r0, r1
 8019684:	d305      	bcc.n	8019692 <__copybits+0x40>
 8019686:	bd70      	pop	{r4, r5, r6, pc}
 8019688:	f853 6b04 	ldr.w	r6, [r3], #4
 801968c:	f845 6f04 	str.w	r6, [r5, #4]!
 8019690:	e7eb      	b.n	801966a <__copybits+0x18>
 8019692:	f840 3b04 	str.w	r3, [r0], #4
 8019696:	e7f4      	b.n	8019682 <__copybits+0x30>

08019698 <__any_on>:
 8019698:	f100 0214 	add.w	r2, r0, #20
 801969c:	6900      	ldr	r0, [r0, #16]
 801969e:	114b      	asrs	r3, r1, #5
 80196a0:	4298      	cmp	r0, r3
 80196a2:	b510      	push	{r4, lr}
 80196a4:	db11      	blt.n	80196ca <__any_on+0x32>
 80196a6:	dd0a      	ble.n	80196be <__any_on+0x26>
 80196a8:	f011 011f 	ands.w	r1, r1, #31
 80196ac:	d007      	beq.n	80196be <__any_on+0x26>
 80196ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80196b2:	fa24 f001 	lsr.w	r0, r4, r1
 80196b6:	fa00 f101 	lsl.w	r1, r0, r1
 80196ba:	428c      	cmp	r4, r1
 80196bc:	d10b      	bne.n	80196d6 <__any_on+0x3e>
 80196be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80196c2:	4293      	cmp	r3, r2
 80196c4:	d803      	bhi.n	80196ce <__any_on+0x36>
 80196c6:	2000      	movs	r0, #0
 80196c8:	bd10      	pop	{r4, pc}
 80196ca:	4603      	mov	r3, r0
 80196cc:	e7f7      	b.n	80196be <__any_on+0x26>
 80196ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80196d2:	2900      	cmp	r1, #0
 80196d4:	d0f5      	beq.n	80196c2 <__any_on+0x2a>
 80196d6:	2001      	movs	r0, #1
 80196d8:	e7f6      	b.n	80196c8 <__any_on+0x30>

080196da <_calloc_r>:
 80196da:	b513      	push	{r0, r1, r4, lr}
 80196dc:	434a      	muls	r2, r1
 80196de:	4611      	mov	r1, r2
 80196e0:	9201      	str	r2, [sp, #4]
 80196e2:	f000 f859 	bl	8019798 <_malloc_r>
 80196e6:	4604      	mov	r4, r0
 80196e8:	b118      	cbz	r0, 80196f2 <_calloc_r+0x18>
 80196ea:	9a01      	ldr	r2, [sp, #4]
 80196ec:	2100      	movs	r1, #0
 80196ee:	f7fc fba1 	bl	8015e34 <memset>
 80196f2:	4620      	mov	r0, r4
 80196f4:	b002      	add	sp, #8
 80196f6:	bd10      	pop	{r4, pc}

080196f8 <_free_r>:
 80196f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196fa:	2900      	cmp	r1, #0
 80196fc:	d048      	beq.n	8019790 <_free_r+0x98>
 80196fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019702:	9001      	str	r0, [sp, #4]
 8019704:	2b00      	cmp	r3, #0
 8019706:	f1a1 0404 	sub.w	r4, r1, #4
 801970a:	bfb8      	it	lt
 801970c:	18e4      	addlt	r4, r4, r3
 801970e:	f000 fa7d 	bl	8019c0c <__malloc_lock>
 8019712:	4a20      	ldr	r2, [pc, #128]	; (8019794 <_free_r+0x9c>)
 8019714:	9801      	ldr	r0, [sp, #4]
 8019716:	6813      	ldr	r3, [r2, #0]
 8019718:	4615      	mov	r5, r2
 801971a:	b933      	cbnz	r3, 801972a <_free_r+0x32>
 801971c:	6063      	str	r3, [r4, #4]
 801971e:	6014      	str	r4, [r2, #0]
 8019720:	b003      	add	sp, #12
 8019722:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019726:	f000 ba77 	b.w	8019c18 <__malloc_unlock>
 801972a:	42a3      	cmp	r3, r4
 801972c:	d90b      	bls.n	8019746 <_free_r+0x4e>
 801972e:	6821      	ldr	r1, [r4, #0]
 8019730:	1862      	adds	r2, r4, r1
 8019732:	4293      	cmp	r3, r2
 8019734:	bf04      	itt	eq
 8019736:	681a      	ldreq	r2, [r3, #0]
 8019738:	685b      	ldreq	r3, [r3, #4]
 801973a:	6063      	str	r3, [r4, #4]
 801973c:	bf04      	itt	eq
 801973e:	1852      	addeq	r2, r2, r1
 8019740:	6022      	streq	r2, [r4, #0]
 8019742:	602c      	str	r4, [r5, #0]
 8019744:	e7ec      	b.n	8019720 <_free_r+0x28>
 8019746:	461a      	mov	r2, r3
 8019748:	685b      	ldr	r3, [r3, #4]
 801974a:	b10b      	cbz	r3, 8019750 <_free_r+0x58>
 801974c:	42a3      	cmp	r3, r4
 801974e:	d9fa      	bls.n	8019746 <_free_r+0x4e>
 8019750:	6811      	ldr	r1, [r2, #0]
 8019752:	1855      	adds	r5, r2, r1
 8019754:	42a5      	cmp	r5, r4
 8019756:	d10b      	bne.n	8019770 <_free_r+0x78>
 8019758:	6824      	ldr	r4, [r4, #0]
 801975a:	4421      	add	r1, r4
 801975c:	1854      	adds	r4, r2, r1
 801975e:	42a3      	cmp	r3, r4
 8019760:	6011      	str	r1, [r2, #0]
 8019762:	d1dd      	bne.n	8019720 <_free_r+0x28>
 8019764:	681c      	ldr	r4, [r3, #0]
 8019766:	685b      	ldr	r3, [r3, #4]
 8019768:	6053      	str	r3, [r2, #4]
 801976a:	4421      	add	r1, r4
 801976c:	6011      	str	r1, [r2, #0]
 801976e:	e7d7      	b.n	8019720 <_free_r+0x28>
 8019770:	d902      	bls.n	8019778 <_free_r+0x80>
 8019772:	230c      	movs	r3, #12
 8019774:	6003      	str	r3, [r0, #0]
 8019776:	e7d3      	b.n	8019720 <_free_r+0x28>
 8019778:	6825      	ldr	r5, [r4, #0]
 801977a:	1961      	adds	r1, r4, r5
 801977c:	428b      	cmp	r3, r1
 801977e:	bf04      	itt	eq
 8019780:	6819      	ldreq	r1, [r3, #0]
 8019782:	685b      	ldreq	r3, [r3, #4]
 8019784:	6063      	str	r3, [r4, #4]
 8019786:	bf04      	itt	eq
 8019788:	1949      	addeq	r1, r1, r5
 801978a:	6021      	streq	r1, [r4, #0]
 801978c:	6054      	str	r4, [r2, #4]
 801978e:	e7c7      	b.n	8019720 <_free_r+0x28>
 8019790:	b003      	add	sp, #12
 8019792:	bd30      	pop	{r4, r5, pc}
 8019794:	20002020 	.word	0x20002020

08019798 <_malloc_r>:
 8019798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801979a:	1ccd      	adds	r5, r1, #3
 801979c:	f025 0503 	bic.w	r5, r5, #3
 80197a0:	3508      	adds	r5, #8
 80197a2:	2d0c      	cmp	r5, #12
 80197a4:	bf38      	it	cc
 80197a6:	250c      	movcc	r5, #12
 80197a8:	2d00      	cmp	r5, #0
 80197aa:	4606      	mov	r6, r0
 80197ac:	db01      	blt.n	80197b2 <_malloc_r+0x1a>
 80197ae:	42a9      	cmp	r1, r5
 80197b0:	d903      	bls.n	80197ba <_malloc_r+0x22>
 80197b2:	230c      	movs	r3, #12
 80197b4:	6033      	str	r3, [r6, #0]
 80197b6:	2000      	movs	r0, #0
 80197b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197ba:	f000 fa27 	bl	8019c0c <__malloc_lock>
 80197be:	4921      	ldr	r1, [pc, #132]	; (8019844 <_malloc_r+0xac>)
 80197c0:	680a      	ldr	r2, [r1, #0]
 80197c2:	4614      	mov	r4, r2
 80197c4:	b99c      	cbnz	r4, 80197ee <_malloc_r+0x56>
 80197c6:	4f20      	ldr	r7, [pc, #128]	; (8019848 <_malloc_r+0xb0>)
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	b923      	cbnz	r3, 80197d6 <_malloc_r+0x3e>
 80197cc:	4621      	mov	r1, r4
 80197ce:	4630      	mov	r0, r6
 80197d0:	f000 f9a2 	bl	8019b18 <_sbrk_r>
 80197d4:	6038      	str	r0, [r7, #0]
 80197d6:	4629      	mov	r1, r5
 80197d8:	4630      	mov	r0, r6
 80197da:	f000 f99d 	bl	8019b18 <_sbrk_r>
 80197de:	1c43      	adds	r3, r0, #1
 80197e0:	d123      	bne.n	801982a <_malloc_r+0x92>
 80197e2:	230c      	movs	r3, #12
 80197e4:	6033      	str	r3, [r6, #0]
 80197e6:	4630      	mov	r0, r6
 80197e8:	f000 fa16 	bl	8019c18 <__malloc_unlock>
 80197ec:	e7e3      	b.n	80197b6 <_malloc_r+0x1e>
 80197ee:	6823      	ldr	r3, [r4, #0]
 80197f0:	1b5b      	subs	r3, r3, r5
 80197f2:	d417      	bmi.n	8019824 <_malloc_r+0x8c>
 80197f4:	2b0b      	cmp	r3, #11
 80197f6:	d903      	bls.n	8019800 <_malloc_r+0x68>
 80197f8:	6023      	str	r3, [r4, #0]
 80197fa:	441c      	add	r4, r3
 80197fc:	6025      	str	r5, [r4, #0]
 80197fe:	e004      	b.n	801980a <_malloc_r+0x72>
 8019800:	6863      	ldr	r3, [r4, #4]
 8019802:	42a2      	cmp	r2, r4
 8019804:	bf0c      	ite	eq
 8019806:	600b      	streq	r3, [r1, #0]
 8019808:	6053      	strne	r3, [r2, #4]
 801980a:	4630      	mov	r0, r6
 801980c:	f000 fa04 	bl	8019c18 <__malloc_unlock>
 8019810:	f104 000b 	add.w	r0, r4, #11
 8019814:	1d23      	adds	r3, r4, #4
 8019816:	f020 0007 	bic.w	r0, r0, #7
 801981a:	1ac2      	subs	r2, r0, r3
 801981c:	d0cc      	beq.n	80197b8 <_malloc_r+0x20>
 801981e:	1a1b      	subs	r3, r3, r0
 8019820:	50a3      	str	r3, [r4, r2]
 8019822:	e7c9      	b.n	80197b8 <_malloc_r+0x20>
 8019824:	4622      	mov	r2, r4
 8019826:	6864      	ldr	r4, [r4, #4]
 8019828:	e7cc      	b.n	80197c4 <_malloc_r+0x2c>
 801982a:	1cc4      	adds	r4, r0, #3
 801982c:	f024 0403 	bic.w	r4, r4, #3
 8019830:	42a0      	cmp	r0, r4
 8019832:	d0e3      	beq.n	80197fc <_malloc_r+0x64>
 8019834:	1a21      	subs	r1, r4, r0
 8019836:	4630      	mov	r0, r6
 8019838:	f000 f96e 	bl	8019b18 <_sbrk_r>
 801983c:	3001      	adds	r0, #1
 801983e:	d1dd      	bne.n	80197fc <_malloc_r+0x64>
 8019840:	e7cf      	b.n	80197e2 <_malloc_r+0x4a>
 8019842:	bf00      	nop
 8019844:	20002020 	.word	0x20002020
 8019848:	20002024 	.word	0x20002024

0801984c <__ssputs_r>:
 801984c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019850:	688e      	ldr	r6, [r1, #8]
 8019852:	429e      	cmp	r6, r3
 8019854:	4682      	mov	sl, r0
 8019856:	460c      	mov	r4, r1
 8019858:	4690      	mov	r8, r2
 801985a:	461f      	mov	r7, r3
 801985c:	d838      	bhi.n	80198d0 <__ssputs_r+0x84>
 801985e:	898a      	ldrh	r2, [r1, #12]
 8019860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019864:	d032      	beq.n	80198cc <__ssputs_r+0x80>
 8019866:	6825      	ldr	r5, [r4, #0]
 8019868:	6909      	ldr	r1, [r1, #16]
 801986a:	eba5 0901 	sub.w	r9, r5, r1
 801986e:	6965      	ldr	r5, [r4, #20]
 8019870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019878:	3301      	adds	r3, #1
 801987a:	444b      	add	r3, r9
 801987c:	106d      	asrs	r5, r5, #1
 801987e:	429d      	cmp	r5, r3
 8019880:	bf38      	it	cc
 8019882:	461d      	movcc	r5, r3
 8019884:	0553      	lsls	r3, r2, #21
 8019886:	d531      	bpl.n	80198ec <__ssputs_r+0xa0>
 8019888:	4629      	mov	r1, r5
 801988a:	f7ff ff85 	bl	8019798 <_malloc_r>
 801988e:	4606      	mov	r6, r0
 8019890:	b950      	cbnz	r0, 80198a8 <__ssputs_r+0x5c>
 8019892:	230c      	movs	r3, #12
 8019894:	f8ca 3000 	str.w	r3, [sl]
 8019898:	89a3      	ldrh	r3, [r4, #12]
 801989a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801989e:	81a3      	strh	r3, [r4, #12]
 80198a0:	f04f 30ff 	mov.w	r0, #4294967295
 80198a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198a8:	6921      	ldr	r1, [r4, #16]
 80198aa:	464a      	mov	r2, r9
 80198ac:	f7fc fab4 	bl	8015e18 <memcpy>
 80198b0:	89a3      	ldrh	r3, [r4, #12]
 80198b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80198b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198ba:	81a3      	strh	r3, [r4, #12]
 80198bc:	6126      	str	r6, [r4, #16]
 80198be:	6165      	str	r5, [r4, #20]
 80198c0:	444e      	add	r6, r9
 80198c2:	eba5 0509 	sub.w	r5, r5, r9
 80198c6:	6026      	str	r6, [r4, #0]
 80198c8:	60a5      	str	r5, [r4, #8]
 80198ca:	463e      	mov	r6, r7
 80198cc:	42be      	cmp	r6, r7
 80198ce:	d900      	bls.n	80198d2 <__ssputs_r+0x86>
 80198d0:	463e      	mov	r6, r7
 80198d2:	4632      	mov	r2, r6
 80198d4:	6820      	ldr	r0, [r4, #0]
 80198d6:	4641      	mov	r1, r8
 80198d8:	f000 f97e 	bl	8019bd8 <memmove>
 80198dc:	68a3      	ldr	r3, [r4, #8]
 80198de:	6822      	ldr	r2, [r4, #0]
 80198e0:	1b9b      	subs	r3, r3, r6
 80198e2:	4432      	add	r2, r6
 80198e4:	60a3      	str	r3, [r4, #8]
 80198e6:	6022      	str	r2, [r4, #0]
 80198e8:	2000      	movs	r0, #0
 80198ea:	e7db      	b.n	80198a4 <__ssputs_r+0x58>
 80198ec:	462a      	mov	r2, r5
 80198ee:	f000 f999 	bl	8019c24 <_realloc_r>
 80198f2:	4606      	mov	r6, r0
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d1e1      	bne.n	80198bc <__ssputs_r+0x70>
 80198f8:	6921      	ldr	r1, [r4, #16]
 80198fa:	4650      	mov	r0, sl
 80198fc:	f7ff fefc 	bl	80196f8 <_free_r>
 8019900:	e7c7      	b.n	8019892 <__ssputs_r+0x46>
	...

08019904 <_svfiprintf_r>:
 8019904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019908:	4698      	mov	r8, r3
 801990a:	898b      	ldrh	r3, [r1, #12]
 801990c:	061b      	lsls	r3, r3, #24
 801990e:	b09d      	sub	sp, #116	; 0x74
 8019910:	4607      	mov	r7, r0
 8019912:	460d      	mov	r5, r1
 8019914:	4614      	mov	r4, r2
 8019916:	d50e      	bpl.n	8019936 <_svfiprintf_r+0x32>
 8019918:	690b      	ldr	r3, [r1, #16]
 801991a:	b963      	cbnz	r3, 8019936 <_svfiprintf_r+0x32>
 801991c:	2140      	movs	r1, #64	; 0x40
 801991e:	f7ff ff3b 	bl	8019798 <_malloc_r>
 8019922:	6028      	str	r0, [r5, #0]
 8019924:	6128      	str	r0, [r5, #16]
 8019926:	b920      	cbnz	r0, 8019932 <_svfiprintf_r+0x2e>
 8019928:	230c      	movs	r3, #12
 801992a:	603b      	str	r3, [r7, #0]
 801992c:	f04f 30ff 	mov.w	r0, #4294967295
 8019930:	e0d1      	b.n	8019ad6 <_svfiprintf_r+0x1d2>
 8019932:	2340      	movs	r3, #64	; 0x40
 8019934:	616b      	str	r3, [r5, #20]
 8019936:	2300      	movs	r3, #0
 8019938:	9309      	str	r3, [sp, #36]	; 0x24
 801993a:	2320      	movs	r3, #32
 801993c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019940:	f8cd 800c 	str.w	r8, [sp, #12]
 8019944:	2330      	movs	r3, #48	; 0x30
 8019946:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019af0 <_svfiprintf_r+0x1ec>
 801994a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801994e:	f04f 0901 	mov.w	r9, #1
 8019952:	4623      	mov	r3, r4
 8019954:	469a      	mov	sl, r3
 8019956:	f813 2b01 	ldrb.w	r2, [r3], #1
 801995a:	b10a      	cbz	r2, 8019960 <_svfiprintf_r+0x5c>
 801995c:	2a25      	cmp	r2, #37	; 0x25
 801995e:	d1f9      	bne.n	8019954 <_svfiprintf_r+0x50>
 8019960:	ebba 0b04 	subs.w	fp, sl, r4
 8019964:	d00b      	beq.n	801997e <_svfiprintf_r+0x7a>
 8019966:	465b      	mov	r3, fp
 8019968:	4622      	mov	r2, r4
 801996a:	4629      	mov	r1, r5
 801996c:	4638      	mov	r0, r7
 801996e:	f7ff ff6d 	bl	801984c <__ssputs_r>
 8019972:	3001      	adds	r0, #1
 8019974:	f000 80aa 	beq.w	8019acc <_svfiprintf_r+0x1c8>
 8019978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801997a:	445a      	add	r2, fp
 801997c:	9209      	str	r2, [sp, #36]	; 0x24
 801997e:	f89a 3000 	ldrb.w	r3, [sl]
 8019982:	2b00      	cmp	r3, #0
 8019984:	f000 80a2 	beq.w	8019acc <_svfiprintf_r+0x1c8>
 8019988:	2300      	movs	r3, #0
 801998a:	f04f 32ff 	mov.w	r2, #4294967295
 801998e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019992:	f10a 0a01 	add.w	sl, sl, #1
 8019996:	9304      	str	r3, [sp, #16]
 8019998:	9307      	str	r3, [sp, #28]
 801999a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801999e:	931a      	str	r3, [sp, #104]	; 0x68
 80199a0:	4654      	mov	r4, sl
 80199a2:	2205      	movs	r2, #5
 80199a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199a8:	4851      	ldr	r0, [pc, #324]	; (8019af0 <_svfiprintf_r+0x1ec>)
 80199aa:	f7e6 fc39 	bl	8000220 <memchr>
 80199ae:	9a04      	ldr	r2, [sp, #16]
 80199b0:	b9d8      	cbnz	r0, 80199ea <_svfiprintf_r+0xe6>
 80199b2:	06d0      	lsls	r0, r2, #27
 80199b4:	bf44      	itt	mi
 80199b6:	2320      	movmi	r3, #32
 80199b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80199bc:	0711      	lsls	r1, r2, #28
 80199be:	bf44      	itt	mi
 80199c0:	232b      	movmi	r3, #43	; 0x2b
 80199c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80199c6:	f89a 3000 	ldrb.w	r3, [sl]
 80199ca:	2b2a      	cmp	r3, #42	; 0x2a
 80199cc:	d015      	beq.n	80199fa <_svfiprintf_r+0xf6>
 80199ce:	9a07      	ldr	r2, [sp, #28]
 80199d0:	4654      	mov	r4, sl
 80199d2:	2000      	movs	r0, #0
 80199d4:	f04f 0c0a 	mov.w	ip, #10
 80199d8:	4621      	mov	r1, r4
 80199da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80199de:	3b30      	subs	r3, #48	; 0x30
 80199e0:	2b09      	cmp	r3, #9
 80199e2:	d94e      	bls.n	8019a82 <_svfiprintf_r+0x17e>
 80199e4:	b1b0      	cbz	r0, 8019a14 <_svfiprintf_r+0x110>
 80199e6:	9207      	str	r2, [sp, #28]
 80199e8:	e014      	b.n	8019a14 <_svfiprintf_r+0x110>
 80199ea:	eba0 0308 	sub.w	r3, r0, r8
 80199ee:	fa09 f303 	lsl.w	r3, r9, r3
 80199f2:	4313      	orrs	r3, r2
 80199f4:	9304      	str	r3, [sp, #16]
 80199f6:	46a2      	mov	sl, r4
 80199f8:	e7d2      	b.n	80199a0 <_svfiprintf_r+0x9c>
 80199fa:	9b03      	ldr	r3, [sp, #12]
 80199fc:	1d19      	adds	r1, r3, #4
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	9103      	str	r1, [sp, #12]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	bfbb      	ittet	lt
 8019a06:	425b      	neglt	r3, r3
 8019a08:	f042 0202 	orrlt.w	r2, r2, #2
 8019a0c:	9307      	strge	r3, [sp, #28]
 8019a0e:	9307      	strlt	r3, [sp, #28]
 8019a10:	bfb8      	it	lt
 8019a12:	9204      	strlt	r2, [sp, #16]
 8019a14:	7823      	ldrb	r3, [r4, #0]
 8019a16:	2b2e      	cmp	r3, #46	; 0x2e
 8019a18:	d10c      	bne.n	8019a34 <_svfiprintf_r+0x130>
 8019a1a:	7863      	ldrb	r3, [r4, #1]
 8019a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8019a1e:	d135      	bne.n	8019a8c <_svfiprintf_r+0x188>
 8019a20:	9b03      	ldr	r3, [sp, #12]
 8019a22:	1d1a      	adds	r2, r3, #4
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	9203      	str	r2, [sp, #12]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	bfb8      	it	lt
 8019a2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019a30:	3402      	adds	r4, #2
 8019a32:	9305      	str	r3, [sp, #20]
 8019a34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019b00 <_svfiprintf_r+0x1fc>
 8019a38:	7821      	ldrb	r1, [r4, #0]
 8019a3a:	2203      	movs	r2, #3
 8019a3c:	4650      	mov	r0, sl
 8019a3e:	f7e6 fbef 	bl	8000220 <memchr>
 8019a42:	b140      	cbz	r0, 8019a56 <_svfiprintf_r+0x152>
 8019a44:	2340      	movs	r3, #64	; 0x40
 8019a46:	eba0 000a 	sub.w	r0, r0, sl
 8019a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8019a4e:	9b04      	ldr	r3, [sp, #16]
 8019a50:	4303      	orrs	r3, r0
 8019a52:	3401      	adds	r4, #1
 8019a54:	9304      	str	r3, [sp, #16]
 8019a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a5a:	4826      	ldr	r0, [pc, #152]	; (8019af4 <_svfiprintf_r+0x1f0>)
 8019a5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019a60:	2206      	movs	r2, #6
 8019a62:	f7e6 fbdd 	bl	8000220 <memchr>
 8019a66:	2800      	cmp	r0, #0
 8019a68:	d038      	beq.n	8019adc <_svfiprintf_r+0x1d8>
 8019a6a:	4b23      	ldr	r3, [pc, #140]	; (8019af8 <_svfiprintf_r+0x1f4>)
 8019a6c:	bb1b      	cbnz	r3, 8019ab6 <_svfiprintf_r+0x1b2>
 8019a6e:	9b03      	ldr	r3, [sp, #12]
 8019a70:	3307      	adds	r3, #7
 8019a72:	f023 0307 	bic.w	r3, r3, #7
 8019a76:	3308      	adds	r3, #8
 8019a78:	9303      	str	r3, [sp, #12]
 8019a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a7c:	4433      	add	r3, r6
 8019a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8019a80:	e767      	b.n	8019952 <_svfiprintf_r+0x4e>
 8019a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8019a86:	460c      	mov	r4, r1
 8019a88:	2001      	movs	r0, #1
 8019a8a:	e7a5      	b.n	80199d8 <_svfiprintf_r+0xd4>
 8019a8c:	2300      	movs	r3, #0
 8019a8e:	3401      	adds	r4, #1
 8019a90:	9305      	str	r3, [sp, #20]
 8019a92:	4619      	mov	r1, r3
 8019a94:	f04f 0c0a 	mov.w	ip, #10
 8019a98:	4620      	mov	r0, r4
 8019a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a9e:	3a30      	subs	r2, #48	; 0x30
 8019aa0:	2a09      	cmp	r2, #9
 8019aa2:	d903      	bls.n	8019aac <_svfiprintf_r+0x1a8>
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d0c5      	beq.n	8019a34 <_svfiprintf_r+0x130>
 8019aa8:	9105      	str	r1, [sp, #20]
 8019aaa:	e7c3      	b.n	8019a34 <_svfiprintf_r+0x130>
 8019aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ab0:	4604      	mov	r4, r0
 8019ab2:	2301      	movs	r3, #1
 8019ab4:	e7f0      	b.n	8019a98 <_svfiprintf_r+0x194>
 8019ab6:	ab03      	add	r3, sp, #12
 8019ab8:	9300      	str	r3, [sp, #0]
 8019aba:	462a      	mov	r2, r5
 8019abc:	4b0f      	ldr	r3, [pc, #60]	; (8019afc <_svfiprintf_r+0x1f8>)
 8019abe:	a904      	add	r1, sp, #16
 8019ac0:	4638      	mov	r0, r7
 8019ac2:	f7fc fa5f 	bl	8015f84 <_printf_float>
 8019ac6:	1c42      	adds	r2, r0, #1
 8019ac8:	4606      	mov	r6, r0
 8019aca:	d1d6      	bne.n	8019a7a <_svfiprintf_r+0x176>
 8019acc:	89ab      	ldrh	r3, [r5, #12]
 8019ace:	065b      	lsls	r3, r3, #25
 8019ad0:	f53f af2c 	bmi.w	801992c <_svfiprintf_r+0x28>
 8019ad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ad6:	b01d      	add	sp, #116	; 0x74
 8019ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019adc:	ab03      	add	r3, sp, #12
 8019ade:	9300      	str	r3, [sp, #0]
 8019ae0:	462a      	mov	r2, r5
 8019ae2:	4b06      	ldr	r3, [pc, #24]	; (8019afc <_svfiprintf_r+0x1f8>)
 8019ae4:	a904      	add	r1, sp, #16
 8019ae6:	4638      	mov	r0, r7
 8019ae8:	f7fc fcf0 	bl	80164cc <_printf_i>
 8019aec:	e7eb      	b.n	8019ac6 <_svfiprintf_r+0x1c2>
 8019aee:	bf00      	nop
 8019af0:	0801cce4 	.word	0x0801cce4
 8019af4:	0801ccee 	.word	0x0801ccee
 8019af8:	08015f85 	.word	0x08015f85
 8019afc:	0801984d 	.word	0x0801984d
 8019b00:	0801ccea 	.word	0x0801ccea
 8019b04:	00000000 	.word	0x00000000

08019b08 <nan>:
 8019b08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019b10 <nan+0x8>
 8019b0c:	4770      	bx	lr
 8019b0e:	bf00      	nop
 8019b10:	00000000 	.word	0x00000000
 8019b14:	7ff80000 	.word	0x7ff80000

08019b18 <_sbrk_r>:
 8019b18:	b538      	push	{r3, r4, r5, lr}
 8019b1a:	4d06      	ldr	r5, [pc, #24]	; (8019b34 <_sbrk_r+0x1c>)
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	4604      	mov	r4, r0
 8019b20:	4608      	mov	r0, r1
 8019b22:	602b      	str	r3, [r5, #0]
 8019b24:	f7e8 f8b8 	bl	8001c98 <_sbrk>
 8019b28:	1c43      	adds	r3, r0, #1
 8019b2a:	d102      	bne.n	8019b32 <_sbrk_r+0x1a>
 8019b2c:	682b      	ldr	r3, [r5, #0]
 8019b2e:	b103      	cbz	r3, 8019b32 <_sbrk_r+0x1a>
 8019b30:	6023      	str	r3, [r4, #0]
 8019b32:	bd38      	pop	{r3, r4, r5, pc}
 8019b34:	20002a30 	.word	0x20002a30

08019b38 <strncmp>:
 8019b38:	b510      	push	{r4, lr}
 8019b3a:	b16a      	cbz	r2, 8019b58 <strncmp+0x20>
 8019b3c:	3901      	subs	r1, #1
 8019b3e:	1884      	adds	r4, r0, r2
 8019b40:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019b44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019b48:	4293      	cmp	r3, r2
 8019b4a:	d103      	bne.n	8019b54 <strncmp+0x1c>
 8019b4c:	42a0      	cmp	r0, r4
 8019b4e:	d001      	beq.n	8019b54 <strncmp+0x1c>
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d1f5      	bne.n	8019b40 <strncmp+0x8>
 8019b54:	1a98      	subs	r0, r3, r2
 8019b56:	bd10      	pop	{r4, pc}
 8019b58:	4610      	mov	r0, r2
 8019b5a:	e7fc      	b.n	8019b56 <strncmp+0x1e>

08019b5c <__ascii_wctomb>:
 8019b5c:	b149      	cbz	r1, 8019b72 <__ascii_wctomb+0x16>
 8019b5e:	2aff      	cmp	r2, #255	; 0xff
 8019b60:	bf85      	ittet	hi
 8019b62:	238a      	movhi	r3, #138	; 0x8a
 8019b64:	6003      	strhi	r3, [r0, #0]
 8019b66:	700a      	strbls	r2, [r1, #0]
 8019b68:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b6c:	bf98      	it	ls
 8019b6e:	2001      	movls	r0, #1
 8019b70:	4770      	bx	lr
 8019b72:	4608      	mov	r0, r1
 8019b74:	4770      	bx	lr
	...

08019b78 <__assert_func>:
 8019b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b7a:	4614      	mov	r4, r2
 8019b7c:	461a      	mov	r2, r3
 8019b7e:	4b09      	ldr	r3, [pc, #36]	; (8019ba4 <__assert_func+0x2c>)
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	4605      	mov	r5, r0
 8019b84:	68d8      	ldr	r0, [r3, #12]
 8019b86:	b14c      	cbz	r4, 8019b9c <__assert_func+0x24>
 8019b88:	4b07      	ldr	r3, [pc, #28]	; (8019ba8 <__assert_func+0x30>)
 8019b8a:	9100      	str	r1, [sp, #0]
 8019b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019b90:	4906      	ldr	r1, [pc, #24]	; (8019bac <__assert_func+0x34>)
 8019b92:	462b      	mov	r3, r5
 8019b94:	f000 f80e 	bl	8019bb4 <fiprintf>
 8019b98:	f000 fa84 	bl	801a0a4 <abort>
 8019b9c:	4b04      	ldr	r3, [pc, #16]	; (8019bb0 <__assert_func+0x38>)
 8019b9e:	461c      	mov	r4, r3
 8019ba0:	e7f3      	b.n	8019b8a <__assert_func+0x12>
 8019ba2:	bf00      	nop
 8019ba4:	20001250 	.word	0x20001250
 8019ba8:	0801ccf5 	.word	0x0801ccf5
 8019bac:	0801cd02 	.word	0x0801cd02
 8019bb0:	0801cd30 	.word	0x0801cd30

08019bb4 <fiprintf>:
 8019bb4:	b40e      	push	{r1, r2, r3}
 8019bb6:	b503      	push	{r0, r1, lr}
 8019bb8:	4601      	mov	r1, r0
 8019bba:	ab03      	add	r3, sp, #12
 8019bbc:	4805      	ldr	r0, [pc, #20]	; (8019bd4 <fiprintf+0x20>)
 8019bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019bc2:	6800      	ldr	r0, [r0, #0]
 8019bc4:	9301      	str	r3, [sp, #4]
 8019bc6:	f000 f87d 	bl	8019cc4 <_vfiprintf_r>
 8019bca:	b002      	add	sp, #8
 8019bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019bd0:	b003      	add	sp, #12
 8019bd2:	4770      	bx	lr
 8019bd4:	20001250 	.word	0x20001250

08019bd8 <memmove>:
 8019bd8:	4288      	cmp	r0, r1
 8019bda:	b510      	push	{r4, lr}
 8019bdc:	eb01 0402 	add.w	r4, r1, r2
 8019be0:	d902      	bls.n	8019be8 <memmove+0x10>
 8019be2:	4284      	cmp	r4, r0
 8019be4:	4623      	mov	r3, r4
 8019be6:	d807      	bhi.n	8019bf8 <memmove+0x20>
 8019be8:	1e43      	subs	r3, r0, #1
 8019bea:	42a1      	cmp	r1, r4
 8019bec:	d008      	beq.n	8019c00 <memmove+0x28>
 8019bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019bf6:	e7f8      	b.n	8019bea <memmove+0x12>
 8019bf8:	4402      	add	r2, r0
 8019bfa:	4601      	mov	r1, r0
 8019bfc:	428a      	cmp	r2, r1
 8019bfe:	d100      	bne.n	8019c02 <memmove+0x2a>
 8019c00:	bd10      	pop	{r4, pc}
 8019c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c0a:	e7f7      	b.n	8019bfc <memmove+0x24>

08019c0c <__malloc_lock>:
 8019c0c:	4801      	ldr	r0, [pc, #4]	; (8019c14 <__malloc_lock+0x8>)
 8019c0e:	f000 bc09 	b.w	801a424 <__retarget_lock_acquire_recursive>
 8019c12:	bf00      	nop
 8019c14:	20002a38 	.word	0x20002a38

08019c18 <__malloc_unlock>:
 8019c18:	4801      	ldr	r0, [pc, #4]	; (8019c20 <__malloc_unlock+0x8>)
 8019c1a:	f000 bc04 	b.w	801a426 <__retarget_lock_release_recursive>
 8019c1e:	bf00      	nop
 8019c20:	20002a38 	.word	0x20002a38

08019c24 <_realloc_r>:
 8019c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c26:	4607      	mov	r7, r0
 8019c28:	4614      	mov	r4, r2
 8019c2a:	460e      	mov	r6, r1
 8019c2c:	b921      	cbnz	r1, 8019c38 <_realloc_r+0x14>
 8019c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019c32:	4611      	mov	r1, r2
 8019c34:	f7ff bdb0 	b.w	8019798 <_malloc_r>
 8019c38:	b922      	cbnz	r2, 8019c44 <_realloc_r+0x20>
 8019c3a:	f7ff fd5d 	bl	80196f8 <_free_r>
 8019c3e:	4625      	mov	r5, r4
 8019c40:	4628      	mov	r0, r5
 8019c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c44:	f000 fc54 	bl	801a4f0 <_malloc_usable_size_r>
 8019c48:	42a0      	cmp	r0, r4
 8019c4a:	d20f      	bcs.n	8019c6c <_realloc_r+0x48>
 8019c4c:	4621      	mov	r1, r4
 8019c4e:	4638      	mov	r0, r7
 8019c50:	f7ff fda2 	bl	8019798 <_malloc_r>
 8019c54:	4605      	mov	r5, r0
 8019c56:	2800      	cmp	r0, #0
 8019c58:	d0f2      	beq.n	8019c40 <_realloc_r+0x1c>
 8019c5a:	4631      	mov	r1, r6
 8019c5c:	4622      	mov	r2, r4
 8019c5e:	f7fc f8db 	bl	8015e18 <memcpy>
 8019c62:	4631      	mov	r1, r6
 8019c64:	4638      	mov	r0, r7
 8019c66:	f7ff fd47 	bl	80196f8 <_free_r>
 8019c6a:	e7e9      	b.n	8019c40 <_realloc_r+0x1c>
 8019c6c:	4635      	mov	r5, r6
 8019c6e:	e7e7      	b.n	8019c40 <_realloc_r+0x1c>

08019c70 <__sfputc_r>:
 8019c70:	6893      	ldr	r3, [r2, #8]
 8019c72:	3b01      	subs	r3, #1
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	b410      	push	{r4}
 8019c78:	6093      	str	r3, [r2, #8]
 8019c7a:	da08      	bge.n	8019c8e <__sfputc_r+0x1e>
 8019c7c:	6994      	ldr	r4, [r2, #24]
 8019c7e:	42a3      	cmp	r3, r4
 8019c80:	db01      	blt.n	8019c86 <__sfputc_r+0x16>
 8019c82:	290a      	cmp	r1, #10
 8019c84:	d103      	bne.n	8019c8e <__sfputc_r+0x1e>
 8019c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c8a:	f000 b94b 	b.w	8019f24 <__swbuf_r>
 8019c8e:	6813      	ldr	r3, [r2, #0]
 8019c90:	1c58      	adds	r0, r3, #1
 8019c92:	6010      	str	r0, [r2, #0]
 8019c94:	7019      	strb	r1, [r3, #0]
 8019c96:	4608      	mov	r0, r1
 8019c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c9c:	4770      	bx	lr

08019c9e <__sfputs_r>:
 8019c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ca0:	4606      	mov	r6, r0
 8019ca2:	460f      	mov	r7, r1
 8019ca4:	4614      	mov	r4, r2
 8019ca6:	18d5      	adds	r5, r2, r3
 8019ca8:	42ac      	cmp	r4, r5
 8019caa:	d101      	bne.n	8019cb0 <__sfputs_r+0x12>
 8019cac:	2000      	movs	r0, #0
 8019cae:	e007      	b.n	8019cc0 <__sfputs_r+0x22>
 8019cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cb4:	463a      	mov	r2, r7
 8019cb6:	4630      	mov	r0, r6
 8019cb8:	f7ff ffda 	bl	8019c70 <__sfputc_r>
 8019cbc:	1c43      	adds	r3, r0, #1
 8019cbe:	d1f3      	bne.n	8019ca8 <__sfputs_r+0xa>
 8019cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019cc4 <_vfiprintf_r>:
 8019cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc8:	460d      	mov	r5, r1
 8019cca:	b09d      	sub	sp, #116	; 0x74
 8019ccc:	4614      	mov	r4, r2
 8019cce:	4698      	mov	r8, r3
 8019cd0:	4606      	mov	r6, r0
 8019cd2:	b118      	cbz	r0, 8019cdc <_vfiprintf_r+0x18>
 8019cd4:	6983      	ldr	r3, [r0, #24]
 8019cd6:	b90b      	cbnz	r3, 8019cdc <_vfiprintf_r+0x18>
 8019cd8:	f000 fb06 	bl	801a2e8 <__sinit>
 8019cdc:	4b89      	ldr	r3, [pc, #548]	; (8019f04 <_vfiprintf_r+0x240>)
 8019cde:	429d      	cmp	r5, r3
 8019ce0:	d11b      	bne.n	8019d1a <_vfiprintf_r+0x56>
 8019ce2:	6875      	ldr	r5, [r6, #4]
 8019ce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ce6:	07d9      	lsls	r1, r3, #31
 8019ce8:	d405      	bmi.n	8019cf6 <_vfiprintf_r+0x32>
 8019cea:	89ab      	ldrh	r3, [r5, #12]
 8019cec:	059a      	lsls	r2, r3, #22
 8019cee:	d402      	bmi.n	8019cf6 <_vfiprintf_r+0x32>
 8019cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019cf2:	f000 fb97 	bl	801a424 <__retarget_lock_acquire_recursive>
 8019cf6:	89ab      	ldrh	r3, [r5, #12]
 8019cf8:	071b      	lsls	r3, r3, #28
 8019cfa:	d501      	bpl.n	8019d00 <_vfiprintf_r+0x3c>
 8019cfc:	692b      	ldr	r3, [r5, #16]
 8019cfe:	b9eb      	cbnz	r3, 8019d3c <_vfiprintf_r+0x78>
 8019d00:	4629      	mov	r1, r5
 8019d02:	4630      	mov	r0, r6
 8019d04:	f000 f960 	bl	8019fc8 <__swsetup_r>
 8019d08:	b1c0      	cbz	r0, 8019d3c <_vfiprintf_r+0x78>
 8019d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019d0c:	07dc      	lsls	r4, r3, #31
 8019d0e:	d50e      	bpl.n	8019d2e <_vfiprintf_r+0x6a>
 8019d10:	f04f 30ff 	mov.w	r0, #4294967295
 8019d14:	b01d      	add	sp, #116	; 0x74
 8019d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d1a:	4b7b      	ldr	r3, [pc, #492]	; (8019f08 <_vfiprintf_r+0x244>)
 8019d1c:	429d      	cmp	r5, r3
 8019d1e:	d101      	bne.n	8019d24 <_vfiprintf_r+0x60>
 8019d20:	68b5      	ldr	r5, [r6, #8]
 8019d22:	e7df      	b.n	8019ce4 <_vfiprintf_r+0x20>
 8019d24:	4b79      	ldr	r3, [pc, #484]	; (8019f0c <_vfiprintf_r+0x248>)
 8019d26:	429d      	cmp	r5, r3
 8019d28:	bf08      	it	eq
 8019d2a:	68f5      	ldreq	r5, [r6, #12]
 8019d2c:	e7da      	b.n	8019ce4 <_vfiprintf_r+0x20>
 8019d2e:	89ab      	ldrh	r3, [r5, #12]
 8019d30:	0598      	lsls	r0, r3, #22
 8019d32:	d4ed      	bmi.n	8019d10 <_vfiprintf_r+0x4c>
 8019d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019d36:	f000 fb76 	bl	801a426 <__retarget_lock_release_recursive>
 8019d3a:	e7e9      	b.n	8019d10 <_vfiprintf_r+0x4c>
 8019d3c:	2300      	movs	r3, #0
 8019d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8019d40:	2320      	movs	r3, #32
 8019d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d4a:	2330      	movs	r3, #48	; 0x30
 8019d4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019f10 <_vfiprintf_r+0x24c>
 8019d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d54:	f04f 0901 	mov.w	r9, #1
 8019d58:	4623      	mov	r3, r4
 8019d5a:	469a      	mov	sl, r3
 8019d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d60:	b10a      	cbz	r2, 8019d66 <_vfiprintf_r+0xa2>
 8019d62:	2a25      	cmp	r2, #37	; 0x25
 8019d64:	d1f9      	bne.n	8019d5a <_vfiprintf_r+0x96>
 8019d66:	ebba 0b04 	subs.w	fp, sl, r4
 8019d6a:	d00b      	beq.n	8019d84 <_vfiprintf_r+0xc0>
 8019d6c:	465b      	mov	r3, fp
 8019d6e:	4622      	mov	r2, r4
 8019d70:	4629      	mov	r1, r5
 8019d72:	4630      	mov	r0, r6
 8019d74:	f7ff ff93 	bl	8019c9e <__sfputs_r>
 8019d78:	3001      	adds	r0, #1
 8019d7a:	f000 80aa 	beq.w	8019ed2 <_vfiprintf_r+0x20e>
 8019d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d80:	445a      	add	r2, fp
 8019d82:	9209      	str	r2, [sp, #36]	; 0x24
 8019d84:	f89a 3000 	ldrb.w	r3, [sl]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	f000 80a2 	beq.w	8019ed2 <_vfiprintf_r+0x20e>
 8019d8e:	2300      	movs	r3, #0
 8019d90:	f04f 32ff 	mov.w	r2, #4294967295
 8019d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d98:	f10a 0a01 	add.w	sl, sl, #1
 8019d9c:	9304      	str	r3, [sp, #16]
 8019d9e:	9307      	str	r3, [sp, #28]
 8019da0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019da4:	931a      	str	r3, [sp, #104]	; 0x68
 8019da6:	4654      	mov	r4, sl
 8019da8:	2205      	movs	r2, #5
 8019daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dae:	4858      	ldr	r0, [pc, #352]	; (8019f10 <_vfiprintf_r+0x24c>)
 8019db0:	f7e6 fa36 	bl	8000220 <memchr>
 8019db4:	9a04      	ldr	r2, [sp, #16]
 8019db6:	b9d8      	cbnz	r0, 8019df0 <_vfiprintf_r+0x12c>
 8019db8:	06d1      	lsls	r1, r2, #27
 8019dba:	bf44      	itt	mi
 8019dbc:	2320      	movmi	r3, #32
 8019dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019dc2:	0713      	lsls	r3, r2, #28
 8019dc4:	bf44      	itt	mi
 8019dc6:	232b      	movmi	r3, #43	; 0x2b
 8019dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8019dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8019dd2:	d015      	beq.n	8019e00 <_vfiprintf_r+0x13c>
 8019dd4:	9a07      	ldr	r2, [sp, #28]
 8019dd6:	4654      	mov	r4, sl
 8019dd8:	2000      	movs	r0, #0
 8019dda:	f04f 0c0a 	mov.w	ip, #10
 8019dde:	4621      	mov	r1, r4
 8019de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019de4:	3b30      	subs	r3, #48	; 0x30
 8019de6:	2b09      	cmp	r3, #9
 8019de8:	d94e      	bls.n	8019e88 <_vfiprintf_r+0x1c4>
 8019dea:	b1b0      	cbz	r0, 8019e1a <_vfiprintf_r+0x156>
 8019dec:	9207      	str	r2, [sp, #28]
 8019dee:	e014      	b.n	8019e1a <_vfiprintf_r+0x156>
 8019df0:	eba0 0308 	sub.w	r3, r0, r8
 8019df4:	fa09 f303 	lsl.w	r3, r9, r3
 8019df8:	4313      	orrs	r3, r2
 8019dfa:	9304      	str	r3, [sp, #16]
 8019dfc:	46a2      	mov	sl, r4
 8019dfe:	e7d2      	b.n	8019da6 <_vfiprintf_r+0xe2>
 8019e00:	9b03      	ldr	r3, [sp, #12]
 8019e02:	1d19      	adds	r1, r3, #4
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	9103      	str	r1, [sp, #12]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	bfbb      	ittet	lt
 8019e0c:	425b      	neglt	r3, r3
 8019e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8019e12:	9307      	strge	r3, [sp, #28]
 8019e14:	9307      	strlt	r3, [sp, #28]
 8019e16:	bfb8      	it	lt
 8019e18:	9204      	strlt	r2, [sp, #16]
 8019e1a:	7823      	ldrb	r3, [r4, #0]
 8019e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8019e1e:	d10c      	bne.n	8019e3a <_vfiprintf_r+0x176>
 8019e20:	7863      	ldrb	r3, [r4, #1]
 8019e22:	2b2a      	cmp	r3, #42	; 0x2a
 8019e24:	d135      	bne.n	8019e92 <_vfiprintf_r+0x1ce>
 8019e26:	9b03      	ldr	r3, [sp, #12]
 8019e28:	1d1a      	adds	r2, r3, #4
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	9203      	str	r2, [sp, #12]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	bfb8      	it	lt
 8019e32:	f04f 33ff 	movlt.w	r3, #4294967295
 8019e36:	3402      	adds	r4, #2
 8019e38:	9305      	str	r3, [sp, #20]
 8019e3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019f20 <_vfiprintf_r+0x25c>
 8019e3e:	7821      	ldrb	r1, [r4, #0]
 8019e40:	2203      	movs	r2, #3
 8019e42:	4650      	mov	r0, sl
 8019e44:	f7e6 f9ec 	bl	8000220 <memchr>
 8019e48:	b140      	cbz	r0, 8019e5c <_vfiprintf_r+0x198>
 8019e4a:	2340      	movs	r3, #64	; 0x40
 8019e4c:	eba0 000a 	sub.w	r0, r0, sl
 8019e50:	fa03 f000 	lsl.w	r0, r3, r0
 8019e54:	9b04      	ldr	r3, [sp, #16]
 8019e56:	4303      	orrs	r3, r0
 8019e58:	3401      	adds	r4, #1
 8019e5a:	9304      	str	r3, [sp, #16]
 8019e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e60:	482c      	ldr	r0, [pc, #176]	; (8019f14 <_vfiprintf_r+0x250>)
 8019e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e66:	2206      	movs	r2, #6
 8019e68:	f7e6 f9da 	bl	8000220 <memchr>
 8019e6c:	2800      	cmp	r0, #0
 8019e6e:	d03f      	beq.n	8019ef0 <_vfiprintf_r+0x22c>
 8019e70:	4b29      	ldr	r3, [pc, #164]	; (8019f18 <_vfiprintf_r+0x254>)
 8019e72:	bb1b      	cbnz	r3, 8019ebc <_vfiprintf_r+0x1f8>
 8019e74:	9b03      	ldr	r3, [sp, #12]
 8019e76:	3307      	adds	r3, #7
 8019e78:	f023 0307 	bic.w	r3, r3, #7
 8019e7c:	3308      	adds	r3, #8
 8019e7e:	9303      	str	r3, [sp, #12]
 8019e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e82:	443b      	add	r3, r7
 8019e84:	9309      	str	r3, [sp, #36]	; 0x24
 8019e86:	e767      	b.n	8019d58 <_vfiprintf_r+0x94>
 8019e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e8c:	460c      	mov	r4, r1
 8019e8e:	2001      	movs	r0, #1
 8019e90:	e7a5      	b.n	8019dde <_vfiprintf_r+0x11a>
 8019e92:	2300      	movs	r3, #0
 8019e94:	3401      	adds	r4, #1
 8019e96:	9305      	str	r3, [sp, #20]
 8019e98:	4619      	mov	r1, r3
 8019e9a:	f04f 0c0a 	mov.w	ip, #10
 8019e9e:	4620      	mov	r0, r4
 8019ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ea4:	3a30      	subs	r2, #48	; 0x30
 8019ea6:	2a09      	cmp	r2, #9
 8019ea8:	d903      	bls.n	8019eb2 <_vfiprintf_r+0x1ee>
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d0c5      	beq.n	8019e3a <_vfiprintf_r+0x176>
 8019eae:	9105      	str	r1, [sp, #20]
 8019eb0:	e7c3      	b.n	8019e3a <_vfiprintf_r+0x176>
 8019eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8019eb6:	4604      	mov	r4, r0
 8019eb8:	2301      	movs	r3, #1
 8019eba:	e7f0      	b.n	8019e9e <_vfiprintf_r+0x1da>
 8019ebc:	ab03      	add	r3, sp, #12
 8019ebe:	9300      	str	r3, [sp, #0]
 8019ec0:	462a      	mov	r2, r5
 8019ec2:	4b16      	ldr	r3, [pc, #88]	; (8019f1c <_vfiprintf_r+0x258>)
 8019ec4:	a904      	add	r1, sp, #16
 8019ec6:	4630      	mov	r0, r6
 8019ec8:	f7fc f85c 	bl	8015f84 <_printf_float>
 8019ecc:	4607      	mov	r7, r0
 8019ece:	1c78      	adds	r0, r7, #1
 8019ed0:	d1d6      	bne.n	8019e80 <_vfiprintf_r+0x1bc>
 8019ed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ed4:	07d9      	lsls	r1, r3, #31
 8019ed6:	d405      	bmi.n	8019ee4 <_vfiprintf_r+0x220>
 8019ed8:	89ab      	ldrh	r3, [r5, #12]
 8019eda:	059a      	lsls	r2, r3, #22
 8019edc:	d402      	bmi.n	8019ee4 <_vfiprintf_r+0x220>
 8019ede:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ee0:	f000 faa1 	bl	801a426 <__retarget_lock_release_recursive>
 8019ee4:	89ab      	ldrh	r3, [r5, #12]
 8019ee6:	065b      	lsls	r3, r3, #25
 8019ee8:	f53f af12 	bmi.w	8019d10 <_vfiprintf_r+0x4c>
 8019eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019eee:	e711      	b.n	8019d14 <_vfiprintf_r+0x50>
 8019ef0:	ab03      	add	r3, sp, #12
 8019ef2:	9300      	str	r3, [sp, #0]
 8019ef4:	462a      	mov	r2, r5
 8019ef6:	4b09      	ldr	r3, [pc, #36]	; (8019f1c <_vfiprintf_r+0x258>)
 8019ef8:	a904      	add	r1, sp, #16
 8019efa:	4630      	mov	r0, r6
 8019efc:	f7fc fae6 	bl	80164cc <_printf_i>
 8019f00:	e7e4      	b.n	8019ecc <_vfiprintf_r+0x208>
 8019f02:	bf00      	nop
 8019f04:	0801cd54 	.word	0x0801cd54
 8019f08:	0801cd74 	.word	0x0801cd74
 8019f0c:	0801cd34 	.word	0x0801cd34
 8019f10:	0801cce4 	.word	0x0801cce4
 8019f14:	0801ccee 	.word	0x0801ccee
 8019f18:	08015f85 	.word	0x08015f85
 8019f1c:	08019c9f 	.word	0x08019c9f
 8019f20:	0801ccea 	.word	0x0801ccea

08019f24 <__swbuf_r>:
 8019f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f26:	460e      	mov	r6, r1
 8019f28:	4614      	mov	r4, r2
 8019f2a:	4605      	mov	r5, r0
 8019f2c:	b118      	cbz	r0, 8019f36 <__swbuf_r+0x12>
 8019f2e:	6983      	ldr	r3, [r0, #24]
 8019f30:	b90b      	cbnz	r3, 8019f36 <__swbuf_r+0x12>
 8019f32:	f000 f9d9 	bl	801a2e8 <__sinit>
 8019f36:	4b21      	ldr	r3, [pc, #132]	; (8019fbc <__swbuf_r+0x98>)
 8019f38:	429c      	cmp	r4, r3
 8019f3a:	d12b      	bne.n	8019f94 <__swbuf_r+0x70>
 8019f3c:	686c      	ldr	r4, [r5, #4]
 8019f3e:	69a3      	ldr	r3, [r4, #24]
 8019f40:	60a3      	str	r3, [r4, #8]
 8019f42:	89a3      	ldrh	r3, [r4, #12]
 8019f44:	071a      	lsls	r2, r3, #28
 8019f46:	d52f      	bpl.n	8019fa8 <__swbuf_r+0x84>
 8019f48:	6923      	ldr	r3, [r4, #16]
 8019f4a:	b36b      	cbz	r3, 8019fa8 <__swbuf_r+0x84>
 8019f4c:	6923      	ldr	r3, [r4, #16]
 8019f4e:	6820      	ldr	r0, [r4, #0]
 8019f50:	1ac0      	subs	r0, r0, r3
 8019f52:	6963      	ldr	r3, [r4, #20]
 8019f54:	b2f6      	uxtb	r6, r6
 8019f56:	4283      	cmp	r3, r0
 8019f58:	4637      	mov	r7, r6
 8019f5a:	dc04      	bgt.n	8019f66 <__swbuf_r+0x42>
 8019f5c:	4621      	mov	r1, r4
 8019f5e:	4628      	mov	r0, r5
 8019f60:	f000 f92e 	bl	801a1c0 <_fflush_r>
 8019f64:	bb30      	cbnz	r0, 8019fb4 <__swbuf_r+0x90>
 8019f66:	68a3      	ldr	r3, [r4, #8]
 8019f68:	3b01      	subs	r3, #1
 8019f6a:	60a3      	str	r3, [r4, #8]
 8019f6c:	6823      	ldr	r3, [r4, #0]
 8019f6e:	1c5a      	adds	r2, r3, #1
 8019f70:	6022      	str	r2, [r4, #0]
 8019f72:	701e      	strb	r6, [r3, #0]
 8019f74:	6963      	ldr	r3, [r4, #20]
 8019f76:	3001      	adds	r0, #1
 8019f78:	4283      	cmp	r3, r0
 8019f7a:	d004      	beq.n	8019f86 <__swbuf_r+0x62>
 8019f7c:	89a3      	ldrh	r3, [r4, #12]
 8019f7e:	07db      	lsls	r3, r3, #31
 8019f80:	d506      	bpl.n	8019f90 <__swbuf_r+0x6c>
 8019f82:	2e0a      	cmp	r6, #10
 8019f84:	d104      	bne.n	8019f90 <__swbuf_r+0x6c>
 8019f86:	4621      	mov	r1, r4
 8019f88:	4628      	mov	r0, r5
 8019f8a:	f000 f919 	bl	801a1c0 <_fflush_r>
 8019f8e:	b988      	cbnz	r0, 8019fb4 <__swbuf_r+0x90>
 8019f90:	4638      	mov	r0, r7
 8019f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f94:	4b0a      	ldr	r3, [pc, #40]	; (8019fc0 <__swbuf_r+0x9c>)
 8019f96:	429c      	cmp	r4, r3
 8019f98:	d101      	bne.n	8019f9e <__swbuf_r+0x7a>
 8019f9a:	68ac      	ldr	r4, [r5, #8]
 8019f9c:	e7cf      	b.n	8019f3e <__swbuf_r+0x1a>
 8019f9e:	4b09      	ldr	r3, [pc, #36]	; (8019fc4 <__swbuf_r+0xa0>)
 8019fa0:	429c      	cmp	r4, r3
 8019fa2:	bf08      	it	eq
 8019fa4:	68ec      	ldreq	r4, [r5, #12]
 8019fa6:	e7ca      	b.n	8019f3e <__swbuf_r+0x1a>
 8019fa8:	4621      	mov	r1, r4
 8019faa:	4628      	mov	r0, r5
 8019fac:	f000 f80c 	bl	8019fc8 <__swsetup_r>
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	d0cb      	beq.n	8019f4c <__swbuf_r+0x28>
 8019fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8019fb8:	e7ea      	b.n	8019f90 <__swbuf_r+0x6c>
 8019fba:	bf00      	nop
 8019fbc:	0801cd54 	.word	0x0801cd54
 8019fc0:	0801cd74 	.word	0x0801cd74
 8019fc4:	0801cd34 	.word	0x0801cd34

08019fc8 <__swsetup_r>:
 8019fc8:	4b32      	ldr	r3, [pc, #200]	; (801a094 <__swsetup_r+0xcc>)
 8019fca:	b570      	push	{r4, r5, r6, lr}
 8019fcc:	681d      	ldr	r5, [r3, #0]
 8019fce:	4606      	mov	r6, r0
 8019fd0:	460c      	mov	r4, r1
 8019fd2:	b125      	cbz	r5, 8019fde <__swsetup_r+0x16>
 8019fd4:	69ab      	ldr	r3, [r5, #24]
 8019fd6:	b913      	cbnz	r3, 8019fde <__swsetup_r+0x16>
 8019fd8:	4628      	mov	r0, r5
 8019fda:	f000 f985 	bl	801a2e8 <__sinit>
 8019fde:	4b2e      	ldr	r3, [pc, #184]	; (801a098 <__swsetup_r+0xd0>)
 8019fe0:	429c      	cmp	r4, r3
 8019fe2:	d10f      	bne.n	801a004 <__swsetup_r+0x3c>
 8019fe4:	686c      	ldr	r4, [r5, #4]
 8019fe6:	89a3      	ldrh	r3, [r4, #12]
 8019fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019fec:	0719      	lsls	r1, r3, #28
 8019fee:	d42c      	bmi.n	801a04a <__swsetup_r+0x82>
 8019ff0:	06dd      	lsls	r5, r3, #27
 8019ff2:	d411      	bmi.n	801a018 <__swsetup_r+0x50>
 8019ff4:	2309      	movs	r3, #9
 8019ff6:	6033      	str	r3, [r6, #0]
 8019ff8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ffc:	81a3      	strh	r3, [r4, #12]
 8019ffe:	f04f 30ff 	mov.w	r0, #4294967295
 801a002:	e03e      	b.n	801a082 <__swsetup_r+0xba>
 801a004:	4b25      	ldr	r3, [pc, #148]	; (801a09c <__swsetup_r+0xd4>)
 801a006:	429c      	cmp	r4, r3
 801a008:	d101      	bne.n	801a00e <__swsetup_r+0x46>
 801a00a:	68ac      	ldr	r4, [r5, #8]
 801a00c:	e7eb      	b.n	8019fe6 <__swsetup_r+0x1e>
 801a00e:	4b24      	ldr	r3, [pc, #144]	; (801a0a0 <__swsetup_r+0xd8>)
 801a010:	429c      	cmp	r4, r3
 801a012:	bf08      	it	eq
 801a014:	68ec      	ldreq	r4, [r5, #12]
 801a016:	e7e6      	b.n	8019fe6 <__swsetup_r+0x1e>
 801a018:	0758      	lsls	r0, r3, #29
 801a01a:	d512      	bpl.n	801a042 <__swsetup_r+0x7a>
 801a01c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a01e:	b141      	cbz	r1, 801a032 <__swsetup_r+0x6a>
 801a020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a024:	4299      	cmp	r1, r3
 801a026:	d002      	beq.n	801a02e <__swsetup_r+0x66>
 801a028:	4630      	mov	r0, r6
 801a02a:	f7ff fb65 	bl	80196f8 <_free_r>
 801a02e:	2300      	movs	r3, #0
 801a030:	6363      	str	r3, [r4, #52]	; 0x34
 801a032:	89a3      	ldrh	r3, [r4, #12]
 801a034:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a038:	81a3      	strh	r3, [r4, #12]
 801a03a:	2300      	movs	r3, #0
 801a03c:	6063      	str	r3, [r4, #4]
 801a03e:	6923      	ldr	r3, [r4, #16]
 801a040:	6023      	str	r3, [r4, #0]
 801a042:	89a3      	ldrh	r3, [r4, #12]
 801a044:	f043 0308 	orr.w	r3, r3, #8
 801a048:	81a3      	strh	r3, [r4, #12]
 801a04a:	6923      	ldr	r3, [r4, #16]
 801a04c:	b94b      	cbnz	r3, 801a062 <__swsetup_r+0x9a>
 801a04e:	89a3      	ldrh	r3, [r4, #12]
 801a050:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a058:	d003      	beq.n	801a062 <__swsetup_r+0x9a>
 801a05a:	4621      	mov	r1, r4
 801a05c:	4630      	mov	r0, r6
 801a05e:	f000 fa07 	bl	801a470 <__smakebuf_r>
 801a062:	89a0      	ldrh	r0, [r4, #12]
 801a064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a068:	f010 0301 	ands.w	r3, r0, #1
 801a06c:	d00a      	beq.n	801a084 <__swsetup_r+0xbc>
 801a06e:	2300      	movs	r3, #0
 801a070:	60a3      	str	r3, [r4, #8]
 801a072:	6963      	ldr	r3, [r4, #20]
 801a074:	425b      	negs	r3, r3
 801a076:	61a3      	str	r3, [r4, #24]
 801a078:	6923      	ldr	r3, [r4, #16]
 801a07a:	b943      	cbnz	r3, 801a08e <__swsetup_r+0xc6>
 801a07c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a080:	d1ba      	bne.n	8019ff8 <__swsetup_r+0x30>
 801a082:	bd70      	pop	{r4, r5, r6, pc}
 801a084:	0781      	lsls	r1, r0, #30
 801a086:	bf58      	it	pl
 801a088:	6963      	ldrpl	r3, [r4, #20]
 801a08a:	60a3      	str	r3, [r4, #8]
 801a08c:	e7f4      	b.n	801a078 <__swsetup_r+0xb0>
 801a08e:	2000      	movs	r0, #0
 801a090:	e7f7      	b.n	801a082 <__swsetup_r+0xba>
 801a092:	bf00      	nop
 801a094:	20001250 	.word	0x20001250
 801a098:	0801cd54 	.word	0x0801cd54
 801a09c:	0801cd74 	.word	0x0801cd74
 801a0a0:	0801cd34 	.word	0x0801cd34

0801a0a4 <abort>:
 801a0a4:	b508      	push	{r3, lr}
 801a0a6:	2006      	movs	r0, #6
 801a0a8:	f000 fa52 	bl	801a550 <raise>
 801a0ac:	2001      	movs	r0, #1
 801a0ae:	f7e7 fd7b 	bl	8001ba8 <_exit>
	...

0801a0b4 <__sflush_r>:
 801a0b4:	898a      	ldrh	r2, [r1, #12]
 801a0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ba:	4605      	mov	r5, r0
 801a0bc:	0710      	lsls	r0, r2, #28
 801a0be:	460c      	mov	r4, r1
 801a0c0:	d458      	bmi.n	801a174 <__sflush_r+0xc0>
 801a0c2:	684b      	ldr	r3, [r1, #4]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	dc05      	bgt.n	801a0d4 <__sflush_r+0x20>
 801a0c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	dc02      	bgt.n	801a0d4 <__sflush_r+0x20>
 801a0ce:	2000      	movs	r0, #0
 801a0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a0d6:	2e00      	cmp	r6, #0
 801a0d8:	d0f9      	beq.n	801a0ce <__sflush_r+0x1a>
 801a0da:	2300      	movs	r3, #0
 801a0dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a0e0:	682f      	ldr	r7, [r5, #0]
 801a0e2:	602b      	str	r3, [r5, #0]
 801a0e4:	d032      	beq.n	801a14c <__sflush_r+0x98>
 801a0e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a0e8:	89a3      	ldrh	r3, [r4, #12]
 801a0ea:	075a      	lsls	r2, r3, #29
 801a0ec:	d505      	bpl.n	801a0fa <__sflush_r+0x46>
 801a0ee:	6863      	ldr	r3, [r4, #4]
 801a0f0:	1ac0      	subs	r0, r0, r3
 801a0f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a0f4:	b10b      	cbz	r3, 801a0fa <__sflush_r+0x46>
 801a0f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a0f8:	1ac0      	subs	r0, r0, r3
 801a0fa:	2300      	movs	r3, #0
 801a0fc:	4602      	mov	r2, r0
 801a0fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a100:	6a21      	ldr	r1, [r4, #32]
 801a102:	4628      	mov	r0, r5
 801a104:	47b0      	blx	r6
 801a106:	1c43      	adds	r3, r0, #1
 801a108:	89a3      	ldrh	r3, [r4, #12]
 801a10a:	d106      	bne.n	801a11a <__sflush_r+0x66>
 801a10c:	6829      	ldr	r1, [r5, #0]
 801a10e:	291d      	cmp	r1, #29
 801a110:	d82c      	bhi.n	801a16c <__sflush_r+0xb8>
 801a112:	4a2a      	ldr	r2, [pc, #168]	; (801a1bc <__sflush_r+0x108>)
 801a114:	40ca      	lsrs	r2, r1
 801a116:	07d6      	lsls	r6, r2, #31
 801a118:	d528      	bpl.n	801a16c <__sflush_r+0xb8>
 801a11a:	2200      	movs	r2, #0
 801a11c:	6062      	str	r2, [r4, #4]
 801a11e:	04d9      	lsls	r1, r3, #19
 801a120:	6922      	ldr	r2, [r4, #16]
 801a122:	6022      	str	r2, [r4, #0]
 801a124:	d504      	bpl.n	801a130 <__sflush_r+0x7c>
 801a126:	1c42      	adds	r2, r0, #1
 801a128:	d101      	bne.n	801a12e <__sflush_r+0x7a>
 801a12a:	682b      	ldr	r3, [r5, #0]
 801a12c:	b903      	cbnz	r3, 801a130 <__sflush_r+0x7c>
 801a12e:	6560      	str	r0, [r4, #84]	; 0x54
 801a130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a132:	602f      	str	r7, [r5, #0]
 801a134:	2900      	cmp	r1, #0
 801a136:	d0ca      	beq.n	801a0ce <__sflush_r+0x1a>
 801a138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a13c:	4299      	cmp	r1, r3
 801a13e:	d002      	beq.n	801a146 <__sflush_r+0x92>
 801a140:	4628      	mov	r0, r5
 801a142:	f7ff fad9 	bl	80196f8 <_free_r>
 801a146:	2000      	movs	r0, #0
 801a148:	6360      	str	r0, [r4, #52]	; 0x34
 801a14a:	e7c1      	b.n	801a0d0 <__sflush_r+0x1c>
 801a14c:	6a21      	ldr	r1, [r4, #32]
 801a14e:	2301      	movs	r3, #1
 801a150:	4628      	mov	r0, r5
 801a152:	47b0      	blx	r6
 801a154:	1c41      	adds	r1, r0, #1
 801a156:	d1c7      	bne.n	801a0e8 <__sflush_r+0x34>
 801a158:	682b      	ldr	r3, [r5, #0]
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d0c4      	beq.n	801a0e8 <__sflush_r+0x34>
 801a15e:	2b1d      	cmp	r3, #29
 801a160:	d001      	beq.n	801a166 <__sflush_r+0xb2>
 801a162:	2b16      	cmp	r3, #22
 801a164:	d101      	bne.n	801a16a <__sflush_r+0xb6>
 801a166:	602f      	str	r7, [r5, #0]
 801a168:	e7b1      	b.n	801a0ce <__sflush_r+0x1a>
 801a16a:	89a3      	ldrh	r3, [r4, #12]
 801a16c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a170:	81a3      	strh	r3, [r4, #12]
 801a172:	e7ad      	b.n	801a0d0 <__sflush_r+0x1c>
 801a174:	690f      	ldr	r7, [r1, #16]
 801a176:	2f00      	cmp	r7, #0
 801a178:	d0a9      	beq.n	801a0ce <__sflush_r+0x1a>
 801a17a:	0793      	lsls	r3, r2, #30
 801a17c:	680e      	ldr	r6, [r1, #0]
 801a17e:	bf08      	it	eq
 801a180:	694b      	ldreq	r3, [r1, #20]
 801a182:	600f      	str	r7, [r1, #0]
 801a184:	bf18      	it	ne
 801a186:	2300      	movne	r3, #0
 801a188:	eba6 0807 	sub.w	r8, r6, r7
 801a18c:	608b      	str	r3, [r1, #8]
 801a18e:	f1b8 0f00 	cmp.w	r8, #0
 801a192:	dd9c      	ble.n	801a0ce <__sflush_r+0x1a>
 801a194:	6a21      	ldr	r1, [r4, #32]
 801a196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a198:	4643      	mov	r3, r8
 801a19a:	463a      	mov	r2, r7
 801a19c:	4628      	mov	r0, r5
 801a19e:	47b0      	blx	r6
 801a1a0:	2800      	cmp	r0, #0
 801a1a2:	dc06      	bgt.n	801a1b2 <__sflush_r+0xfe>
 801a1a4:	89a3      	ldrh	r3, [r4, #12]
 801a1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1aa:	81a3      	strh	r3, [r4, #12]
 801a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 801a1b0:	e78e      	b.n	801a0d0 <__sflush_r+0x1c>
 801a1b2:	4407      	add	r7, r0
 801a1b4:	eba8 0800 	sub.w	r8, r8, r0
 801a1b8:	e7e9      	b.n	801a18e <__sflush_r+0xda>
 801a1ba:	bf00      	nop
 801a1bc:	20400001 	.word	0x20400001

0801a1c0 <_fflush_r>:
 801a1c0:	b538      	push	{r3, r4, r5, lr}
 801a1c2:	690b      	ldr	r3, [r1, #16]
 801a1c4:	4605      	mov	r5, r0
 801a1c6:	460c      	mov	r4, r1
 801a1c8:	b913      	cbnz	r3, 801a1d0 <_fflush_r+0x10>
 801a1ca:	2500      	movs	r5, #0
 801a1cc:	4628      	mov	r0, r5
 801a1ce:	bd38      	pop	{r3, r4, r5, pc}
 801a1d0:	b118      	cbz	r0, 801a1da <_fflush_r+0x1a>
 801a1d2:	6983      	ldr	r3, [r0, #24]
 801a1d4:	b90b      	cbnz	r3, 801a1da <_fflush_r+0x1a>
 801a1d6:	f000 f887 	bl	801a2e8 <__sinit>
 801a1da:	4b14      	ldr	r3, [pc, #80]	; (801a22c <_fflush_r+0x6c>)
 801a1dc:	429c      	cmp	r4, r3
 801a1de:	d11b      	bne.n	801a218 <_fflush_r+0x58>
 801a1e0:	686c      	ldr	r4, [r5, #4]
 801a1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d0ef      	beq.n	801a1ca <_fflush_r+0xa>
 801a1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a1ec:	07d0      	lsls	r0, r2, #31
 801a1ee:	d404      	bmi.n	801a1fa <_fflush_r+0x3a>
 801a1f0:	0599      	lsls	r1, r3, #22
 801a1f2:	d402      	bmi.n	801a1fa <_fflush_r+0x3a>
 801a1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a1f6:	f000 f915 	bl	801a424 <__retarget_lock_acquire_recursive>
 801a1fa:	4628      	mov	r0, r5
 801a1fc:	4621      	mov	r1, r4
 801a1fe:	f7ff ff59 	bl	801a0b4 <__sflush_r>
 801a202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a204:	07da      	lsls	r2, r3, #31
 801a206:	4605      	mov	r5, r0
 801a208:	d4e0      	bmi.n	801a1cc <_fflush_r+0xc>
 801a20a:	89a3      	ldrh	r3, [r4, #12]
 801a20c:	059b      	lsls	r3, r3, #22
 801a20e:	d4dd      	bmi.n	801a1cc <_fflush_r+0xc>
 801a210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a212:	f000 f908 	bl	801a426 <__retarget_lock_release_recursive>
 801a216:	e7d9      	b.n	801a1cc <_fflush_r+0xc>
 801a218:	4b05      	ldr	r3, [pc, #20]	; (801a230 <_fflush_r+0x70>)
 801a21a:	429c      	cmp	r4, r3
 801a21c:	d101      	bne.n	801a222 <_fflush_r+0x62>
 801a21e:	68ac      	ldr	r4, [r5, #8]
 801a220:	e7df      	b.n	801a1e2 <_fflush_r+0x22>
 801a222:	4b04      	ldr	r3, [pc, #16]	; (801a234 <_fflush_r+0x74>)
 801a224:	429c      	cmp	r4, r3
 801a226:	bf08      	it	eq
 801a228:	68ec      	ldreq	r4, [r5, #12]
 801a22a:	e7da      	b.n	801a1e2 <_fflush_r+0x22>
 801a22c:	0801cd54 	.word	0x0801cd54
 801a230:	0801cd74 	.word	0x0801cd74
 801a234:	0801cd34 	.word	0x0801cd34

0801a238 <std>:
 801a238:	2300      	movs	r3, #0
 801a23a:	b510      	push	{r4, lr}
 801a23c:	4604      	mov	r4, r0
 801a23e:	e9c0 3300 	strd	r3, r3, [r0]
 801a242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a246:	6083      	str	r3, [r0, #8]
 801a248:	8181      	strh	r1, [r0, #12]
 801a24a:	6643      	str	r3, [r0, #100]	; 0x64
 801a24c:	81c2      	strh	r2, [r0, #14]
 801a24e:	6183      	str	r3, [r0, #24]
 801a250:	4619      	mov	r1, r3
 801a252:	2208      	movs	r2, #8
 801a254:	305c      	adds	r0, #92	; 0x5c
 801a256:	f7fb fded 	bl	8015e34 <memset>
 801a25a:	4b05      	ldr	r3, [pc, #20]	; (801a270 <std+0x38>)
 801a25c:	6263      	str	r3, [r4, #36]	; 0x24
 801a25e:	4b05      	ldr	r3, [pc, #20]	; (801a274 <std+0x3c>)
 801a260:	62a3      	str	r3, [r4, #40]	; 0x28
 801a262:	4b05      	ldr	r3, [pc, #20]	; (801a278 <std+0x40>)
 801a264:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a266:	4b05      	ldr	r3, [pc, #20]	; (801a27c <std+0x44>)
 801a268:	6224      	str	r4, [r4, #32]
 801a26a:	6323      	str	r3, [r4, #48]	; 0x30
 801a26c:	bd10      	pop	{r4, pc}
 801a26e:	bf00      	nop
 801a270:	0801a589 	.word	0x0801a589
 801a274:	0801a5ab 	.word	0x0801a5ab
 801a278:	0801a5e3 	.word	0x0801a5e3
 801a27c:	0801a607 	.word	0x0801a607

0801a280 <_cleanup_r>:
 801a280:	4901      	ldr	r1, [pc, #4]	; (801a288 <_cleanup_r+0x8>)
 801a282:	f000 b8af 	b.w	801a3e4 <_fwalk_reent>
 801a286:	bf00      	nop
 801a288:	0801a1c1 	.word	0x0801a1c1

0801a28c <__sfmoreglue>:
 801a28c:	b570      	push	{r4, r5, r6, lr}
 801a28e:	1e4a      	subs	r2, r1, #1
 801a290:	2568      	movs	r5, #104	; 0x68
 801a292:	4355      	muls	r5, r2
 801a294:	460e      	mov	r6, r1
 801a296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a29a:	f7ff fa7d 	bl	8019798 <_malloc_r>
 801a29e:	4604      	mov	r4, r0
 801a2a0:	b140      	cbz	r0, 801a2b4 <__sfmoreglue+0x28>
 801a2a2:	2100      	movs	r1, #0
 801a2a4:	e9c0 1600 	strd	r1, r6, [r0]
 801a2a8:	300c      	adds	r0, #12
 801a2aa:	60a0      	str	r0, [r4, #8]
 801a2ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a2b0:	f7fb fdc0 	bl	8015e34 <memset>
 801a2b4:	4620      	mov	r0, r4
 801a2b6:	bd70      	pop	{r4, r5, r6, pc}

0801a2b8 <__sfp_lock_acquire>:
 801a2b8:	4801      	ldr	r0, [pc, #4]	; (801a2c0 <__sfp_lock_acquire+0x8>)
 801a2ba:	f000 b8b3 	b.w	801a424 <__retarget_lock_acquire_recursive>
 801a2be:	bf00      	nop
 801a2c0:	20002a3c 	.word	0x20002a3c

0801a2c4 <__sfp_lock_release>:
 801a2c4:	4801      	ldr	r0, [pc, #4]	; (801a2cc <__sfp_lock_release+0x8>)
 801a2c6:	f000 b8ae 	b.w	801a426 <__retarget_lock_release_recursive>
 801a2ca:	bf00      	nop
 801a2cc:	20002a3c 	.word	0x20002a3c

0801a2d0 <__sinit_lock_acquire>:
 801a2d0:	4801      	ldr	r0, [pc, #4]	; (801a2d8 <__sinit_lock_acquire+0x8>)
 801a2d2:	f000 b8a7 	b.w	801a424 <__retarget_lock_acquire_recursive>
 801a2d6:	bf00      	nop
 801a2d8:	20002a37 	.word	0x20002a37

0801a2dc <__sinit_lock_release>:
 801a2dc:	4801      	ldr	r0, [pc, #4]	; (801a2e4 <__sinit_lock_release+0x8>)
 801a2de:	f000 b8a2 	b.w	801a426 <__retarget_lock_release_recursive>
 801a2e2:	bf00      	nop
 801a2e4:	20002a37 	.word	0x20002a37

0801a2e8 <__sinit>:
 801a2e8:	b510      	push	{r4, lr}
 801a2ea:	4604      	mov	r4, r0
 801a2ec:	f7ff fff0 	bl	801a2d0 <__sinit_lock_acquire>
 801a2f0:	69a3      	ldr	r3, [r4, #24]
 801a2f2:	b11b      	cbz	r3, 801a2fc <__sinit+0x14>
 801a2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2f8:	f7ff bff0 	b.w	801a2dc <__sinit_lock_release>
 801a2fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a300:	6523      	str	r3, [r4, #80]	; 0x50
 801a302:	4b13      	ldr	r3, [pc, #76]	; (801a350 <__sinit+0x68>)
 801a304:	4a13      	ldr	r2, [pc, #76]	; (801a354 <__sinit+0x6c>)
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	62a2      	str	r2, [r4, #40]	; 0x28
 801a30a:	42a3      	cmp	r3, r4
 801a30c:	bf04      	itt	eq
 801a30e:	2301      	moveq	r3, #1
 801a310:	61a3      	streq	r3, [r4, #24]
 801a312:	4620      	mov	r0, r4
 801a314:	f000 f820 	bl	801a358 <__sfp>
 801a318:	6060      	str	r0, [r4, #4]
 801a31a:	4620      	mov	r0, r4
 801a31c:	f000 f81c 	bl	801a358 <__sfp>
 801a320:	60a0      	str	r0, [r4, #8]
 801a322:	4620      	mov	r0, r4
 801a324:	f000 f818 	bl	801a358 <__sfp>
 801a328:	2200      	movs	r2, #0
 801a32a:	60e0      	str	r0, [r4, #12]
 801a32c:	2104      	movs	r1, #4
 801a32e:	6860      	ldr	r0, [r4, #4]
 801a330:	f7ff ff82 	bl	801a238 <std>
 801a334:	68a0      	ldr	r0, [r4, #8]
 801a336:	2201      	movs	r2, #1
 801a338:	2109      	movs	r1, #9
 801a33a:	f7ff ff7d 	bl	801a238 <std>
 801a33e:	68e0      	ldr	r0, [r4, #12]
 801a340:	2202      	movs	r2, #2
 801a342:	2112      	movs	r1, #18
 801a344:	f7ff ff78 	bl	801a238 <std>
 801a348:	2301      	movs	r3, #1
 801a34a:	61a3      	str	r3, [r4, #24]
 801a34c:	e7d2      	b.n	801a2f4 <__sinit+0xc>
 801a34e:	bf00      	nop
 801a350:	0801c8dc 	.word	0x0801c8dc
 801a354:	0801a281 	.word	0x0801a281

0801a358 <__sfp>:
 801a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a35a:	4607      	mov	r7, r0
 801a35c:	f7ff ffac 	bl	801a2b8 <__sfp_lock_acquire>
 801a360:	4b1e      	ldr	r3, [pc, #120]	; (801a3dc <__sfp+0x84>)
 801a362:	681e      	ldr	r6, [r3, #0]
 801a364:	69b3      	ldr	r3, [r6, #24]
 801a366:	b913      	cbnz	r3, 801a36e <__sfp+0x16>
 801a368:	4630      	mov	r0, r6
 801a36a:	f7ff ffbd 	bl	801a2e8 <__sinit>
 801a36e:	3648      	adds	r6, #72	; 0x48
 801a370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a374:	3b01      	subs	r3, #1
 801a376:	d503      	bpl.n	801a380 <__sfp+0x28>
 801a378:	6833      	ldr	r3, [r6, #0]
 801a37a:	b30b      	cbz	r3, 801a3c0 <__sfp+0x68>
 801a37c:	6836      	ldr	r6, [r6, #0]
 801a37e:	e7f7      	b.n	801a370 <__sfp+0x18>
 801a380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a384:	b9d5      	cbnz	r5, 801a3bc <__sfp+0x64>
 801a386:	4b16      	ldr	r3, [pc, #88]	; (801a3e0 <__sfp+0x88>)
 801a388:	60e3      	str	r3, [r4, #12]
 801a38a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a38e:	6665      	str	r5, [r4, #100]	; 0x64
 801a390:	f000 f847 	bl	801a422 <__retarget_lock_init_recursive>
 801a394:	f7ff ff96 	bl	801a2c4 <__sfp_lock_release>
 801a398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a39c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a3a0:	6025      	str	r5, [r4, #0]
 801a3a2:	61a5      	str	r5, [r4, #24]
 801a3a4:	2208      	movs	r2, #8
 801a3a6:	4629      	mov	r1, r5
 801a3a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a3ac:	f7fb fd42 	bl	8015e34 <memset>
 801a3b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a3b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3bc:	3468      	adds	r4, #104	; 0x68
 801a3be:	e7d9      	b.n	801a374 <__sfp+0x1c>
 801a3c0:	2104      	movs	r1, #4
 801a3c2:	4638      	mov	r0, r7
 801a3c4:	f7ff ff62 	bl	801a28c <__sfmoreglue>
 801a3c8:	4604      	mov	r4, r0
 801a3ca:	6030      	str	r0, [r6, #0]
 801a3cc:	2800      	cmp	r0, #0
 801a3ce:	d1d5      	bne.n	801a37c <__sfp+0x24>
 801a3d0:	f7ff ff78 	bl	801a2c4 <__sfp_lock_release>
 801a3d4:	230c      	movs	r3, #12
 801a3d6:	603b      	str	r3, [r7, #0]
 801a3d8:	e7ee      	b.n	801a3b8 <__sfp+0x60>
 801a3da:	bf00      	nop
 801a3dc:	0801c8dc 	.word	0x0801c8dc
 801a3e0:	ffff0001 	.word	0xffff0001

0801a3e4 <_fwalk_reent>:
 801a3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3e8:	4606      	mov	r6, r0
 801a3ea:	4688      	mov	r8, r1
 801a3ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a3f0:	2700      	movs	r7, #0
 801a3f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a3f6:	f1b9 0901 	subs.w	r9, r9, #1
 801a3fa:	d505      	bpl.n	801a408 <_fwalk_reent+0x24>
 801a3fc:	6824      	ldr	r4, [r4, #0]
 801a3fe:	2c00      	cmp	r4, #0
 801a400:	d1f7      	bne.n	801a3f2 <_fwalk_reent+0xe>
 801a402:	4638      	mov	r0, r7
 801a404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a408:	89ab      	ldrh	r3, [r5, #12]
 801a40a:	2b01      	cmp	r3, #1
 801a40c:	d907      	bls.n	801a41e <_fwalk_reent+0x3a>
 801a40e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a412:	3301      	adds	r3, #1
 801a414:	d003      	beq.n	801a41e <_fwalk_reent+0x3a>
 801a416:	4629      	mov	r1, r5
 801a418:	4630      	mov	r0, r6
 801a41a:	47c0      	blx	r8
 801a41c:	4307      	orrs	r7, r0
 801a41e:	3568      	adds	r5, #104	; 0x68
 801a420:	e7e9      	b.n	801a3f6 <_fwalk_reent+0x12>

0801a422 <__retarget_lock_init_recursive>:
 801a422:	4770      	bx	lr

0801a424 <__retarget_lock_acquire_recursive>:
 801a424:	4770      	bx	lr

0801a426 <__retarget_lock_release_recursive>:
 801a426:	4770      	bx	lr

0801a428 <__swhatbuf_r>:
 801a428:	b570      	push	{r4, r5, r6, lr}
 801a42a:	460e      	mov	r6, r1
 801a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a430:	2900      	cmp	r1, #0
 801a432:	b096      	sub	sp, #88	; 0x58
 801a434:	4614      	mov	r4, r2
 801a436:	461d      	mov	r5, r3
 801a438:	da07      	bge.n	801a44a <__swhatbuf_r+0x22>
 801a43a:	2300      	movs	r3, #0
 801a43c:	602b      	str	r3, [r5, #0]
 801a43e:	89b3      	ldrh	r3, [r6, #12]
 801a440:	061a      	lsls	r2, r3, #24
 801a442:	d410      	bmi.n	801a466 <__swhatbuf_r+0x3e>
 801a444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a448:	e00e      	b.n	801a468 <__swhatbuf_r+0x40>
 801a44a:	466a      	mov	r2, sp
 801a44c:	f000 f902 	bl	801a654 <_fstat_r>
 801a450:	2800      	cmp	r0, #0
 801a452:	dbf2      	blt.n	801a43a <__swhatbuf_r+0x12>
 801a454:	9a01      	ldr	r2, [sp, #4]
 801a456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a45a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a45e:	425a      	negs	r2, r3
 801a460:	415a      	adcs	r2, r3
 801a462:	602a      	str	r2, [r5, #0]
 801a464:	e7ee      	b.n	801a444 <__swhatbuf_r+0x1c>
 801a466:	2340      	movs	r3, #64	; 0x40
 801a468:	2000      	movs	r0, #0
 801a46a:	6023      	str	r3, [r4, #0]
 801a46c:	b016      	add	sp, #88	; 0x58
 801a46e:	bd70      	pop	{r4, r5, r6, pc}

0801a470 <__smakebuf_r>:
 801a470:	898b      	ldrh	r3, [r1, #12]
 801a472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a474:	079d      	lsls	r5, r3, #30
 801a476:	4606      	mov	r6, r0
 801a478:	460c      	mov	r4, r1
 801a47a:	d507      	bpl.n	801a48c <__smakebuf_r+0x1c>
 801a47c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a480:	6023      	str	r3, [r4, #0]
 801a482:	6123      	str	r3, [r4, #16]
 801a484:	2301      	movs	r3, #1
 801a486:	6163      	str	r3, [r4, #20]
 801a488:	b002      	add	sp, #8
 801a48a:	bd70      	pop	{r4, r5, r6, pc}
 801a48c:	ab01      	add	r3, sp, #4
 801a48e:	466a      	mov	r2, sp
 801a490:	f7ff ffca 	bl	801a428 <__swhatbuf_r>
 801a494:	9900      	ldr	r1, [sp, #0]
 801a496:	4605      	mov	r5, r0
 801a498:	4630      	mov	r0, r6
 801a49a:	f7ff f97d 	bl	8019798 <_malloc_r>
 801a49e:	b948      	cbnz	r0, 801a4b4 <__smakebuf_r+0x44>
 801a4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4a4:	059a      	lsls	r2, r3, #22
 801a4a6:	d4ef      	bmi.n	801a488 <__smakebuf_r+0x18>
 801a4a8:	f023 0303 	bic.w	r3, r3, #3
 801a4ac:	f043 0302 	orr.w	r3, r3, #2
 801a4b0:	81a3      	strh	r3, [r4, #12]
 801a4b2:	e7e3      	b.n	801a47c <__smakebuf_r+0xc>
 801a4b4:	4b0d      	ldr	r3, [pc, #52]	; (801a4ec <__smakebuf_r+0x7c>)
 801a4b6:	62b3      	str	r3, [r6, #40]	; 0x28
 801a4b8:	89a3      	ldrh	r3, [r4, #12]
 801a4ba:	6020      	str	r0, [r4, #0]
 801a4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a4c0:	81a3      	strh	r3, [r4, #12]
 801a4c2:	9b00      	ldr	r3, [sp, #0]
 801a4c4:	6163      	str	r3, [r4, #20]
 801a4c6:	9b01      	ldr	r3, [sp, #4]
 801a4c8:	6120      	str	r0, [r4, #16]
 801a4ca:	b15b      	cbz	r3, 801a4e4 <__smakebuf_r+0x74>
 801a4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4d0:	4630      	mov	r0, r6
 801a4d2:	f000 f8d1 	bl	801a678 <_isatty_r>
 801a4d6:	b128      	cbz	r0, 801a4e4 <__smakebuf_r+0x74>
 801a4d8:	89a3      	ldrh	r3, [r4, #12]
 801a4da:	f023 0303 	bic.w	r3, r3, #3
 801a4de:	f043 0301 	orr.w	r3, r3, #1
 801a4e2:	81a3      	strh	r3, [r4, #12]
 801a4e4:	89a0      	ldrh	r0, [r4, #12]
 801a4e6:	4305      	orrs	r5, r0
 801a4e8:	81a5      	strh	r5, [r4, #12]
 801a4ea:	e7cd      	b.n	801a488 <__smakebuf_r+0x18>
 801a4ec:	0801a281 	.word	0x0801a281

0801a4f0 <_malloc_usable_size_r>:
 801a4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4f4:	1f18      	subs	r0, r3, #4
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	bfbc      	itt	lt
 801a4fa:	580b      	ldrlt	r3, [r1, r0]
 801a4fc:	18c0      	addlt	r0, r0, r3
 801a4fe:	4770      	bx	lr

0801a500 <_raise_r>:
 801a500:	291f      	cmp	r1, #31
 801a502:	b538      	push	{r3, r4, r5, lr}
 801a504:	4604      	mov	r4, r0
 801a506:	460d      	mov	r5, r1
 801a508:	d904      	bls.n	801a514 <_raise_r+0x14>
 801a50a:	2316      	movs	r3, #22
 801a50c:	6003      	str	r3, [r0, #0]
 801a50e:	f04f 30ff 	mov.w	r0, #4294967295
 801a512:	bd38      	pop	{r3, r4, r5, pc}
 801a514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a516:	b112      	cbz	r2, 801a51e <_raise_r+0x1e>
 801a518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a51c:	b94b      	cbnz	r3, 801a532 <_raise_r+0x32>
 801a51e:	4620      	mov	r0, r4
 801a520:	f000 f830 	bl	801a584 <_getpid_r>
 801a524:	462a      	mov	r2, r5
 801a526:	4601      	mov	r1, r0
 801a528:	4620      	mov	r0, r4
 801a52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a52e:	f000 b817 	b.w	801a560 <_kill_r>
 801a532:	2b01      	cmp	r3, #1
 801a534:	d00a      	beq.n	801a54c <_raise_r+0x4c>
 801a536:	1c59      	adds	r1, r3, #1
 801a538:	d103      	bne.n	801a542 <_raise_r+0x42>
 801a53a:	2316      	movs	r3, #22
 801a53c:	6003      	str	r3, [r0, #0]
 801a53e:	2001      	movs	r0, #1
 801a540:	e7e7      	b.n	801a512 <_raise_r+0x12>
 801a542:	2400      	movs	r4, #0
 801a544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a548:	4628      	mov	r0, r5
 801a54a:	4798      	blx	r3
 801a54c:	2000      	movs	r0, #0
 801a54e:	e7e0      	b.n	801a512 <_raise_r+0x12>

0801a550 <raise>:
 801a550:	4b02      	ldr	r3, [pc, #8]	; (801a55c <raise+0xc>)
 801a552:	4601      	mov	r1, r0
 801a554:	6818      	ldr	r0, [r3, #0]
 801a556:	f7ff bfd3 	b.w	801a500 <_raise_r>
 801a55a:	bf00      	nop
 801a55c:	20001250 	.word	0x20001250

0801a560 <_kill_r>:
 801a560:	b538      	push	{r3, r4, r5, lr}
 801a562:	4d07      	ldr	r5, [pc, #28]	; (801a580 <_kill_r+0x20>)
 801a564:	2300      	movs	r3, #0
 801a566:	4604      	mov	r4, r0
 801a568:	4608      	mov	r0, r1
 801a56a:	4611      	mov	r1, r2
 801a56c:	602b      	str	r3, [r5, #0]
 801a56e:	f7e7 fb0b 	bl	8001b88 <_kill>
 801a572:	1c43      	adds	r3, r0, #1
 801a574:	d102      	bne.n	801a57c <_kill_r+0x1c>
 801a576:	682b      	ldr	r3, [r5, #0]
 801a578:	b103      	cbz	r3, 801a57c <_kill_r+0x1c>
 801a57a:	6023      	str	r3, [r4, #0]
 801a57c:	bd38      	pop	{r3, r4, r5, pc}
 801a57e:	bf00      	nop
 801a580:	20002a30 	.word	0x20002a30

0801a584 <_getpid_r>:
 801a584:	f7e7 baf8 	b.w	8001b78 <_getpid>

0801a588 <__sread>:
 801a588:	b510      	push	{r4, lr}
 801a58a:	460c      	mov	r4, r1
 801a58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a590:	f000 f894 	bl	801a6bc <_read_r>
 801a594:	2800      	cmp	r0, #0
 801a596:	bfab      	itete	ge
 801a598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a59a:	89a3      	ldrhlt	r3, [r4, #12]
 801a59c:	181b      	addge	r3, r3, r0
 801a59e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a5a2:	bfac      	ite	ge
 801a5a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a5a6:	81a3      	strhlt	r3, [r4, #12]
 801a5a8:	bd10      	pop	{r4, pc}

0801a5aa <__swrite>:
 801a5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ae:	461f      	mov	r7, r3
 801a5b0:	898b      	ldrh	r3, [r1, #12]
 801a5b2:	05db      	lsls	r3, r3, #23
 801a5b4:	4605      	mov	r5, r0
 801a5b6:	460c      	mov	r4, r1
 801a5b8:	4616      	mov	r6, r2
 801a5ba:	d505      	bpl.n	801a5c8 <__swrite+0x1e>
 801a5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5c0:	2302      	movs	r3, #2
 801a5c2:	2200      	movs	r2, #0
 801a5c4:	f000 f868 	bl	801a698 <_lseek_r>
 801a5c8:	89a3      	ldrh	r3, [r4, #12]
 801a5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a5d2:	81a3      	strh	r3, [r4, #12]
 801a5d4:	4632      	mov	r2, r6
 801a5d6:	463b      	mov	r3, r7
 801a5d8:	4628      	mov	r0, r5
 801a5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5de:	f000 b817 	b.w	801a610 <_write_r>

0801a5e2 <__sseek>:
 801a5e2:	b510      	push	{r4, lr}
 801a5e4:	460c      	mov	r4, r1
 801a5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5ea:	f000 f855 	bl	801a698 <_lseek_r>
 801a5ee:	1c43      	adds	r3, r0, #1
 801a5f0:	89a3      	ldrh	r3, [r4, #12]
 801a5f2:	bf15      	itete	ne
 801a5f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a5f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a5fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a5fe:	81a3      	strheq	r3, [r4, #12]
 801a600:	bf18      	it	ne
 801a602:	81a3      	strhne	r3, [r4, #12]
 801a604:	bd10      	pop	{r4, pc}

0801a606 <__sclose>:
 801a606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a60a:	f000 b813 	b.w	801a634 <_close_r>
	...

0801a610 <_write_r>:
 801a610:	b538      	push	{r3, r4, r5, lr}
 801a612:	4d07      	ldr	r5, [pc, #28]	; (801a630 <_write_r+0x20>)
 801a614:	4604      	mov	r4, r0
 801a616:	4608      	mov	r0, r1
 801a618:	4611      	mov	r1, r2
 801a61a:	2200      	movs	r2, #0
 801a61c:	602a      	str	r2, [r5, #0]
 801a61e:	461a      	mov	r2, r3
 801a620:	f7e7 fae9 	bl	8001bf6 <_write>
 801a624:	1c43      	adds	r3, r0, #1
 801a626:	d102      	bne.n	801a62e <_write_r+0x1e>
 801a628:	682b      	ldr	r3, [r5, #0]
 801a62a:	b103      	cbz	r3, 801a62e <_write_r+0x1e>
 801a62c:	6023      	str	r3, [r4, #0]
 801a62e:	bd38      	pop	{r3, r4, r5, pc}
 801a630:	20002a30 	.word	0x20002a30

0801a634 <_close_r>:
 801a634:	b538      	push	{r3, r4, r5, lr}
 801a636:	4d06      	ldr	r5, [pc, #24]	; (801a650 <_close_r+0x1c>)
 801a638:	2300      	movs	r3, #0
 801a63a:	4604      	mov	r4, r0
 801a63c:	4608      	mov	r0, r1
 801a63e:	602b      	str	r3, [r5, #0]
 801a640:	f7e7 faf5 	bl	8001c2e <_close>
 801a644:	1c43      	adds	r3, r0, #1
 801a646:	d102      	bne.n	801a64e <_close_r+0x1a>
 801a648:	682b      	ldr	r3, [r5, #0]
 801a64a:	b103      	cbz	r3, 801a64e <_close_r+0x1a>
 801a64c:	6023      	str	r3, [r4, #0]
 801a64e:	bd38      	pop	{r3, r4, r5, pc}
 801a650:	20002a30 	.word	0x20002a30

0801a654 <_fstat_r>:
 801a654:	b538      	push	{r3, r4, r5, lr}
 801a656:	4d07      	ldr	r5, [pc, #28]	; (801a674 <_fstat_r+0x20>)
 801a658:	2300      	movs	r3, #0
 801a65a:	4604      	mov	r4, r0
 801a65c:	4608      	mov	r0, r1
 801a65e:	4611      	mov	r1, r2
 801a660:	602b      	str	r3, [r5, #0]
 801a662:	f7e7 faf0 	bl	8001c46 <_fstat>
 801a666:	1c43      	adds	r3, r0, #1
 801a668:	d102      	bne.n	801a670 <_fstat_r+0x1c>
 801a66a:	682b      	ldr	r3, [r5, #0]
 801a66c:	b103      	cbz	r3, 801a670 <_fstat_r+0x1c>
 801a66e:	6023      	str	r3, [r4, #0]
 801a670:	bd38      	pop	{r3, r4, r5, pc}
 801a672:	bf00      	nop
 801a674:	20002a30 	.word	0x20002a30

0801a678 <_isatty_r>:
 801a678:	b538      	push	{r3, r4, r5, lr}
 801a67a:	4d06      	ldr	r5, [pc, #24]	; (801a694 <_isatty_r+0x1c>)
 801a67c:	2300      	movs	r3, #0
 801a67e:	4604      	mov	r4, r0
 801a680:	4608      	mov	r0, r1
 801a682:	602b      	str	r3, [r5, #0]
 801a684:	f7e7 faef 	bl	8001c66 <_isatty>
 801a688:	1c43      	adds	r3, r0, #1
 801a68a:	d102      	bne.n	801a692 <_isatty_r+0x1a>
 801a68c:	682b      	ldr	r3, [r5, #0]
 801a68e:	b103      	cbz	r3, 801a692 <_isatty_r+0x1a>
 801a690:	6023      	str	r3, [r4, #0]
 801a692:	bd38      	pop	{r3, r4, r5, pc}
 801a694:	20002a30 	.word	0x20002a30

0801a698 <_lseek_r>:
 801a698:	b538      	push	{r3, r4, r5, lr}
 801a69a:	4d07      	ldr	r5, [pc, #28]	; (801a6b8 <_lseek_r+0x20>)
 801a69c:	4604      	mov	r4, r0
 801a69e:	4608      	mov	r0, r1
 801a6a0:	4611      	mov	r1, r2
 801a6a2:	2200      	movs	r2, #0
 801a6a4:	602a      	str	r2, [r5, #0]
 801a6a6:	461a      	mov	r2, r3
 801a6a8:	f7e7 fae8 	bl	8001c7c <_lseek>
 801a6ac:	1c43      	adds	r3, r0, #1
 801a6ae:	d102      	bne.n	801a6b6 <_lseek_r+0x1e>
 801a6b0:	682b      	ldr	r3, [r5, #0]
 801a6b2:	b103      	cbz	r3, 801a6b6 <_lseek_r+0x1e>
 801a6b4:	6023      	str	r3, [r4, #0]
 801a6b6:	bd38      	pop	{r3, r4, r5, pc}
 801a6b8:	20002a30 	.word	0x20002a30

0801a6bc <_read_r>:
 801a6bc:	b538      	push	{r3, r4, r5, lr}
 801a6be:	4d07      	ldr	r5, [pc, #28]	; (801a6dc <_read_r+0x20>)
 801a6c0:	4604      	mov	r4, r0
 801a6c2:	4608      	mov	r0, r1
 801a6c4:	4611      	mov	r1, r2
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	602a      	str	r2, [r5, #0]
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	f7e7 fa76 	bl	8001bbc <_read>
 801a6d0:	1c43      	adds	r3, r0, #1
 801a6d2:	d102      	bne.n	801a6da <_read_r+0x1e>
 801a6d4:	682b      	ldr	r3, [r5, #0]
 801a6d6:	b103      	cbz	r3, 801a6da <_read_r+0x1e>
 801a6d8:	6023      	str	r3, [r4, #0]
 801a6da:	bd38      	pop	{r3, r4, r5, pc}
 801a6dc:	20002a30 	.word	0x20002a30

0801a6e0 <floor>:
 801a6e0:	ec51 0b10 	vmov	r0, r1, d0
 801a6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a6ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a6f0:	2e13      	cmp	r6, #19
 801a6f2:	ee10 5a10 	vmov	r5, s0
 801a6f6:	ee10 8a10 	vmov	r8, s0
 801a6fa:	460c      	mov	r4, r1
 801a6fc:	dc32      	bgt.n	801a764 <floor+0x84>
 801a6fe:	2e00      	cmp	r6, #0
 801a700:	da14      	bge.n	801a72c <floor+0x4c>
 801a702:	a333      	add	r3, pc, #204	; (adr r3, 801a7d0 <floor+0xf0>)
 801a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a708:	f7e5 fde0 	bl	80002cc <__adddf3>
 801a70c:	2200      	movs	r2, #0
 801a70e:	2300      	movs	r3, #0
 801a710:	f7e6 fa22 	bl	8000b58 <__aeabi_dcmpgt>
 801a714:	b138      	cbz	r0, 801a726 <floor+0x46>
 801a716:	2c00      	cmp	r4, #0
 801a718:	da57      	bge.n	801a7ca <floor+0xea>
 801a71a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801a71e:	431d      	orrs	r5, r3
 801a720:	d001      	beq.n	801a726 <floor+0x46>
 801a722:	4c2d      	ldr	r4, [pc, #180]	; (801a7d8 <floor+0xf8>)
 801a724:	2500      	movs	r5, #0
 801a726:	4621      	mov	r1, r4
 801a728:	4628      	mov	r0, r5
 801a72a:	e025      	b.n	801a778 <floor+0x98>
 801a72c:	4f2b      	ldr	r7, [pc, #172]	; (801a7dc <floor+0xfc>)
 801a72e:	4137      	asrs	r7, r6
 801a730:	ea01 0307 	and.w	r3, r1, r7
 801a734:	4303      	orrs	r3, r0
 801a736:	d01f      	beq.n	801a778 <floor+0x98>
 801a738:	a325      	add	r3, pc, #148	; (adr r3, 801a7d0 <floor+0xf0>)
 801a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a73e:	f7e5 fdc5 	bl	80002cc <__adddf3>
 801a742:	2200      	movs	r2, #0
 801a744:	2300      	movs	r3, #0
 801a746:	f7e6 fa07 	bl	8000b58 <__aeabi_dcmpgt>
 801a74a:	2800      	cmp	r0, #0
 801a74c:	d0eb      	beq.n	801a726 <floor+0x46>
 801a74e:	2c00      	cmp	r4, #0
 801a750:	bfbe      	ittt	lt
 801a752:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a756:	fa43 f606 	asrlt.w	r6, r3, r6
 801a75a:	19a4      	addlt	r4, r4, r6
 801a75c:	ea24 0407 	bic.w	r4, r4, r7
 801a760:	2500      	movs	r5, #0
 801a762:	e7e0      	b.n	801a726 <floor+0x46>
 801a764:	2e33      	cmp	r6, #51	; 0x33
 801a766:	dd0b      	ble.n	801a780 <floor+0xa0>
 801a768:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a76c:	d104      	bne.n	801a778 <floor+0x98>
 801a76e:	ee10 2a10 	vmov	r2, s0
 801a772:	460b      	mov	r3, r1
 801a774:	f7e5 fdaa 	bl	80002cc <__adddf3>
 801a778:	ec41 0b10 	vmov	d0, r0, r1
 801a77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a780:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801a784:	f04f 33ff 	mov.w	r3, #4294967295
 801a788:	fa23 f707 	lsr.w	r7, r3, r7
 801a78c:	4207      	tst	r7, r0
 801a78e:	d0f3      	beq.n	801a778 <floor+0x98>
 801a790:	a30f      	add	r3, pc, #60	; (adr r3, 801a7d0 <floor+0xf0>)
 801a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a796:	f7e5 fd99 	bl	80002cc <__adddf3>
 801a79a:	2200      	movs	r2, #0
 801a79c:	2300      	movs	r3, #0
 801a79e:	f7e6 f9db 	bl	8000b58 <__aeabi_dcmpgt>
 801a7a2:	2800      	cmp	r0, #0
 801a7a4:	d0bf      	beq.n	801a726 <floor+0x46>
 801a7a6:	2c00      	cmp	r4, #0
 801a7a8:	da02      	bge.n	801a7b0 <floor+0xd0>
 801a7aa:	2e14      	cmp	r6, #20
 801a7ac:	d103      	bne.n	801a7b6 <floor+0xd6>
 801a7ae:	3401      	adds	r4, #1
 801a7b0:	ea25 0507 	bic.w	r5, r5, r7
 801a7b4:	e7b7      	b.n	801a726 <floor+0x46>
 801a7b6:	2301      	movs	r3, #1
 801a7b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801a7bc:	fa03 f606 	lsl.w	r6, r3, r6
 801a7c0:	4435      	add	r5, r6
 801a7c2:	4545      	cmp	r5, r8
 801a7c4:	bf38      	it	cc
 801a7c6:	18e4      	addcc	r4, r4, r3
 801a7c8:	e7f2      	b.n	801a7b0 <floor+0xd0>
 801a7ca:	2500      	movs	r5, #0
 801a7cc:	462c      	mov	r4, r5
 801a7ce:	e7aa      	b.n	801a726 <floor+0x46>
 801a7d0:	8800759c 	.word	0x8800759c
 801a7d4:	7e37e43c 	.word	0x7e37e43c
 801a7d8:	bff00000 	.word	0xbff00000
 801a7dc:	000fffff 	.word	0x000fffff

0801a7e0 <cosf>:
 801a7e0:	ee10 3a10 	vmov	r3, s0
 801a7e4:	b507      	push	{r0, r1, r2, lr}
 801a7e6:	4a1c      	ldr	r2, [pc, #112]	; (801a858 <cosf+0x78>)
 801a7e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a7ec:	4293      	cmp	r3, r2
 801a7ee:	dc04      	bgt.n	801a7fa <cosf+0x1a>
 801a7f0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801a85c <cosf+0x7c>
 801a7f4:	f001 f8d8 	bl	801b9a8 <__kernel_cosf>
 801a7f8:	e004      	b.n	801a804 <cosf+0x24>
 801a7fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a7fe:	db04      	blt.n	801a80a <cosf+0x2a>
 801a800:	ee30 0a40 	vsub.f32	s0, s0, s0
 801a804:	b003      	add	sp, #12
 801a806:	f85d fb04 	ldr.w	pc, [sp], #4
 801a80a:	4668      	mov	r0, sp
 801a80c:	f000 ff8c 	bl	801b728 <__ieee754_rem_pio2f>
 801a810:	f000 0003 	and.w	r0, r0, #3
 801a814:	2801      	cmp	r0, #1
 801a816:	d007      	beq.n	801a828 <cosf+0x48>
 801a818:	2802      	cmp	r0, #2
 801a81a:	d00e      	beq.n	801a83a <cosf+0x5a>
 801a81c:	b9a0      	cbnz	r0, 801a848 <cosf+0x68>
 801a81e:	eddd 0a01 	vldr	s1, [sp, #4]
 801a822:	ed9d 0a00 	vldr	s0, [sp]
 801a826:	e7e5      	b.n	801a7f4 <cosf+0x14>
 801a828:	eddd 0a01 	vldr	s1, [sp, #4]
 801a82c:	ed9d 0a00 	vldr	s0, [sp]
 801a830:	f001 fba4 	bl	801bf7c <__kernel_sinf>
 801a834:	eeb1 0a40 	vneg.f32	s0, s0
 801a838:	e7e4      	b.n	801a804 <cosf+0x24>
 801a83a:	eddd 0a01 	vldr	s1, [sp, #4]
 801a83e:	ed9d 0a00 	vldr	s0, [sp]
 801a842:	f001 f8b1 	bl	801b9a8 <__kernel_cosf>
 801a846:	e7f5      	b.n	801a834 <cosf+0x54>
 801a848:	eddd 0a01 	vldr	s1, [sp, #4]
 801a84c:	ed9d 0a00 	vldr	s0, [sp]
 801a850:	2001      	movs	r0, #1
 801a852:	f001 fb93 	bl	801bf7c <__kernel_sinf>
 801a856:	e7d5      	b.n	801a804 <cosf+0x24>
 801a858:	3f490fd8 	.word	0x3f490fd8
 801a85c:	00000000 	.word	0x00000000

0801a860 <sinf>:
 801a860:	ee10 3a10 	vmov	r3, s0
 801a864:	b507      	push	{r0, r1, r2, lr}
 801a866:	4a1d      	ldr	r2, [pc, #116]	; (801a8dc <sinf+0x7c>)
 801a868:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a86c:	4293      	cmp	r3, r2
 801a86e:	dc05      	bgt.n	801a87c <sinf+0x1c>
 801a870:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801a8e0 <sinf+0x80>
 801a874:	2000      	movs	r0, #0
 801a876:	f001 fb81 	bl	801bf7c <__kernel_sinf>
 801a87a:	e004      	b.n	801a886 <sinf+0x26>
 801a87c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a880:	db04      	blt.n	801a88c <sinf+0x2c>
 801a882:	ee30 0a40 	vsub.f32	s0, s0, s0
 801a886:	b003      	add	sp, #12
 801a888:	f85d fb04 	ldr.w	pc, [sp], #4
 801a88c:	4668      	mov	r0, sp
 801a88e:	f000 ff4b 	bl	801b728 <__ieee754_rem_pio2f>
 801a892:	f000 0003 	and.w	r0, r0, #3
 801a896:	2801      	cmp	r0, #1
 801a898:	d008      	beq.n	801a8ac <sinf+0x4c>
 801a89a:	2802      	cmp	r0, #2
 801a89c:	d00d      	beq.n	801a8ba <sinf+0x5a>
 801a89e:	b9b0      	cbnz	r0, 801a8ce <sinf+0x6e>
 801a8a0:	eddd 0a01 	vldr	s1, [sp, #4]
 801a8a4:	ed9d 0a00 	vldr	s0, [sp]
 801a8a8:	2001      	movs	r0, #1
 801a8aa:	e7e4      	b.n	801a876 <sinf+0x16>
 801a8ac:	eddd 0a01 	vldr	s1, [sp, #4]
 801a8b0:	ed9d 0a00 	vldr	s0, [sp]
 801a8b4:	f001 f878 	bl	801b9a8 <__kernel_cosf>
 801a8b8:	e7e5      	b.n	801a886 <sinf+0x26>
 801a8ba:	eddd 0a01 	vldr	s1, [sp, #4]
 801a8be:	ed9d 0a00 	vldr	s0, [sp]
 801a8c2:	2001      	movs	r0, #1
 801a8c4:	f001 fb5a 	bl	801bf7c <__kernel_sinf>
 801a8c8:	eeb1 0a40 	vneg.f32	s0, s0
 801a8cc:	e7db      	b.n	801a886 <sinf+0x26>
 801a8ce:	eddd 0a01 	vldr	s1, [sp, #4]
 801a8d2:	ed9d 0a00 	vldr	s0, [sp]
 801a8d6:	f001 f867 	bl	801b9a8 <__kernel_cosf>
 801a8da:	e7f5      	b.n	801a8c8 <sinf+0x68>
 801a8dc:	3f490fd8 	.word	0x3f490fd8
 801a8e0:	00000000 	.word	0x00000000

0801a8e4 <tanf>:
 801a8e4:	ee10 3a10 	vmov	r3, s0
 801a8e8:	b507      	push	{r0, r1, r2, lr}
 801a8ea:	4a10      	ldr	r2, [pc, #64]	; (801a92c <tanf+0x48>)
 801a8ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a8f0:	4293      	cmp	r3, r2
 801a8f2:	dc05      	bgt.n	801a900 <tanf+0x1c>
 801a8f4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 801a930 <tanf+0x4c>
 801a8f8:	2001      	movs	r0, #1
 801a8fa:	f001 fb87 	bl	801c00c <__kernel_tanf>
 801a8fe:	e004      	b.n	801a90a <tanf+0x26>
 801a900:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a904:	db04      	blt.n	801a910 <tanf+0x2c>
 801a906:	ee30 0a40 	vsub.f32	s0, s0, s0
 801a90a:	b003      	add	sp, #12
 801a90c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a910:	4668      	mov	r0, sp
 801a912:	f000 ff09 	bl	801b728 <__ieee754_rem_pio2f>
 801a916:	0040      	lsls	r0, r0, #1
 801a918:	f000 0002 	and.w	r0, r0, #2
 801a91c:	eddd 0a01 	vldr	s1, [sp, #4]
 801a920:	ed9d 0a00 	vldr	s0, [sp]
 801a924:	f1c0 0001 	rsb	r0, r0, #1
 801a928:	e7e7      	b.n	801a8fa <tanf+0x16>
 801a92a:	bf00      	nop
 801a92c:	3f490fda 	.word	0x3f490fda
 801a930:	00000000 	.word	0x00000000

0801a934 <asin>:
 801a934:	b538      	push	{r3, r4, r5, lr}
 801a936:	ed2d 8b02 	vpush	{d8}
 801a93a:	ec55 4b10 	vmov	r4, r5, d0
 801a93e:	f000 f8eb 	bl	801ab18 <__ieee754_asin>
 801a942:	4b16      	ldr	r3, [pc, #88]	; (801a99c <asin+0x68>)
 801a944:	eeb0 8a40 	vmov.f32	s16, s0
 801a948:	eef0 8a60 	vmov.f32	s17, s1
 801a94c:	f993 3000 	ldrsb.w	r3, [r3]
 801a950:	3301      	adds	r3, #1
 801a952:	d01c      	beq.n	801a98e <asin+0x5a>
 801a954:	4622      	mov	r2, r4
 801a956:	462b      	mov	r3, r5
 801a958:	4620      	mov	r0, r4
 801a95a:	4629      	mov	r1, r5
 801a95c:	f7e6 f906 	bl	8000b6c <__aeabi_dcmpun>
 801a960:	b9a8      	cbnz	r0, 801a98e <asin+0x5a>
 801a962:	ec45 4b10 	vmov	d0, r4, r5
 801a966:	f001 fdd3 	bl	801c510 <fabs>
 801a96a:	4b0d      	ldr	r3, [pc, #52]	; (801a9a0 <asin+0x6c>)
 801a96c:	ec51 0b10 	vmov	r0, r1, d0
 801a970:	2200      	movs	r2, #0
 801a972:	f7e6 f8f1 	bl	8000b58 <__aeabi_dcmpgt>
 801a976:	b150      	cbz	r0, 801a98e <asin+0x5a>
 801a978:	f7fb fa24 	bl	8015dc4 <__errno>
 801a97c:	ecbd 8b02 	vpop	{d8}
 801a980:	2321      	movs	r3, #33	; 0x21
 801a982:	6003      	str	r3, [r0, #0]
 801a984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a988:	4806      	ldr	r0, [pc, #24]	; (801a9a4 <asin+0x70>)
 801a98a:	f7ff b8bd 	b.w	8019b08 <nan>
 801a98e:	eeb0 0a48 	vmov.f32	s0, s16
 801a992:	eef0 0a68 	vmov.f32	s1, s17
 801a996:	ecbd 8b02 	vpop	{d8}
 801a99a:	bd38      	pop	{r3, r4, r5, pc}
 801a99c:	20001424 	.word	0x20001424
 801a9a0:	3ff00000 	.word	0x3ff00000
 801a9a4:	0801cd30 	.word	0x0801cd30

0801a9a8 <atan2>:
 801a9a8:	f000 baca 	b.w	801af40 <__ieee754_atan2>
 801a9ac:	0000      	movs	r0, r0
	...

0801a9b0 <exp>:
 801a9b0:	b538      	push	{r3, r4, r5, lr}
 801a9b2:	ed2d 8b02 	vpush	{d8}
 801a9b6:	ec55 4b10 	vmov	r4, r5, d0
 801a9ba:	f000 fb8d 	bl	801b0d8 <__ieee754_exp>
 801a9be:	4b22      	ldr	r3, [pc, #136]	; (801aa48 <exp+0x98>)
 801a9c0:	eeb0 8a40 	vmov.f32	s16, s0
 801a9c4:	eef0 8a60 	vmov.f32	s17, s1
 801a9c8:	f993 3000 	ldrsb.w	r3, [r3]
 801a9cc:	3301      	adds	r3, #1
 801a9ce:	d012      	beq.n	801a9f6 <exp+0x46>
 801a9d0:	ec45 4b10 	vmov	d0, r4, r5
 801a9d4:	f001 fda5 	bl	801c522 <finite>
 801a9d8:	b168      	cbz	r0, 801a9f6 <exp+0x46>
 801a9da:	a313      	add	r3, pc, #76	; (adr r3, 801aa28 <exp+0x78>)
 801a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e0:	4620      	mov	r0, r4
 801a9e2:	4629      	mov	r1, r5
 801a9e4:	f7e6 f8b8 	bl	8000b58 <__aeabi_dcmpgt>
 801a9e8:	b160      	cbz	r0, 801aa04 <exp+0x54>
 801a9ea:	f7fb f9eb 	bl	8015dc4 <__errno>
 801a9ee:	ed9f 8b10 	vldr	d8, [pc, #64]	; 801aa30 <exp+0x80>
 801a9f2:	2322      	movs	r3, #34	; 0x22
 801a9f4:	6003      	str	r3, [r0, #0]
 801a9f6:	eeb0 0a48 	vmov.f32	s0, s16
 801a9fa:	eef0 0a68 	vmov.f32	s1, s17
 801a9fe:	ecbd 8b02 	vpop	{d8}
 801aa02:	bd38      	pop	{r3, r4, r5, pc}
 801aa04:	a30c      	add	r3, pc, #48	; (adr r3, 801aa38 <exp+0x88>)
 801aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa0a:	4620      	mov	r0, r4
 801aa0c:	4629      	mov	r1, r5
 801aa0e:	f7e6 f885 	bl	8000b1c <__aeabi_dcmplt>
 801aa12:	2800      	cmp	r0, #0
 801aa14:	d0ef      	beq.n	801a9f6 <exp+0x46>
 801aa16:	f7fb f9d5 	bl	8015dc4 <__errno>
 801aa1a:	2322      	movs	r3, #34	; 0x22
 801aa1c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 801aa40 <exp+0x90>
 801aa20:	6003      	str	r3, [r0, #0]
 801aa22:	e7e8      	b.n	801a9f6 <exp+0x46>
 801aa24:	f3af 8000 	nop.w
 801aa28:	fefa39ef 	.word	0xfefa39ef
 801aa2c:	40862e42 	.word	0x40862e42
 801aa30:	00000000 	.word	0x00000000
 801aa34:	7ff00000 	.word	0x7ff00000
 801aa38:	d52d3051 	.word	0xd52d3051
 801aa3c:	c0874910 	.word	0xc0874910
	...
 801aa48:	20001424 	.word	0x20001424

0801aa4c <sqrt>:
 801aa4c:	b538      	push	{r3, r4, r5, lr}
 801aa4e:	ed2d 8b02 	vpush	{d8}
 801aa52:	ec55 4b10 	vmov	r4, r5, d0
 801aa56:	f000 fcb9 	bl	801b3cc <__ieee754_sqrt>
 801aa5a:	4b15      	ldr	r3, [pc, #84]	; (801aab0 <sqrt+0x64>)
 801aa5c:	eeb0 8a40 	vmov.f32	s16, s0
 801aa60:	eef0 8a60 	vmov.f32	s17, s1
 801aa64:	f993 3000 	ldrsb.w	r3, [r3]
 801aa68:	3301      	adds	r3, #1
 801aa6a:	d019      	beq.n	801aaa0 <sqrt+0x54>
 801aa6c:	4622      	mov	r2, r4
 801aa6e:	462b      	mov	r3, r5
 801aa70:	4620      	mov	r0, r4
 801aa72:	4629      	mov	r1, r5
 801aa74:	f7e6 f87a 	bl	8000b6c <__aeabi_dcmpun>
 801aa78:	b990      	cbnz	r0, 801aaa0 <sqrt+0x54>
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	4620      	mov	r0, r4
 801aa80:	4629      	mov	r1, r5
 801aa82:	f7e6 f84b 	bl	8000b1c <__aeabi_dcmplt>
 801aa86:	b158      	cbz	r0, 801aaa0 <sqrt+0x54>
 801aa88:	f7fb f99c 	bl	8015dc4 <__errno>
 801aa8c:	2321      	movs	r3, #33	; 0x21
 801aa8e:	6003      	str	r3, [r0, #0]
 801aa90:	2200      	movs	r2, #0
 801aa92:	2300      	movs	r3, #0
 801aa94:	4610      	mov	r0, r2
 801aa96:	4619      	mov	r1, r3
 801aa98:	f7e5 fef8 	bl	800088c <__aeabi_ddiv>
 801aa9c:	ec41 0b18 	vmov	d8, r0, r1
 801aaa0:	eeb0 0a48 	vmov.f32	s0, s16
 801aaa4:	eef0 0a68 	vmov.f32	s1, s17
 801aaa8:	ecbd 8b02 	vpop	{d8}
 801aaac:	bd38      	pop	{r3, r4, r5, pc}
 801aaae:	bf00      	nop
 801aab0:	20001424 	.word	0x20001424

0801aab4 <acosf>:
 801aab4:	b508      	push	{r3, lr}
 801aab6:	ed2d 8b02 	vpush	{d8}
 801aaba:	eeb0 8a40 	vmov.f32	s16, s0
 801aabe:	f000 fd39 	bl	801b534 <__ieee754_acosf>
 801aac2:	4b13      	ldr	r3, [pc, #76]	; (801ab10 <acosf+0x5c>)
 801aac4:	f993 3000 	ldrsb.w	r3, [r3]
 801aac8:	3301      	adds	r3, #1
 801aaca:	eef0 8a40 	vmov.f32	s17, s0
 801aace:	d01a      	beq.n	801ab06 <acosf+0x52>
 801aad0:	eeb4 8a48 	vcmp.f32	s16, s16
 801aad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aad8:	d615      	bvs.n	801ab06 <acosf+0x52>
 801aada:	eeb0 0a48 	vmov.f32	s0, s16
 801aade:	f001 fd2b 	bl	801c538 <fabsf>
 801aae2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801aae6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801aaea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaee:	dd0a      	ble.n	801ab06 <acosf+0x52>
 801aaf0:	f7fb f968 	bl	8015dc4 <__errno>
 801aaf4:	ecbd 8b02 	vpop	{d8}
 801aaf8:	2321      	movs	r3, #33	; 0x21
 801aafa:	6003      	str	r3, [r0, #0]
 801aafc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ab00:	4804      	ldr	r0, [pc, #16]	; (801ab14 <acosf+0x60>)
 801ab02:	f7fc b819 	b.w	8016b38 <nanf>
 801ab06:	eeb0 0a68 	vmov.f32	s0, s17
 801ab0a:	ecbd 8b02 	vpop	{d8}
 801ab0e:	bd08      	pop	{r3, pc}
 801ab10:	20001424 	.word	0x20001424
 801ab14:	0801cd30 	.word	0x0801cd30

0801ab18 <__ieee754_asin>:
 801ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab1c:	ed2d 8b04 	vpush	{d8-d9}
 801ab20:	ec55 4b10 	vmov	r4, r5, d0
 801ab24:	4bcc      	ldr	r3, [pc, #816]	; (801ae58 <__ieee754_asin+0x340>)
 801ab26:	b083      	sub	sp, #12
 801ab28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801ab2c:	4598      	cmp	r8, r3
 801ab2e:	9501      	str	r5, [sp, #4]
 801ab30:	dd35      	ble.n	801ab9e <__ieee754_asin+0x86>
 801ab32:	ee10 3a10 	vmov	r3, s0
 801ab36:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801ab3a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801ab3e:	ea58 0303 	orrs.w	r3, r8, r3
 801ab42:	d117      	bne.n	801ab74 <__ieee754_asin+0x5c>
 801ab44:	a3aa      	add	r3, pc, #680	; (adr r3, 801adf0 <__ieee754_asin+0x2d8>)
 801ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab4a:	ee10 0a10 	vmov	r0, s0
 801ab4e:	4629      	mov	r1, r5
 801ab50:	f7e5 fd72 	bl	8000638 <__aeabi_dmul>
 801ab54:	a3a8      	add	r3, pc, #672	; (adr r3, 801adf8 <__ieee754_asin+0x2e0>)
 801ab56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab5a:	4606      	mov	r6, r0
 801ab5c:	460f      	mov	r7, r1
 801ab5e:	4620      	mov	r0, r4
 801ab60:	4629      	mov	r1, r5
 801ab62:	f7e5 fd69 	bl	8000638 <__aeabi_dmul>
 801ab66:	4602      	mov	r2, r0
 801ab68:	460b      	mov	r3, r1
 801ab6a:	4630      	mov	r0, r6
 801ab6c:	4639      	mov	r1, r7
 801ab6e:	f7e5 fbad 	bl	80002cc <__adddf3>
 801ab72:	e00b      	b.n	801ab8c <__ieee754_asin+0x74>
 801ab74:	ee10 2a10 	vmov	r2, s0
 801ab78:	462b      	mov	r3, r5
 801ab7a:	ee10 0a10 	vmov	r0, s0
 801ab7e:	4629      	mov	r1, r5
 801ab80:	f7e5 fba2 	bl	80002c8 <__aeabi_dsub>
 801ab84:	4602      	mov	r2, r0
 801ab86:	460b      	mov	r3, r1
 801ab88:	f7e5 fe80 	bl	800088c <__aeabi_ddiv>
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	460d      	mov	r5, r1
 801ab90:	ec45 4b10 	vmov	d0, r4, r5
 801ab94:	b003      	add	sp, #12
 801ab96:	ecbd 8b04 	vpop	{d8-d9}
 801ab9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab9e:	4baf      	ldr	r3, [pc, #700]	; (801ae5c <__ieee754_asin+0x344>)
 801aba0:	4598      	cmp	r8, r3
 801aba2:	dc11      	bgt.n	801abc8 <__ieee754_asin+0xb0>
 801aba4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801aba8:	f280 80ae 	bge.w	801ad08 <__ieee754_asin+0x1f0>
 801abac:	a394      	add	r3, pc, #592	; (adr r3, 801ae00 <__ieee754_asin+0x2e8>)
 801abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb2:	ee10 0a10 	vmov	r0, s0
 801abb6:	4629      	mov	r1, r5
 801abb8:	f7e5 fb88 	bl	80002cc <__adddf3>
 801abbc:	4ba8      	ldr	r3, [pc, #672]	; (801ae60 <__ieee754_asin+0x348>)
 801abbe:	2200      	movs	r2, #0
 801abc0:	f7e5 ffca 	bl	8000b58 <__aeabi_dcmpgt>
 801abc4:	2800      	cmp	r0, #0
 801abc6:	d1e3      	bne.n	801ab90 <__ieee754_asin+0x78>
 801abc8:	ec45 4b10 	vmov	d0, r4, r5
 801abcc:	f001 fca0 	bl	801c510 <fabs>
 801abd0:	49a3      	ldr	r1, [pc, #652]	; (801ae60 <__ieee754_asin+0x348>)
 801abd2:	ec53 2b10 	vmov	r2, r3, d0
 801abd6:	2000      	movs	r0, #0
 801abd8:	f7e5 fb76 	bl	80002c8 <__aeabi_dsub>
 801abdc:	4ba1      	ldr	r3, [pc, #644]	; (801ae64 <__ieee754_asin+0x34c>)
 801abde:	2200      	movs	r2, #0
 801abe0:	f7e5 fd2a 	bl	8000638 <__aeabi_dmul>
 801abe4:	a388      	add	r3, pc, #544	; (adr r3, 801ae08 <__ieee754_asin+0x2f0>)
 801abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abea:	4604      	mov	r4, r0
 801abec:	460d      	mov	r5, r1
 801abee:	f7e5 fd23 	bl	8000638 <__aeabi_dmul>
 801abf2:	a387      	add	r3, pc, #540	; (adr r3, 801ae10 <__ieee754_asin+0x2f8>)
 801abf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abf8:	f7e5 fb68 	bl	80002cc <__adddf3>
 801abfc:	4622      	mov	r2, r4
 801abfe:	462b      	mov	r3, r5
 801ac00:	f7e5 fd1a 	bl	8000638 <__aeabi_dmul>
 801ac04:	a384      	add	r3, pc, #528	; (adr r3, 801ae18 <__ieee754_asin+0x300>)
 801ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0a:	f7e5 fb5d 	bl	80002c8 <__aeabi_dsub>
 801ac0e:	4622      	mov	r2, r4
 801ac10:	462b      	mov	r3, r5
 801ac12:	f7e5 fd11 	bl	8000638 <__aeabi_dmul>
 801ac16:	a382      	add	r3, pc, #520	; (adr r3, 801ae20 <__ieee754_asin+0x308>)
 801ac18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac1c:	f7e5 fb56 	bl	80002cc <__adddf3>
 801ac20:	4622      	mov	r2, r4
 801ac22:	462b      	mov	r3, r5
 801ac24:	f7e5 fd08 	bl	8000638 <__aeabi_dmul>
 801ac28:	a37f      	add	r3, pc, #508	; (adr r3, 801ae28 <__ieee754_asin+0x310>)
 801ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac2e:	f7e5 fb4b 	bl	80002c8 <__aeabi_dsub>
 801ac32:	4622      	mov	r2, r4
 801ac34:	462b      	mov	r3, r5
 801ac36:	f7e5 fcff 	bl	8000638 <__aeabi_dmul>
 801ac3a:	a37d      	add	r3, pc, #500	; (adr r3, 801ae30 <__ieee754_asin+0x318>)
 801ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac40:	f7e5 fb44 	bl	80002cc <__adddf3>
 801ac44:	4622      	mov	r2, r4
 801ac46:	462b      	mov	r3, r5
 801ac48:	f7e5 fcf6 	bl	8000638 <__aeabi_dmul>
 801ac4c:	a37a      	add	r3, pc, #488	; (adr r3, 801ae38 <__ieee754_asin+0x320>)
 801ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac52:	ec41 0b18 	vmov	d8, r0, r1
 801ac56:	4620      	mov	r0, r4
 801ac58:	4629      	mov	r1, r5
 801ac5a:	f7e5 fced 	bl	8000638 <__aeabi_dmul>
 801ac5e:	a378      	add	r3, pc, #480	; (adr r3, 801ae40 <__ieee754_asin+0x328>)
 801ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac64:	f7e5 fb30 	bl	80002c8 <__aeabi_dsub>
 801ac68:	4622      	mov	r2, r4
 801ac6a:	462b      	mov	r3, r5
 801ac6c:	f7e5 fce4 	bl	8000638 <__aeabi_dmul>
 801ac70:	a375      	add	r3, pc, #468	; (adr r3, 801ae48 <__ieee754_asin+0x330>)
 801ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac76:	f7e5 fb29 	bl	80002cc <__adddf3>
 801ac7a:	4622      	mov	r2, r4
 801ac7c:	462b      	mov	r3, r5
 801ac7e:	f7e5 fcdb 	bl	8000638 <__aeabi_dmul>
 801ac82:	a373      	add	r3, pc, #460	; (adr r3, 801ae50 <__ieee754_asin+0x338>)
 801ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac88:	f7e5 fb1e 	bl	80002c8 <__aeabi_dsub>
 801ac8c:	4622      	mov	r2, r4
 801ac8e:	462b      	mov	r3, r5
 801ac90:	f7e5 fcd2 	bl	8000638 <__aeabi_dmul>
 801ac94:	4b72      	ldr	r3, [pc, #456]	; (801ae60 <__ieee754_asin+0x348>)
 801ac96:	2200      	movs	r2, #0
 801ac98:	f7e5 fb18 	bl	80002cc <__adddf3>
 801ac9c:	ec45 4b10 	vmov	d0, r4, r5
 801aca0:	4606      	mov	r6, r0
 801aca2:	460f      	mov	r7, r1
 801aca4:	f000 fb92 	bl	801b3cc <__ieee754_sqrt>
 801aca8:	4b6f      	ldr	r3, [pc, #444]	; (801ae68 <__ieee754_asin+0x350>)
 801acaa:	4598      	cmp	r8, r3
 801acac:	ec5b ab10 	vmov	sl, fp, d0
 801acb0:	f340 80dc 	ble.w	801ae6c <__ieee754_asin+0x354>
 801acb4:	4632      	mov	r2, r6
 801acb6:	463b      	mov	r3, r7
 801acb8:	ec51 0b18 	vmov	r0, r1, d8
 801acbc:	f7e5 fde6 	bl	800088c <__aeabi_ddiv>
 801acc0:	4652      	mov	r2, sl
 801acc2:	465b      	mov	r3, fp
 801acc4:	f7e5 fcb8 	bl	8000638 <__aeabi_dmul>
 801acc8:	4652      	mov	r2, sl
 801acca:	465b      	mov	r3, fp
 801accc:	f7e5 fafe 	bl	80002cc <__adddf3>
 801acd0:	4602      	mov	r2, r0
 801acd2:	460b      	mov	r3, r1
 801acd4:	f7e5 fafa 	bl	80002cc <__adddf3>
 801acd8:	a347      	add	r3, pc, #284	; (adr r3, 801adf8 <__ieee754_asin+0x2e0>)
 801acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acde:	f7e5 faf3 	bl	80002c8 <__aeabi_dsub>
 801ace2:	4602      	mov	r2, r0
 801ace4:	460b      	mov	r3, r1
 801ace6:	a142      	add	r1, pc, #264	; (adr r1, 801adf0 <__ieee754_asin+0x2d8>)
 801ace8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801acec:	f7e5 faec 	bl	80002c8 <__aeabi_dsub>
 801acf0:	9b01      	ldr	r3, [sp, #4]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	bfdc      	itt	le
 801acf6:	4602      	movle	r2, r0
 801acf8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801acfc:	4604      	mov	r4, r0
 801acfe:	460d      	mov	r5, r1
 801ad00:	bfdc      	itt	le
 801ad02:	4614      	movle	r4, r2
 801ad04:	461d      	movle	r5, r3
 801ad06:	e743      	b.n	801ab90 <__ieee754_asin+0x78>
 801ad08:	ee10 2a10 	vmov	r2, s0
 801ad0c:	ee10 0a10 	vmov	r0, s0
 801ad10:	462b      	mov	r3, r5
 801ad12:	4629      	mov	r1, r5
 801ad14:	f7e5 fc90 	bl	8000638 <__aeabi_dmul>
 801ad18:	a33b      	add	r3, pc, #236	; (adr r3, 801ae08 <__ieee754_asin+0x2f0>)
 801ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad1e:	4606      	mov	r6, r0
 801ad20:	460f      	mov	r7, r1
 801ad22:	f7e5 fc89 	bl	8000638 <__aeabi_dmul>
 801ad26:	a33a      	add	r3, pc, #232	; (adr r3, 801ae10 <__ieee754_asin+0x2f8>)
 801ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad2c:	f7e5 face 	bl	80002cc <__adddf3>
 801ad30:	4632      	mov	r2, r6
 801ad32:	463b      	mov	r3, r7
 801ad34:	f7e5 fc80 	bl	8000638 <__aeabi_dmul>
 801ad38:	a337      	add	r3, pc, #220	; (adr r3, 801ae18 <__ieee754_asin+0x300>)
 801ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad3e:	f7e5 fac3 	bl	80002c8 <__aeabi_dsub>
 801ad42:	4632      	mov	r2, r6
 801ad44:	463b      	mov	r3, r7
 801ad46:	f7e5 fc77 	bl	8000638 <__aeabi_dmul>
 801ad4a:	a335      	add	r3, pc, #212	; (adr r3, 801ae20 <__ieee754_asin+0x308>)
 801ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad50:	f7e5 fabc 	bl	80002cc <__adddf3>
 801ad54:	4632      	mov	r2, r6
 801ad56:	463b      	mov	r3, r7
 801ad58:	f7e5 fc6e 	bl	8000638 <__aeabi_dmul>
 801ad5c:	a332      	add	r3, pc, #200	; (adr r3, 801ae28 <__ieee754_asin+0x310>)
 801ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad62:	f7e5 fab1 	bl	80002c8 <__aeabi_dsub>
 801ad66:	4632      	mov	r2, r6
 801ad68:	463b      	mov	r3, r7
 801ad6a:	f7e5 fc65 	bl	8000638 <__aeabi_dmul>
 801ad6e:	a330      	add	r3, pc, #192	; (adr r3, 801ae30 <__ieee754_asin+0x318>)
 801ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad74:	f7e5 faaa 	bl	80002cc <__adddf3>
 801ad78:	4632      	mov	r2, r6
 801ad7a:	463b      	mov	r3, r7
 801ad7c:	f7e5 fc5c 	bl	8000638 <__aeabi_dmul>
 801ad80:	a32d      	add	r3, pc, #180	; (adr r3, 801ae38 <__ieee754_asin+0x320>)
 801ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad86:	4680      	mov	r8, r0
 801ad88:	4689      	mov	r9, r1
 801ad8a:	4630      	mov	r0, r6
 801ad8c:	4639      	mov	r1, r7
 801ad8e:	f7e5 fc53 	bl	8000638 <__aeabi_dmul>
 801ad92:	a32b      	add	r3, pc, #172	; (adr r3, 801ae40 <__ieee754_asin+0x328>)
 801ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad98:	f7e5 fa96 	bl	80002c8 <__aeabi_dsub>
 801ad9c:	4632      	mov	r2, r6
 801ad9e:	463b      	mov	r3, r7
 801ada0:	f7e5 fc4a 	bl	8000638 <__aeabi_dmul>
 801ada4:	a328      	add	r3, pc, #160	; (adr r3, 801ae48 <__ieee754_asin+0x330>)
 801ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adaa:	f7e5 fa8f 	bl	80002cc <__adddf3>
 801adae:	4632      	mov	r2, r6
 801adb0:	463b      	mov	r3, r7
 801adb2:	f7e5 fc41 	bl	8000638 <__aeabi_dmul>
 801adb6:	a326      	add	r3, pc, #152	; (adr r3, 801ae50 <__ieee754_asin+0x338>)
 801adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adbc:	f7e5 fa84 	bl	80002c8 <__aeabi_dsub>
 801adc0:	4632      	mov	r2, r6
 801adc2:	463b      	mov	r3, r7
 801adc4:	f7e5 fc38 	bl	8000638 <__aeabi_dmul>
 801adc8:	4b25      	ldr	r3, [pc, #148]	; (801ae60 <__ieee754_asin+0x348>)
 801adca:	2200      	movs	r2, #0
 801adcc:	f7e5 fa7e 	bl	80002cc <__adddf3>
 801add0:	4602      	mov	r2, r0
 801add2:	460b      	mov	r3, r1
 801add4:	4640      	mov	r0, r8
 801add6:	4649      	mov	r1, r9
 801add8:	f7e5 fd58 	bl	800088c <__aeabi_ddiv>
 801addc:	4622      	mov	r2, r4
 801adde:	462b      	mov	r3, r5
 801ade0:	f7e5 fc2a 	bl	8000638 <__aeabi_dmul>
 801ade4:	4602      	mov	r2, r0
 801ade6:	460b      	mov	r3, r1
 801ade8:	4620      	mov	r0, r4
 801adea:	4629      	mov	r1, r5
 801adec:	e6bf      	b.n	801ab6e <__ieee754_asin+0x56>
 801adee:	bf00      	nop
 801adf0:	54442d18 	.word	0x54442d18
 801adf4:	3ff921fb 	.word	0x3ff921fb
 801adf8:	33145c07 	.word	0x33145c07
 801adfc:	3c91a626 	.word	0x3c91a626
 801ae00:	8800759c 	.word	0x8800759c
 801ae04:	7e37e43c 	.word	0x7e37e43c
 801ae08:	0dfdf709 	.word	0x0dfdf709
 801ae0c:	3f023de1 	.word	0x3f023de1
 801ae10:	7501b288 	.word	0x7501b288
 801ae14:	3f49efe0 	.word	0x3f49efe0
 801ae18:	b5688f3b 	.word	0xb5688f3b
 801ae1c:	3fa48228 	.word	0x3fa48228
 801ae20:	0e884455 	.word	0x0e884455
 801ae24:	3fc9c155 	.word	0x3fc9c155
 801ae28:	03eb6f7d 	.word	0x03eb6f7d
 801ae2c:	3fd4d612 	.word	0x3fd4d612
 801ae30:	55555555 	.word	0x55555555
 801ae34:	3fc55555 	.word	0x3fc55555
 801ae38:	b12e9282 	.word	0xb12e9282
 801ae3c:	3fb3b8c5 	.word	0x3fb3b8c5
 801ae40:	1b8d0159 	.word	0x1b8d0159
 801ae44:	3fe6066c 	.word	0x3fe6066c
 801ae48:	9c598ac8 	.word	0x9c598ac8
 801ae4c:	40002ae5 	.word	0x40002ae5
 801ae50:	1c8a2d4b 	.word	0x1c8a2d4b
 801ae54:	40033a27 	.word	0x40033a27
 801ae58:	3fefffff 	.word	0x3fefffff
 801ae5c:	3fdfffff 	.word	0x3fdfffff
 801ae60:	3ff00000 	.word	0x3ff00000
 801ae64:	3fe00000 	.word	0x3fe00000
 801ae68:	3fef3332 	.word	0x3fef3332
 801ae6c:	ee10 2a10 	vmov	r2, s0
 801ae70:	ee10 0a10 	vmov	r0, s0
 801ae74:	465b      	mov	r3, fp
 801ae76:	4659      	mov	r1, fp
 801ae78:	f7e5 fa28 	bl	80002cc <__adddf3>
 801ae7c:	4632      	mov	r2, r6
 801ae7e:	463b      	mov	r3, r7
 801ae80:	ec41 0b19 	vmov	d9, r0, r1
 801ae84:	ec51 0b18 	vmov	r0, r1, d8
 801ae88:	f7e5 fd00 	bl	800088c <__aeabi_ddiv>
 801ae8c:	4602      	mov	r2, r0
 801ae8e:	460b      	mov	r3, r1
 801ae90:	ec51 0b19 	vmov	r0, r1, d9
 801ae94:	f7e5 fbd0 	bl	8000638 <__aeabi_dmul>
 801ae98:	f04f 0800 	mov.w	r8, #0
 801ae9c:	4606      	mov	r6, r0
 801ae9e:	460f      	mov	r7, r1
 801aea0:	4642      	mov	r2, r8
 801aea2:	465b      	mov	r3, fp
 801aea4:	4640      	mov	r0, r8
 801aea6:	4659      	mov	r1, fp
 801aea8:	f7e5 fbc6 	bl	8000638 <__aeabi_dmul>
 801aeac:	4602      	mov	r2, r0
 801aeae:	460b      	mov	r3, r1
 801aeb0:	4620      	mov	r0, r4
 801aeb2:	4629      	mov	r1, r5
 801aeb4:	f7e5 fa08 	bl	80002c8 <__aeabi_dsub>
 801aeb8:	4642      	mov	r2, r8
 801aeba:	4604      	mov	r4, r0
 801aebc:	460d      	mov	r5, r1
 801aebe:	465b      	mov	r3, fp
 801aec0:	4650      	mov	r0, sl
 801aec2:	4659      	mov	r1, fp
 801aec4:	f7e5 fa02 	bl	80002cc <__adddf3>
 801aec8:	4602      	mov	r2, r0
 801aeca:	460b      	mov	r3, r1
 801aecc:	4620      	mov	r0, r4
 801aece:	4629      	mov	r1, r5
 801aed0:	f7e5 fcdc 	bl	800088c <__aeabi_ddiv>
 801aed4:	4602      	mov	r2, r0
 801aed6:	460b      	mov	r3, r1
 801aed8:	f7e5 f9f8 	bl	80002cc <__adddf3>
 801aedc:	4602      	mov	r2, r0
 801aede:	460b      	mov	r3, r1
 801aee0:	a113      	add	r1, pc, #76	; (adr r1, 801af30 <__ieee754_asin+0x418>)
 801aee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aee6:	f7e5 f9ef 	bl	80002c8 <__aeabi_dsub>
 801aeea:	4602      	mov	r2, r0
 801aeec:	460b      	mov	r3, r1
 801aeee:	4630      	mov	r0, r6
 801aef0:	4639      	mov	r1, r7
 801aef2:	f7e5 f9e9 	bl	80002c8 <__aeabi_dsub>
 801aef6:	4642      	mov	r2, r8
 801aef8:	4604      	mov	r4, r0
 801aefa:	460d      	mov	r5, r1
 801aefc:	465b      	mov	r3, fp
 801aefe:	4640      	mov	r0, r8
 801af00:	4659      	mov	r1, fp
 801af02:	f7e5 f9e3 	bl	80002cc <__adddf3>
 801af06:	4602      	mov	r2, r0
 801af08:	460b      	mov	r3, r1
 801af0a:	a10b      	add	r1, pc, #44	; (adr r1, 801af38 <__ieee754_asin+0x420>)
 801af0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af10:	f7e5 f9da 	bl	80002c8 <__aeabi_dsub>
 801af14:	4602      	mov	r2, r0
 801af16:	460b      	mov	r3, r1
 801af18:	4620      	mov	r0, r4
 801af1a:	4629      	mov	r1, r5
 801af1c:	f7e5 f9d4 	bl	80002c8 <__aeabi_dsub>
 801af20:	4602      	mov	r2, r0
 801af22:	460b      	mov	r3, r1
 801af24:	a104      	add	r1, pc, #16	; (adr r1, 801af38 <__ieee754_asin+0x420>)
 801af26:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af2a:	e6df      	b.n	801acec <__ieee754_asin+0x1d4>
 801af2c:	f3af 8000 	nop.w
 801af30:	33145c07 	.word	0x33145c07
 801af34:	3c91a626 	.word	0x3c91a626
 801af38:	54442d18 	.word	0x54442d18
 801af3c:	3fe921fb 	.word	0x3fe921fb

0801af40 <__ieee754_atan2>:
 801af40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af44:	ec57 6b11 	vmov	r6, r7, d1
 801af48:	4273      	negs	r3, r6
 801af4a:	f8df e184 	ldr.w	lr, [pc, #388]	; 801b0d0 <__ieee754_atan2+0x190>
 801af4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801af52:	4333      	orrs	r3, r6
 801af54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801af58:	4573      	cmp	r3, lr
 801af5a:	ec51 0b10 	vmov	r0, r1, d0
 801af5e:	ee11 8a10 	vmov	r8, s2
 801af62:	d80a      	bhi.n	801af7a <__ieee754_atan2+0x3a>
 801af64:	4244      	negs	r4, r0
 801af66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801af6a:	4304      	orrs	r4, r0
 801af6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801af70:	4574      	cmp	r4, lr
 801af72:	ee10 9a10 	vmov	r9, s0
 801af76:	468c      	mov	ip, r1
 801af78:	d907      	bls.n	801af8a <__ieee754_atan2+0x4a>
 801af7a:	4632      	mov	r2, r6
 801af7c:	463b      	mov	r3, r7
 801af7e:	f7e5 f9a5 	bl	80002cc <__adddf3>
 801af82:	ec41 0b10 	vmov	d0, r0, r1
 801af86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801af8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801af92:	4334      	orrs	r4, r6
 801af94:	d103      	bne.n	801af9e <__ieee754_atan2+0x5e>
 801af96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af9a:	f001 b919 	b.w	801c1d0 <atan>
 801af9e:	17bc      	asrs	r4, r7, #30
 801afa0:	f004 0402 	and.w	r4, r4, #2
 801afa4:	ea53 0909 	orrs.w	r9, r3, r9
 801afa8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801afac:	d107      	bne.n	801afbe <__ieee754_atan2+0x7e>
 801afae:	2c02      	cmp	r4, #2
 801afb0:	d060      	beq.n	801b074 <__ieee754_atan2+0x134>
 801afb2:	2c03      	cmp	r4, #3
 801afb4:	d1e5      	bne.n	801af82 <__ieee754_atan2+0x42>
 801afb6:	a142      	add	r1, pc, #264	; (adr r1, 801b0c0 <__ieee754_atan2+0x180>)
 801afb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801afbc:	e7e1      	b.n	801af82 <__ieee754_atan2+0x42>
 801afbe:	ea52 0808 	orrs.w	r8, r2, r8
 801afc2:	d106      	bne.n	801afd2 <__ieee754_atan2+0x92>
 801afc4:	f1bc 0f00 	cmp.w	ip, #0
 801afc8:	da5f      	bge.n	801b08a <__ieee754_atan2+0x14a>
 801afca:	a13f      	add	r1, pc, #252	; (adr r1, 801b0c8 <__ieee754_atan2+0x188>)
 801afcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801afd0:	e7d7      	b.n	801af82 <__ieee754_atan2+0x42>
 801afd2:	4572      	cmp	r2, lr
 801afd4:	d10f      	bne.n	801aff6 <__ieee754_atan2+0xb6>
 801afd6:	4293      	cmp	r3, r2
 801afd8:	f104 34ff 	add.w	r4, r4, #4294967295
 801afdc:	d107      	bne.n	801afee <__ieee754_atan2+0xae>
 801afde:	2c02      	cmp	r4, #2
 801afe0:	d84c      	bhi.n	801b07c <__ieee754_atan2+0x13c>
 801afe2:	4b35      	ldr	r3, [pc, #212]	; (801b0b8 <__ieee754_atan2+0x178>)
 801afe4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801afe8:	e9d4 0100 	ldrd	r0, r1, [r4]
 801afec:	e7c9      	b.n	801af82 <__ieee754_atan2+0x42>
 801afee:	2c02      	cmp	r4, #2
 801aff0:	d848      	bhi.n	801b084 <__ieee754_atan2+0x144>
 801aff2:	4b32      	ldr	r3, [pc, #200]	; (801b0bc <__ieee754_atan2+0x17c>)
 801aff4:	e7f6      	b.n	801afe4 <__ieee754_atan2+0xa4>
 801aff6:	4573      	cmp	r3, lr
 801aff8:	d0e4      	beq.n	801afc4 <__ieee754_atan2+0x84>
 801affa:	1a9b      	subs	r3, r3, r2
 801affc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801b000:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b004:	da1e      	bge.n	801b044 <__ieee754_atan2+0x104>
 801b006:	2f00      	cmp	r7, #0
 801b008:	da01      	bge.n	801b00e <__ieee754_atan2+0xce>
 801b00a:	323c      	adds	r2, #60	; 0x3c
 801b00c:	db1e      	blt.n	801b04c <__ieee754_atan2+0x10c>
 801b00e:	4632      	mov	r2, r6
 801b010:	463b      	mov	r3, r7
 801b012:	f7e5 fc3b 	bl	800088c <__aeabi_ddiv>
 801b016:	ec41 0b10 	vmov	d0, r0, r1
 801b01a:	f001 fa79 	bl	801c510 <fabs>
 801b01e:	f001 f8d7 	bl	801c1d0 <atan>
 801b022:	ec51 0b10 	vmov	r0, r1, d0
 801b026:	2c01      	cmp	r4, #1
 801b028:	d013      	beq.n	801b052 <__ieee754_atan2+0x112>
 801b02a:	2c02      	cmp	r4, #2
 801b02c:	d015      	beq.n	801b05a <__ieee754_atan2+0x11a>
 801b02e:	2c00      	cmp	r4, #0
 801b030:	d0a7      	beq.n	801af82 <__ieee754_atan2+0x42>
 801b032:	a319      	add	r3, pc, #100	; (adr r3, 801b098 <__ieee754_atan2+0x158>)
 801b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b038:	f7e5 f946 	bl	80002c8 <__aeabi_dsub>
 801b03c:	a318      	add	r3, pc, #96	; (adr r3, 801b0a0 <__ieee754_atan2+0x160>)
 801b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b042:	e014      	b.n	801b06e <__ieee754_atan2+0x12e>
 801b044:	a118      	add	r1, pc, #96	; (adr r1, 801b0a8 <__ieee754_atan2+0x168>)
 801b046:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b04a:	e7ec      	b.n	801b026 <__ieee754_atan2+0xe6>
 801b04c:	2000      	movs	r0, #0
 801b04e:	2100      	movs	r1, #0
 801b050:	e7e9      	b.n	801b026 <__ieee754_atan2+0xe6>
 801b052:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b056:	4619      	mov	r1, r3
 801b058:	e793      	b.n	801af82 <__ieee754_atan2+0x42>
 801b05a:	a30f      	add	r3, pc, #60	; (adr r3, 801b098 <__ieee754_atan2+0x158>)
 801b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b060:	f7e5 f932 	bl	80002c8 <__aeabi_dsub>
 801b064:	4602      	mov	r2, r0
 801b066:	460b      	mov	r3, r1
 801b068:	a10d      	add	r1, pc, #52	; (adr r1, 801b0a0 <__ieee754_atan2+0x160>)
 801b06a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b06e:	f7e5 f92b 	bl	80002c8 <__aeabi_dsub>
 801b072:	e786      	b.n	801af82 <__ieee754_atan2+0x42>
 801b074:	a10a      	add	r1, pc, #40	; (adr r1, 801b0a0 <__ieee754_atan2+0x160>)
 801b076:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b07a:	e782      	b.n	801af82 <__ieee754_atan2+0x42>
 801b07c:	a10c      	add	r1, pc, #48	; (adr r1, 801b0b0 <__ieee754_atan2+0x170>)
 801b07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b082:	e77e      	b.n	801af82 <__ieee754_atan2+0x42>
 801b084:	2000      	movs	r0, #0
 801b086:	2100      	movs	r1, #0
 801b088:	e77b      	b.n	801af82 <__ieee754_atan2+0x42>
 801b08a:	a107      	add	r1, pc, #28	; (adr r1, 801b0a8 <__ieee754_atan2+0x168>)
 801b08c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b090:	e777      	b.n	801af82 <__ieee754_atan2+0x42>
 801b092:	bf00      	nop
 801b094:	f3af 8000 	nop.w
 801b098:	33145c07 	.word	0x33145c07
 801b09c:	3ca1a626 	.word	0x3ca1a626
 801b0a0:	54442d18 	.word	0x54442d18
 801b0a4:	400921fb 	.word	0x400921fb
 801b0a8:	54442d18 	.word	0x54442d18
 801b0ac:	3ff921fb 	.word	0x3ff921fb
 801b0b0:	54442d18 	.word	0x54442d18
 801b0b4:	3fe921fb 	.word	0x3fe921fb
 801b0b8:	0801cd98 	.word	0x0801cd98
 801b0bc:	0801cdb0 	.word	0x0801cdb0
 801b0c0:	54442d18 	.word	0x54442d18
 801b0c4:	c00921fb 	.word	0xc00921fb
 801b0c8:	54442d18 	.word	0x54442d18
 801b0cc:	bff921fb 	.word	0xbff921fb
 801b0d0:	7ff00000 	.word	0x7ff00000
 801b0d4:	00000000 	.word	0x00000000

0801b0d8 <__ieee754_exp>:
 801b0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0dc:	ec55 4b10 	vmov	r4, r5, d0
 801b0e0:	49b1      	ldr	r1, [pc, #708]	; (801b3a8 <__ieee754_exp+0x2d0>)
 801b0e2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b0e6:	428b      	cmp	r3, r1
 801b0e8:	ed2d 8b04 	vpush	{d8-d9}
 801b0ec:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801b0f0:	d937      	bls.n	801b162 <__ieee754_exp+0x8a>
 801b0f2:	49ae      	ldr	r1, [pc, #696]	; (801b3ac <__ieee754_exp+0x2d4>)
 801b0f4:	428b      	cmp	r3, r1
 801b0f6:	d916      	bls.n	801b126 <__ieee754_exp+0x4e>
 801b0f8:	ee10 3a10 	vmov	r3, s0
 801b0fc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801b100:	4313      	orrs	r3, r2
 801b102:	d009      	beq.n	801b118 <__ieee754_exp+0x40>
 801b104:	ee10 2a10 	vmov	r2, s0
 801b108:	462b      	mov	r3, r5
 801b10a:	4620      	mov	r0, r4
 801b10c:	4629      	mov	r1, r5
 801b10e:	f7e5 f8dd 	bl	80002cc <__adddf3>
 801b112:	4604      	mov	r4, r0
 801b114:	460d      	mov	r5, r1
 801b116:	e000      	b.n	801b11a <__ieee754_exp+0x42>
 801b118:	bb06      	cbnz	r6, 801b15c <__ieee754_exp+0x84>
 801b11a:	ecbd 8b04 	vpop	{d8-d9}
 801b11e:	ec45 4b10 	vmov	d0, r4, r5
 801b122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b126:	a38a      	add	r3, pc, #552	; (adr r3, 801b350 <__ieee754_exp+0x278>)
 801b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b12c:	ee10 0a10 	vmov	r0, s0
 801b130:	4629      	mov	r1, r5
 801b132:	f7e5 fd11 	bl	8000b58 <__aeabi_dcmpgt>
 801b136:	b138      	cbz	r0, 801b148 <__ieee754_exp+0x70>
 801b138:	a387      	add	r3, pc, #540	; (adr r3, 801b358 <__ieee754_exp+0x280>)
 801b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b13e:	4610      	mov	r0, r2
 801b140:	4619      	mov	r1, r3
 801b142:	f7e5 fa79 	bl	8000638 <__aeabi_dmul>
 801b146:	e7e4      	b.n	801b112 <__ieee754_exp+0x3a>
 801b148:	a385      	add	r3, pc, #532	; (adr r3, 801b360 <__ieee754_exp+0x288>)
 801b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14e:	4620      	mov	r0, r4
 801b150:	4629      	mov	r1, r5
 801b152:	f7e5 fce3 	bl	8000b1c <__aeabi_dcmplt>
 801b156:	2800      	cmp	r0, #0
 801b158:	f000 8087 	beq.w	801b26a <__ieee754_exp+0x192>
 801b15c:	2400      	movs	r4, #0
 801b15e:	2500      	movs	r5, #0
 801b160:	e7db      	b.n	801b11a <__ieee754_exp+0x42>
 801b162:	4a93      	ldr	r2, [pc, #588]	; (801b3b0 <__ieee754_exp+0x2d8>)
 801b164:	4293      	cmp	r3, r2
 801b166:	f240 80ac 	bls.w	801b2c2 <__ieee754_exp+0x1ea>
 801b16a:	4a92      	ldr	r2, [pc, #584]	; (801b3b4 <__ieee754_exp+0x2dc>)
 801b16c:	4293      	cmp	r3, r2
 801b16e:	d87c      	bhi.n	801b26a <__ieee754_exp+0x192>
 801b170:	4b91      	ldr	r3, [pc, #580]	; (801b3b8 <__ieee754_exp+0x2e0>)
 801b172:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b17a:	ee10 0a10 	vmov	r0, s0
 801b17e:	4629      	mov	r1, r5
 801b180:	f7e5 f8a2 	bl	80002c8 <__aeabi_dsub>
 801b184:	4b8d      	ldr	r3, [pc, #564]	; (801b3bc <__ieee754_exp+0x2e4>)
 801b186:	00f7      	lsls	r7, r6, #3
 801b188:	443b      	add	r3, r7
 801b18a:	ed93 7b00 	vldr	d7, [r3]
 801b18e:	f1c6 0a01 	rsb	sl, r6, #1
 801b192:	4680      	mov	r8, r0
 801b194:	4689      	mov	r9, r1
 801b196:	ebaa 0a06 	sub.w	sl, sl, r6
 801b19a:	eeb0 8a47 	vmov.f32	s16, s14
 801b19e:	eef0 8a67 	vmov.f32	s17, s15
 801b1a2:	ec53 2b18 	vmov	r2, r3, d8
 801b1a6:	4640      	mov	r0, r8
 801b1a8:	4649      	mov	r1, r9
 801b1aa:	f7e5 f88d 	bl	80002c8 <__aeabi_dsub>
 801b1ae:	4604      	mov	r4, r0
 801b1b0:	460d      	mov	r5, r1
 801b1b2:	4622      	mov	r2, r4
 801b1b4:	462b      	mov	r3, r5
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	4629      	mov	r1, r5
 801b1ba:	f7e5 fa3d 	bl	8000638 <__aeabi_dmul>
 801b1be:	a36a      	add	r3, pc, #424	; (adr r3, 801b368 <__ieee754_exp+0x290>)
 801b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1c4:	4606      	mov	r6, r0
 801b1c6:	460f      	mov	r7, r1
 801b1c8:	f7e5 fa36 	bl	8000638 <__aeabi_dmul>
 801b1cc:	a368      	add	r3, pc, #416	; (adr r3, 801b370 <__ieee754_exp+0x298>)
 801b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1d2:	f7e5 f879 	bl	80002c8 <__aeabi_dsub>
 801b1d6:	4632      	mov	r2, r6
 801b1d8:	463b      	mov	r3, r7
 801b1da:	f7e5 fa2d 	bl	8000638 <__aeabi_dmul>
 801b1de:	a366      	add	r3, pc, #408	; (adr r3, 801b378 <__ieee754_exp+0x2a0>)
 801b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e4:	f7e5 f872 	bl	80002cc <__adddf3>
 801b1e8:	4632      	mov	r2, r6
 801b1ea:	463b      	mov	r3, r7
 801b1ec:	f7e5 fa24 	bl	8000638 <__aeabi_dmul>
 801b1f0:	a363      	add	r3, pc, #396	; (adr r3, 801b380 <__ieee754_exp+0x2a8>)
 801b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1f6:	f7e5 f867 	bl	80002c8 <__aeabi_dsub>
 801b1fa:	4632      	mov	r2, r6
 801b1fc:	463b      	mov	r3, r7
 801b1fe:	f7e5 fa1b 	bl	8000638 <__aeabi_dmul>
 801b202:	a361      	add	r3, pc, #388	; (adr r3, 801b388 <__ieee754_exp+0x2b0>)
 801b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b208:	f7e5 f860 	bl	80002cc <__adddf3>
 801b20c:	4632      	mov	r2, r6
 801b20e:	463b      	mov	r3, r7
 801b210:	f7e5 fa12 	bl	8000638 <__aeabi_dmul>
 801b214:	4602      	mov	r2, r0
 801b216:	460b      	mov	r3, r1
 801b218:	4620      	mov	r0, r4
 801b21a:	4629      	mov	r1, r5
 801b21c:	f7e5 f854 	bl	80002c8 <__aeabi_dsub>
 801b220:	4602      	mov	r2, r0
 801b222:	460b      	mov	r3, r1
 801b224:	4606      	mov	r6, r0
 801b226:	460f      	mov	r7, r1
 801b228:	4620      	mov	r0, r4
 801b22a:	4629      	mov	r1, r5
 801b22c:	f7e5 fa04 	bl	8000638 <__aeabi_dmul>
 801b230:	ec41 0b19 	vmov	d9, r0, r1
 801b234:	f1ba 0f00 	cmp.w	sl, #0
 801b238:	d15d      	bne.n	801b2f6 <__ieee754_exp+0x21e>
 801b23a:	2200      	movs	r2, #0
 801b23c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b240:	4630      	mov	r0, r6
 801b242:	4639      	mov	r1, r7
 801b244:	f7e5 f840 	bl	80002c8 <__aeabi_dsub>
 801b248:	4602      	mov	r2, r0
 801b24a:	460b      	mov	r3, r1
 801b24c:	ec51 0b19 	vmov	r0, r1, d9
 801b250:	f7e5 fb1c 	bl	800088c <__aeabi_ddiv>
 801b254:	4622      	mov	r2, r4
 801b256:	462b      	mov	r3, r5
 801b258:	f7e5 f836 	bl	80002c8 <__aeabi_dsub>
 801b25c:	4602      	mov	r2, r0
 801b25e:	460b      	mov	r3, r1
 801b260:	2000      	movs	r0, #0
 801b262:	4957      	ldr	r1, [pc, #348]	; (801b3c0 <__ieee754_exp+0x2e8>)
 801b264:	f7e5 f830 	bl	80002c8 <__aeabi_dsub>
 801b268:	e753      	b.n	801b112 <__ieee754_exp+0x3a>
 801b26a:	4856      	ldr	r0, [pc, #344]	; (801b3c4 <__ieee754_exp+0x2ec>)
 801b26c:	a348      	add	r3, pc, #288	; (adr r3, 801b390 <__ieee754_exp+0x2b8>)
 801b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b272:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801b276:	4629      	mov	r1, r5
 801b278:	4620      	mov	r0, r4
 801b27a:	f7e5 f9dd 	bl	8000638 <__aeabi_dmul>
 801b27e:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b282:	f7e5 f823 	bl	80002cc <__adddf3>
 801b286:	f7e5 fc87 	bl	8000b98 <__aeabi_d2iz>
 801b28a:	4682      	mov	sl, r0
 801b28c:	f7e5 f96a 	bl	8000564 <__aeabi_i2d>
 801b290:	a341      	add	r3, pc, #260	; (adr r3, 801b398 <__ieee754_exp+0x2c0>)
 801b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b296:	4606      	mov	r6, r0
 801b298:	460f      	mov	r7, r1
 801b29a:	f7e5 f9cd 	bl	8000638 <__aeabi_dmul>
 801b29e:	4602      	mov	r2, r0
 801b2a0:	460b      	mov	r3, r1
 801b2a2:	4620      	mov	r0, r4
 801b2a4:	4629      	mov	r1, r5
 801b2a6:	f7e5 f80f 	bl	80002c8 <__aeabi_dsub>
 801b2aa:	a33d      	add	r3, pc, #244	; (adr r3, 801b3a0 <__ieee754_exp+0x2c8>)
 801b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b0:	4680      	mov	r8, r0
 801b2b2:	4689      	mov	r9, r1
 801b2b4:	4630      	mov	r0, r6
 801b2b6:	4639      	mov	r1, r7
 801b2b8:	f7e5 f9be 	bl	8000638 <__aeabi_dmul>
 801b2bc:	ec41 0b18 	vmov	d8, r0, r1
 801b2c0:	e76f      	b.n	801b1a2 <__ieee754_exp+0xca>
 801b2c2:	4a41      	ldr	r2, [pc, #260]	; (801b3c8 <__ieee754_exp+0x2f0>)
 801b2c4:	4293      	cmp	r3, r2
 801b2c6:	d811      	bhi.n	801b2ec <__ieee754_exp+0x214>
 801b2c8:	a323      	add	r3, pc, #140	; (adr r3, 801b358 <__ieee754_exp+0x280>)
 801b2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ce:	ee10 0a10 	vmov	r0, s0
 801b2d2:	4629      	mov	r1, r5
 801b2d4:	f7e4 fffa 	bl	80002cc <__adddf3>
 801b2d8:	4b39      	ldr	r3, [pc, #228]	; (801b3c0 <__ieee754_exp+0x2e8>)
 801b2da:	2200      	movs	r2, #0
 801b2dc:	f7e5 fc3c 	bl	8000b58 <__aeabi_dcmpgt>
 801b2e0:	b138      	cbz	r0, 801b2f2 <__ieee754_exp+0x21a>
 801b2e2:	4b37      	ldr	r3, [pc, #220]	; (801b3c0 <__ieee754_exp+0x2e8>)
 801b2e4:	2200      	movs	r2, #0
 801b2e6:	4620      	mov	r0, r4
 801b2e8:	4629      	mov	r1, r5
 801b2ea:	e710      	b.n	801b10e <__ieee754_exp+0x36>
 801b2ec:	f04f 0a00 	mov.w	sl, #0
 801b2f0:	e75f      	b.n	801b1b2 <__ieee754_exp+0xda>
 801b2f2:	4682      	mov	sl, r0
 801b2f4:	e75d      	b.n	801b1b2 <__ieee754_exp+0xda>
 801b2f6:	4632      	mov	r2, r6
 801b2f8:	463b      	mov	r3, r7
 801b2fa:	2000      	movs	r0, #0
 801b2fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801b300:	f7e4 ffe2 	bl	80002c8 <__aeabi_dsub>
 801b304:	4602      	mov	r2, r0
 801b306:	460b      	mov	r3, r1
 801b308:	ec51 0b19 	vmov	r0, r1, d9
 801b30c:	f7e5 fabe 	bl	800088c <__aeabi_ddiv>
 801b310:	4602      	mov	r2, r0
 801b312:	460b      	mov	r3, r1
 801b314:	ec51 0b18 	vmov	r0, r1, d8
 801b318:	f7e4 ffd6 	bl	80002c8 <__aeabi_dsub>
 801b31c:	4642      	mov	r2, r8
 801b31e:	464b      	mov	r3, r9
 801b320:	f7e4 ffd2 	bl	80002c8 <__aeabi_dsub>
 801b324:	4602      	mov	r2, r0
 801b326:	460b      	mov	r3, r1
 801b328:	2000      	movs	r0, #0
 801b32a:	4925      	ldr	r1, [pc, #148]	; (801b3c0 <__ieee754_exp+0x2e8>)
 801b32c:	f7e4 ffcc 	bl	80002c8 <__aeabi_dsub>
 801b330:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801b334:	4592      	cmp	sl, r2
 801b336:	db02      	blt.n	801b33e <__ieee754_exp+0x266>
 801b338:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801b33c:	e6e9      	b.n	801b112 <__ieee754_exp+0x3a>
 801b33e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801b342:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801b346:	2200      	movs	r2, #0
 801b348:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801b34c:	e6f9      	b.n	801b142 <__ieee754_exp+0x6a>
 801b34e:	bf00      	nop
 801b350:	fefa39ef 	.word	0xfefa39ef
 801b354:	40862e42 	.word	0x40862e42
 801b358:	8800759c 	.word	0x8800759c
 801b35c:	7e37e43c 	.word	0x7e37e43c
 801b360:	d52d3051 	.word	0xd52d3051
 801b364:	c0874910 	.word	0xc0874910
 801b368:	72bea4d0 	.word	0x72bea4d0
 801b36c:	3e663769 	.word	0x3e663769
 801b370:	c5d26bf1 	.word	0xc5d26bf1
 801b374:	3ebbbd41 	.word	0x3ebbbd41
 801b378:	af25de2c 	.word	0xaf25de2c
 801b37c:	3f11566a 	.word	0x3f11566a
 801b380:	16bebd93 	.word	0x16bebd93
 801b384:	3f66c16c 	.word	0x3f66c16c
 801b388:	5555553e 	.word	0x5555553e
 801b38c:	3fc55555 	.word	0x3fc55555
 801b390:	652b82fe 	.word	0x652b82fe
 801b394:	3ff71547 	.word	0x3ff71547
 801b398:	fee00000 	.word	0xfee00000
 801b39c:	3fe62e42 	.word	0x3fe62e42
 801b3a0:	35793c76 	.word	0x35793c76
 801b3a4:	3dea39ef 	.word	0x3dea39ef
 801b3a8:	40862e41 	.word	0x40862e41
 801b3ac:	7fefffff 	.word	0x7fefffff
 801b3b0:	3fd62e42 	.word	0x3fd62e42
 801b3b4:	3ff0a2b1 	.word	0x3ff0a2b1
 801b3b8:	0801cdd8 	.word	0x0801cdd8
 801b3bc:	0801cde8 	.word	0x0801cde8
 801b3c0:	3ff00000 	.word	0x3ff00000
 801b3c4:	0801cdc8 	.word	0x0801cdc8
 801b3c8:	3e2fffff 	.word	0x3e2fffff

0801b3cc <__ieee754_sqrt>:
 801b3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3d0:	ec55 4b10 	vmov	r4, r5, d0
 801b3d4:	4e56      	ldr	r6, [pc, #344]	; (801b530 <__ieee754_sqrt+0x164>)
 801b3d6:	43ae      	bics	r6, r5
 801b3d8:	ee10 0a10 	vmov	r0, s0
 801b3dc:	ee10 3a10 	vmov	r3, s0
 801b3e0:	4629      	mov	r1, r5
 801b3e2:	462a      	mov	r2, r5
 801b3e4:	d110      	bne.n	801b408 <__ieee754_sqrt+0x3c>
 801b3e6:	ee10 2a10 	vmov	r2, s0
 801b3ea:	462b      	mov	r3, r5
 801b3ec:	f7e5 f924 	bl	8000638 <__aeabi_dmul>
 801b3f0:	4602      	mov	r2, r0
 801b3f2:	460b      	mov	r3, r1
 801b3f4:	4620      	mov	r0, r4
 801b3f6:	4629      	mov	r1, r5
 801b3f8:	f7e4 ff68 	bl	80002cc <__adddf3>
 801b3fc:	4604      	mov	r4, r0
 801b3fe:	460d      	mov	r5, r1
 801b400:	ec45 4b10 	vmov	d0, r4, r5
 801b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b408:	2d00      	cmp	r5, #0
 801b40a:	dc10      	bgt.n	801b42e <__ieee754_sqrt+0x62>
 801b40c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b410:	4330      	orrs	r0, r6
 801b412:	d0f5      	beq.n	801b400 <__ieee754_sqrt+0x34>
 801b414:	b15d      	cbz	r5, 801b42e <__ieee754_sqrt+0x62>
 801b416:	ee10 2a10 	vmov	r2, s0
 801b41a:	462b      	mov	r3, r5
 801b41c:	ee10 0a10 	vmov	r0, s0
 801b420:	f7e4 ff52 	bl	80002c8 <__aeabi_dsub>
 801b424:	4602      	mov	r2, r0
 801b426:	460b      	mov	r3, r1
 801b428:	f7e5 fa30 	bl	800088c <__aeabi_ddiv>
 801b42c:	e7e6      	b.n	801b3fc <__ieee754_sqrt+0x30>
 801b42e:	1509      	asrs	r1, r1, #20
 801b430:	d076      	beq.n	801b520 <__ieee754_sqrt+0x154>
 801b432:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b436:	07ce      	lsls	r6, r1, #31
 801b438:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b43c:	bf5e      	ittt	pl
 801b43e:	0fda      	lsrpl	r2, r3, #31
 801b440:	005b      	lslpl	r3, r3, #1
 801b442:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b446:	0fda      	lsrs	r2, r3, #31
 801b448:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b44c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b450:	2000      	movs	r0, #0
 801b452:	106d      	asrs	r5, r5, #1
 801b454:	005b      	lsls	r3, r3, #1
 801b456:	f04f 0e16 	mov.w	lr, #22
 801b45a:	4684      	mov	ip, r0
 801b45c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b460:	eb0c 0401 	add.w	r4, ip, r1
 801b464:	4294      	cmp	r4, r2
 801b466:	bfde      	ittt	le
 801b468:	1b12      	suble	r2, r2, r4
 801b46a:	eb04 0c01 	addle.w	ip, r4, r1
 801b46e:	1840      	addle	r0, r0, r1
 801b470:	0052      	lsls	r2, r2, #1
 801b472:	f1be 0e01 	subs.w	lr, lr, #1
 801b476:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b47a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b47e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b482:	d1ed      	bne.n	801b460 <__ieee754_sqrt+0x94>
 801b484:	4671      	mov	r1, lr
 801b486:	2720      	movs	r7, #32
 801b488:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b48c:	4562      	cmp	r2, ip
 801b48e:	eb04 060e 	add.w	r6, r4, lr
 801b492:	dc02      	bgt.n	801b49a <__ieee754_sqrt+0xce>
 801b494:	d113      	bne.n	801b4be <__ieee754_sqrt+0xf2>
 801b496:	429e      	cmp	r6, r3
 801b498:	d811      	bhi.n	801b4be <__ieee754_sqrt+0xf2>
 801b49a:	2e00      	cmp	r6, #0
 801b49c:	eb06 0e04 	add.w	lr, r6, r4
 801b4a0:	da43      	bge.n	801b52a <__ieee754_sqrt+0x15e>
 801b4a2:	f1be 0f00 	cmp.w	lr, #0
 801b4a6:	db40      	blt.n	801b52a <__ieee754_sqrt+0x15e>
 801b4a8:	f10c 0801 	add.w	r8, ip, #1
 801b4ac:	eba2 020c 	sub.w	r2, r2, ip
 801b4b0:	429e      	cmp	r6, r3
 801b4b2:	bf88      	it	hi
 801b4b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b4b8:	1b9b      	subs	r3, r3, r6
 801b4ba:	4421      	add	r1, r4
 801b4bc:	46c4      	mov	ip, r8
 801b4be:	0052      	lsls	r2, r2, #1
 801b4c0:	3f01      	subs	r7, #1
 801b4c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b4c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b4ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b4ce:	d1dd      	bne.n	801b48c <__ieee754_sqrt+0xc0>
 801b4d0:	4313      	orrs	r3, r2
 801b4d2:	d006      	beq.n	801b4e2 <__ieee754_sqrt+0x116>
 801b4d4:	1c4c      	adds	r4, r1, #1
 801b4d6:	bf13      	iteet	ne
 801b4d8:	3101      	addne	r1, #1
 801b4da:	3001      	addeq	r0, #1
 801b4dc:	4639      	moveq	r1, r7
 801b4de:	f021 0101 	bicne.w	r1, r1, #1
 801b4e2:	1043      	asrs	r3, r0, #1
 801b4e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b4e8:	0849      	lsrs	r1, r1, #1
 801b4ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b4ee:	07c2      	lsls	r2, r0, #31
 801b4f0:	bf48      	it	mi
 801b4f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b4f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b4fa:	460c      	mov	r4, r1
 801b4fc:	463d      	mov	r5, r7
 801b4fe:	e77f      	b.n	801b400 <__ieee754_sqrt+0x34>
 801b500:	0ada      	lsrs	r2, r3, #11
 801b502:	3815      	subs	r0, #21
 801b504:	055b      	lsls	r3, r3, #21
 801b506:	2a00      	cmp	r2, #0
 801b508:	d0fa      	beq.n	801b500 <__ieee754_sqrt+0x134>
 801b50a:	02d7      	lsls	r7, r2, #11
 801b50c:	d50a      	bpl.n	801b524 <__ieee754_sqrt+0x158>
 801b50e:	f1c1 0420 	rsb	r4, r1, #32
 801b512:	fa23 f404 	lsr.w	r4, r3, r4
 801b516:	1e4d      	subs	r5, r1, #1
 801b518:	408b      	lsls	r3, r1
 801b51a:	4322      	orrs	r2, r4
 801b51c:	1b41      	subs	r1, r0, r5
 801b51e:	e788      	b.n	801b432 <__ieee754_sqrt+0x66>
 801b520:	4608      	mov	r0, r1
 801b522:	e7f0      	b.n	801b506 <__ieee754_sqrt+0x13a>
 801b524:	0052      	lsls	r2, r2, #1
 801b526:	3101      	adds	r1, #1
 801b528:	e7ef      	b.n	801b50a <__ieee754_sqrt+0x13e>
 801b52a:	46e0      	mov	r8, ip
 801b52c:	e7be      	b.n	801b4ac <__ieee754_sqrt+0xe0>
 801b52e:	bf00      	nop
 801b530:	7ff00000 	.word	0x7ff00000

0801b534 <__ieee754_acosf>:
 801b534:	b508      	push	{r3, lr}
 801b536:	ee10 3a10 	vmov	r3, s0
 801b53a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b53e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801b542:	ed2d 8b0c 	vpush	{d8-d13}
 801b546:	d10a      	bne.n	801b55e <__ieee754_acosf+0x2a>
 801b548:	ed9f 0a66 	vldr	s0, [pc, #408]	; 801b6e4 <__ieee754_acosf+0x1b0>
 801b54c:	ed9f 8a66 	vldr	s16, [pc, #408]	; 801b6e8 <__ieee754_acosf+0x1b4>
 801b550:	2b00      	cmp	r3, #0
 801b552:	bfd8      	it	le
 801b554:	eeb0 0a48 	vmovle.f32	s0, s16
 801b558:	ecbd 8b0c 	vpop	{d8-d13}
 801b55c:	bd08      	pop	{r3, pc}
 801b55e:	dd04      	ble.n	801b56a <__ieee754_acosf+0x36>
 801b560:	ee30 8a40 	vsub.f32	s16, s0, s0
 801b564:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801b568:	e7f6      	b.n	801b558 <__ieee754_acosf+0x24>
 801b56a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801b56e:	da3e      	bge.n	801b5ee <__ieee754_acosf+0xba>
 801b570:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801b574:	f340 80b3 	ble.w	801b6de <__ieee754_acosf+0x1aa>
 801b578:	ee60 7a00 	vmul.f32	s15, s0, s0
 801b57c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 801b6ec <__ieee754_acosf+0x1b8>
 801b580:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 801b6f0 <__ieee754_acosf+0x1bc>
 801b584:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801b6f4 <__ieee754_acosf+0x1c0>
 801b588:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 801b6f8 <__ieee754_acosf+0x1c4>
 801b58c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801b590:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801b6fc <__ieee754_acosf+0x1c8>
 801b594:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b598:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801b700 <__ieee754_acosf+0x1cc>
 801b59c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b5a0:	eddf 6a58 	vldr	s13, [pc, #352]	; 801b704 <__ieee754_acosf+0x1d0>
 801b5a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 801b5a8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 801b708 <__ieee754_acosf+0x1d4>
 801b5ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801b5b0:	eddf 6a56 	vldr	s13, [pc, #344]	; 801b70c <__ieee754_acosf+0x1d8>
 801b5b4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801b5b8:	eddf 6a55 	vldr	s13, [pc, #340]	; 801b710 <__ieee754_acosf+0x1dc>
 801b5bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b5c0:	ed9f 6a54 	vldr	s12, [pc, #336]	; 801b714 <__ieee754_acosf+0x1e0>
 801b5c4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801b5c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b5cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b5d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b5d4:	eef0 7a66 	vmov.f32	s15, s13
 801b5d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b5dc:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801b718 <__ieee754_acosf+0x1e4>
 801b5e0:	eea0 8a66 	vfms.f32	s16, s0, s13
 801b5e4:	ee30 0a48 	vsub.f32	s0, s0, s16
 801b5e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b5ec:	e7b4      	b.n	801b558 <__ieee754_acosf+0x24>
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	eddf da3e 	vldr	s27, [pc, #248]	; 801b6ec <__ieee754_acosf+0x1b8>
 801b5f4:	eddf ca3e 	vldr	s25, [pc, #248]	; 801b6f0 <__ieee754_acosf+0x1bc>
 801b5f8:	ed9f ca40 	vldr	s24, [pc, #256]	; 801b6fc <__ieee754_acosf+0x1c8>
 801b5fc:	eddf ba40 	vldr	s23, [pc, #256]	; 801b700 <__ieee754_acosf+0x1cc>
 801b600:	ed9f ba40 	vldr	s22, [pc, #256]	; 801b704 <__ieee754_acosf+0x1d0>
 801b604:	eddf 8a40 	vldr	s17, [pc, #256]	; 801b708 <__ieee754_acosf+0x1d4>
 801b608:	ed9f da40 	vldr	s26, [pc, #256]	; 801b70c <__ieee754_acosf+0x1d8>
 801b60c:	eddf aa39 	vldr	s21, [pc, #228]	; 801b6f4 <__ieee754_acosf+0x1c0>
 801b610:	ed9f aa3f 	vldr	s20, [pc, #252]	; 801b710 <__ieee754_acosf+0x1dc>
 801b614:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801b714 <__ieee754_acosf+0x1e0>
 801b618:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801b61c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b620:	da28      	bge.n	801b674 <__ieee754_acosf+0x140>
 801b622:	ee30 0a09 	vadd.f32	s0, s0, s18
 801b626:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b62a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801b62e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801b632:	eeac ca80 	vfma.f32	s24, s25, s0
 801b636:	eeaa aa80 	vfma.f32	s20, s21, s0
 801b63a:	eeec ba00 	vfma.f32	s23, s24, s0
 801b63e:	eeea 9a00 	vfma.f32	s19, s20, s0
 801b642:	eeab ba80 	vfma.f32	s22, s23, s0
 801b646:	eea9 9a80 	vfma.f32	s18, s19, s0
 801b64a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801b64e:	ee68 8a80 	vmul.f32	s17, s17, s0
 801b652:	f000 f9a5 	bl	801b9a0 <__ieee754_sqrtf>
 801b656:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801b65a:	eddf 7a30 	vldr	s15, [pc, #192]	; 801b71c <__ieee754_acosf+0x1e8>
 801b65e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b662:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801b666:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b66a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801b720 <__ieee754_acosf+0x1ec>
 801b66e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b672:	e771      	b.n	801b558 <__ieee754_acosf+0x24>
 801b674:	ee39 8a40 	vsub.f32	s16, s18, s0
 801b678:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b67c:	eeb0 0a48 	vmov.f32	s0, s16
 801b680:	f000 f98e 	bl	801b9a0 <__ieee754_sqrtf>
 801b684:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801b688:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801b68c:	eeac ca88 	vfma.f32	s24, s25, s16
 801b690:	eeaa aa88 	vfma.f32	s20, s21, s16
 801b694:	eeec ba08 	vfma.f32	s23, s24, s16
 801b698:	ee10 3a10 	vmov	r3, s0
 801b69c:	eeab ba88 	vfma.f32	s22, s23, s16
 801b6a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801b6a4:	f023 030f 	bic.w	r3, r3, #15
 801b6a8:	eeea 9a08 	vfma.f32	s19, s20, s16
 801b6ac:	ee07 3a90 	vmov	s15, r3
 801b6b0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801b6b4:	eeb0 6a48 	vmov.f32	s12, s16
 801b6b8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801b6bc:	eea9 9a88 	vfma.f32	s18, s19, s16
 801b6c0:	ee70 6a27 	vadd.f32	s13, s0, s15
 801b6c4:	ee68 8a88 	vmul.f32	s17, s17, s16
 801b6c8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b6cc:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801b6d0:	eea0 7a26 	vfma.f32	s14, s0, s13
 801b6d4:	ee37 0a87 	vadd.f32	s0, s15, s14
 801b6d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b6dc:	e73c      	b.n	801b558 <__ieee754_acosf+0x24>
 801b6de:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801b724 <__ieee754_acosf+0x1f0>
 801b6e2:	e739      	b.n	801b558 <__ieee754_acosf+0x24>
 801b6e4:	00000000 	.word	0x00000000
 801b6e8:	40490fdb 	.word	0x40490fdb
 801b6ec:	3811ef08 	.word	0x3811ef08
 801b6f0:	3a4f7f04 	.word	0x3a4f7f04
 801b6f4:	bf303361 	.word	0xbf303361
 801b6f8:	33a22168 	.word	0x33a22168
 801b6fc:	bd241146 	.word	0xbd241146
 801b700:	3e4e0aa8 	.word	0x3e4e0aa8
 801b704:	bea6b090 	.word	0xbea6b090
 801b708:	3e2aaaab 	.word	0x3e2aaaab
 801b70c:	3d9dc62e 	.word	0x3d9dc62e
 801b710:	4001572d 	.word	0x4001572d
 801b714:	c019d139 	.word	0xc019d139
 801b718:	3fc90fda 	.word	0x3fc90fda
 801b71c:	b3a22168 	.word	0xb3a22168
 801b720:	40490fda 	.word	0x40490fda
 801b724:	3fc90fdb 	.word	0x3fc90fdb

0801b728 <__ieee754_rem_pio2f>:
 801b728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b72a:	ee10 6a10 	vmov	r6, s0
 801b72e:	4b8e      	ldr	r3, [pc, #568]	; (801b968 <__ieee754_rem_pio2f+0x240>)
 801b730:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801b734:	429d      	cmp	r5, r3
 801b736:	b087      	sub	sp, #28
 801b738:	eef0 7a40 	vmov.f32	s15, s0
 801b73c:	4604      	mov	r4, r0
 801b73e:	dc05      	bgt.n	801b74c <__ieee754_rem_pio2f+0x24>
 801b740:	2300      	movs	r3, #0
 801b742:	ed80 0a00 	vstr	s0, [r0]
 801b746:	6043      	str	r3, [r0, #4]
 801b748:	2000      	movs	r0, #0
 801b74a:	e01a      	b.n	801b782 <__ieee754_rem_pio2f+0x5a>
 801b74c:	4b87      	ldr	r3, [pc, #540]	; (801b96c <__ieee754_rem_pio2f+0x244>)
 801b74e:	429d      	cmp	r5, r3
 801b750:	dc46      	bgt.n	801b7e0 <__ieee754_rem_pio2f+0xb8>
 801b752:	2e00      	cmp	r6, #0
 801b754:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801b970 <__ieee754_rem_pio2f+0x248>
 801b758:	4b86      	ldr	r3, [pc, #536]	; (801b974 <__ieee754_rem_pio2f+0x24c>)
 801b75a:	f025 050f 	bic.w	r5, r5, #15
 801b75e:	dd1f      	ble.n	801b7a0 <__ieee754_rem_pio2f+0x78>
 801b760:	429d      	cmp	r5, r3
 801b762:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b766:	d00e      	beq.n	801b786 <__ieee754_rem_pio2f+0x5e>
 801b768:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801b978 <__ieee754_rem_pio2f+0x250>
 801b76c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801b770:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b774:	ed80 0a00 	vstr	s0, [r0]
 801b778:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b77c:	2001      	movs	r0, #1
 801b77e:	edc4 7a01 	vstr	s15, [r4, #4]
 801b782:	b007      	add	sp, #28
 801b784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b786:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801b97c <__ieee754_rem_pio2f+0x254>
 801b78a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801b980 <__ieee754_rem_pio2f+0x258>
 801b78e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b792:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801b796:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b79a:	edc0 6a00 	vstr	s13, [r0]
 801b79e:	e7eb      	b.n	801b778 <__ieee754_rem_pio2f+0x50>
 801b7a0:	429d      	cmp	r5, r3
 801b7a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b7a6:	d00e      	beq.n	801b7c6 <__ieee754_rem_pio2f+0x9e>
 801b7a8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801b978 <__ieee754_rem_pio2f+0x250>
 801b7ac:	ee37 0a87 	vadd.f32	s0, s15, s14
 801b7b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b7b4:	ed80 0a00 	vstr	s0, [r0]
 801b7b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 801b7c0:	edc4 7a01 	vstr	s15, [r4, #4]
 801b7c4:	e7dd      	b.n	801b782 <__ieee754_rem_pio2f+0x5a>
 801b7c6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801b97c <__ieee754_rem_pio2f+0x254>
 801b7ca:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801b980 <__ieee754_rem_pio2f+0x258>
 801b7ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 801b7d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 801b7d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b7da:	edc0 6a00 	vstr	s13, [r0]
 801b7de:	e7eb      	b.n	801b7b8 <__ieee754_rem_pio2f+0x90>
 801b7e0:	4b68      	ldr	r3, [pc, #416]	; (801b984 <__ieee754_rem_pio2f+0x25c>)
 801b7e2:	429d      	cmp	r5, r3
 801b7e4:	dc72      	bgt.n	801b8cc <__ieee754_rem_pio2f+0x1a4>
 801b7e6:	f000 fea7 	bl	801c538 <fabsf>
 801b7ea:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801b988 <__ieee754_rem_pio2f+0x260>
 801b7ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b7f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b7f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b7fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b7fe:	ee17 0a90 	vmov	r0, s15
 801b802:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801b970 <__ieee754_rem_pio2f+0x248>
 801b806:	eea7 0a67 	vfms.f32	s0, s14, s15
 801b80a:	281f      	cmp	r0, #31
 801b80c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801b978 <__ieee754_rem_pio2f+0x250>
 801b810:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b814:	eeb1 6a47 	vneg.f32	s12, s14
 801b818:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b81c:	ee16 2a90 	vmov	r2, s13
 801b820:	dc1c      	bgt.n	801b85c <__ieee754_rem_pio2f+0x134>
 801b822:	495a      	ldr	r1, [pc, #360]	; (801b98c <__ieee754_rem_pio2f+0x264>)
 801b824:	1e47      	subs	r7, r0, #1
 801b826:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801b82a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801b82e:	428b      	cmp	r3, r1
 801b830:	d014      	beq.n	801b85c <__ieee754_rem_pio2f+0x134>
 801b832:	6022      	str	r2, [r4, #0]
 801b834:	ed94 7a00 	vldr	s14, [r4]
 801b838:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b83c:	2e00      	cmp	r6, #0
 801b83e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b842:	ed84 0a01 	vstr	s0, [r4, #4]
 801b846:	da9c      	bge.n	801b782 <__ieee754_rem_pio2f+0x5a>
 801b848:	eeb1 7a47 	vneg.f32	s14, s14
 801b84c:	eeb1 0a40 	vneg.f32	s0, s0
 801b850:	ed84 7a00 	vstr	s14, [r4]
 801b854:	ed84 0a01 	vstr	s0, [r4, #4]
 801b858:	4240      	negs	r0, r0
 801b85a:	e792      	b.n	801b782 <__ieee754_rem_pio2f+0x5a>
 801b85c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b860:	15eb      	asrs	r3, r5, #23
 801b862:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801b866:	2d08      	cmp	r5, #8
 801b868:	dde3      	ble.n	801b832 <__ieee754_rem_pio2f+0x10a>
 801b86a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801b97c <__ieee754_rem_pio2f+0x254>
 801b86e:	eef0 6a40 	vmov.f32	s13, s0
 801b872:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b876:	ee30 0a66 	vsub.f32	s0, s0, s13
 801b87a:	eea6 0a27 	vfma.f32	s0, s12, s15
 801b87e:	eddf 7a40 	vldr	s15, [pc, #256]	; 801b980 <__ieee754_rem_pio2f+0x258>
 801b882:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801b886:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801b88a:	eef0 7a40 	vmov.f32	s15, s0
 801b88e:	ee15 2a90 	vmov	r2, s11
 801b892:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b896:	1a5b      	subs	r3, r3, r1
 801b898:	2b19      	cmp	r3, #25
 801b89a:	dc04      	bgt.n	801b8a6 <__ieee754_rem_pio2f+0x17e>
 801b89c:	edc4 5a00 	vstr	s11, [r4]
 801b8a0:	eeb0 0a66 	vmov.f32	s0, s13
 801b8a4:	e7c6      	b.n	801b834 <__ieee754_rem_pio2f+0x10c>
 801b8a6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801b990 <__ieee754_rem_pio2f+0x268>
 801b8aa:	eeb0 0a66 	vmov.f32	s0, s13
 801b8ae:	eea6 0a25 	vfma.f32	s0, s12, s11
 801b8b2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801b8b6:	eddf 6a37 	vldr	s13, [pc, #220]	; 801b994 <__ieee754_rem_pio2f+0x26c>
 801b8ba:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b8be:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801b8c2:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b8c6:	ed84 7a00 	vstr	s14, [r4]
 801b8ca:	e7b3      	b.n	801b834 <__ieee754_rem_pio2f+0x10c>
 801b8cc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801b8d0:	db06      	blt.n	801b8e0 <__ieee754_rem_pio2f+0x1b8>
 801b8d2:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b8d6:	edc0 7a01 	vstr	s15, [r0, #4]
 801b8da:	edc0 7a00 	vstr	s15, [r0]
 801b8de:	e733      	b.n	801b748 <__ieee754_rem_pio2f+0x20>
 801b8e0:	15ea      	asrs	r2, r5, #23
 801b8e2:	3a86      	subs	r2, #134	; 0x86
 801b8e4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801b8e8:	ee07 3a90 	vmov	s15, r3
 801b8ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b8f0:	eddf 6a29 	vldr	s13, [pc, #164]	; 801b998 <__ieee754_rem_pio2f+0x270>
 801b8f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b8f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b8fc:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b900:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b904:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b908:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b90c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b910:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b914:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b918:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b920:	edcd 7a05 	vstr	s15, [sp, #20]
 801b924:	d11e      	bne.n	801b964 <__ieee754_rem_pio2f+0x23c>
 801b926:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801b92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b92e:	bf14      	ite	ne
 801b930:	2302      	movne	r3, #2
 801b932:	2301      	moveq	r3, #1
 801b934:	4919      	ldr	r1, [pc, #100]	; (801b99c <__ieee754_rem_pio2f+0x274>)
 801b936:	9101      	str	r1, [sp, #4]
 801b938:	2102      	movs	r1, #2
 801b93a:	9100      	str	r1, [sp, #0]
 801b93c:	a803      	add	r0, sp, #12
 801b93e:	4621      	mov	r1, r4
 801b940:	f000 f892 	bl	801ba68 <__kernel_rem_pio2f>
 801b944:	2e00      	cmp	r6, #0
 801b946:	f6bf af1c 	bge.w	801b782 <__ieee754_rem_pio2f+0x5a>
 801b94a:	edd4 7a00 	vldr	s15, [r4]
 801b94e:	eef1 7a67 	vneg.f32	s15, s15
 801b952:	edc4 7a00 	vstr	s15, [r4]
 801b956:	edd4 7a01 	vldr	s15, [r4, #4]
 801b95a:	eef1 7a67 	vneg.f32	s15, s15
 801b95e:	edc4 7a01 	vstr	s15, [r4, #4]
 801b962:	e779      	b.n	801b858 <__ieee754_rem_pio2f+0x130>
 801b964:	2303      	movs	r3, #3
 801b966:	e7e5      	b.n	801b934 <__ieee754_rem_pio2f+0x20c>
 801b968:	3f490fd8 	.word	0x3f490fd8
 801b96c:	4016cbe3 	.word	0x4016cbe3
 801b970:	3fc90f80 	.word	0x3fc90f80
 801b974:	3fc90fd0 	.word	0x3fc90fd0
 801b978:	37354443 	.word	0x37354443
 801b97c:	37354400 	.word	0x37354400
 801b980:	2e85a308 	.word	0x2e85a308
 801b984:	43490f80 	.word	0x43490f80
 801b988:	3f22f984 	.word	0x3f22f984
 801b98c:	0801cdf8 	.word	0x0801cdf8
 801b990:	2e85a300 	.word	0x2e85a300
 801b994:	248d3132 	.word	0x248d3132
 801b998:	43800000 	.word	0x43800000
 801b99c:	0801ce78 	.word	0x0801ce78

0801b9a0 <__ieee754_sqrtf>:
 801b9a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b9a4:	4770      	bx	lr
	...

0801b9a8 <__kernel_cosf>:
 801b9a8:	ee10 3a10 	vmov	r3, s0
 801b9ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b9b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801b9b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b9b8:	da05      	bge.n	801b9c6 <__kernel_cosf+0x1e>
 801b9ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b9be:	ee17 2a90 	vmov	r2, s15
 801b9c2:	2a00      	cmp	r2, #0
 801b9c4:	d03d      	beq.n	801ba42 <__kernel_cosf+0x9a>
 801b9c6:	ee60 5a00 	vmul.f32	s11, s0, s0
 801b9ca:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801ba48 <__kernel_cosf+0xa0>
 801b9ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801ba4c <__kernel_cosf+0xa4>
 801b9d2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801ba50 <__kernel_cosf+0xa8>
 801b9d6:	4a1f      	ldr	r2, [pc, #124]	; (801ba54 <__kernel_cosf+0xac>)
 801b9d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801b9dc:	4293      	cmp	r3, r2
 801b9de:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801ba58 <__kernel_cosf+0xb0>
 801b9e2:	eee7 7a25 	vfma.f32	s15, s14, s11
 801b9e6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801ba5c <__kernel_cosf+0xb4>
 801b9ea:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801b9ee:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801ba60 <__kernel_cosf+0xb8>
 801b9f2:	eee7 7a25 	vfma.f32	s15, s14, s11
 801b9f6:	eeb0 7a66 	vmov.f32	s14, s13
 801b9fa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801b9fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801ba02:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801ba06:	ee67 6a25 	vmul.f32	s13, s14, s11
 801ba0a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801ba0e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801ba12:	dc04      	bgt.n	801ba1e <__kernel_cosf+0x76>
 801ba14:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801ba18:	ee36 0a47 	vsub.f32	s0, s12, s14
 801ba1c:	4770      	bx	lr
 801ba1e:	4a11      	ldr	r2, [pc, #68]	; (801ba64 <__kernel_cosf+0xbc>)
 801ba20:	4293      	cmp	r3, r2
 801ba22:	bfda      	itte	le
 801ba24:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801ba28:	ee06 3a90 	vmovle	s13, r3
 801ba2c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801ba30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ba34:	ee36 0a66 	vsub.f32	s0, s12, s13
 801ba38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ba3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ba40:	4770      	bx	lr
 801ba42:	eeb0 0a46 	vmov.f32	s0, s12
 801ba46:	4770      	bx	lr
 801ba48:	ad47d74e 	.word	0xad47d74e
 801ba4c:	310f74f6 	.word	0x310f74f6
 801ba50:	3d2aaaab 	.word	0x3d2aaaab
 801ba54:	3e999999 	.word	0x3e999999
 801ba58:	b493f27c 	.word	0xb493f27c
 801ba5c:	37d00d01 	.word	0x37d00d01
 801ba60:	bab60b61 	.word	0xbab60b61
 801ba64:	3f480000 	.word	0x3f480000

0801ba68 <__kernel_rem_pio2f>:
 801ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba6c:	ed2d 8b04 	vpush	{d8-d9}
 801ba70:	b0d7      	sub	sp, #348	; 0x15c
 801ba72:	4616      	mov	r6, r2
 801ba74:	4698      	mov	r8, r3
 801ba76:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801ba78:	4bbb      	ldr	r3, [pc, #748]	; (801bd68 <__kernel_rem_pio2f+0x300>)
 801ba7a:	9001      	str	r0, [sp, #4]
 801ba7c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801ba80:	1d33      	adds	r3, r6, #4
 801ba82:	460d      	mov	r5, r1
 801ba84:	f108 39ff 	add.w	r9, r8, #4294967295
 801ba88:	db29      	blt.n	801bade <__kernel_rem_pio2f+0x76>
 801ba8a:	1ef1      	subs	r1, r6, #3
 801ba8c:	bf48      	it	mi
 801ba8e:	1d31      	addmi	r1, r6, #4
 801ba90:	10c9      	asrs	r1, r1, #3
 801ba92:	1c4c      	adds	r4, r1, #1
 801ba94:	00e3      	lsls	r3, r4, #3
 801ba96:	9302      	str	r3, [sp, #8]
 801ba98:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801ba9a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801bd78 <__kernel_rem_pio2f+0x310>
 801ba9e:	eba1 0009 	sub.w	r0, r1, r9
 801baa2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801baa6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801baaa:	eb07 0c09 	add.w	ip, r7, r9
 801baae:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801bab2:	2300      	movs	r3, #0
 801bab4:	4563      	cmp	r3, ip
 801bab6:	dd14      	ble.n	801bae2 <__kernel_rem_pio2f+0x7a>
 801bab8:	ab1a      	add	r3, sp, #104	; 0x68
 801baba:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801babe:	46cc      	mov	ip, r9
 801bac0:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801bac4:	f1c8 0b01 	rsb	fp, r8, #1
 801bac8:	eb0b 020c 	add.w	r2, fp, ip
 801bacc:	4297      	cmp	r7, r2
 801bace:	db27      	blt.n	801bb20 <__kernel_rem_pio2f+0xb8>
 801bad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 801bad4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801bd78 <__kernel_rem_pio2f+0x310>
 801bad8:	4618      	mov	r0, r3
 801bada:	2200      	movs	r2, #0
 801badc:	e016      	b.n	801bb0c <__kernel_rem_pio2f+0xa4>
 801bade:	2100      	movs	r1, #0
 801bae0:	e7d7      	b.n	801ba92 <__kernel_rem_pio2f+0x2a>
 801bae2:	42d8      	cmn	r0, r3
 801bae4:	bf5d      	ittte	pl
 801bae6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801baea:	ee07 2a90 	vmovpl	s15, r2
 801baee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801baf2:	eef0 7a47 	vmovmi.f32	s15, s14
 801baf6:	ecea 7a01 	vstmia	sl!, {s15}
 801bafa:	3301      	adds	r3, #1
 801bafc:	e7da      	b.n	801bab4 <__kernel_rem_pio2f+0x4c>
 801bafe:	ecfe 6a01 	vldmia	lr!, {s13}
 801bb02:	ed90 7a00 	vldr	s14, [r0]
 801bb06:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bb0a:	3201      	adds	r2, #1
 801bb0c:	454a      	cmp	r2, r9
 801bb0e:	f1a0 0004 	sub.w	r0, r0, #4
 801bb12:	ddf4      	ble.n	801bafe <__kernel_rem_pio2f+0x96>
 801bb14:	ecea 7a01 	vstmia	sl!, {s15}
 801bb18:	3304      	adds	r3, #4
 801bb1a:	f10c 0c01 	add.w	ip, ip, #1
 801bb1e:	e7d3      	b.n	801bac8 <__kernel_rem_pio2f+0x60>
 801bb20:	ab06      	add	r3, sp, #24
 801bb22:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801bb26:	9304      	str	r3, [sp, #16]
 801bb28:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801bb2a:	eddf 8a92 	vldr	s17, [pc, #584]	; 801bd74 <__kernel_rem_pio2f+0x30c>
 801bb2e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801bd70 <__kernel_rem_pio2f+0x308>
 801bb32:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801bb36:	9303      	str	r3, [sp, #12]
 801bb38:	46ba      	mov	sl, r7
 801bb3a:	ab56      	add	r3, sp, #344	; 0x158
 801bb3c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801bb40:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801bb44:	ab06      	add	r3, sp, #24
 801bb46:	4618      	mov	r0, r3
 801bb48:	4652      	mov	r2, sl
 801bb4a:	2a00      	cmp	r2, #0
 801bb4c:	dc51      	bgt.n	801bbf2 <__kernel_rem_pio2f+0x18a>
 801bb4e:	4620      	mov	r0, r4
 801bb50:	9305      	str	r3, [sp, #20]
 801bb52:	f000 fd3b 	bl	801c5cc <scalbnf>
 801bb56:	eeb0 8a40 	vmov.f32	s16, s0
 801bb5a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801bb5e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801bb62:	f000 fcf1 	bl	801c548 <floorf>
 801bb66:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801bb6a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801bb6e:	2c00      	cmp	r4, #0
 801bb70:	9b05      	ldr	r3, [sp, #20]
 801bb72:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801bb76:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801bb7a:	edcd 7a00 	vstr	s15, [sp]
 801bb7e:	ee38 8a40 	vsub.f32	s16, s16, s0
 801bb82:	dd4b      	ble.n	801bc1c <__kernel_rem_pio2f+0x1b4>
 801bb84:	f10a 3cff 	add.w	ip, sl, #4294967295
 801bb88:	aa06      	add	r2, sp, #24
 801bb8a:	f1c4 0e08 	rsb	lr, r4, #8
 801bb8e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801bb92:	ee17 1a90 	vmov	r1, s15
 801bb96:	fa42 f00e 	asr.w	r0, r2, lr
 801bb9a:	4401      	add	r1, r0
 801bb9c:	9100      	str	r1, [sp, #0]
 801bb9e:	fa00 f00e 	lsl.w	r0, r0, lr
 801bba2:	a906      	add	r1, sp, #24
 801bba4:	1a12      	subs	r2, r2, r0
 801bba6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801bbaa:	f1c4 0007 	rsb	r0, r4, #7
 801bbae:	fa42 fb00 	asr.w	fp, r2, r0
 801bbb2:	f1bb 0f00 	cmp.w	fp, #0
 801bbb6:	dd43      	ble.n	801bc40 <__kernel_rem_pio2f+0x1d8>
 801bbb8:	9a00      	ldr	r2, [sp, #0]
 801bbba:	f04f 0e00 	mov.w	lr, #0
 801bbbe:	3201      	adds	r2, #1
 801bbc0:	9200      	str	r2, [sp, #0]
 801bbc2:	4670      	mov	r0, lr
 801bbc4:	45f2      	cmp	sl, lr
 801bbc6:	dc6c      	bgt.n	801bca2 <__kernel_rem_pio2f+0x23a>
 801bbc8:	2c00      	cmp	r4, #0
 801bbca:	dd04      	ble.n	801bbd6 <__kernel_rem_pio2f+0x16e>
 801bbcc:	2c01      	cmp	r4, #1
 801bbce:	d079      	beq.n	801bcc4 <__kernel_rem_pio2f+0x25c>
 801bbd0:	2c02      	cmp	r4, #2
 801bbd2:	f000 8082 	beq.w	801bcda <__kernel_rem_pio2f+0x272>
 801bbd6:	f1bb 0f02 	cmp.w	fp, #2
 801bbda:	d131      	bne.n	801bc40 <__kernel_rem_pio2f+0x1d8>
 801bbdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801bbe0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801bbe4:	b360      	cbz	r0, 801bc40 <__kernel_rem_pio2f+0x1d8>
 801bbe6:	4620      	mov	r0, r4
 801bbe8:	f000 fcf0 	bl	801c5cc <scalbnf>
 801bbec:	ee38 8a40 	vsub.f32	s16, s16, s0
 801bbf0:	e026      	b.n	801bc40 <__kernel_rem_pio2f+0x1d8>
 801bbf2:	ee60 7a28 	vmul.f32	s15, s0, s17
 801bbf6:	3a01      	subs	r2, #1
 801bbf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bbfc:	a942      	add	r1, sp, #264	; 0x108
 801bbfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc02:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801bc06:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801bc0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bc0e:	eca0 0a01 	vstmia	r0!, {s0}
 801bc12:	ed9c 0a00 	vldr	s0, [ip]
 801bc16:	ee37 0a80 	vadd.f32	s0, s15, s0
 801bc1a:	e796      	b.n	801bb4a <__kernel_rem_pio2f+0xe2>
 801bc1c:	d107      	bne.n	801bc2e <__kernel_rem_pio2f+0x1c6>
 801bc1e:	f10a 32ff 	add.w	r2, sl, #4294967295
 801bc22:	a906      	add	r1, sp, #24
 801bc24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801bc28:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801bc2c:	e7c1      	b.n	801bbb2 <__kernel_rem_pio2f+0x14a>
 801bc2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bc32:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc3a:	da2f      	bge.n	801bc9c <__kernel_rem_pio2f+0x234>
 801bc3c:	f04f 0b00 	mov.w	fp, #0
 801bc40:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801bc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc48:	f040 8098 	bne.w	801bd7c <__kernel_rem_pio2f+0x314>
 801bc4c:	f10a 33ff 	add.w	r3, sl, #4294967295
 801bc50:	469c      	mov	ip, r3
 801bc52:	2200      	movs	r2, #0
 801bc54:	45bc      	cmp	ip, r7
 801bc56:	da48      	bge.n	801bcea <__kernel_rem_pio2f+0x282>
 801bc58:	2a00      	cmp	r2, #0
 801bc5a:	d05f      	beq.n	801bd1c <__kernel_rem_pio2f+0x2b4>
 801bc5c:	aa06      	add	r2, sp, #24
 801bc5e:	3c08      	subs	r4, #8
 801bc60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801bc64:	2900      	cmp	r1, #0
 801bc66:	d07d      	beq.n	801bd64 <__kernel_rem_pio2f+0x2fc>
 801bc68:	4620      	mov	r0, r4
 801bc6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801bc6e:	9301      	str	r3, [sp, #4]
 801bc70:	f000 fcac 	bl	801c5cc <scalbnf>
 801bc74:	9b01      	ldr	r3, [sp, #4]
 801bc76:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801bd74 <__kernel_rem_pio2f+0x30c>
 801bc7a:	4619      	mov	r1, r3
 801bc7c:	2900      	cmp	r1, #0
 801bc7e:	f280 80af 	bge.w	801bde0 <__kernel_rem_pio2f+0x378>
 801bc82:	4618      	mov	r0, r3
 801bc84:	2400      	movs	r4, #0
 801bc86:	2800      	cmp	r0, #0
 801bc88:	f2c0 80d0 	blt.w	801be2c <__kernel_rem_pio2f+0x3c4>
 801bc8c:	a942      	add	r1, sp, #264	; 0x108
 801bc8e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801bc92:	4a36      	ldr	r2, [pc, #216]	; (801bd6c <__kernel_rem_pio2f+0x304>)
 801bc94:	eddf 7a38 	vldr	s15, [pc, #224]	; 801bd78 <__kernel_rem_pio2f+0x310>
 801bc98:	2100      	movs	r1, #0
 801bc9a:	e0bb      	b.n	801be14 <__kernel_rem_pio2f+0x3ac>
 801bc9c:	f04f 0b02 	mov.w	fp, #2
 801bca0:	e78a      	b.n	801bbb8 <__kernel_rem_pio2f+0x150>
 801bca2:	681a      	ldr	r2, [r3, #0]
 801bca4:	b948      	cbnz	r0, 801bcba <__kernel_rem_pio2f+0x252>
 801bca6:	b11a      	cbz	r2, 801bcb0 <__kernel_rem_pio2f+0x248>
 801bca8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801bcac:	601a      	str	r2, [r3, #0]
 801bcae:	2201      	movs	r2, #1
 801bcb0:	f10e 0e01 	add.w	lr, lr, #1
 801bcb4:	3304      	adds	r3, #4
 801bcb6:	4610      	mov	r0, r2
 801bcb8:	e784      	b.n	801bbc4 <__kernel_rem_pio2f+0x15c>
 801bcba:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801bcbe:	601a      	str	r2, [r3, #0]
 801bcc0:	4602      	mov	r2, r0
 801bcc2:	e7f5      	b.n	801bcb0 <__kernel_rem_pio2f+0x248>
 801bcc4:	f10a 3cff 	add.w	ip, sl, #4294967295
 801bcc8:	ab06      	add	r3, sp, #24
 801bcca:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bcce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bcd2:	aa06      	add	r2, sp, #24
 801bcd4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801bcd8:	e77d      	b.n	801bbd6 <__kernel_rem_pio2f+0x16e>
 801bcda:	f10a 3cff 	add.w	ip, sl, #4294967295
 801bcde:	ab06      	add	r3, sp, #24
 801bce0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bce8:	e7f3      	b.n	801bcd2 <__kernel_rem_pio2f+0x26a>
 801bcea:	a906      	add	r1, sp, #24
 801bcec:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801bcf0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bcf4:	4302      	orrs	r2, r0
 801bcf6:	e7ad      	b.n	801bc54 <__kernel_rem_pio2f+0x1ec>
 801bcf8:	3001      	adds	r0, #1
 801bcfa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801bcfe:	2a00      	cmp	r2, #0
 801bd00:	d0fa      	beq.n	801bcf8 <__kernel_rem_pio2f+0x290>
 801bd02:	a91a      	add	r1, sp, #104	; 0x68
 801bd04:	eb0a 0208 	add.w	r2, sl, r8
 801bd08:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801bd0c:	f10a 0301 	add.w	r3, sl, #1
 801bd10:	eb0a 0100 	add.w	r1, sl, r0
 801bd14:	4299      	cmp	r1, r3
 801bd16:	da04      	bge.n	801bd22 <__kernel_rem_pio2f+0x2ba>
 801bd18:	468a      	mov	sl, r1
 801bd1a:	e70e      	b.n	801bb3a <__kernel_rem_pio2f+0xd2>
 801bd1c:	9b04      	ldr	r3, [sp, #16]
 801bd1e:	2001      	movs	r0, #1
 801bd20:	e7eb      	b.n	801bcfa <__kernel_rem_pio2f+0x292>
 801bd22:	9803      	ldr	r0, [sp, #12]
 801bd24:	f8dd c004 	ldr.w	ip, [sp, #4]
 801bd28:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801bd2c:	9000      	str	r0, [sp, #0]
 801bd2e:	ee07 0a90 	vmov	s15, r0
 801bd32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd36:	2000      	movs	r0, #0
 801bd38:	ece2 7a01 	vstmia	r2!, {s15}
 801bd3c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801bd78 <__kernel_rem_pio2f+0x310>
 801bd40:	4696      	mov	lr, r2
 801bd42:	4548      	cmp	r0, r9
 801bd44:	dd06      	ble.n	801bd54 <__kernel_rem_pio2f+0x2ec>
 801bd46:	a842      	add	r0, sp, #264	; 0x108
 801bd48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801bd4c:	edc0 7a00 	vstr	s15, [r0]
 801bd50:	3301      	adds	r3, #1
 801bd52:	e7df      	b.n	801bd14 <__kernel_rem_pio2f+0x2ac>
 801bd54:	ecfc 6a01 	vldmia	ip!, {s13}
 801bd58:	ed3e 7a01 	vldmdb	lr!, {s14}
 801bd5c:	3001      	adds	r0, #1
 801bd5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bd62:	e7ee      	b.n	801bd42 <__kernel_rem_pio2f+0x2da>
 801bd64:	3b01      	subs	r3, #1
 801bd66:	e779      	b.n	801bc5c <__kernel_rem_pio2f+0x1f4>
 801bd68:	0801d1bc 	.word	0x0801d1bc
 801bd6c:	0801d190 	.word	0x0801d190
 801bd70:	43800000 	.word	0x43800000
 801bd74:	3b800000 	.word	0x3b800000
 801bd78:	00000000 	.word	0x00000000
 801bd7c:	9b02      	ldr	r3, [sp, #8]
 801bd7e:	eeb0 0a48 	vmov.f32	s0, s16
 801bd82:	1b98      	subs	r0, r3, r6
 801bd84:	f000 fc22 	bl	801c5cc <scalbnf>
 801bd88:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801bd70 <__kernel_rem_pio2f+0x308>
 801bd8c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801bd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd94:	db1b      	blt.n	801bdce <__kernel_rem_pio2f+0x366>
 801bd96:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801bd74 <__kernel_rem_pio2f+0x30c>
 801bd9a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801bd9e:	aa06      	add	r2, sp, #24
 801bda0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bda4:	a906      	add	r1, sp, #24
 801bda6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bdaa:	3408      	adds	r4, #8
 801bdac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801bdb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bdb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bdb8:	ee10 3a10 	vmov	r3, s0
 801bdbc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801bdc0:	ee17 2a90 	vmov	r2, s15
 801bdc4:	f10a 0301 	add.w	r3, sl, #1
 801bdc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801bdcc:	e74c      	b.n	801bc68 <__kernel_rem_pio2f+0x200>
 801bdce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bdd2:	aa06      	add	r2, sp, #24
 801bdd4:	ee10 3a10 	vmov	r3, s0
 801bdd8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801bddc:	4653      	mov	r3, sl
 801bdde:	e743      	b.n	801bc68 <__kernel_rem_pio2f+0x200>
 801bde0:	aa42      	add	r2, sp, #264	; 0x108
 801bde2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801bde6:	aa06      	add	r2, sp, #24
 801bde8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801bdec:	9201      	str	r2, [sp, #4]
 801bdee:	ee07 2a90 	vmov	s15, r2
 801bdf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bdf6:	3901      	subs	r1, #1
 801bdf8:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bdfc:	ee20 0a07 	vmul.f32	s0, s0, s14
 801be00:	edc0 7a00 	vstr	s15, [r0]
 801be04:	e73a      	b.n	801bc7c <__kernel_rem_pio2f+0x214>
 801be06:	ecf2 6a01 	vldmia	r2!, {s13}
 801be0a:	ecb6 7a01 	vldmia	r6!, {s14}
 801be0e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801be12:	3101      	adds	r1, #1
 801be14:	42b9      	cmp	r1, r7
 801be16:	dc01      	bgt.n	801be1c <__kernel_rem_pio2f+0x3b4>
 801be18:	428c      	cmp	r4, r1
 801be1a:	daf4      	bge.n	801be06 <__kernel_rem_pio2f+0x39e>
 801be1c:	aa56      	add	r2, sp, #344	; 0x158
 801be1e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801be22:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801be26:	3801      	subs	r0, #1
 801be28:	3401      	adds	r4, #1
 801be2a:	e72c      	b.n	801bc86 <__kernel_rem_pio2f+0x21e>
 801be2c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801be2e:	2a02      	cmp	r2, #2
 801be30:	dc0a      	bgt.n	801be48 <__kernel_rem_pio2f+0x3e0>
 801be32:	2a00      	cmp	r2, #0
 801be34:	dc61      	bgt.n	801befa <__kernel_rem_pio2f+0x492>
 801be36:	d03c      	beq.n	801beb2 <__kernel_rem_pio2f+0x44a>
 801be38:	9b00      	ldr	r3, [sp, #0]
 801be3a:	f003 0007 	and.w	r0, r3, #7
 801be3e:	b057      	add	sp, #348	; 0x15c
 801be40:	ecbd 8b04 	vpop	{d8-d9}
 801be44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be48:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801be4a:	2a03      	cmp	r2, #3
 801be4c:	d1f4      	bne.n	801be38 <__kernel_rem_pio2f+0x3d0>
 801be4e:	aa2e      	add	r2, sp, #184	; 0xb8
 801be50:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801be54:	4608      	mov	r0, r1
 801be56:	461c      	mov	r4, r3
 801be58:	2c00      	cmp	r4, #0
 801be5a:	f1a0 0004 	sub.w	r0, r0, #4
 801be5e:	dc59      	bgt.n	801bf14 <__kernel_rem_pio2f+0x4ac>
 801be60:	4618      	mov	r0, r3
 801be62:	2801      	cmp	r0, #1
 801be64:	f1a1 0104 	sub.w	r1, r1, #4
 801be68:	dc64      	bgt.n	801bf34 <__kernel_rem_pio2f+0x4cc>
 801be6a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801bd78 <__kernel_rem_pio2f+0x310>
 801be6e:	2b01      	cmp	r3, #1
 801be70:	dc70      	bgt.n	801bf54 <__kernel_rem_pio2f+0x4ec>
 801be72:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801be76:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801be7a:	f1bb 0f00 	cmp.w	fp, #0
 801be7e:	d172      	bne.n	801bf66 <__kernel_rem_pio2f+0x4fe>
 801be80:	edc5 6a00 	vstr	s13, [r5]
 801be84:	ed85 7a01 	vstr	s14, [r5, #4]
 801be88:	edc5 7a02 	vstr	s15, [r5, #8]
 801be8c:	e7d4      	b.n	801be38 <__kernel_rem_pio2f+0x3d0>
 801be8e:	aa2e      	add	r2, sp, #184	; 0xb8
 801be90:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801be94:	ed91 7a00 	vldr	s14, [r1]
 801be98:	ee77 7a87 	vadd.f32	s15, s15, s14
 801be9c:	3b01      	subs	r3, #1
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	daf5      	bge.n	801be8e <__kernel_rem_pio2f+0x426>
 801bea2:	f1bb 0f00 	cmp.w	fp, #0
 801bea6:	d001      	beq.n	801beac <__kernel_rem_pio2f+0x444>
 801bea8:	eef1 7a67 	vneg.f32	s15, s15
 801beac:	edc5 7a00 	vstr	s15, [r5]
 801beb0:	e7c2      	b.n	801be38 <__kernel_rem_pio2f+0x3d0>
 801beb2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801bd78 <__kernel_rem_pio2f+0x310>
 801beb6:	e7f2      	b.n	801be9e <__kernel_rem_pio2f+0x436>
 801beb8:	aa2e      	add	r2, sp, #184	; 0xb8
 801beba:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801bebe:	edd0 7a00 	vldr	s15, [r0]
 801bec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bec6:	3901      	subs	r1, #1
 801bec8:	2900      	cmp	r1, #0
 801beca:	daf5      	bge.n	801beb8 <__kernel_rem_pio2f+0x450>
 801becc:	f1bb 0f00 	cmp.w	fp, #0
 801bed0:	d017      	beq.n	801bf02 <__kernel_rem_pio2f+0x49a>
 801bed2:	eef1 7a47 	vneg.f32	s15, s14
 801bed6:	edc5 7a00 	vstr	s15, [r5]
 801beda:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801bede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bee2:	a82f      	add	r0, sp, #188	; 0xbc
 801bee4:	2101      	movs	r1, #1
 801bee6:	428b      	cmp	r3, r1
 801bee8:	da0e      	bge.n	801bf08 <__kernel_rem_pio2f+0x4a0>
 801beea:	f1bb 0f00 	cmp.w	fp, #0
 801beee:	d001      	beq.n	801bef4 <__kernel_rem_pio2f+0x48c>
 801bef0:	eef1 7a67 	vneg.f32	s15, s15
 801bef4:	edc5 7a01 	vstr	s15, [r5, #4]
 801bef8:	e79e      	b.n	801be38 <__kernel_rem_pio2f+0x3d0>
 801befa:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801bd78 <__kernel_rem_pio2f+0x310>
 801befe:	4619      	mov	r1, r3
 801bf00:	e7e2      	b.n	801bec8 <__kernel_rem_pio2f+0x460>
 801bf02:	eef0 7a47 	vmov.f32	s15, s14
 801bf06:	e7e6      	b.n	801bed6 <__kernel_rem_pio2f+0x46e>
 801bf08:	ecb0 7a01 	vldmia	r0!, {s14}
 801bf0c:	3101      	adds	r1, #1
 801bf0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bf12:	e7e8      	b.n	801bee6 <__kernel_rem_pio2f+0x47e>
 801bf14:	edd0 7a00 	vldr	s15, [r0]
 801bf18:	edd0 6a01 	vldr	s13, [r0, #4]
 801bf1c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bf20:	3c01      	subs	r4, #1
 801bf22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bf26:	ed80 7a00 	vstr	s14, [r0]
 801bf2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bf2e:	edc0 7a01 	vstr	s15, [r0, #4]
 801bf32:	e791      	b.n	801be58 <__kernel_rem_pio2f+0x3f0>
 801bf34:	edd1 7a00 	vldr	s15, [r1]
 801bf38:	edd1 6a01 	vldr	s13, [r1, #4]
 801bf3c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bf40:	3801      	subs	r0, #1
 801bf42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bf46:	ed81 7a00 	vstr	s14, [r1]
 801bf4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bf4e:	edc1 7a01 	vstr	s15, [r1, #4]
 801bf52:	e786      	b.n	801be62 <__kernel_rem_pio2f+0x3fa>
 801bf54:	aa2e      	add	r2, sp, #184	; 0xb8
 801bf56:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801bf5a:	ed91 7a00 	vldr	s14, [r1]
 801bf5e:	3b01      	subs	r3, #1
 801bf60:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bf64:	e783      	b.n	801be6e <__kernel_rem_pio2f+0x406>
 801bf66:	eef1 6a66 	vneg.f32	s13, s13
 801bf6a:	eeb1 7a47 	vneg.f32	s14, s14
 801bf6e:	edc5 6a00 	vstr	s13, [r5]
 801bf72:	ed85 7a01 	vstr	s14, [r5, #4]
 801bf76:	eef1 7a67 	vneg.f32	s15, s15
 801bf7a:	e785      	b.n	801be88 <__kernel_rem_pio2f+0x420>

0801bf7c <__kernel_sinf>:
 801bf7c:	ee10 3a10 	vmov	r3, s0
 801bf80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bf84:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801bf88:	da04      	bge.n	801bf94 <__kernel_sinf+0x18>
 801bf8a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801bf8e:	ee17 3a90 	vmov	r3, s15
 801bf92:	b35b      	cbz	r3, 801bfec <__kernel_sinf+0x70>
 801bf94:	ee20 7a00 	vmul.f32	s14, s0, s0
 801bf98:	eddf 7a15 	vldr	s15, [pc, #84]	; 801bff0 <__kernel_sinf+0x74>
 801bf9c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801bff4 <__kernel_sinf+0x78>
 801bfa0:	eea7 6a27 	vfma.f32	s12, s14, s15
 801bfa4:	eddf 7a14 	vldr	s15, [pc, #80]	; 801bff8 <__kernel_sinf+0x7c>
 801bfa8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bfac:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801bffc <__kernel_sinf+0x80>
 801bfb0:	eea7 6a87 	vfma.f32	s12, s15, s14
 801bfb4:	eddf 7a12 	vldr	s15, [pc, #72]	; 801c000 <__kernel_sinf+0x84>
 801bfb8:	ee60 6a07 	vmul.f32	s13, s0, s14
 801bfbc:	eee6 7a07 	vfma.f32	s15, s12, s14
 801bfc0:	b930      	cbnz	r0, 801bfd0 <__kernel_sinf+0x54>
 801bfc2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801c004 <__kernel_sinf+0x88>
 801bfc6:	eea7 6a27 	vfma.f32	s12, s14, s15
 801bfca:	eea6 0a26 	vfma.f32	s0, s12, s13
 801bfce:	4770      	bx	lr
 801bfd0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801bfd4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801bfd8:	eee0 7a86 	vfma.f32	s15, s1, s12
 801bfdc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801bfe0:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c008 <__kernel_sinf+0x8c>
 801bfe4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801bfe8:	ee30 0a60 	vsub.f32	s0, s0, s1
 801bfec:	4770      	bx	lr
 801bfee:	bf00      	nop
 801bff0:	2f2ec9d3 	.word	0x2f2ec9d3
 801bff4:	b2d72f34 	.word	0xb2d72f34
 801bff8:	3638ef1b 	.word	0x3638ef1b
 801bffc:	b9500d01 	.word	0xb9500d01
 801c000:	3c088889 	.word	0x3c088889
 801c004:	be2aaaab 	.word	0xbe2aaaab
 801c008:	3e2aaaab 	.word	0x3e2aaaab

0801c00c <__kernel_tanf>:
 801c00c:	b508      	push	{r3, lr}
 801c00e:	ee10 3a10 	vmov	r3, s0
 801c012:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c016:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801c01a:	eef0 7a40 	vmov.f32	s15, s0
 801c01e:	da17      	bge.n	801c050 <__kernel_tanf+0x44>
 801c020:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801c024:	ee17 1a10 	vmov	r1, s14
 801c028:	bb41      	cbnz	r1, 801c07c <__kernel_tanf+0x70>
 801c02a:	1c43      	adds	r3, r0, #1
 801c02c:	4313      	orrs	r3, r2
 801c02e:	d108      	bne.n	801c042 <__kernel_tanf+0x36>
 801c030:	f000 fa82 	bl	801c538 <fabsf>
 801c034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c038:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c03c:	eeb0 0a67 	vmov.f32	s0, s15
 801c040:	bd08      	pop	{r3, pc}
 801c042:	2801      	cmp	r0, #1
 801c044:	d0fa      	beq.n	801c03c <__kernel_tanf+0x30>
 801c046:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801c04a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c04e:	e7f5      	b.n	801c03c <__kernel_tanf+0x30>
 801c050:	494d      	ldr	r1, [pc, #308]	; (801c188 <__kernel_tanf+0x17c>)
 801c052:	428a      	cmp	r2, r1
 801c054:	db12      	blt.n	801c07c <__kernel_tanf+0x70>
 801c056:	2b00      	cmp	r3, #0
 801c058:	bfb8      	it	lt
 801c05a:	eef1 7a40 	vneglt.f32	s15, s0
 801c05e:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 801c18c <__kernel_tanf+0x180>
 801c062:	ee70 7a67 	vsub.f32	s15, s0, s15
 801c066:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801c190 <__kernel_tanf+0x184>
 801c06a:	bfb8      	it	lt
 801c06c:	eef1 0a60 	vneglt.f32	s1, s1
 801c070:	ee70 0a60 	vsub.f32	s1, s0, s1
 801c074:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801c078:	eddf 0a46 	vldr	s1, [pc, #280]	; 801c194 <__kernel_tanf+0x188>
 801c07c:	eddf 5a46 	vldr	s11, [pc, #280]	; 801c198 <__kernel_tanf+0x18c>
 801c080:	ed9f 6a46 	vldr	s12, [pc, #280]	; 801c19c <__kernel_tanf+0x190>
 801c084:	ed9f 5a46 	vldr	s10, [pc, #280]	; 801c1a0 <__kernel_tanf+0x194>
 801c088:	493f      	ldr	r1, [pc, #252]	; (801c188 <__kernel_tanf+0x17c>)
 801c08a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801c08e:	428a      	cmp	r2, r1
 801c090:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801c094:	eea7 6a25 	vfma.f32	s12, s14, s11
 801c098:	eddf 5a42 	vldr	s11, [pc, #264]	; 801c1a4 <__kernel_tanf+0x198>
 801c09c:	eee6 5a07 	vfma.f32	s11, s12, s14
 801c0a0:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801c1a8 <__kernel_tanf+0x19c>
 801c0a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c0a8:	eddf 5a40 	vldr	s11, [pc, #256]	; 801c1ac <__kernel_tanf+0x1a0>
 801c0ac:	eee6 5a07 	vfma.f32	s11, s12, s14
 801c0b0:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801c1b0 <__kernel_tanf+0x1a4>
 801c0b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c0b8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801c1b4 <__kernel_tanf+0x1a8>
 801c0bc:	eee7 5a05 	vfma.f32	s11, s14, s10
 801c0c0:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801c1b8 <__kernel_tanf+0x1ac>
 801c0c4:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c0c8:	eddf 5a3c 	vldr	s11, [pc, #240]	; 801c1bc <__kernel_tanf+0x1b0>
 801c0cc:	eee5 5a07 	vfma.f32	s11, s10, s14
 801c0d0:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801c1c0 <__kernel_tanf+0x1b4>
 801c0d4:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c0d8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801c1c4 <__kernel_tanf+0x1b8>
 801c0dc:	eee5 5a07 	vfma.f32	s11, s10, s14
 801c0e0:	eeb0 7a65 	vmov.f32	s14, s11
 801c0e4:	eea7 6a26 	vfma.f32	s12, s14, s13
 801c0e8:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801c0ec:	eeb0 7a46 	vmov.f32	s14, s12
 801c0f0:	eeb0 6a60 	vmov.f32	s12, s1
 801c0f4:	eea7 6a25 	vfma.f32	s12, s14, s11
 801c0f8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801c1c8 <__kernel_tanf+0x1bc>
 801c0fc:	eee6 0a26 	vfma.f32	s1, s12, s13
 801c100:	eee5 0a87 	vfma.f32	s1, s11, s14
 801c104:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801c108:	db1d      	blt.n	801c146 <__kernel_tanf+0x13a>
 801c10a:	ee06 0a90 	vmov	s13, r0
 801c10e:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801c112:	ee27 6a07 	vmul.f32	s12, s14, s14
 801c116:	ee37 7a00 	vadd.f32	s14, s14, s0
 801c11a:	179b      	asrs	r3, r3, #30
 801c11c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801c120:	f003 0302 	and.w	r3, r3, #2
 801c124:	f1c3 0301 	rsb	r3, r3, #1
 801c128:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801c12c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801c130:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c134:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801c138:	ee07 3a90 	vmov	s15, r3
 801c13c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c140:	ee67 7a80 	vmul.f32	s15, s15, s0
 801c144:	e77a      	b.n	801c03c <__kernel_tanf+0x30>
 801c146:	2801      	cmp	r0, #1
 801c148:	d01b      	beq.n	801c182 <__kernel_tanf+0x176>
 801c14a:	4b20      	ldr	r3, [pc, #128]	; (801c1cc <__kernel_tanf+0x1c0>)
 801c14c:	ee17 2a10 	vmov	r2, s14
 801c150:	401a      	ands	r2, r3
 801c152:	ee06 2a10 	vmov	s12, r2
 801c156:	ee76 7a67 	vsub.f32	s15, s12, s15
 801c15a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801c15e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c162:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801c166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c16a:	ee16 2a90 	vmov	r2, s13
 801c16e:	4013      	ands	r3, r2
 801c170:	ee07 3a90 	vmov	s15, r3
 801c174:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c178:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801c17c:	eee7 7a26 	vfma.f32	s15, s14, s13
 801c180:	e75c      	b.n	801c03c <__kernel_tanf+0x30>
 801c182:	eef0 7a47 	vmov.f32	s15, s14
 801c186:	e759      	b.n	801c03c <__kernel_tanf+0x30>
 801c188:	3f2ca140 	.word	0x3f2ca140
 801c18c:	3f490fda 	.word	0x3f490fda
 801c190:	33222168 	.word	0x33222168
 801c194:	00000000 	.word	0x00000000
 801c198:	b79bae5f 	.word	0xb79bae5f
 801c19c:	38a3f445 	.word	0x38a3f445
 801c1a0:	37d95384 	.word	0x37d95384
 801c1a4:	3a1a26c8 	.word	0x3a1a26c8
 801c1a8:	3b6b6916 	.word	0x3b6b6916
 801c1ac:	3cb327a4 	.word	0x3cb327a4
 801c1b0:	3e088889 	.word	0x3e088889
 801c1b4:	3895c07a 	.word	0x3895c07a
 801c1b8:	398137b9 	.word	0x398137b9
 801c1bc:	3abede48 	.word	0x3abede48
 801c1c0:	3c11371f 	.word	0x3c11371f
 801c1c4:	3d5d0dd1 	.word	0x3d5d0dd1
 801c1c8:	3eaaaaab 	.word	0x3eaaaaab
 801c1cc:	fffff000 	.word	0xfffff000

0801c1d0 <atan>:
 801c1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1d4:	ec55 4b10 	vmov	r4, r5, d0
 801c1d8:	4bc3      	ldr	r3, [pc, #780]	; (801c4e8 <atan+0x318>)
 801c1da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c1de:	429e      	cmp	r6, r3
 801c1e0:	46ab      	mov	fp, r5
 801c1e2:	dd18      	ble.n	801c216 <atan+0x46>
 801c1e4:	4bc1      	ldr	r3, [pc, #772]	; (801c4ec <atan+0x31c>)
 801c1e6:	429e      	cmp	r6, r3
 801c1e8:	dc01      	bgt.n	801c1ee <atan+0x1e>
 801c1ea:	d109      	bne.n	801c200 <atan+0x30>
 801c1ec:	b144      	cbz	r4, 801c200 <atan+0x30>
 801c1ee:	4622      	mov	r2, r4
 801c1f0:	462b      	mov	r3, r5
 801c1f2:	4620      	mov	r0, r4
 801c1f4:	4629      	mov	r1, r5
 801c1f6:	f7e4 f869 	bl	80002cc <__adddf3>
 801c1fa:	4604      	mov	r4, r0
 801c1fc:	460d      	mov	r5, r1
 801c1fe:	e006      	b.n	801c20e <atan+0x3e>
 801c200:	f1bb 0f00 	cmp.w	fp, #0
 801c204:	f300 8131 	bgt.w	801c46a <atan+0x29a>
 801c208:	a59b      	add	r5, pc, #620	; (adr r5, 801c478 <atan+0x2a8>)
 801c20a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c20e:	ec45 4b10 	vmov	d0, r4, r5
 801c212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c216:	4bb6      	ldr	r3, [pc, #728]	; (801c4f0 <atan+0x320>)
 801c218:	429e      	cmp	r6, r3
 801c21a:	dc14      	bgt.n	801c246 <atan+0x76>
 801c21c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801c220:	429e      	cmp	r6, r3
 801c222:	dc0d      	bgt.n	801c240 <atan+0x70>
 801c224:	a396      	add	r3, pc, #600	; (adr r3, 801c480 <atan+0x2b0>)
 801c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c22a:	ee10 0a10 	vmov	r0, s0
 801c22e:	4629      	mov	r1, r5
 801c230:	f7e4 f84c 	bl	80002cc <__adddf3>
 801c234:	4baf      	ldr	r3, [pc, #700]	; (801c4f4 <atan+0x324>)
 801c236:	2200      	movs	r2, #0
 801c238:	f7e4 fc8e 	bl	8000b58 <__aeabi_dcmpgt>
 801c23c:	2800      	cmp	r0, #0
 801c23e:	d1e6      	bne.n	801c20e <atan+0x3e>
 801c240:	f04f 3aff 	mov.w	sl, #4294967295
 801c244:	e02b      	b.n	801c29e <atan+0xce>
 801c246:	f000 f963 	bl	801c510 <fabs>
 801c24a:	4bab      	ldr	r3, [pc, #684]	; (801c4f8 <atan+0x328>)
 801c24c:	429e      	cmp	r6, r3
 801c24e:	ec55 4b10 	vmov	r4, r5, d0
 801c252:	f300 80bf 	bgt.w	801c3d4 <atan+0x204>
 801c256:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801c25a:	429e      	cmp	r6, r3
 801c25c:	f300 80a0 	bgt.w	801c3a0 <atan+0x1d0>
 801c260:	ee10 2a10 	vmov	r2, s0
 801c264:	ee10 0a10 	vmov	r0, s0
 801c268:	462b      	mov	r3, r5
 801c26a:	4629      	mov	r1, r5
 801c26c:	f7e4 f82e 	bl	80002cc <__adddf3>
 801c270:	4ba0      	ldr	r3, [pc, #640]	; (801c4f4 <atan+0x324>)
 801c272:	2200      	movs	r2, #0
 801c274:	f7e4 f828 	bl	80002c8 <__aeabi_dsub>
 801c278:	2200      	movs	r2, #0
 801c27a:	4606      	mov	r6, r0
 801c27c:	460f      	mov	r7, r1
 801c27e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c282:	4620      	mov	r0, r4
 801c284:	4629      	mov	r1, r5
 801c286:	f7e4 f821 	bl	80002cc <__adddf3>
 801c28a:	4602      	mov	r2, r0
 801c28c:	460b      	mov	r3, r1
 801c28e:	4630      	mov	r0, r6
 801c290:	4639      	mov	r1, r7
 801c292:	f7e4 fafb 	bl	800088c <__aeabi_ddiv>
 801c296:	f04f 0a00 	mov.w	sl, #0
 801c29a:	4604      	mov	r4, r0
 801c29c:	460d      	mov	r5, r1
 801c29e:	4622      	mov	r2, r4
 801c2a0:	462b      	mov	r3, r5
 801c2a2:	4620      	mov	r0, r4
 801c2a4:	4629      	mov	r1, r5
 801c2a6:	f7e4 f9c7 	bl	8000638 <__aeabi_dmul>
 801c2aa:	4602      	mov	r2, r0
 801c2ac:	460b      	mov	r3, r1
 801c2ae:	4680      	mov	r8, r0
 801c2b0:	4689      	mov	r9, r1
 801c2b2:	f7e4 f9c1 	bl	8000638 <__aeabi_dmul>
 801c2b6:	a374      	add	r3, pc, #464	; (adr r3, 801c488 <atan+0x2b8>)
 801c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2bc:	4606      	mov	r6, r0
 801c2be:	460f      	mov	r7, r1
 801c2c0:	f7e4 f9ba 	bl	8000638 <__aeabi_dmul>
 801c2c4:	a372      	add	r3, pc, #456	; (adr r3, 801c490 <atan+0x2c0>)
 801c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2ca:	f7e3 ffff 	bl	80002cc <__adddf3>
 801c2ce:	4632      	mov	r2, r6
 801c2d0:	463b      	mov	r3, r7
 801c2d2:	f7e4 f9b1 	bl	8000638 <__aeabi_dmul>
 801c2d6:	a370      	add	r3, pc, #448	; (adr r3, 801c498 <atan+0x2c8>)
 801c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2dc:	f7e3 fff6 	bl	80002cc <__adddf3>
 801c2e0:	4632      	mov	r2, r6
 801c2e2:	463b      	mov	r3, r7
 801c2e4:	f7e4 f9a8 	bl	8000638 <__aeabi_dmul>
 801c2e8:	a36d      	add	r3, pc, #436	; (adr r3, 801c4a0 <atan+0x2d0>)
 801c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2ee:	f7e3 ffed 	bl	80002cc <__adddf3>
 801c2f2:	4632      	mov	r2, r6
 801c2f4:	463b      	mov	r3, r7
 801c2f6:	f7e4 f99f 	bl	8000638 <__aeabi_dmul>
 801c2fa:	a36b      	add	r3, pc, #428	; (adr r3, 801c4a8 <atan+0x2d8>)
 801c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c300:	f7e3 ffe4 	bl	80002cc <__adddf3>
 801c304:	4632      	mov	r2, r6
 801c306:	463b      	mov	r3, r7
 801c308:	f7e4 f996 	bl	8000638 <__aeabi_dmul>
 801c30c:	a368      	add	r3, pc, #416	; (adr r3, 801c4b0 <atan+0x2e0>)
 801c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c312:	f7e3 ffdb 	bl	80002cc <__adddf3>
 801c316:	4642      	mov	r2, r8
 801c318:	464b      	mov	r3, r9
 801c31a:	f7e4 f98d 	bl	8000638 <__aeabi_dmul>
 801c31e:	a366      	add	r3, pc, #408	; (adr r3, 801c4b8 <atan+0x2e8>)
 801c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c324:	4680      	mov	r8, r0
 801c326:	4689      	mov	r9, r1
 801c328:	4630      	mov	r0, r6
 801c32a:	4639      	mov	r1, r7
 801c32c:	f7e4 f984 	bl	8000638 <__aeabi_dmul>
 801c330:	a363      	add	r3, pc, #396	; (adr r3, 801c4c0 <atan+0x2f0>)
 801c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c336:	f7e3 ffc7 	bl	80002c8 <__aeabi_dsub>
 801c33a:	4632      	mov	r2, r6
 801c33c:	463b      	mov	r3, r7
 801c33e:	f7e4 f97b 	bl	8000638 <__aeabi_dmul>
 801c342:	a361      	add	r3, pc, #388	; (adr r3, 801c4c8 <atan+0x2f8>)
 801c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c348:	f7e3 ffbe 	bl	80002c8 <__aeabi_dsub>
 801c34c:	4632      	mov	r2, r6
 801c34e:	463b      	mov	r3, r7
 801c350:	f7e4 f972 	bl	8000638 <__aeabi_dmul>
 801c354:	a35e      	add	r3, pc, #376	; (adr r3, 801c4d0 <atan+0x300>)
 801c356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c35a:	f7e3 ffb5 	bl	80002c8 <__aeabi_dsub>
 801c35e:	4632      	mov	r2, r6
 801c360:	463b      	mov	r3, r7
 801c362:	f7e4 f969 	bl	8000638 <__aeabi_dmul>
 801c366:	a35c      	add	r3, pc, #368	; (adr r3, 801c4d8 <atan+0x308>)
 801c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c36c:	f7e3 ffac 	bl	80002c8 <__aeabi_dsub>
 801c370:	4632      	mov	r2, r6
 801c372:	463b      	mov	r3, r7
 801c374:	f7e4 f960 	bl	8000638 <__aeabi_dmul>
 801c378:	4602      	mov	r2, r0
 801c37a:	460b      	mov	r3, r1
 801c37c:	4640      	mov	r0, r8
 801c37e:	4649      	mov	r1, r9
 801c380:	f7e3 ffa4 	bl	80002cc <__adddf3>
 801c384:	4622      	mov	r2, r4
 801c386:	462b      	mov	r3, r5
 801c388:	f7e4 f956 	bl	8000638 <__aeabi_dmul>
 801c38c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801c390:	4602      	mov	r2, r0
 801c392:	460b      	mov	r3, r1
 801c394:	d14b      	bne.n	801c42e <atan+0x25e>
 801c396:	4620      	mov	r0, r4
 801c398:	4629      	mov	r1, r5
 801c39a:	f7e3 ff95 	bl	80002c8 <__aeabi_dsub>
 801c39e:	e72c      	b.n	801c1fa <atan+0x2a>
 801c3a0:	ee10 0a10 	vmov	r0, s0
 801c3a4:	4b53      	ldr	r3, [pc, #332]	; (801c4f4 <atan+0x324>)
 801c3a6:	2200      	movs	r2, #0
 801c3a8:	4629      	mov	r1, r5
 801c3aa:	f7e3 ff8d 	bl	80002c8 <__aeabi_dsub>
 801c3ae:	4b51      	ldr	r3, [pc, #324]	; (801c4f4 <atan+0x324>)
 801c3b0:	4606      	mov	r6, r0
 801c3b2:	460f      	mov	r7, r1
 801c3b4:	2200      	movs	r2, #0
 801c3b6:	4620      	mov	r0, r4
 801c3b8:	4629      	mov	r1, r5
 801c3ba:	f7e3 ff87 	bl	80002cc <__adddf3>
 801c3be:	4602      	mov	r2, r0
 801c3c0:	460b      	mov	r3, r1
 801c3c2:	4630      	mov	r0, r6
 801c3c4:	4639      	mov	r1, r7
 801c3c6:	f7e4 fa61 	bl	800088c <__aeabi_ddiv>
 801c3ca:	f04f 0a01 	mov.w	sl, #1
 801c3ce:	4604      	mov	r4, r0
 801c3d0:	460d      	mov	r5, r1
 801c3d2:	e764      	b.n	801c29e <atan+0xce>
 801c3d4:	4b49      	ldr	r3, [pc, #292]	; (801c4fc <atan+0x32c>)
 801c3d6:	429e      	cmp	r6, r3
 801c3d8:	da1d      	bge.n	801c416 <atan+0x246>
 801c3da:	ee10 0a10 	vmov	r0, s0
 801c3de:	4b48      	ldr	r3, [pc, #288]	; (801c500 <atan+0x330>)
 801c3e0:	2200      	movs	r2, #0
 801c3e2:	4629      	mov	r1, r5
 801c3e4:	f7e3 ff70 	bl	80002c8 <__aeabi_dsub>
 801c3e8:	4b45      	ldr	r3, [pc, #276]	; (801c500 <atan+0x330>)
 801c3ea:	4606      	mov	r6, r0
 801c3ec:	460f      	mov	r7, r1
 801c3ee:	2200      	movs	r2, #0
 801c3f0:	4620      	mov	r0, r4
 801c3f2:	4629      	mov	r1, r5
 801c3f4:	f7e4 f920 	bl	8000638 <__aeabi_dmul>
 801c3f8:	4b3e      	ldr	r3, [pc, #248]	; (801c4f4 <atan+0x324>)
 801c3fa:	2200      	movs	r2, #0
 801c3fc:	f7e3 ff66 	bl	80002cc <__adddf3>
 801c400:	4602      	mov	r2, r0
 801c402:	460b      	mov	r3, r1
 801c404:	4630      	mov	r0, r6
 801c406:	4639      	mov	r1, r7
 801c408:	f7e4 fa40 	bl	800088c <__aeabi_ddiv>
 801c40c:	f04f 0a02 	mov.w	sl, #2
 801c410:	4604      	mov	r4, r0
 801c412:	460d      	mov	r5, r1
 801c414:	e743      	b.n	801c29e <atan+0xce>
 801c416:	462b      	mov	r3, r5
 801c418:	ee10 2a10 	vmov	r2, s0
 801c41c:	4939      	ldr	r1, [pc, #228]	; (801c504 <atan+0x334>)
 801c41e:	2000      	movs	r0, #0
 801c420:	f7e4 fa34 	bl	800088c <__aeabi_ddiv>
 801c424:	f04f 0a03 	mov.w	sl, #3
 801c428:	4604      	mov	r4, r0
 801c42a:	460d      	mov	r5, r1
 801c42c:	e737      	b.n	801c29e <atan+0xce>
 801c42e:	4b36      	ldr	r3, [pc, #216]	; (801c508 <atan+0x338>)
 801c430:	4e36      	ldr	r6, [pc, #216]	; (801c50c <atan+0x33c>)
 801c432:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c436:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801c43a:	e9da 2300 	ldrd	r2, r3, [sl]
 801c43e:	f7e3 ff43 	bl	80002c8 <__aeabi_dsub>
 801c442:	4622      	mov	r2, r4
 801c444:	462b      	mov	r3, r5
 801c446:	f7e3 ff3f 	bl	80002c8 <__aeabi_dsub>
 801c44a:	4602      	mov	r2, r0
 801c44c:	460b      	mov	r3, r1
 801c44e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c452:	f7e3 ff39 	bl	80002c8 <__aeabi_dsub>
 801c456:	f1bb 0f00 	cmp.w	fp, #0
 801c45a:	4604      	mov	r4, r0
 801c45c:	460d      	mov	r5, r1
 801c45e:	f6bf aed6 	bge.w	801c20e <atan+0x3e>
 801c462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c466:	461d      	mov	r5, r3
 801c468:	e6d1      	b.n	801c20e <atan+0x3e>
 801c46a:	a51d      	add	r5, pc, #116	; (adr r5, 801c4e0 <atan+0x310>)
 801c46c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c470:	e6cd      	b.n	801c20e <atan+0x3e>
 801c472:	bf00      	nop
 801c474:	f3af 8000 	nop.w
 801c478:	54442d18 	.word	0x54442d18
 801c47c:	bff921fb 	.word	0xbff921fb
 801c480:	8800759c 	.word	0x8800759c
 801c484:	7e37e43c 	.word	0x7e37e43c
 801c488:	e322da11 	.word	0xe322da11
 801c48c:	3f90ad3a 	.word	0x3f90ad3a
 801c490:	24760deb 	.word	0x24760deb
 801c494:	3fa97b4b 	.word	0x3fa97b4b
 801c498:	a0d03d51 	.word	0xa0d03d51
 801c49c:	3fb10d66 	.word	0x3fb10d66
 801c4a0:	c54c206e 	.word	0xc54c206e
 801c4a4:	3fb745cd 	.word	0x3fb745cd
 801c4a8:	920083ff 	.word	0x920083ff
 801c4ac:	3fc24924 	.word	0x3fc24924
 801c4b0:	5555550d 	.word	0x5555550d
 801c4b4:	3fd55555 	.word	0x3fd55555
 801c4b8:	2c6a6c2f 	.word	0x2c6a6c2f
 801c4bc:	bfa2b444 	.word	0xbfa2b444
 801c4c0:	52defd9a 	.word	0x52defd9a
 801c4c4:	3fadde2d 	.word	0x3fadde2d
 801c4c8:	af749a6d 	.word	0xaf749a6d
 801c4cc:	3fb3b0f2 	.word	0x3fb3b0f2
 801c4d0:	fe231671 	.word	0xfe231671
 801c4d4:	3fbc71c6 	.word	0x3fbc71c6
 801c4d8:	9998ebc4 	.word	0x9998ebc4
 801c4dc:	3fc99999 	.word	0x3fc99999
 801c4e0:	54442d18 	.word	0x54442d18
 801c4e4:	3ff921fb 	.word	0x3ff921fb
 801c4e8:	440fffff 	.word	0x440fffff
 801c4ec:	7ff00000 	.word	0x7ff00000
 801c4f0:	3fdbffff 	.word	0x3fdbffff
 801c4f4:	3ff00000 	.word	0x3ff00000
 801c4f8:	3ff2ffff 	.word	0x3ff2ffff
 801c4fc:	40038000 	.word	0x40038000
 801c500:	3ff80000 	.word	0x3ff80000
 801c504:	bff00000 	.word	0xbff00000
 801c508:	0801d1e8 	.word	0x0801d1e8
 801c50c:	0801d1c8 	.word	0x0801d1c8

0801c510 <fabs>:
 801c510:	ec51 0b10 	vmov	r0, r1, d0
 801c514:	ee10 2a10 	vmov	r2, s0
 801c518:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c51c:	ec43 2b10 	vmov	d0, r2, r3
 801c520:	4770      	bx	lr

0801c522 <finite>:
 801c522:	b082      	sub	sp, #8
 801c524:	ed8d 0b00 	vstr	d0, [sp]
 801c528:	9801      	ldr	r0, [sp, #4]
 801c52a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c52e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c532:	0fc0      	lsrs	r0, r0, #31
 801c534:	b002      	add	sp, #8
 801c536:	4770      	bx	lr

0801c538 <fabsf>:
 801c538:	ee10 3a10 	vmov	r3, s0
 801c53c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c540:	ee00 3a10 	vmov	s0, r3
 801c544:	4770      	bx	lr
	...

0801c548 <floorf>:
 801c548:	ee10 3a10 	vmov	r3, s0
 801c54c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c550:	3a7f      	subs	r2, #127	; 0x7f
 801c552:	2a16      	cmp	r2, #22
 801c554:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c558:	dc2a      	bgt.n	801c5b0 <floorf+0x68>
 801c55a:	2a00      	cmp	r2, #0
 801c55c:	da11      	bge.n	801c582 <floorf+0x3a>
 801c55e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801c5c0 <floorf+0x78>
 801c562:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c566:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c56e:	dd05      	ble.n	801c57c <floorf+0x34>
 801c570:	2b00      	cmp	r3, #0
 801c572:	da23      	bge.n	801c5bc <floorf+0x74>
 801c574:	4a13      	ldr	r2, [pc, #76]	; (801c5c4 <floorf+0x7c>)
 801c576:	2900      	cmp	r1, #0
 801c578:	bf18      	it	ne
 801c57a:	4613      	movne	r3, r2
 801c57c:	ee00 3a10 	vmov	s0, r3
 801c580:	4770      	bx	lr
 801c582:	4911      	ldr	r1, [pc, #68]	; (801c5c8 <floorf+0x80>)
 801c584:	4111      	asrs	r1, r2
 801c586:	420b      	tst	r3, r1
 801c588:	d0fa      	beq.n	801c580 <floorf+0x38>
 801c58a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c5c0 <floorf+0x78>
 801c58e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c592:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c59a:	ddef      	ble.n	801c57c <floorf+0x34>
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	bfbe      	ittt	lt
 801c5a0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801c5a4:	fa40 f202 	asrlt.w	r2, r0, r2
 801c5a8:	189b      	addlt	r3, r3, r2
 801c5aa:	ea23 0301 	bic.w	r3, r3, r1
 801c5ae:	e7e5      	b.n	801c57c <floorf+0x34>
 801c5b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801c5b4:	d3e4      	bcc.n	801c580 <floorf+0x38>
 801c5b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c5ba:	4770      	bx	lr
 801c5bc:	2300      	movs	r3, #0
 801c5be:	e7dd      	b.n	801c57c <floorf+0x34>
 801c5c0:	7149f2ca 	.word	0x7149f2ca
 801c5c4:	bf800000 	.word	0xbf800000
 801c5c8:	007fffff 	.word	0x007fffff

0801c5cc <scalbnf>:
 801c5cc:	ee10 3a10 	vmov	r3, s0
 801c5d0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801c5d4:	d025      	beq.n	801c622 <scalbnf+0x56>
 801c5d6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801c5da:	d302      	bcc.n	801c5e2 <scalbnf+0x16>
 801c5dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c5e0:	4770      	bx	lr
 801c5e2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801c5e6:	d122      	bne.n	801c62e <scalbnf+0x62>
 801c5e8:	4b2a      	ldr	r3, [pc, #168]	; (801c694 <scalbnf+0xc8>)
 801c5ea:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801c698 <scalbnf+0xcc>
 801c5ee:	4298      	cmp	r0, r3
 801c5f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c5f4:	db16      	blt.n	801c624 <scalbnf+0x58>
 801c5f6:	ee10 3a10 	vmov	r3, s0
 801c5fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c5fe:	3a19      	subs	r2, #25
 801c600:	4402      	add	r2, r0
 801c602:	2afe      	cmp	r2, #254	; 0xfe
 801c604:	dd15      	ble.n	801c632 <scalbnf+0x66>
 801c606:	ee10 3a10 	vmov	r3, s0
 801c60a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801c69c <scalbnf+0xd0>
 801c60e:	eddf 6a24 	vldr	s13, [pc, #144]	; 801c6a0 <scalbnf+0xd4>
 801c612:	2b00      	cmp	r3, #0
 801c614:	eeb0 7a67 	vmov.f32	s14, s15
 801c618:	bfb8      	it	lt
 801c61a:	eef0 7a66 	vmovlt.f32	s15, s13
 801c61e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801c622:	4770      	bx	lr
 801c624:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801c6a4 <scalbnf+0xd8>
 801c628:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c62c:	4770      	bx	lr
 801c62e:	0dd2      	lsrs	r2, r2, #23
 801c630:	e7e6      	b.n	801c600 <scalbnf+0x34>
 801c632:	2a00      	cmp	r2, #0
 801c634:	dd06      	ble.n	801c644 <scalbnf+0x78>
 801c636:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c63a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c63e:	ee00 3a10 	vmov	s0, r3
 801c642:	4770      	bx	lr
 801c644:	f112 0f16 	cmn.w	r2, #22
 801c648:	da1a      	bge.n	801c680 <scalbnf+0xb4>
 801c64a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c64e:	4298      	cmp	r0, r3
 801c650:	ee10 3a10 	vmov	r3, s0
 801c654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c658:	dd0a      	ble.n	801c670 <scalbnf+0xa4>
 801c65a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801c69c <scalbnf+0xd0>
 801c65e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801c6a0 <scalbnf+0xd4>
 801c662:	eef0 7a40 	vmov.f32	s15, s0
 801c666:	2b00      	cmp	r3, #0
 801c668:	bf18      	it	ne
 801c66a:	eeb0 0a47 	vmovne.f32	s0, s14
 801c66e:	e7db      	b.n	801c628 <scalbnf+0x5c>
 801c670:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801c6a4 <scalbnf+0xd8>
 801c674:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801c6a8 <scalbnf+0xdc>
 801c678:	eef0 7a40 	vmov.f32	s15, s0
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	e7f3      	b.n	801c668 <scalbnf+0x9c>
 801c680:	3219      	adds	r2, #25
 801c682:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c686:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c68a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801c6ac <scalbnf+0xe0>
 801c68e:	ee07 3a10 	vmov	s14, r3
 801c692:	e7c4      	b.n	801c61e <scalbnf+0x52>
 801c694:	ffff3cb0 	.word	0xffff3cb0
 801c698:	4c000000 	.word	0x4c000000
 801c69c:	7149f2ca 	.word	0x7149f2ca
 801c6a0:	f149f2ca 	.word	0xf149f2ca
 801c6a4:	0da24260 	.word	0x0da24260
 801c6a8:	8da24260 	.word	0x8da24260
 801c6ac:	33000000 	.word	0x33000000

0801c6b0 <_init>:
 801c6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6b2:	bf00      	nop
 801c6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6b6:	bc08      	pop	{r3}
 801c6b8:	469e      	mov	lr, r3
 801c6ba:	4770      	bx	lr

0801c6bc <_fini>:
 801c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6be:	bf00      	nop
 801c6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6c2:	bc08      	pop	{r3}
 801c6c4:	469e      	mov	lr, r3
 801c6c6:	4770      	bx	lr
