
Zbior_danych.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010804  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  080109d8  080109d8  000209d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fa0  08010fa0  000305fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010fa0  08010fa0  00020fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010fa8  08010fa8  000305fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010fa8  08010fa8  00020fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010fac  08010fac  00020fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005fc  20000000  08010fb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023cc  200005fc  080115ac  000305fc  2**2
                  ALLOC
 10 ._user_heap_stack 00003500  200029c8  080115ac  000329c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f040  00000000  00000000  0003062c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004551  00000000  00000000  0005f66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002040  00000000  00000000  00063bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e58  00000000  00000000  00065c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b195  00000000  00000000  00067a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e02  00000000  00000000  00092bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc661  00000000  00000000  000b49ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b1050  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a140  00000000  00000000  001b10a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005fc 	.word	0x200005fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080109bc 	.word	0x080109bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000600 	.word	0x20000600
 800020c:	080109bc 	.word	0x080109bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a27      	ldr	r2, [pc, #156]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a21      	ldr	r2, [pc, #132]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MX_GPIO_Init+0xd0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_GPIO_Init+0xd0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_led_Pin|Red_led_Pin|Blue_led_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80010a8:	4815      	ldr	r0, [pc, #84]	; (8001100 <MX_GPIO_Init+0xd4>)
 80010aa:	f003 fa3f 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_USB_Output_GPIO_Port, GPIO_USB_Output_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	4814      	ldr	r0, [pc, #80]	; (8001104 <MX_GPIO_Init+0xd8>)
 80010b4:	f003 fa3a 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Green_led_Pin|Red_led_Pin|Blue_led_Pin;
 80010b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <MX_GPIO_Init+0xd4>)
 80010d2:	f003 f87f 	bl	80041d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_USB_Output_Pin;
 80010d6:	2340      	movs	r3, #64	; 0x40
 80010d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_USB_Output_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_GPIO_Init+0xd8>)
 80010ee:	f003 f871 	bl	80041d4 <HAL_GPIO_Init>

}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	; 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020400 	.word	0x40020400
 8001104:	40021800 	.word	0x40021800

08001108 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <MX_I2C1_Init+0x74>)
 800110e:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <MX_I2C1_Init+0x78>)
 8001110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_I2C1_Init+0x74>)
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <MX_I2C1_Init+0x7c>)
 8001116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_I2C1_Init+0x74>)
 8001120:	2201      	movs	r2, #1
 8001122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_I2C1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_I2C1_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C1_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001142:	480e      	ldr	r0, [pc, #56]	; (800117c <MX_I2C1_Init+0x74>)
 8001144:	f003 fa26 	bl	8004594 <HAL_I2C_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800114e:	f002 fce8 	bl	8003b22 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <MX_I2C1_Init+0x74>)
 8001156:	f003 fef7 	bl	8004f48 <HAL_I2CEx_ConfigAnalogFilter>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001160:	f002 fcdf 	bl	8003b22 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_I2C1_Init+0x74>)
 8001168:	f003 ff39 	bl	8004fde <HAL_I2CEx_ConfigDigitalFilter>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001172:	f002 fcd6 	bl	8003b22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000067c 	.word	0x2000067c
 8001180:	40005400 	.word	0x40005400
 8001184:	00301739 	.word	0x00301739

08001188 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_I2C_MspInit+0x7c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d128      	bne.n	80011fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c8:	2312      	movs	r3, #18
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d4:	2304      	movs	r3, #4
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <HAL_I2C_MspInit+0x84>)
 80011e0:	f002 fff8 	bl	80041d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ee:	6413      	str	r3, [r2, #64]	; 0x40
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_I2C_MspInit+0x80>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40005400 	.word	0x40005400
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400

08001210 <lsm6dsox_read_reg>:
  *
  */
int32_t lsm6dsox_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	461a      	mov	r2, r3
 800121c:	460b      	mov	r3, r1
 800121e:	72fb      	strb	r3, [r7, #11]
 8001220:	4613      	mov	r3, r2
 8001222:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685c      	ldr	r4, [r3, #4]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6898      	ldr	r0, [r3, #8]
 800122c:	893b      	ldrh	r3, [r7, #8]
 800122e:	7af9      	ldrb	r1, [r7, #11]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	47a0      	blx	r4
 8001234:	6178      	str	r0, [r7, #20]

  return ret;
 8001236:	697b      	ldr	r3, [r7, #20]
}
 8001238:	4618      	mov	r0, r3
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}

08001240 <lsm6dsox_write_reg>:
  *
  */
int32_t lsm6dsox_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	461a      	mov	r2, r3
 800124c:	460b      	mov	r3, r1
 800124e:	72fb      	strb	r3, [r7, #11]
 8001250:	4613      	mov	r3, r2
 8001252:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681c      	ldr	r4, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6898      	ldr	r0, [r3, #8]
 800125c:	893b      	ldrh	r3, [r7, #8]
 800125e:	7af9      	ldrb	r1, [r7, #11]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	47a0      	blx	r4
 8001264:	6178      	str	r0, [r7, #20]

  return ret;
 8001266:	697b      	ldr	r3, [r7, #20]
}
 8001268:	4618      	mov	r0, r3
 800126a:	371c      	adds	r7, #28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}

08001270 <lsm6dsox_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dsox_from_fs2_to_mg(int16_t lsb)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001286:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800129c <lsm6dsox_from_fs2_to_mg+0x2c>
 800128a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	3d79db23 	.word	0x3d79db23

080012a0 <lsm6dsox_from_fs250_to_mdps>:
{
  return ((float_t)lsb) * 17.50f;
}

float_t lsm6dsox_from_fs250_to_mdps(int16_t lsb)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 8.750f;
 80012aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80012cc <lsm6dsox_from_fs250_to_mdps+0x2c>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	410c0000 	.word	0x410c0000

080012d0 <lsm6dsox_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_xl_t val)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 80012dc:	f107 0208 	add.w	r2, r7, #8
 80012e0:	2301      	movs	r3, #1
 80012e2:	2110      	movs	r1, #16
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff93 	bl	8001210 <lsm6dsox_read_reg>
 80012ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10f      	bne.n	8001312 <lsm6dsox_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	7a3b      	ldrb	r3, [r7, #8]
 80012fc:	f362 0383 	bfi	r3, r2, #2, #2
 8001300:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 8001302:	f107 0208 	add.w	r2, r7, #8
 8001306:	2301      	movs	r3, #1
 8001308:	2110      	movs	r1, #16
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ff98 	bl	8001240 <lsm6dsox_write_reg>
 8001310:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <lsm6dsox_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_xl_t val)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_xl_t odr_xl =  val;
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fcba 	bl	8001cac <lsm6dsox_fsm_enable_get>
 8001338:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	f040 80c4 	bne.w	80014ca <lsm6dsox_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001342:	7d3b      	ldrb	r3, [r7, #20]
 8001344:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001348:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800134a:	7d3b      	ldrb	r3, [r7, #20]
 800134c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001350:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001352:	4313      	orrs	r3, r2
 8001354:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001356:	7d3b      	ldrb	r3, [r7, #20]
 8001358:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800135c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800135e:	4313      	orrs	r3, r2
 8001360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001362:	7d3b      	ldrb	r3, [r7, #20]
 8001364:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001368:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800136a:	4313      	orrs	r3, r2
 800136c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800136e:	7d3b      	ldrb	r3, [r7, #20]
 8001370:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001374:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001376:	4313      	orrs	r3, r2
 8001378:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800137a:	7d3b      	ldrb	r3, [r7, #20]
 800137c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001380:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001382:	4313      	orrs	r3, r2
 8001384:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001386:	7d3b      	ldrb	r3, [r7, #20]
 8001388:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800138c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800138e:	4313      	orrs	r3, r2
 8001390:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001392:	7d3b      	ldrb	r3, [r7, #20]
 8001394:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001398:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800139a:	4313      	orrs	r3, r2
 800139c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800139e:	7d7b      	ldrb	r3, [r7, #21]
 80013a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80013aa:	7d7b      	ldrb	r3, [r7, #21]
 80013ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80013b6:	7d7b      	ldrb	r3, [r7, #21]
 80013b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80013be:	4313      	orrs	r3, r2
 80013c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80013c2:	7d7b      	ldrb	r3, [r7, #21]
 80013c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80013c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80013ce:	7d7b      	ldrb	r3, [r7, #21]
 80013d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80013da:	7d7b      	ldrb	r3, [r7, #21]
 80013dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80013e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80013e6:	7d7b      	ldrb	r3, [r7, #21]
 80013e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80013ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80013f2:	7d7b      	ldrb	r3, [r7, #21]
 80013f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80013f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d163      	bne.n	80014ca <lsm6dsox_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8001402:	f107 0313 	add.w	r3, r7, #19
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fc71 	bl	8001cf0 <lsm6dsox_fsm_data_rate_get>
 800140e:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d159      	bne.n	80014ca <lsm6dsox_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8001416:	7cfb      	ldrb	r3, [r7, #19]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d853      	bhi.n	80014c4 <lsm6dsox_xl_data_rate_set+0x1a8>
 800141c:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <lsm6dsox_xl_data_rate_set+0x108>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	08001435 	.word	0x08001435
 8001428:	08001447 	.word	0x08001447
 800142c:	08001465 	.word	0x08001465
 8001430:	0800148f 	.word	0x0800148f
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <lsm6dsox_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 800143a:	2301      	movs	r3, #1
 800143c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800143e:	e045      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	77fb      	strb	r3, [r7, #31]
            break;
 8001444:	e042      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <lsm6dsox_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 800144c:	2302      	movs	r3, #2
 800144e:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001450:	e03c      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d102      	bne.n	800145e <lsm6dsox_xl_data_rate_set+0x142>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8001458:	2302      	movs	r3, #2
 800145a:	77fb      	strb	r3, [r7, #31]
            break;
 800145c:	e036      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	77fb      	strb	r3, [r7, #31]
            break;
 8001462:	e033      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <lsm6dsox_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800146a:	2303      	movs	r3, #3
 800146c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800146e:	e02d      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d102      	bne.n	800147c <lsm6dsox_xl_data_rate_set+0x160>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001476:	2303      	movs	r3, #3
 8001478:	77fb      	strb	r3, [r7, #31]
            break;
 800147a:	e027      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d102      	bne.n	8001488 <lsm6dsox_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001482:	2303      	movs	r3, #3
 8001484:	77fb      	strb	r3, [r7, #31]
            break;
 8001486:	e021      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	77fb      	strb	r3, [r7, #31]
            break;
 800148c:	e01e      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <lsm6dsox_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001494:	2304      	movs	r3, #4
 8001496:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001498:	e018      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d102      	bne.n	80014a6 <lsm6dsox_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80014a0:	2304      	movs	r3, #4
 80014a2:	77fb      	strb	r3, [r7, #31]
            break;
 80014a4:	e012      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d102      	bne.n	80014b2 <lsm6dsox_xl_data_rate_set+0x196>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80014ac:	2304      	movs	r3, #4
 80014ae:	77fb      	strb	r3, [r7, #31]
            break;
 80014b0:	e00c      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 80014b2:	78fb      	ldrb	r3, [r7, #3]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d102      	bne.n	80014be <lsm6dsox_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80014b8:	2304      	movs	r3, #4
 80014ba:	77fb      	strb	r3, [r7, #31]
            break;
 80014bc:	e006      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	77fb      	strb	r3, [r7, #31]
            break;
 80014c2:	e003      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	77fb      	strb	r3, [r7, #31]
            break;
 80014c8:	e000      	b.n	80014cc <lsm6dsox_xl_data_rate_set+0x1b0>
        }
      }
 80014ca:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 80014cc:	7c3b      	ldrb	r3, [r7, #16]
 80014ce:	f36f 03c3 	bfc	r3, #3, #1
 80014d2:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d16f      	bne.n	80015ba <lsm6dsox_xl_data_rate_set+0x29e>
  {
    lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fd0e 	bl	8001f02 <lsm6dsox_embedded_sens_get>

    if (emb_sens.mlc == PROPERTY_ENABLE)
 80014e6:	7c3b      	ldrb	r3, [r7, #16]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d063      	beq.n	80015ba <lsm6dsox_xl_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 80014f2:	f107 030f 	add.w	r3, r7, #15
 80014f6:	4619      	mov	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fc41 	bl	8001d80 <lsm6dsox_mlc_data_rate_get>
 80014fe:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d159      	bne.n	80015ba <lsm6dsox_xl_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d853      	bhi.n	80015b4 <lsm6dsox_xl_data_rate_set+0x298>
 800150c:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <lsm6dsox_xl_data_rate_set+0x1f8>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001525 	.word	0x08001525
 8001518:	08001537 	.word	0x08001537
 800151c:	08001555 	.word	0x08001555
 8001520:	0800157f 	.word	0x0800157f
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <lsm6dsox_xl_data_rate_set+0x214>
            {
              odr_xl = LSM6DSOX_XL_ODR_12Hz5;
 800152a:	2301      	movs	r3, #1
 800152c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800152e:	e045      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	77fb      	strb	r3, [r7, #31]
            break;
 8001534:	e042      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <lsm6dsox_xl_data_rate_set+0x226>
            {
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 800153c:	2302      	movs	r3, #2
 800153e:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001540:	e03c      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d102      	bne.n	800154e <lsm6dsox_xl_data_rate_set+0x232>
              odr_xl = LSM6DSOX_XL_ODR_26Hz;
 8001548:	2302      	movs	r3, #2
 800154a:	77fb      	strb	r3, [r7, #31]
            break;
 800154c:	e036      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	77fb      	strb	r3, [r7, #31]
            break;
 8001552:	e033      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <lsm6dsox_xl_data_rate_set+0x244>
            {
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 800155a:	2303      	movs	r3, #3
 800155c:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 800155e:	e02d      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <lsm6dsox_xl_data_rate_set+0x250>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001566:	2303      	movs	r3, #3
 8001568:	77fb      	strb	r3, [r7, #31]
            break;
 800156a:	e027      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d102      	bne.n	8001578 <lsm6dsox_xl_data_rate_set+0x25c>
              odr_xl = LSM6DSOX_XL_ODR_52Hz;
 8001572:	2303      	movs	r3, #3
 8001574:	77fb      	strb	r3, [r7, #31]
            break;
 8001576:	e021      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	77fb      	strb	r3, [r7, #31]
            break;
 800157c:	e01e      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_XL_ODR_OFF)
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <lsm6dsox_xl_data_rate_set+0x26e>
            {
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001584:	2304      	movs	r3, #4
 8001586:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_xl = val;
            }

            break;
 8001588:	e018      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_12Hz5)
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d102      	bne.n	8001596 <lsm6dsox_xl_data_rate_set+0x27a>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 8001590:	2304      	movs	r3, #4
 8001592:	77fb      	strb	r3, [r7, #31]
            break;
 8001594:	e012      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_26Hz)
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d102      	bne.n	80015a2 <lsm6dsox_xl_data_rate_set+0x286>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 800159c:	2304      	movs	r3, #4
 800159e:	77fb      	strb	r3, [r7, #31]
            break;
 80015a0:	e00c      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_XL_ODR_52Hz)
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d102      	bne.n	80015ae <lsm6dsox_xl_data_rate_set+0x292>
              odr_xl = LSM6DSOX_XL_ODR_104Hz;
 80015a8:	2304      	movs	r3, #4
 80015aa:	77fb      	strb	r3, [r7, #31]
            break;
 80015ac:	e006      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
              odr_xl = val;
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	77fb      	strb	r3, [r7, #31]
            break;
 80015b2:	e003      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>

          default:
            odr_xl = val;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	77fb      	strb	r3, [r7, #31]
            break;
 80015b8:	e000      	b.n	80015bc <lsm6dsox_xl_data_rate_set+0x2a0>
        }
      }
 80015ba:	bf00      	nop
    }
  }

  if (ret == 0)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d107      	bne.n	80015d2 <lsm6dsox_xl_data_rate_set+0x2b6>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 80015c2:	f107 020c 	add.w	r2, r7, #12
 80015c6:	2301      	movs	r3, #1
 80015c8:	2110      	movs	r1, #16
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fe20 	bl	8001210 <lsm6dsox_read_reg>
 80015d0:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10f      	bne.n	80015f8 <lsm6dsox_xl_data_rate_set+0x2dc>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 80015d8:	7ffb      	ldrb	r3, [r7, #31]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	7b3b      	ldrb	r3, [r7, #12]
 80015e2:	f362 1307 	bfi	r3, r2, #4, #4
 80015e6:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL1_XL, (uint8_t *)&reg, 1);
 80015e8:	f107 020c 	add.w	r2, r7, #12
 80015ec:	2301      	movs	r3, #1
 80015ee:	2110      	movs	r1, #16
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fe25 	bl	8001240 <lsm6dsox_write_reg>
 80015f6:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 80015f8:	69bb      	ldr	r3, [r7, #24]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop

08001604 <lsm6dsox_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_fs_g_t val)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8001610:	f107 0208 	add.w	r2, r7, #8
 8001614:	2301      	movs	r3, #1
 8001616:	2111      	movs	r1, #17
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fdf9 	bl	8001210 <lsm6dsox_read_reg>
 800161e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <lsm6dsox_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	b2da      	uxtb	r2, r3
 800162e:	7a3b      	ldrb	r3, [r7, #8]
 8001630:	f362 0343 	bfi	r3, r2, #1, #3
 8001634:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 8001636:	f107 0208 	add.w	r2, r7, #8
 800163a:	2301      	movs	r3, #1
 800163c:	2111      	movs	r1, #17
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fdfe 	bl	8001240 <lsm6dsox_write_reg>
 8001644:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <lsm6dsox_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_gy_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm6dsox_odr_g_t val)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_odr_g_t odr_gy =  val;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	77fb      	strb	r3, [r7, #31]
  lsm6dsox_mlc_odr_t mlc_odr;
  lsm6dsox_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsox_fsm_enable_get(ctx, &fsm_enable);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fb20 	bl	8001cac <lsm6dsox_fsm_enable_get>
 800166c:	61b8      	str	r0, [r7, #24]

  if (ret == 0)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	f040 80c4 	bne.w	80017fe <lsm6dsox_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001676:	7d3b      	ldrb	r3, [r7, #20]
 8001678:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800167c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800167e:	7d3b      	ldrb	r3, [r7, #20]
 8001680:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001684:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001686:	4313      	orrs	r3, r2
 8001688:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800168a:	7d3b      	ldrb	r3, [r7, #20]
 800168c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001690:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001692:	4313      	orrs	r3, r2
 8001694:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001696:	7d3b      	ldrb	r3, [r7, #20]
 8001698:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800169c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800169e:	4313      	orrs	r3, r2
 80016a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80016a2:	7d3b      	ldrb	r3, [r7, #20]
 80016a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80016a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80016ae:	7d3b      	ldrb	r3, [r7, #20]
 80016b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80016ba:	7d3b      	ldrb	r3, [r7, #20]
 80016bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80016c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80016c6:	7d3b      	ldrb	r3, [r7, #20]
 80016c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80016cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80016d2:	7d7b      	ldrb	r3, [r7, #21]
 80016d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80016da:	4313      	orrs	r3, r2
 80016dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80016de:	7d7b      	ldrb	r3, [r7, #21]
 80016e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80016e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80016ea:	7d7b      	ldrb	r3, [r7, #21]
 80016ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80016f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80016fe:	4313      	orrs	r3, r2
 8001700:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001702:	7d7b      	ldrb	r3, [r7, #21]
 8001704:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001708:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800170a:	4313      	orrs	r3, r2
 800170c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800170e:	7d7b      	ldrb	r3, [r7, #21]
 8001710:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001714:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001716:	4313      	orrs	r3, r2
 8001718:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800171a:	7d7b      	ldrb	r3, [r7, #21]
 800171c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001720:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001722:	4313      	orrs	r3, r2
 8001724:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8001726:	7d7b      	ldrb	r3, [r7, #21]
 8001728:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800172c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800172e:	4313      	orrs	r3, r2
 8001730:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001732:	2b01      	cmp	r3, #1
 8001734:	d163      	bne.n	80017fe <lsm6dsox_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsox_fsm_data_rate_get(ctx, &fsm_odr);
 8001736:	f107 0313 	add.w	r3, r7, #19
 800173a:	4619      	mov	r1, r3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fad7 	bl	8001cf0 <lsm6dsox_fsm_data_rate_get>
 8001742:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d159      	bne.n	80017fe <lsm6dsox_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d853      	bhi.n	80017f8 <lsm6dsox_gy_data_rate_set+0x1a8>
 8001750:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <lsm6dsox_gy_data_rate_set+0x108>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	08001769 	.word	0x08001769
 800175c:	0800177b 	.word	0x0800177b
 8001760:	08001799 	.word	0x08001799
 8001764:	080017c3 	.word	0x080017c3
        {
          case LSM6DSOX_ODR_FSM_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <lsm6dsox_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 800176e:	2301      	movs	r3, #1
 8001770:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8001772:	e045      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	77fb      	strb	r3, [r7, #31]
            break;
 8001778:	e042      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <lsm6dsox_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8001780:	2302      	movs	r3, #2
 8001782:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8001784:	e03c      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d102      	bne.n	8001792 <lsm6dsox_gy_data_rate_set+0x142>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 800178c:	2302      	movs	r3, #2
 800178e:	77fb      	strb	r3, [r7, #31]
            break;
 8001790:	e036      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	77fb      	strb	r3, [r7, #31]
            break;
 8001796:	e033      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <lsm6dsox_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800179e:	2303      	movs	r3, #3
 80017a0:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80017a2:	e02d      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <lsm6dsox_gy_data_rate_set+0x160>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80017aa:	2303      	movs	r3, #3
 80017ac:	77fb      	strb	r3, [r7, #31]
            break;
 80017ae:	e027      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d102      	bne.n	80017bc <lsm6dsox_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80017b6:	2303      	movs	r3, #3
 80017b8:	77fb      	strb	r3, [r7, #31]
            break;
 80017ba:	e021      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	77fb      	strb	r3, [r7, #31]
            break;
 80017c0:	e01e      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>

          case LSM6DSOX_ODR_FSM_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <lsm6dsox_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80017c8:	2304      	movs	r3, #4
 80017ca:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80017cc:	e018      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d102      	bne.n	80017da <lsm6dsox_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80017d4:	2304      	movs	r3, #4
 80017d6:	77fb      	strb	r3, [r7, #31]
            break;
 80017d8:	e012      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d102      	bne.n	80017e6 <lsm6dsox_gy_data_rate_set+0x196>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80017e0:	2304      	movs	r3, #4
 80017e2:	77fb      	strb	r3, [r7, #31]
            break;
 80017e4:	e00c      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d102      	bne.n	80017f2 <lsm6dsox_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80017ec:	2304      	movs	r3, #4
 80017ee:	77fb      	strb	r3, [r7, #31]
            break;
 80017f0:	e006      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	77fb      	strb	r3, [r7, #31]
            break;
 80017f6:	e003      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	77fb      	strb	r3, [r7, #31]
            break;
 80017fc:	e000      	b.n	8001800 <lsm6dsox_gy_data_rate_set+0x1b0>
        }
      }
 80017fe:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  emb_sens.mlc = PROPERTY_DISABLE;
 8001800:	7c3b      	ldrb	r3, [r7, #16]
 8001802:	f36f 03c3 	bfc	r3, #3, #1
 8001806:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d16f      	bne.n	80018ee <lsm6dsox_gy_data_rate_set+0x29e>
  {
    ret =  lsm6dsox_embedded_sens_get(ctx, &emb_sens);
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fb74 	bl	8001f02 <lsm6dsox_embedded_sens_get>
 800181a:	61b8      	str	r0, [r7, #24]

    if (emb_sens.mlc == PROPERTY_ENABLE)
 800181c:	7c3b      	ldrb	r3, [r7, #16]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d062      	beq.n	80018ee <lsm6dsox_gy_data_rate_set+0x29e>
    {
      ret =  lsm6dsox_mlc_data_rate_get(ctx, &mlc_odr);
 8001828:	f107 030f 	add.w	r3, r7, #15
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 faa6 	bl	8001d80 <lsm6dsox_mlc_data_rate_get>
 8001834:	61b8      	str	r0, [r7, #24]

      if (ret == 0)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d158      	bne.n	80018ee <lsm6dsox_gy_data_rate_set+0x29e>
      {
        switch (mlc_odr)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d852      	bhi.n	80018e8 <lsm6dsox_gy_data_rate_set+0x298>
 8001842:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <lsm6dsox_gy_data_rate_set+0x1f8>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	08001859 	.word	0x08001859
 800184c:	0800186b 	.word	0x0800186b
 8001850:	08001889 	.word	0x08001889
 8001854:	080018b3 	.word	0x080018b3
        {
          case LSM6DSOX_ODR_PRGS_12Hz5:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <lsm6dsox_gy_data_rate_set+0x214>
            {
              odr_gy = LSM6DSOX_GY_ODR_12Hz5;
 800185e:	2301      	movs	r3, #1
 8001860:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8001862:	e045      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	77fb      	strb	r3, [r7, #31]
            break;
 8001868:	e042      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_26Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <lsm6dsox_gy_data_rate_set+0x226>
            {
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 8001870:	2302      	movs	r3, #2
 8001872:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8001874:	e03c      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <lsm6dsox_gy_data_rate_set+0x232>
              odr_gy = LSM6DSOX_GY_ODR_26Hz;
 800187c:	2302      	movs	r3, #2
 800187e:	77fb      	strb	r3, [r7, #31]
            break;
 8001880:	e036      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	77fb      	strb	r3, [r7, #31]
            break;
 8001886:	e033      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_52Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <lsm6dsox_gy_data_rate_set+0x244>
            {
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800188e:	2303      	movs	r3, #3
 8001890:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 8001892:	e02d      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d102      	bne.n	80018a0 <lsm6dsox_gy_data_rate_set+0x250>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 800189a:	2303      	movs	r3, #3
 800189c:	77fb      	strb	r3, [r7, #31]
            break;
 800189e:	e027      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d102      	bne.n	80018ac <lsm6dsox_gy_data_rate_set+0x25c>
              odr_gy = LSM6DSOX_GY_ODR_52Hz;
 80018a6:	2303      	movs	r3, #3
 80018a8:	77fb      	strb	r3, [r7, #31]
            break;
 80018aa:	e021      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	77fb      	strb	r3, [r7, #31]
            break;
 80018b0:	e01e      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>

          case LSM6DSOX_ODR_PRGS_104Hz:
            if (val == LSM6DSOX_GY_ODR_OFF)
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <lsm6dsox_gy_data_rate_set+0x26e>
            {
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80018b8:	2304      	movs	r3, #4
 80018ba:	77fb      	strb	r3, [r7, #31]
            else
            {
              odr_gy = val;
            }

            break;
 80018bc:	e018      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_12Hz5)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d102      	bne.n	80018ca <lsm6dsox_gy_data_rate_set+0x27a>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80018c4:	2304      	movs	r3, #4
 80018c6:	77fb      	strb	r3, [r7, #31]
            break;
 80018c8:	e012      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_26Hz)
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d102      	bne.n	80018d6 <lsm6dsox_gy_data_rate_set+0x286>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80018d0:	2304      	movs	r3, #4
 80018d2:	77fb      	strb	r3, [r7, #31]
            break;
 80018d4:	e00c      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
            else if (val == LSM6DSOX_GY_ODR_52Hz)
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d102      	bne.n	80018e2 <lsm6dsox_gy_data_rate_set+0x292>
              odr_gy = LSM6DSOX_GY_ODR_104Hz;
 80018dc:	2304      	movs	r3, #4
 80018de:	77fb      	strb	r3, [r7, #31]
            break;
 80018e0:	e006      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
              odr_gy = val;
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	77fb      	strb	r3, [r7, #31]
            break;
 80018e6:	e003      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>

          default:
            odr_gy = val;
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	77fb      	strb	r3, [r7, #31]
            break;
 80018ec:	e000      	b.n	80018f0 <lsm6dsox_gy_data_rate_set+0x2a0>
        }
      }
 80018ee:	bf00      	nop
    }
  }

  if (ret == 0)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d107      	bne.n	8001906 <lsm6dsox_gy_data_rate_set+0x2b6>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 80018f6:	f107 020c 	add.w	r2, r7, #12
 80018fa:	2301      	movs	r3, #1
 80018fc:	2111      	movs	r1, #17
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fc86 	bl	8001210 <lsm6dsox_read_reg>
 8001904:	61b8      	str	r0, [r7, #24]
  }

  if (ret == 0)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10f      	bne.n	800192c <lsm6dsox_gy_data_rate_set+0x2dc>
  {
    reg.odr_g = (uint8_t) odr_gy;
 800190c:	7ffb      	ldrb	r3, [r7, #31]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	b2da      	uxtb	r2, r3
 8001914:	7b3b      	ldrb	r3, [r7, #12]
 8001916:	f362 1307 	bfi	r3, r2, #4, #4
 800191a:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL2_G, (uint8_t *)&reg, 1);
 800191c:	f107 020c 	add.w	r2, r7, #12
 8001920:	2301      	movs	r3, #1
 8001922:	2111      	movs	r1, #17
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fc8b 	bl	8001240 <lsm6dsox_write_reg>
 800192a:	61b8      	str	r0, [r7, #24]
  }

  return ret;
 800192c:	69bb      	ldr	r3, [r7, #24]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop

08001938 <lsm6dsox_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001944:	f107 0208 	add.w	r2, r7, #8
 8001948:	2301      	movs	r3, #1
 800194a:	2112      	movs	r1, #18
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fc5f 	bl	8001210 <lsm6dsox_read_reg>
 8001952:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10f      	bne.n	800197a <lsm6dsox_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7a3b      	ldrb	r3, [r7, #8]
 8001964:	f362 1386 	bfi	r3, r2, #6, #1
 8001968:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 800196a:	f107 0208 	add.w	r2, r7, #8
 800196e:	2301      	movs	r3, #1
 8001970:	2112      	movs	r1, #18
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fc64 	bl	8001240 <lsm6dsox_write_reg>
 8001978:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <lsm6dsox_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                        uint8_t *val)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  lsm6dsox_status_reg_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_STATUS_REG, (uint8_t *)&reg, 1);
 800198e:	f107 0208 	add.w	r2, r7, #8
 8001992:	2301      	movs	r3, #1
 8001994:	211e      	movs	r1, #30
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fc3a 	bl	8001210 <lsm6dsox_read_reg>
 800199c:	60f8      	str	r0, [r7, #12]
  *val = reg.xlda;
 800199e:	7a3b      	ldrb	r3, [r7, #8]
 80019a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	701a      	strb	r2, [r3, #0]

  return ret;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <lsm6dsox_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_G, buff, 6);
 80019c0:	f107 020c 	add.w	r2, r7, #12
 80019c4:	2306      	movs	r3, #6
 80019c6:	2122      	movs	r1, #34	; 0x22
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fc21 	bl	8001210 <lsm6dsox_read_reg>
 80019ce:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	b21a      	sxth	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	7b3b      	ldrb	r3, [r7, #12]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3302      	adds	r3, #2
 80019f8:	b212      	sxth	r2, r2
 80019fa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3302      	adds	r3, #2
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3302      	adds	r3, #2
 8001a16:	b212      	sxth	r2, r2
 8001a18:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	b212      	sxth	r2, r2
 8001a22:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3304      	adds	r3, #4
 8001a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	7c3b      	ldrb	r3, [r7, #16]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	b212      	sxth	r2, r2
 8001a40:	801a      	strh	r2, [r3, #0]

  return ret;
 8001a42:	697b      	ldr	r3, [r7, #20]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <lsm6dsox_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_OUTX_L_A, buff, 6);
 8001a56:	f107 020c 	add.w	r2, r7, #12
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	2128      	movs	r1, #40	; 0x28
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fbd6 	bl	8001210 <lsm6dsox_read_reg>
 8001a64:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a66:	7b7b      	ldrb	r3, [r7, #13]
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	7b3b      	ldrb	r3, [r7, #12]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	b212      	sxth	r2, r2
 8001a90:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3302      	adds	r3, #2
 8001a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	3302      	adds	r3, #2
 8001aac:	b212      	sxth	r2, r2
 8001aae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001ab0:	7c7a      	ldrb	r2, [r7, #17]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	b212      	sxth	r2, r2
 8001ab8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3304      	adds	r3, #4
 8001abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	7c3b      	ldrb	r3, [r7, #16]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	b212      	sxth	r2, r2
 8001ad6:	801a      	strh	r2, [r3, #0]

  return ret;
 8001ad8:	697b      	ldr	r3, [r7, #20]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <lsm6dsox_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mem_bank_set(stmdev_ctx_t *ctx,
                              lsm6dsox_reg_access_t val)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8001aee:	f107 0208 	add.w	r2, r7, #8
 8001af2:	2301      	movs	r3, #1
 8001af4:	2101      	movs	r1, #1
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fb8a 	bl	8001210 <lsm6dsox_read_reg>
 8001afc:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&reg, 1);

  if (ret == 0)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10f      	bne.n	8001b24 <lsm6dsox_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	7a3b      	ldrb	r3, [r7, #8]
 8001b0e:	f362 1387 	bfi	r3, r2, #6, #2
 8001b12:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_FUNC_CFG_ACCESS,
 8001b14:	f107 0208 	add.w	r2, r7, #8
 8001b18:	2301      	movs	r3, #1
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fb8f 	bl	8001240 <lsm6dsox_write_reg>
 8001b22:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&reg, 1);
  }

  return ret;
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <lsm6dsox_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_WHO_AM_I, buff, 1);
 8001b38:	2301      	movs	r3, #1
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fb66 	bl	8001210 <lsm6dsox_read_reg>
 8001b44:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <lsm6dsox_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001b5c:	f107 0208 	add.w	r2, r7, #8
 8001b60:	2301      	movs	r3, #1
 8001b62:	2112      	movs	r1, #18
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fb53 	bl	8001210 <lsm6dsox_read_reg>
 8001b6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <lsm6dsox_reset_set+0x42>
  {
    reg.sw_reset = val;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	7a3b      	ldrb	r3, [r7, #8]
 8001b7c:	f362 0300 	bfi	r3, r2, #0, #1
 8001b80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001b82:	f107 0208 	add.w	r2, r7, #8
 8001b86:	2301      	movs	r3, #1
 8001b88:	2112      	movs	r1, #18
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fb58 	bl	8001240 <lsm6dsox_write_reg>
 8001b90:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <lsm6dsox_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  lsm6dsox_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL3_C, (uint8_t *)&reg, 1);
 8001ba6:	f107 0208 	add.w	r2, r7, #8
 8001baa:	2301      	movs	r3, #1
 8001bac:	2112      	movs	r1, #18
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fb2e 	bl	8001210 <lsm6dsox_read_reg>
 8001bb4:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8001bb6:	7a3b      	ldrb	r3, [r7, #8]
 8001bb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	701a      	strb	r2, [r3, #0]

  return ret;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <lsm6dsox_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_i3c_disable_set(stmdev_ctx_t *ctx,
                                 lsm6dsox_i3c_disable_t val)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70fb      	strb	r3, [r7, #3]
  lsm6dsox_i3c_bus_avb_t i3c_bus_avb;
  lsm6dsox_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dsox_read_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001bda:	f107 020c 	add.w	r2, r7, #12
 8001bde:	2301      	movs	r3, #1
 8001be0:	2118      	movs	r1, #24
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fb14 	bl	8001210 <lsm6dsox_read_reg>
 8001be8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d111      	bne.n	8001c14 <lsm6dsox_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	09db      	lsrs	r3, r3, #7
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	7b3b      	ldrb	r3, [r7, #12]
 8001bfe:	f362 0341 	bfi	r3, r2, #1, #1
 8001c02:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001c04:	f107 020c 	add.w	r2, r7, #12
 8001c08:	2301      	movs	r3, #1
 8001c0a:	2118      	movs	r1, #24
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fb17 	bl	8001240 <lsm6dsox_write_reg>
 8001c12:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <lsm6dsox_i3c_disable_set+0x5c>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8001c1a:	f107 0210 	add.w	r2, r7, #16
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2162      	movs	r1, #98	; 0x62
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff faf4 	bl	8001210 <lsm6dsox_read_reg>
 8001c28:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10f      	bne.n	8001c50 <lsm6dsox_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	7c3b      	ldrb	r3, [r7, #16]
 8001c3a:	f362 03c4 	bfi	r3, r2, #3, #2
 8001c3e:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_I3C_BUS_AVB,
 8001c40:	f107 0210 	add.w	r2, r7, #16
 8001c44:	2301      	movs	r3, #1
 8001c46:	2162      	movs	r1, #98	; 0x62
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff faf9 	bl	8001240 <lsm6dsox_write_reg>
 8001c4e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8001c50:	697b      	ldr	r3, [r7, #20]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <lsm6dsox_tilt_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_tilt_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_status_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001c64:	2102      	movs	r1, #2
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ff3b 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001c6c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <lsm6dsox_tilt_flag_data_ready_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_STATUS,
 8001c74:	f107 0208 	add.w	r2, r7, #8
 8001c78:	2301      	movs	r3, #1
 8001c7a:	2112      	movs	r1, #18
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fac7 	bl	8001210 <lsm6dsox_read_reg>
 8001c82:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10b      	bne.n	8001ca2 <lsm6dsox_tilt_flag_data_ready_get+0x48>
  {
    *val = reg.is_tilt;
 8001c8a:	7a3b      	ldrb	r3, [r7, #8]
 8001c8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff21 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001ca0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <lsm6dsox_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_enable_get(stmdev_ctx_t *ctx,
                                lsm6dsox_emb_fsm_enable_t *val)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff12 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001cbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <lsm6dsox_fsm_enable_get+0x28>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_FSM_ENABLE_A, (uint8_t *) val,
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	2146      	movs	r1, #70	; 0x46
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fa9f 	bl	8001210 <lsm6dsox_read_reg>
 8001cd2:	60f8      	str	r0, [r7, #12]
                            2);
  }

  if (ret == 0)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <lsm6dsox_fsm_enable_get+0x38>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff00 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001ce2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <lsm6dsox_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_fsm_odr_t *val)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff fef0 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001d02:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d107      	bne.n	8001d1a <lsm6dsox_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_B,
 8001d0a:	f107 0208 	add.w	r2, r7, #8
 8001d0e:	2301      	movs	r3, #1
 8001d10:	215f      	movs	r1, #95	; 0x5f
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fa7c 	bl	8001210 <lsm6dsox_read_reg>
 8001d18:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d12a      	bne.n	8001d76 <lsm6dsox_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8001d20:	7a3b      	ldrb	r3, [r7, #8]
 8001d22:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d81b      	bhi.n	8001d64 <lsm6dsox_fsm_data_rate_get+0x74>
 8001d2c:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <lsm6dsox_fsm_data_rate_get+0x44>)
 8001d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d32:	bf00      	nop
 8001d34:	08001d45 	.word	0x08001d45
 8001d38:	08001d4d 	.word	0x08001d4d
 8001d3c:	08001d55 	.word	0x08001d55
 8001d40:	08001d5d 	.word	0x08001d5d
    {
      case LSM6DSOX_ODR_FSM_12Hz5:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
        break;
 8001d4a:	e00f      	b.n	8001d6c <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_26Hz:
        *val = LSM6DSOX_ODR_FSM_26Hz;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
        break;
 8001d52:	e00b      	b.n	8001d6c <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_52Hz:
        *val = LSM6DSOX_ODR_FSM_52Hz;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2202      	movs	r2, #2
 8001d58:	701a      	strb	r2, [r3, #0]
        break;
 8001d5a:	e007      	b.n	8001d6c <lsm6dsox_fsm_data_rate_get+0x7c>

      case LSM6DSOX_ODR_FSM_104Hz:
        *val = LSM6DSOX_ODR_FSM_104Hz;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	701a      	strb	r2, [r3, #0]
        break;
 8001d62:	e003      	b.n	8001d6c <lsm6dsox_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_FSM_12Hz5;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
        break;
 8001d6a:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff feb7 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001d74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <lsm6dsox_mlc_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_mlc_odr_t *val)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff fea8 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001d92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <lsm6dsox_mlc_data_rate_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_ODR_CFG_C,
 8001d9a:	f107 0208 	add.w	r2, r7, #8
 8001d9e:	2301      	movs	r3, #1
 8001da0:	2160      	movs	r1, #96	; 0x60
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fa34 	bl	8001210 <lsm6dsox_read_reg>
 8001da8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d12a      	bne.n	8001e06 <lsm6dsox_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8001db0:	7a3b      	ldrb	r3, [r7, #8]
 8001db2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d81b      	bhi.n	8001df4 <lsm6dsox_mlc_data_rate_get+0x74>
 8001dbc:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <lsm6dsox_mlc_data_rate_get+0x44>)
 8001dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc2:	bf00      	nop
 8001dc4:	08001dd5 	.word	0x08001dd5
 8001dc8:	08001ddd 	.word	0x08001ddd
 8001dcc:	08001de5 	.word	0x08001de5
 8001dd0:	08001ded 	.word	0x08001ded
    {
      case LSM6DSOX_ODR_PRGS_12Hz5:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
        break;
 8001dda:	e00f      	b.n	8001dfc <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_26Hz:
        *val = LSM6DSOX_ODR_PRGS_26Hz;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
        break;
 8001de2:	e00b      	b.n	8001dfc <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_52Hz:
        *val = LSM6DSOX_ODR_PRGS_52Hz;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	701a      	strb	r2, [r3, #0]
        break;
 8001dea:	e007      	b.n	8001dfc <lsm6dsox_mlc_data_rate_get+0x7c>

      case LSM6DSOX_ODR_PRGS_104Hz:
        *val = LSM6DSOX_ODR_PRGS_104Hz;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2203      	movs	r2, #3
 8001df0:	701a      	strb	r2, [r3, #0]
        break;
 8001df2:	e003      	b.n	8001dfc <lsm6dsox_mlc_data_rate_get+0x7c>

      default:
        *val = LSM6DSOX_ODR_PRGS_12Hz5;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
        break;
 8001dfa:	bf00      	nop
    }

    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fe6f 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001e04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <lsm6dsox_embedded_sens_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_set(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *val)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fe60 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001e22:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d107      	bne.n	8001e3a <lsm6dsox_embedded_sens_set+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 8001e2a:	f107 0210 	add.w	r2, r7, #16
 8001e2e:	2301      	movs	r3, #1
 8001e30:	2104      	movs	r1, #4
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff f9ec 	bl	8001210 <lsm6dsox_read_reg>
 8001e38:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d13d      	bne.n	8001ebc <lsm6dsox_embedded_sens_set+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8001e40:	f107 020c 	add.w	r2, r7, #12
 8001e44:	2301      	movs	r3, #1
 8001e46:	2105      	movs	r1, #5
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff f9e1 	bl	8001210 <lsm6dsox_read_reg>
 8001e4e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_func_en_b.mlc_en = val->mlc;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	7b3b      	ldrb	r3, [r7, #12]
 8001e5c:	f362 1304 	bfi	r3, r2, #4, #1
 8001e60:	733b      	strb	r3, [r7, #12]
    emb_func_en_b.fsm_en = val->fsm;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	7b3b      	ldrb	r3, [r7, #12]
 8001e6e:	f362 0300 	bfi	r3, r2, #0, #1
 8001e72:	733b      	strb	r3, [r7, #12]
    emb_func_en_a.tilt_en = val->tilt;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	7c3b      	ldrb	r3, [r7, #16]
 8001e80:	f362 1304 	bfi	r3, r2, #4, #1
 8001e84:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.pedo_en = val->step;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	7c3b      	ldrb	r3, [r7, #16]
 8001e92:	f362 03c3 	bfi	r3, r2, #3, #1
 8001e96:	743b      	strb	r3, [r7, #16]
    emb_func_en_a.sign_motion_en = val->sig_mot;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	7c3b      	ldrb	r3, [r7, #16]
 8001ea4:	f362 1345 	bfi	r3, r2, #5, #1
 8001ea8:	743b      	strb	r3, [r7, #16]
    emb_func_en_b.fifo_compr_en = val->fifo_compr;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	7b3b      	ldrb	r3, [r7, #12]
 8001eb6:	f362 03c3 	bfi	r3, r2, #3, #1
 8001eba:	733b      	strb	r3, [r7, #12]
  }

  if (ret == 0)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <lsm6dsox_embedded_sens_set+0xc2>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 8001ec2:	f107 0210 	add.w	r2, r7, #16
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	2104      	movs	r1, #4
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff f9b8 	bl	8001240 <lsm6dsox_write_reg>
 8001ed0:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <lsm6dsox_embedded_sens_set+0xd8>
  {
    ret = lsm6dsox_write_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8001ed8:	f107 020c 	add.w	r2, r7, #12
 8001edc:	2301      	movs	r3, #1
 8001ede:	2105      	movs	r1, #5
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff f9ad 	bl	8001240 <lsm6dsox_write_reg>
 8001ee6:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d104      	bne.n	8001ef8 <lsm6dsox_embedded_sens_set+0xe8>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff fdf6 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001ef6:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001ef8:	697b      	ldr	r3, [r7, #20]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <lsm6dsox_embedded_sens_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsox_embedded_sens_get(stmdev_ctx_t *ctx,
                                   lsm6dsox_emb_sens_t *emb_sens)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  lsm6dsox_emb_func_en_a_t emb_func_en_a;
  lsm6dsox_emb_func_en_b_t emb_func_en_b;
  int32_t ret;

  ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_EMBEDDED_FUNC_BANK);
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fde7 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001f14:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <lsm6dsox_embedded_sens_get+0x2a>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_A,
 8001f1c:	f107 0210 	add.w	r2, r7, #16
 8001f20:	2301      	movs	r3, #1
 8001f22:	2104      	movs	r1, #4
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff f973 	bl	8001210 <lsm6dsox_read_reg>
 8001f2a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d13d      	bne.n	8001fae <lsm6dsox_embedded_sens_get+0xac>
  {
    ret = lsm6dsox_read_reg(ctx, LSM6DSOX_EMB_FUNC_EN_B,
 8001f32:	f107 020c 	add.w	r2, r7, #12
 8001f36:	2301      	movs	r3, #1
 8001f38:	2105      	movs	r1, #5
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff f968 	bl	8001210 <lsm6dsox_read_reg>
 8001f40:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
    emb_sens->mlc = emb_func_en_b.mlc_en;
 8001f42:	7b3b      	ldrb	r3, [r7, #12]
 8001f44:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f48:	b2d9      	uxtb	r1, r3
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	7813      	ldrb	r3, [r2, #0]
 8001f4e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001f52:	7013      	strb	r3, [r2, #0]
    emb_sens->fsm = emb_func_en_b.fsm_en;
 8001f54:	7b3b      	ldrb	r3, [r7, #12]
 8001f56:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f5a:	b2d9      	uxtb	r1, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	7813      	ldrb	r3, [r2, #0]
 8001f60:	f361 1304 	bfi	r3, r1, #4, #1
 8001f64:	7013      	strb	r3, [r2, #0]
    emb_sens->tilt = emb_func_en_a.tilt_en;
 8001f66:	7c3b      	ldrb	r3, [r7, #16]
 8001f68:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f6c:	b2d9      	uxtb	r1, r3
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	7813      	ldrb	r3, [r2, #0]
 8001f72:	f361 0341 	bfi	r3, r1, #1, #1
 8001f76:	7013      	strb	r3, [r2, #0]
    emb_sens->step = emb_func_en_a.pedo_en;
 8001f78:	7c3b      	ldrb	r3, [r7, #16]
 8001f7a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f7e:	b2d9      	uxtb	r1, r3
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	7813      	ldrb	r3, [r2, #0]
 8001f84:	f361 0382 	bfi	r3, r1, #2, #1
 8001f88:	7013      	strb	r3, [r2, #0]
    emb_sens->sig_mot = emb_func_en_a.sign_motion_en;
 8001f8a:	7c3b      	ldrb	r3, [r7, #16]
 8001f8c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001f90:	b2d9      	uxtb	r1, r3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	7813      	ldrb	r3, [r2, #0]
 8001f96:	f361 0300 	bfi	r3, r1, #0, #1
 8001f9a:	7013      	strb	r3, [r2, #0]
    emb_sens->fifo_compr = emb_func_en_b.fifo_compr_en;
 8001f9c:	7b3b      	ldrb	r3, [r7, #12]
 8001f9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001fa2:	b2d9      	uxtb	r1, r3
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	7813      	ldrb	r3, [r2, #0]
 8001fa8:	f361 1345 	bfi	r3, r1, #5, #1
 8001fac:	7013      	strb	r3, [r2, #0]
  }

  if (ret == 0)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <lsm6dsox_embedded_sens_get+0xbc>
  {
    ret = lsm6dsox_mem_bank_set(ctx, LSM6DSOX_USER_BANK);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fd93 	bl	8001ae2 <lsm6dsox_mem_bank_set>
 8001fbc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001fbe:	697b      	ldr	r3, [r7, #20]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_TIM_PeriodElapsedCallback>:
int32_t madgwick_filter(float acc_data[], float gyr_data[]);
void mult_matrix(int m, int n, int l, float A[m][n], float B[n][l], float C[m][l]);
float invSqrt(float x);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fcc:	b092      	sub	sp, #72	; 0x48
 8001fce:	af0a      	add	r7, sp, #40	; 0x28
 8001fd0:	6178      	str	r0, [r7, #20]
	if (filter != stOrient)
 8001fd2:	4b8c      	ldr	r3, [pc, #560]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4b8c      	ldr	r3, [pc, #560]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	f000 80f9 	beq.w	80021d2 <HAL_TIM_PeriodElapsedCallback+0x20a>
	{
		uint8_t reg;

		/* Read output only if new values is available */
		lsm6dsox_xl_flag_data_ready_get(&dev_ctx, &reg);
 8001fe0:	f107 031f 	add.w	r3, r7, #31
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4889      	ldr	r0, [pc, #548]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001fe8:	f7ff fccc 	bl	8001984 <lsm6dsox_xl_flag_data_ready_get>

		if (reg)
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80f9 	beq.w	80021e6 <HAL_TIM_PeriodElapsedCallback+0x21e>
		{
			/* Read data */
			memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001ff4:	2206      	movs	r2, #6
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4885      	ldr	r0, [pc, #532]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001ffa:	f009 fb0b 	bl	800b614 <memset>
			lsm6dsox_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001ffe:	4984      	ldr	r1, [pc, #528]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002000:	4882      	ldr	r0, [pc, #520]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002002:	f7ff fd23 	bl	8001a4c <lsm6dsox_acceleration_raw_get>
			acceleration_mg[0] = lsm6dsox_from_fs2_to_mg(data_raw_acceleration[0])/1000.0f;
 8002006:	4b82      	ldr	r3, [pc, #520]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff f92f 	bl	8001270 <lsm6dsox_from_fs2_to_mg>
 8002012:	eeb0 7a40 	vmov.f32	s14, s0
 8002016:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8002214 <HAL_TIM_PeriodElapsedCallback+0x24c>
 800201a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201e:	4b7e      	ldr	r3, [pc, #504]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002020:	edc3 7a00 	vstr	s15, [r3]
			acceleration_mg[1] = lsm6dsox_from_fs2_to_mg(data_raw_acceleration[1])/1000.0f;
 8002024:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002026:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f920 	bl	8001270 <lsm6dsox_from_fs2_to_mg>
 8002030:	eeb0 7a40 	vmov.f32	s14, s0
 8002034:	eddf 6a77 	vldr	s13, [pc, #476]	; 8002214 <HAL_TIM_PeriodElapsedCallback+0x24c>
 8002038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203c:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800203e:	edc3 7a01 	vstr	s15, [r3, #4]
			acceleration_mg[2] = lsm6dsox_from_fs2_to_mg(data_raw_acceleration[2])/1000.0f;
 8002042:	4b73      	ldr	r3, [pc, #460]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f911 	bl	8001270 <lsm6dsox_from_fs2_to_mg>
 800204e:	eeb0 7a40 	vmov.f32	s14, s0
 8002052:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002214 <HAL_TIM_PeriodElapsedCallback+0x24c>
 8002056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800205a:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800205c:	edc3 7a02 	vstr	s15, [r3, #8]
			memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8002060:	2206      	movs	r2, #6
 8002062:	2100      	movs	r1, #0
 8002064:	486d      	ldr	r0, [pc, #436]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002066:	f009 fad5 	bl	800b614 <memset>
			lsm6dsox_angular_rate_raw_get(&dev_ctx, data_raw_angular_rate);
 800206a:	496c      	ldr	r1, [pc, #432]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800206c:	4867      	ldr	r0, [pc, #412]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800206e:	f7ff fca2 	bl	80019b6 <lsm6dsox_angular_rate_raw_get>
			angular_rate_mdps[0] = lsm6dsox_from_fs250_to_mdps(data_raw_angular_rate[0])/1000.0f;
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff f911 	bl	80012a0 <lsm6dsox_from_fs250_to_mdps>
 800207e:	eeb0 7a40 	vmov.f32	s14, s0
 8002082:	eddf 6a64 	vldr	s13, [pc, #400]	; 8002214 <HAL_TIM_PeriodElapsedCallback+0x24c>
 8002086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800208a:	4b65      	ldr	r3, [pc, #404]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800208c:	edc3 7a00 	vstr	s15, [r3]
			angular_rate_mdps[1] = lsm6dsox_from_fs250_to_mdps(data_raw_angular_rate[1])/1000.0f;
 8002090:	4b62      	ldr	r3, [pc, #392]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002092:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff f902 	bl	80012a0 <lsm6dsox_from_fs250_to_mdps>
 800209c:	eeb0 7a40 	vmov.f32	s14, s0
 80020a0:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002214 <HAL_TIM_PeriodElapsedCallback+0x24c>
 80020a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a8:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80020aa:	edc3 7a01 	vstr	s15, [r3, #4]
			angular_rate_mdps[2] = lsm6dsox_from_fs250_to_mdps(data_raw_angular_rate[2])/1000.0f;
 80020ae:	4b5b      	ldr	r3, [pc, #364]	; (800221c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80020b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff f8f3 	bl	80012a0 <lsm6dsox_from_fs250_to_mdps>
 80020ba:	eeb0 7a40 	vmov.f32	s14, s0
 80020be:	eddf 6a55 	vldr	s13, [pc, #340]	; 8002214 <HAL_TIM_PeriodElapsedCallback+0x24c>
 80020c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c6:	4b56      	ldr	r3, [pc, #344]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80020c8:	edc3 7a02 	vstr	s15, [r3, #8]

			if (filter == complem)
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b54      	ldr	r3, [pc, #336]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d104      	bne.n	80020e2 <HAL_TIM_PeriodElapsedCallback+0x11a>
				complementary_filter(acceleration_mg, angular_rate_mdps);
 80020d8:	4951      	ldr	r1, [pc, #324]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80020da:	484f      	ldr	r0, [pc, #316]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80020dc:	f000 fa16 	bl	800250c <complementary_filter>
 80020e0:	e014      	b.n	800210c <HAL_TIM_PeriodElapsedCallback+0x144>
			else if (filter == kalman)
 80020e2:	4b48      	ldr	r3, [pc, #288]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b50      	ldr	r3, [pc, #320]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d104      	bne.n	80020f8 <HAL_TIM_PeriodElapsedCallback+0x130>
				kalman_filter(acceleration_mg, angular_rate_mdps);
 80020ee:	494c      	ldr	r1, [pc, #304]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80020f0:	4849      	ldr	r0, [pc, #292]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80020f2:	f000 fb55 	bl	80027a0 <kalman_filter>
 80020f6:	e009      	b.n	800210c <HAL_TIM_PeriodElapsedCallback+0x144>
			else if (filter == madgwick)
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b4b      	ldr	r3, [pc, #300]	; (800222c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d103      	bne.n	800210c <HAL_TIM_PeriodElapsedCallback+0x144>
				madgwick_filter(acceleration_mg, angular_rate_mdps);
 8002104:	4946      	ldr	r1, [pc, #280]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002106:	4844      	ldr	r0, [pc, #272]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002108:	f001 f852 	bl	80031b0 <madgwick_filter>
			if (filter == notfilter)
 800210c:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d13c      	bne.n	8002192 <HAL_TIM_PeriodElapsedCallback+0x1ca>
			{
				sprintf((char *)tx_buffer,
					   "%4.2f,%4.2f,%4.2f,%4.2f,%4.2f,%4.2f\r",
					   acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002118:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800211a:	681b      	ldr	r3, [r3, #0]
				sprintf((char *)tx_buffer,
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa33 	bl	8000588 <__aeabi_f2d>
 8002122:	e9c7 0102 	strd	r0, r1, [r7, #8]
					   acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002126:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002128:	685b      	ldr	r3, [r3, #4]
				sprintf((char *)tx_buffer,
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fa2c 	bl	8000588 <__aeabi_f2d>
 8002130:	4604      	mov	r4, r0
 8002132:	460d      	mov	r5, r1
					   acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002134:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002136:	689b      	ldr	r3, [r3, #8]
				sprintf((char *)tx_buffer,
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fa25 	bl	8000588 <__aeabi_f2d>
 800213e:	4680      	mov	r8, r0
 8002140:	4689      	mov	r9, r1
					   angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002144:	681b      	ldr	r3, [r3, #0]
				sprintf((char *)tx_buffer,
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fa1e 	bl	8000588 <__aeabi_f2d>
 800214c:	4682      	mov	sl, r0
 800214e:	468b      	mov	fp, r1
					   angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8002150:	4b33      	ldr	r3, [pc, #204]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002152:	685b      	ldr	r3, [r3, #4]
				sprintf((char *)tx_buffer,
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fa17 	bl	8000588 <__aeabi_f2d>
 800215a:	e9c7 0100 	strd	r0, r1, [r7]
					   angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002160:	689b      	ldr	r3, [r3, #8]
				sprintf((char *)tx_buffer,
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fa10 	bl	8000588 <__aeabi_f2d>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002170:	ed97 7b00 	vldr	d7, [r7]
 8002174:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002178:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800217c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002180:	e9cd 4500 	strd	r4, r5, [sp]
 8002184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002188:	492a      	ldr	r1, [pc, #168]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800218a:	482b      	ldr	r0, [pc, #172]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800218c:	f00a f984 	bl	800c498 <siprintf>
 8002190:	e029      	b.n	80021e6 <HAL_TIM_PeriodElapsedCallback+0x21e>
			}
			else
			{
				sprintf((char *)tx_buffer,
							   "%.2f,%.2f,%.2f\r",
							   output_data[0], output_data[1], output_data[2]);
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002194:	681b      	ldr	r3, [r3, #0]
				sprintf((char *)tx_buffer,
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f9f6 	bl	8000588 <__aeabi_f2d>
 800219c:	4680      	mov	r8, r0
 800219e:	4689      	mov	r9, r1
							   output_data[0], output_data[1], output_data[2]);
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80021a2:	685b      	ldr	r3, [r3, #4]
				sprintf((char *)tx_buffer,
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f9ef 	bl	8000588 <__aeabi_f2d>
 80021aa:	4604      	mov	r4, r0
 80021ac:	460d      	mov	r5, r1
							   output_data[0], output_data[1], output_data[2]);
 80021ae:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80021b0:	689b      	ldr	r3, [r3, #8]
				sprintf((char *)tx_buffer,
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f9e8 	bl	8000588 <__aeabi_f2d>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021c0:	e9cd 4500 	strd	r4, r5, [sp]
 80021c4:	4642      	mov	r2, r8
 80021c6:	464b      	mov	r3, r9
 80021c8:	491d      	ldr	r1, [pc, #116]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80021ca:	481b      	ldr	r0, [pc, #108]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80021cc:	f00a f964 	bl	800c498 <siprintf>
 80021d0:	e009      	b.n	80021e6 <HAL_TIM_PeriodElapsedCallback+0x21e>
		}
	}
	else
	{
		uint8_t is_tilt;
		lsm6dsox_tilt_flag_data_ready_get(&dev_ctx, &is_tilt);
 80021d2:	f107 031e 	add.w	r3, r7, #30
 80021d6:	4619      	mov	r1, r3
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021da:	f7ff fd3e 	bl	8001c5a <lsm6dsox_tilt_flag_data_ready_get>
		sprintf((char *)tx_buffer, "TILT Detected\r\n");
 80021de:	4919      	ldr	r1, [pc, #100]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80021e0:	4815      	ldr	r0, [pc, #84]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80021e2:	f00a f959 	bl	800c498 <siprintf>
	}
	tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80021e6:	4814      	ldr	r0, [pc, #80]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80021e8:	f7fe f812 	bl	8000210 <strlen>
 80021ec:	4603      	mov	r3, r0
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	4811      	ldr	r0, [pc, #68]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80021f4:	f000 f97a 	bl	80024ec <tx_com>
}
 80021f8:	bf00      	nop
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002202:	bf00      	nop
 8002204:	20000664 	.word	0x20000664
 8002208:	2000027c 	.word	0x2000027c
 800220c:	200007b8 	.word	0x200007b8
 8002210:	20000618 	.word	0x20000618
 8002214:	447a0000 	.word	0x447a0000
 8002218:	20000628 	.word	0x20000628
 800221c:	20000620 	.word	0x20000620
 8002220:	20000634 	.word	0x20000634
 8002224:	20000270 	.word	0x20000270
 8002228:	20000274 	.word	0x20000274
 800222c:	20000278 	.word	0x20000278
 8002230:	20000668 	.word	0x20000668
 8002234:	080109d8 	.word	0x080109d8
 8002238:	20000a5c 	.word	0x20000a5c
 800223c:	20000640 	.word	0x20000640
 8002240:	08010a00 	.word	0x08010a00
 8002244:	08010a10 	.word	0x08010a10

08002248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800224e:	f001 fe2e 	bl	8003eae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002252:	f000 f885 	bl	8002360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002256:	f7fe fee9 	bl	800102c <MX_GPIO_Init>
  MX_I2C1_Init();
 800225a:	f7fe ff55 	bl	8001108 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800225e:	f008 fc13 	bl	800aa88 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8002262:	f001 fd9d 	bl	8003da0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8002266:	4b33      	ldr	r3, [pc, #204]	; (8002334 <main+0xec>)
 8002268:	4a33      	ldr	r2, [pc, #204]	; (8002338 <main+0xf0>)
 800226a:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <main+0xec>)
 800226e:	4a33      	ldr	r2, [pc, #204]	; (800233c <main+0xf4>)
 8002270:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &SENSOR_BUS;
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <main+0xec>)
 8002274:	4a32      	ldr	r2, [pc, #200]	; (8002340 <main+0xf8>)
 8002276:	609a      	str	r2, [r3, #8]
  /* Wait Boot Time */
  platform_delay(10);
 8002278:	200a      	movs	r0, #10
 800227a:	f001 fc47 	bl	8003b0c <platform_delay>
  /* Check device ID */
  lsm6dsox_device_id_get(&dev_ctx, &whoami);
 800227e:	4931      	ldr	r1, [pc, #196]	; (8002344 <main+0xfc>)
 8002280:	482c      	ldr	r0, [pc, #176]	; (8002334 <main+0xec>)
 8002282:	f7ff fc54 	bl	8001b2e <lsm6dsox_device_id_get>

  if (whoami != LSM6DSOX_ID)
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <main+0xfc>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b6c      	cmp	r3, #108	; 0x6c
 800228c:	d009      	beq.n	80022a2 <main+0x5a>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(Red_led_GPIO_Port, Red_led_Pin);
 800228e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002292:	482d      	ldr	r0, [pc, #180]	; (8002348 <main+0x100>)
 8002294:	f002 f963 	bl	800455e <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8002298:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800229c:	f001 fe64 	bl	8003f68 <HAL_Delay>
		  HAL_GPIO_TogglePin(Red_led_GPIO_Port, Red_led_Pin);
 80022a0:	e7f5      	b.n	800228e <main+0x46>
	  }

  /* Restore default configuration */
  lsm6dsox_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80022a2:	2101      	movs	r1, #1
 80022a4:	4823      	ldr	r0, [pc, #140]	; (8002334 <main+0xec>)
 80022a6:	f7ff fc53 	bl	8001b50 <lsm6dsox_reset_set>

  do {
	  lsm6dsox_reset_get(&dev_ctx, &rst);
 80022aa:	4928      	ldr	r1, [pc, #160]	; (800234c <main+0x104>)
 80022ac:	4821      	ldr	r0, [pc, #132]	; (8002334 <main+0xec>)
 80022ae:	f7ff fc75 	bl	8001b9c <lsm6dsox_reset_get>
  } while (rst);
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <main+0x104>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f7      	bne.n	80022aa <main+0x62>

  /* Disable I3C interface */
  lsm6dsox_i3c_disable_set(&dev_ctx, LSM6DSOX_I3C_DISABLE);
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	481d      	ldr	r0, [pc, #116]	; (8002334 <main+0xec>)
 80022be:	f7ff fc86 	bl	8001bce <lsm6dsox_i3c_disable_set>
  /* Enable Block Data Update */
  lsm6dsox_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80022c2:	2101      	movs	r1, #1
 80022c4:	481b      	ldr	r0, [pc, #108]	; (8002334 <main+0xec>)
 80022c6:	f7ff fb37 	bl	8001938 <lsm6dsox_block_data_update_set>
  /* Set XL and Gyro Output Data Rate */
  lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_417Hz);
 80022ca:	2106      	movs	r1, #6
 80022cc:	4819      	ldr	r0, [pc, #100]	; (8002334 <main+0xec>)
 80022ce:	f7ff f825 	bl	800131c <lsm6dsox_xl_data_rate_set>
  lsm6dsox_gy_data_rate_set(&dev_ctx, LSM6DSOX_GY_ODR_417Hz);
 80022d2:	2106      	movs	r1, #6
 80022d4:	4817      	ldr	r0, [pc, #92]	; (8002334 <main+0xec>)
 80022d6:	f7ff f9bb 	bl	8001650 <lsm6dsox_gy_data_rate_set>
  /* Set 2g full XL scale and 250 dps full Gyro */
  lsm6dsox_xl_full_scale_set(&dev_ctx, LSM6DSOX_2g);
 80022da:	2100      	movs	r1, #0
 80022dc:	4815      	ldr	r0, [pc, #84]	; (8002334 <main+0xec>)
 80022de:	f7fe fff7 	bl	80012d0 <lsm6dsox_xl_full_scale_set>
  lsm6dsox_gy_full_scale_set(&dev_ctx, LSM6DSOX_250dps);
 80022e2:	2100      	movs	r1, #0
 80022e4:	4813      	ldr	r0, [pc, #76]	; (8002334 <main+0xec>)
 80022e6:	f7ff f98d 	bl	8001604 <lsm6dsox_gy_full_scale_set>

  HAL_GPIO_WritePin(Green_led_GPIO_Port, Green_led_Pin, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	2101      	movs	r1, #1
 80022ee:	4816      	ldr	r0, [pc, #88]	; (8002348 <main+0x100>)
 80022f0:	f002 f91c 	bl	800452c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  memset(old_data, 0.0f, sizeof(old_data));
 80022f4:	220c      	movs	r2, #12
 80022f6:	2100      	movs	r1, #0
 80022f8:	4815      	ldr	r0, [pc, #84]	; (8002350 <main+0x108>)
 80022fa:	f009 f98b 	bl	800b614 <memset>
  filter = stOrient;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <main+0x10c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <main+0x110>)
 8002304:	6013      	str	r3, [r2, #0]
  if (filter == stOrient)
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <main+0x110>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <main+0x10c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d10c      	bne.n	800232c <main+0xe4>
  {
	  lsm6dsox_emb_sens_t emb_sens;
	  lsm6dsox_xl_data_rate_set(&dev_ctx, LSM6DSOX_XL_ODR_26Hz);
 8002312:	2102      	movs	r1, #2
 8002314:	4807      	ldr	r0, [pc, #28]	; (8002334 <main+0xec>)
 8002316:	f7ff f801 	bl	800131c <lsm6dsox_xl_data_rate_set>
	  emb_sens.tilt = PROPERTY_ENABLE;
 800231a:	793b      	ldrb	r3, [r7, #4]
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	713b      	strb	r3, [r7, #4]
	  lsm6dsox_embedded_sens_set(&dev_ctx, &emb_sens);
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4803      	ldr	r0, [pc, #12]	; (8002334 <main+0xec>)
 8002328:	f7ff fd72 	bl	8001e10 <lsm6dsox_embedded_sens_set>
  }
  HAL_TIM_Base_Start_IT(&htim6);
 800232c:	480b      	ldr	r0, [pc, #44]	; (800235c <main+0x114>)
 800232e:	f005 f927 	bl	8007580 <HAL_TIM_Base_Start_IT>
  while (1)
 8002332:	e7fe      	b.n	8002332 <main+0xea>
 8002334:	200007b8 	.word	0x200007b8
 8002338:	08002479 	.word	0x08002479
 800233c:	080024b3 	.word	0x080024b3
 8002340:	2000067c 	.word	0x2000067c
 8002344:	20000a58 	.word	0x20000a58
 8002348:	40020400 	.word	0x40020400
 800234c:	20000e44 	.word	0x20000e44
 8002350:	2000064c 	.word	0x2000064c
 8002354:	2000027c 	.word	0x2000027c
 8002358:	20000664 	.word	0x20000664
 800235c:	20001094 	.word	0x20001094

08002360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0b4      	sub	sp, #208	; 0xd0
 8002364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002366:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800236a:	2230      	movs	r2, #48	; 0x30
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f009 f950 	bl	800b614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002374:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002384:	f107 0308 	add.w	r3, r7, #8
 8002388:	2284      	movs	r2, #132	; 0x84
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f009 f941 	bl	800b614 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <SystemClock_Config+0x110>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a36      	ldr	r2, [pc, #216]	; (8002470 <SystemClock_Config+0x110>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b34      	ldr	r3, [pc, #208]	; (8002470 <SystemClock_Config+0x110>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80023aa:	4b32      	ldr	r3, [pc, #200]	; (8002474 <SystemClock_Config+0x114>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023b2:	4a30      	ldr	r2, [pc, #192]	; (8002474 <SystemClock_Config+0x114>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <SystemClock_Config+0x114>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c6:	2301      	movs	r3, #1
 80023c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d4:	2302      	movs	r3, #2
 80023d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023e2:	2304      	movs	r3, #4
 80023e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80023e8:	2348      	movs	r3, #72	; 0x48
 80023ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023ee:	2302      	movs	r3, #2
 80023f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80023f4:	2303      	movs	r3, #3
 80023f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fff8 	bl	80063f4 <HAL_RCC_OscConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800240a:	f001 fb8a 	bl	8003b22 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800240e:	230f      	movs	r3, #15
 8002410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800242e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002432:	2102      	movs	r1, #2
 8002434:	4618      	mov	r0, r3
 8002436:	f004 fa81 	bl	800693c <HAL_RCC_ClockConfig>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002440:	f001 fb6f 	bl	8003b22 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
 8002444:	f44f 1301 	mov.w	r3, #2113536	; 0x204000
 8002448:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800244a:	2300      	movs	r3, #0
 800244c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	4618      	mov	r0, r3
 800245a:	f004 fc49 	bl	8006cf0 <HAL_RCCEx_PeriphCLKConfig>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8002464:	f001 fb5d 	bl	8003b22 <Error_Handler>
  }
}
 8002468:	bf00      	nop
 800246a:	37d0      	adds	r7, #208	; 0xd0
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000

08002478 <platform_write>:

/* USER CODE BEGIN 4 */

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af04      	add	r7, sp, #16
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	461a      	mov	r2, r3
 8002484:	460b      	mov	r3, r1
 8002486:	72fb      	strb	r3, [r7, #11]
 8002488:	4613      	mov	r3, r2
 800248a:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSOX_I2C_ADD_L, reg,
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	b29a      	uxth	r2, r3
 8002490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002494:	9302      	str	r3, [sp, #8]
 8002496:	893b      	ldrh	r3, [r7, #8]
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	21d5      	movs	r1, #213	; 0xd5
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f002 f906 	bl	80046b4 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b088      	sub	sp, #32
 80024b6:	af04      	add	r7, sp, #16
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	461a      	mov	r2, r3
 80024be:	460b      	mov	r3, r1
 80024c0:	72fb      	strb	r3, [r7, #11]
 80024c2:	4613      	mov	r3, r2
 80024c4:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSOX_I2C_ADD_L, reg,
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ce:	9302      	str	r3, [sp, #8]
 80024d0:	893b      	ldrh	r3, [r7, #8]
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2301      	movs	r3, #1
 80024da:	21d5      	movs	r1, #213	; 0xd5
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f002 f9fd 	bl	80048dc <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <tx_com>:

void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(tx_buffer, len);
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f008 fb95 	bl	800ac2c <CDC_Transmit_FS>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <complementary_filter>:

int32_t complementary_filter(float acc_data[], float gyr_data[])
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
	float acc_data_[3] = {0.0f, 0.0f, 0.0f};
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
	float gyr_data_[3] = {0.0f, 0.0f, 0.0f};
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
	acc_data_[0] = atan(acc_data[0]/sqrt(acc_data[1] * acc_data[1] + acc_data[2] * acc_data[2]));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f822 	bl	8000588 <__aeabi_f2d>
 8002544:	4604      	mov	r4, r0
 8002546:	460d      	mov	r5, r1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	ed93 7a00 	vldr	s14, [r3]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	edd3 7a00 	vldr	s15, [r3]
 8002558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3308      	adds	r3, #8
 8002560:	edd3 6a00 	vldr	s13, [r3]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3308      	adds	r3, #8
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002574:	ee17 0a90 	vmov	r0, s15
 8002578:	f7fe f806 	bl	8000588 <__aeabi_f2d>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	ec43 2b10 	vmov	d0, r2, r3
 8002584:	f00d fe52 	bl	801022c <sqrt>
 8002588:	ec53 2b10 	vmov	r2, r3, d0
 800258c:	4620      	mov	r0, r4
 800258e:	4629      	mov	r1, r5
 8002590:	f7fe f97c 	bl	800088c <__aeabi_ddiv>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	ec43 2b17 	vmov	d7, r2, r3
 800259c:	eeb0 0a47 	vmov.f32	s0, s14
 80025a0:	eef0 0a67 	vmov.f32	s1, s15
 80025a4:	f00d fc5c 	bl	800fe60 <atan>
 80025a8:	ec53 2b10 	vmov	r2, r3, d0
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fb3a 	bl	8000c28 <__aeabi_d2f>
 80025b4:	4603      	mov	r3, r0
 80025b6:	617b      	str	r3, [r7, #20]
	acc_data_[1] = atan(acc_data[1]/sqrt(acc_data[0] * acc_data[0] + acc_data[2] * acc_data[2]));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ffe2 	bl	8000588 <__aeabi_f2d>
 80025c4:	4604      	mov	r4, r0
 80025c6:	460d      	mov	r5, r1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	ed93 7a00 	vldr	s14, [r3]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3308      	adds	r3, #8
 80025dc:	edd3 6a00 	vldr	s13, [r3]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3308      	adds	r3, #8
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f0:	ee17 0a90 	vmov	r0, s15
 80025f4:	f7fd ffc8 	bl	8000588 <__aeabi_f2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f00d fe14 	bl	801022c <sqrt>
 8002604:	ec53 2b10 	vmov	r2, r3, d0
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fe f93e 	bl	800088c <__aeabi_ddiv>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	ec43 2b17 	vmov	d7, r2, r3
 8002618:	eeb0 0a47 	vmov.f32	s0, s14
 800261c:	eef0 0a67 	vmov.f32	s1, s15
 8002620:	f00d fc1e 	bl	800fe60 <atan>
 8002624:	ec53 2b10 	vmov	r2, r3, d0
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	f7fe fafc 	bl	8000c28 <__aeabi_d2f>
 8002630:	4603      	mov	r3, r0
 8002632:	61bb      	str	r3, [r7, #24]
	acc_data_[2] = atan(acc_data[2]/sqrt(acc_data[0] * acc_data[0] + acc_data[1] * acc_data[1]));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3308      	adds	r3, #8
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ffa4 	bl	8000588 <__aeabi_f2d>
 8002640:	4604      	mov	r4, r0
 8002642:	460d      	mov	r5, r1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	ed93 7a00 	vldr	s14, [r3]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3304      	adds	r3, #4
 8002658:	edd3 6a00 	vldr	s13, [r3]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3304      	adds	r3, #4
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266c:	ee17 0a90 	vmov	r0, s15
 8002670:	f7fd ff8a 	bl	8000588 <__aeabi_f2d>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	ec43 2b10 	vmov	d0, r2, r3
 800267c:	f00d fdd6 	bl	801022c <sqrt>
 8002680:	ec53 2b10 	vmov	r2, r3, d0
 8002684:	4620      	mov	r0, r4
 8002686:	4629      	mov	r1, r5
 8002688:	f7fe f900 	bl	800088c <__aeabi_ddiv>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	ec43 2b17 	vmov	d7, r2, r3
 8002694:	eeb0 0a47 	vmov.f32	s0, s14
 8002698:	eef0 0a67 	vmov.f32	s1, s15
 800269c:	f00d fbe0 	bl	800fe60 <atan>
 80026a0:	ec53 2b10 	vmov	r2, r3, d0
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fabe 	bl	8000c28 <__aeabi_d2f>
 80026ac:	4603      	mov	r3, r0
 80026ae:	61fb      	str	r3, [r7, #28]
	gyr_data_[0] = gyr_data[0] - offsetX;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	ed93 7a00 	vldr	s14, [r3]
 80026b6:	4b33      	ldr	r3, [pc, #204]	; (8002784 <complementary_filter+0x278>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c0:	edc7 7a02 	vstr	s15, [r7, #8]
	gyr_data_[1] = gyr_data[1] - offsetY;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	3304      	adds	r3, #4
 80026c8:	ed93 7a00 	vldr	s14, [r3]
 80026cc:	4b2e      	ldr	r3, [pc, #184]	; (8002788 <complementary_filter+0x27c>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d6:	edc7 7a03 	vstr	s15, [r7, #12]
	gyr_data_[2] = gyr_data[2] - offsetZ;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	3308      	adds	r3, #8
 80026de:	ed93 7a00 	vldr	s14, [r3]
 80026e2:	4b2a      	ldr	r3, [pc, #168]	; (800278c <complementary_filter+0x280>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ec:	edc7 7a04 	vstr	s15, [r7, #16]
	float k = 0.9995f;
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <complementary_filter+0x284>)
 80026f2:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < 3; i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
 80026f8:	e03c      	b.n	8002774 <complementary_filter+0x268>
	{
		output_data[i] = k * (old_data[i] + gyr_data_[i] * dt) + (1-k) * acc_data_[i];
 80026fa:	4a26      	ldr	r2, [pc, #152]	; (8002794 <complementary_filter+0x288>)
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800270e:	4413      	add	r3, r2
 8002710:	3b20      	subs	r3, #32
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002798 <complementary_filter+0x28c>
 800271a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800271e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002722:	edd7 7a08 	vldr	s15, [r7, #32]
 8002726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800272e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002732:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800273e:	4413      	add	r3, r2
 8002740:	3b14      	subs	r3, #20
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	4a13      	ldr	r2, [pc, #76]	; (800279c <complementary_filter+0x290>)
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	edc3 7a00 	vstr	s15, [r3]
		old_data[i] = output_data[i];
 800275a:	4a10      	ldr	r2, [pc, #64]	; (800279c <complementary_filter+0x290>)
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	490b      	ldr	r1, [pc, #44]	; (8002794 <complementary_filter+0x288>)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	3301      	adds	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	2b02      	cmp	r3, #2
 8002778:	ddbf      	ble.n	80026fa <complementary_filter+0x1ee>
	}

	return 0;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bdb0      	pop	{r4, r5, r7, pc}
 8002784:	20000280 	.word	0x20000280
 8002788:	20000284 	.word	0x20000284
 800278c:	20000288 	.word	0x20000288
 8002790:	3f7fdf3b 	.word	0x3f7fdf3b
 8002794:	2000064c 	.word	0x2000064c
 8002798:	3dcccccd 	.word	0x3dcccccd
 800279c:	20000640 	.word	0x20000640

080027a0 <kalman_filter>:

int32_t kalman_filter(float acc_data[], float gyr_data[])
{
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b0a6      	sub	sp, #152	; 0x98
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
	//init
	float acc_data_[3];
	float gyr_data_[3];
	acc_data_[0] = atan(acc_data[0]/sqrt(acc_data[1] * acc_data[1] + acc_data[2] * acc_data[2]));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd feea 	bl	8000588 <__aeabi_f2d>
 80027b4:	4604      	mov	r4, r0
 80027b6:	460d      	mov	r5, r1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3304      	adds	r3, #4
 80027bc:	ed93 7a00 	vldr	s14, [r3]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3308      	adds	r3, #8
 80027d0:	edd3 6a00 	vldr	s13, [r3]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3308      	adds	r3, #8
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	ee17 0a90 	vmov	r0, s15
 80027e8:	f7fd fece 	bl	8000588 <__aeabi_f2d>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	ec43 2b10 	vmov	d0, r2, r3
 80027f4:	f00d fd1a 	bl	801022c <sqrt>
 80027f8:	ec53 2b10 	vmov	r2, r3, d0
 80027fc:	4620      	mov	r0, r4
 80027fe:	4629      	mov	r1, r5
 8002800:	f7fe f844 	bl	800088c <__aeabi_ddiv>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	ec43 2b17 	vmov	d7, r2, r3
 800280c:	eeb0 0a47 	vmov.f32	s0, s14
 8002810:	eef0 0a67 	vmov.f32	s1, s15
 8002814:	f00d fb24 	bl	800fe60 <atan>
 8002818:	ec53 2b10 	vmov	r2, r3, d0
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f7fe fa02 	bl	8000c28 <__aeabi_d2f>
 8002824:	4603      	mov	r3, r0
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
	acc_data_[1] = atan(acc_data[1]/sqrt(acc_data[0] * acc_data[0] + acc_data[2] * acc_data[2]));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3304      	adds	r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd feaa 	bl	8000588 <__aeabi_f2d>
 8002834:	4604      	mov	r4, r0
 8002836:	460d      	mov	r5, r1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	ed93 7a00 	vldr	s14, [r3]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3308      	adds	r3, #8
 800284c:	edd3 6a00 	vldr	s13, [r3]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3308      	adds	r3, #8
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002860:	ee17 0a90 	vmov	r0, s15
 8002864:	f7fd fe90 	bl	8000588 <__aeabi_f2d>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	ec43 2b10 	vmov	d0, r2, r3
 8002870:	f00d fcdc 	bl	801022c <sqrt>
 8002874:	ec53 2b10 	vmov	r2, r3, d0
 8002878:	4620      	mov	r0, r4
 800287a:	4629      	mov	r1, r5
 800287c:	f7fe f806 	bl	800088c <__aeabi_ddiv>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	ec43 2b17 	vmov	d7, r2, r3
 8002888:	eeb0 0a47 	vmov.f32	s0, s14
 800288c:	eef0 0a67 	vmov.f32	s1, s15
 8002890:	f00d fae6 	bl	800fe60 <atan>
 8002894:	ec53 2b10 	vmov	r2, r3, d0
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f7fe f9c4 	bl	8000c28 <__aeabi_d2f>
 80028a0:	4603      	mov	r3, r0
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
	acc_data_[2] = atan(acc_data[2]/sqrt(acc_data[0] * acc_data[0] + acc_data[1] * acc_data[1]));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3308      	adds	r3, #8
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fe6c 	bl	8000588 <__aeabi_f2d>
 80028b0:	4604      	mov	r4, r0
 80028b2:	460d      	mov	r5, r1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	ed93 7a00 	vldr	s14, [r3]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	edd3 6a00 	vldr	s13, [r3]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028dc:	ee17 0a90 	vmov	r0, s15
 80028e0:	f7fd fe52 	bl	8000588 <__aeabi_f2d>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	ec43 2b10 	vmov	d0, r2, r3
 80028ec:	f00d fc9e 	bl	801022c <sqrt>
 80028f0:	ec53 2b10 	vmov	r2, r3, d0
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fd ffc8 	bl	800088c <__aeabi_ddiv>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	ec43 2b17 	vmov	d7, r2, r3
 8002904:	eeb0 0a47 	vmov.f32	s0, s14
 8002908:	eef0 0a67 	vmov.f32	s1, s15
 800290c:	f00d faa8 	bl	800fe60 <atan>
 8002910:	ec53 2b10 	vmov	r2, r3, d0
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe f986 	bl	8000c28 <__aeabi_d2f>
 800291c:	4603      	mov	r3, r0
 800291e:	63bb      	str	r3, [r7, #56]	; 0x38
	gyr_data_[0] = gyr_data[0] - offsetX;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	4bb9      	ldr	r3, [pc, #740]	; (8002c0c <kalman_filter+0x46c>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002930:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	gyr_data_[1] = gyr_data[1] - offsetY;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3304      	adds	r3, #4
 8002938:	ed93 7a00 	vldr	s14, [r3]
 800293c:	4bb4      	ldr	r3, [pc, #720]	; (8002c10 <kalman_filter+0x470>)
 800293e:	edd3 7a00 	vldr	s15, [r3]
 8002942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002946:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	gyr_data_[2] = gyr_data[2] - offsetZ;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	3308      	adds	r3, #8
 800294e:	ed93 7a00 	vldr	s14, [r3]
 8002952:	4bb0      	ldr	r3, [pc, #704]	; (8002c14 <kalman_filter+0x474>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	memset(x_pri, 0.0f, sizeof(x_pri));
 8002960:	2218      	movs	r2, #24
 8002962:	2100      	movs	r1, #0
 8002964:	48ac      	ldr	r0, [pc, #688]	; (8002c18 <kalman_filter+0x478>)
 8002966:	f008 fe55 	bl	800b614 <memset>
	memset(p_pri, 0.0f, sizeof(p_pri));
 800296a:	2290      	movs	r2, #144	; 0x90
 800296c:	2100      	movs	r1, #0
 800296e:	48ab      	ldr	r0, [pc, #684]	; (8002c1c <kalman_filter+0x47c>)
 8002970:	f008 fe50 	bl	800b614 <memset>
	float x_post[6] = {output_data[0], output_data[1], output_data[2], 0.0f, 0.0f, 0.0f};
 8002974:	4baa      	ldr	r3, [pc, #680]	; (8002c20 <kalman_filter+0x480>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4ba9      	ldr	r3, [pc, #676]	; (8002c20 <kalman_filter+0x480>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	4ba7      	ldr	r3, [pc, #668]	; (8002c20 <kalman_filter+0x480>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
	memset(p_post, 0.0f, sizeof(p_post));
 8002998:	2290      	movs	r2, #144	; 0x90
 800299a:	2100      	movs	r1, #0
 800299c:	48a1      	ldr	r0, [pc, #644]	; (8002c24 <kalman_filter+0x484>)
 800299e:	f008 fe39 	bl	800b614 <memset>
	memset(mult_A_xpost, 0.0f, sizeof(mult_A_xpost));
 80029a2:	2218      	movs	r2, #24
 80029a4:	2100      	movs	r1, #0
 80029a6:	48a0      	ldr	r0, [pc, #640]	; (8002c28 <kalman_filter+0x488>)
 80029a8:	f008 fe34 	bl	800b614 <memset>
	memset(mult_B_gyr_data, 0.0f, sizeof(mult_B_gyr_data));
 80029ac:	2218      	movs	r2, #24
 80029ae:	2100      	movs	r1, #0
 80029b0:	489e      	ldr	r0, [pc, #632]	; (8002c2c <kalman_filter+0x48c>)
 80029b2:	f008 fe2f 	bl	800b614 <memset>
	memset(mult_A_ppost, 0.0f, sizeof(mult_A_ppost));
 80029b6:	2290      	movs	r2, #144	; 0x90
 80029b8:	2100      	movs	r1, #0
 80029ba:	489d      	ldr	r0, [pc, #628]	; (8002c30 <kalman_filter+0x490>)
 80029bc:	f008 fe2a 	bl	800b614 <memset>
	memset(A_trans, 0.0f, sizeof(A_trans));
 80029c0:	2290      	movs	r2, #144	; 0x90
 80029c2:	2100      	movs	r1, #0
 80029c4:	489b      	ldr	r0, [pc, #620]	; (8002c34 <kalman_filter+0x494>)
 80029c6:	f008 fe25 	bl	800b614 <memset>
	memset(mult_A_ppost_A_trans, 0.0f, sizeof(mult_A_ppost_A_trans));
 80029ca:	2290      	movs	r2, #144	; 0x90
 80029cc:	2100      	movs	r1, #0
 80029ce:	489a      	ldr	r0, [pc, #616]	; (8002c38 <kalman_filter+0x498>)
 80029d0:	f008 fe20 	bl	800b614 <memset>
	memset(H_trans, 0.0f, sizeof(H_trans));
 80029d4:	2248      	movs	r2, #72	; 0x48
 80029d6:	2100      	movs	r1, #0
 80029d8:	4898      	ldr	r0, [pc, #608]	; (8002c3c <kalman_filter+0x49c>)
 80029da:	f008 fe1b 	bl	800b614 <memset>
	memset(mult_ppri_H_trans, 0.0f, sizeof(mult_ppri_H_trans));
 80029de:	2248      	movs	r2, #72	; 0x48
 80029e0:	2100      	movs	r1, #0
 80029e2:	4897      	ldr	r0, [pc, #604]	; (8002c40 <kalman_filter+0x4a0>)
 80029e4:	f008 fe16 	bl	800b614 <memset>
	memset(mult_H_ppri, 0.0f, sizeof(mult_H_ppri));
 80029e8:	2248      	movs	r2, #72	; 0x48
 80029ea:	2100      	movs	r1, #0
 80029ec:	4895      	ldr	r0, [pc, #596]	; (8002c44 <kalman_filter+0x4a4>)
 80029ee:	f008 fe11 	bl	800b614 <memset>
	memset(mult_H_ppri_H_trans, 0.0f, sizeof(mult_H_ppri_H_trans));
 80029f2:	2224      	movs	r2, #36	; 0x24
 80029f4:	2100      	movs	r1, #0
 80029f6:	4894      	ldr	r0, [pc, #592]	; (8002c48 <kalman_filter+0x4a8>)
 80029f8:	f008 fe0c 	bl	800b614 <memset>
	memset(H_ppri_H_trans_plus_R_dev_1, 0.0f, sizeof(H_ppri_H_trans_plus_R_dev_1));
 80029fc:	2224      	movs	r2, #36	; 0x24
 80029fe:	2100      	movs	r1, #0
 8002a00:	4892      	ldr	r0, [pc, #584]	; (8002c4c <kalman_filter+0x4ac>)
 8002a02:	f008 fe07 	bl	800b614 <memset>
	memset(GainK, 0.0f, sizeof(GainK));
 8002a06:	2248      	movs	r2, #72	; 0x48
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4891      	ldr	r0, [pc, #580]	; (8002c50 <kalman_filter+0x4b0>)
 8002a0c:	f008 fe02 	bl	800b614 <memset>
	memset(mult_GainK_H, 0.0f, sizeof(mult_GainK_H));
 8002a10:	2290      	movs	r2, #144	; 0x90
 8002a12:	2100      	movs	r1, #0
 8002a14:	488f      	ldr	r0, [pc, #572]	; (8002c54 <kalman_filter+0x4b4>)
 8002a16:	f008 fdfd 	bl	800b614 <memset>
	memset(mult_H_x_pri, 0.0f, sizeof(mult_H_x_pri));
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	488e      	ldr	r0, [pc, #568]	; (8002c58 <kalman_filter+0x4b8>)
 8002a20:	f008 fdf8 	bl	800b614 <memset>
	memset(acc_data_minus_H_xpri, 0.0f, sizeof(acc_data_minus_H_xpri));
 8002a24:	220c      	movs	r2, #12
 8002a26:	2100      	movs	r1, #0
 8002a28:	488c      	ldr	r0, [pc, #560]	; (8002c5c <kalman_filter+0x4bc>)
 8002a2a:	f008 fdf3 	bl	800b614 <memset>
	memset(mult_GainK_acc_data_minus_H_xpri, 0.0f, sizeof(mult_GainK_acc_data_minus_H_xpri));
 8002a2e:	2218      	movs	r2, #24
 8002a30:	2100      	movs	r1, #0
 8002a32:	488b      	ldr	r0, [pc, #556]	; (8002c60 <kalman_filter+0x4c0>)
 8002a34:	f008 fdee 	bl	800b614 <memset>
	memset(I_minus_GainK_H, 0.0f, sizeof(I_minus_GainK_H));
 8002a38:	2290      	movs	r2, #144	; 0x90
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4889      	ldr	r0, [pc, #548]	; (8002c64 <kalman_filter+0x4c4>)
 8002a3e:	f008 fde9 	bl	800b614 <memset>

	//Predykcja

	// A * x_post
	for (int i = 0; i < 6; i++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a48:	e03a      	b.n	8002ac0 <kalman_filter+0x320>
	{
		for (int j = 0; j < 6; j++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a50:	e02d      	b.n	8002aae <kalman_filter+0x30e>
		{
			mult_A_xpost[i] += A[i][j] * x_post[j];
 8002a52:	4a75      	ldr	r2, [pc, #468]	; (8002c28 <kalman_filter+0x488>)
 8002a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	ed93 7a00 	vldr	s14, [r3]
 8002a60:	4981      	ldr	r1, [pc, #516]	; (8002c68 <kalman_filter+0x4c8>)
 8002a62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	edd3 6a00 	vldr	s13, [r3]
 8002a7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002a86:	4413      	add	r3, r2
 8002a88:	3b84      	subs	r3, #132	; 0x84
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a96:	4a64      	ldr	r2, [pc, #400]	; (8002c28 <kalman_filter+0x488>)
 8002a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 6; j++)
 8002aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002aae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	ddcd      	ble.n	8002a52 <kalman_filter+0x2b2>
	for (int i = 0; i < 6; i++)
 8002ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aba:	3301      	adds	r3, #1
 8002abc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	ddc0      	ble.n	8002a4a <kalman_filter+0x2aa>
		}
	}

	// B * gyr_data
	for (int i = 0; i < 6; i++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ace:	e039      	b.n	8002b44 <kalman_filter+0x3a4>
	{
		for (int j = 0; j < 3; j++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ad6:	e02c      	b.n	8002b32 <kalman_filter+0x392>
		{
			mult_B_gyr_data[i] += B[i][j] * gyr_data_[j];
 8002ad8:	4a54      	ldr	r2, [pc, #336]	; (8002c2c <kalman_filter+0x48c>)
 8002ada:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	4961      	ldr	r1, [pc, #388]	; (8002c6c <kalman_filter+0x4cc>)
 8002ae8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	edd3 6a00 	vldr	s13, [r3]
 8002b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b6c      	subs	r3, #108	; 0x6c
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1a:	4a44      	ldr	r2, [pc, #272]	; (8002c2c <kalman_filter+0x48c>)
 8002b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 3; j++)
 8002b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	ddce      	ble.n	8002ad8 <kalman_filter+0x338>
	for (int i = 0; i < 6; i++)
 8002b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	ddc1      	ble.n	8002ad0 <kalman_filter+0x330>
		}
	}

	//x_pri = A * x_post + B * gyr_data

	for (int i = 0; i < 6; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b50:	e016      	b.n	8002b80 <kalman_filter+0x3e0>
	{
		x_pri[i] = mult_A_xpost[i] + mult_B_gyr_data[i];
 8002b52:	4a35      	ldr	r2, [pc, #212]	; (8002c28 <kalman_filter+0x488>)
 8002b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	ed93 7a00 	vldr	s14, [r3]
 8002b5e:	4a33      	ldr	r2, [pc, #204]	; (8002c2c <kalman_filter+0x48c>)
 8002b60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	4a2a      	ldr	r2, [pc, #168]	; (8002c18 <kalman_filter+0x478>)
 8002b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 6; i++)
 8002b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	dde5      	ble.n	8002b52 <kalman_filter+0x3b2>
	}

	// A * p_post
	mult_matrix(6, 6, 6, A, p_post, mult_A_ppost);
 8002b86:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <kalman_filter+0x490>)
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <kalman_filter+0x484>)
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <kalman_filter+0x4c8>)
 8002b90:	2206      	movs	r2, #6
 8002b92:	2106      	movs	r1, #6
 8002b94:	2006      	movs	r0, #6
 8002b96:	f000 fa7f 	bl	8003098 <mult_matrix>
	// A'
	for (int i = 0; i < 6; i++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b9e:	e021      	b.n	8002be4 <kalman_filter+0x444>
	{
		for (int j = 0; j < 6; j++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ba4:	e018      	b.n	8002bd8 <kalman_filter+0x438>
		{
			A_trans[i][j] = A[j][i];
 8002ba6:	4930      	ldr	r1, [pc, #192]	; (8002c68 <kalman_filter+0x4c8>)
 8002ba8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	481d      	ldr	r0, [pc, #116]	; (8002c34 <kalman_filter+0x494>)
 8002bbe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4403      	add	r3, r0
 8002bd0:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < 6; j++)
 8002bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	677b      	str	r3, [r7, #116]	; 0x74
 8002bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	dde3      	ble.n	8002ba6 <kalman_filter+0x406>
	for (int i = 0; i < 6; i++)
 8002bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be0:	3301      	adds	r3, #1
 8002be2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be6:	2b05      	cmp	r3, #5
 8002be8:	ddda      	ble.n	8002ba0 <kalman_filter+0x400>
		}
	}
	//A' * A * p_post
	mult_matrix(6, 6, 6, mult_A_ppost, A_trans, mult_A_ppost_A_trans);
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <kalman_filter+0x498>)
 8002bec:	9301      	str	r3, [sp, #4]
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <kalman_filter+0x494>)
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <kalman_filter+0x490>)
 8002bf4:	2206      	movs	r2, #6
 8002bf6:	2106      	movs	r1, #6
 8002bf8:	2006      	movs	r0, #6
 8002bfa:	f000 fa4d 	bl	8003098 <mult_matrix>
	// p_pri = A * p_post * A' + Q
	for (int i = 0; i < 6; i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	673b      	str	r3, [r7, #112]	; 0x70
 8002c02:	e064      	b.n	8002cce <kalman_filter+0x52e>
	{
		for (int j = 0; j < 6; j++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c08:	e05b      	b.n	8002cc2 <kalman_filter+0x522>
 8002c0a:	bf00      	nop
 8002c0c:	20000280 	.word	0x20000280
 8002c10:	20000284 	.word	0x20000284
 8002c14:	20000288 	.word	0x20000288
 8002c18:	200007a0 	.word	0x200007a0
 8002c1c:	20000fc8 	.word	0x20000fc8
 8002c20:	20000640 	.word	0x20000640
 8002c24:	20000710 	.word	0x20000710
 8002c28:	2000107c 	.word	0x2000107c
 8002c2c:	20000f8c 	.word	0x20000f8c
 8002c30:	20000e48 	.word	0x20000e48
 8002c34:	200009c8 	.word	0x200009c8
 8002c38:	200007c4 	.word	0x200007c4
 8002c3c:	20000980 	.word	0x20000980
 8002c40:	200006c8 	.word	0x200006c8
 8002c44:	20000f20 	.word	0x20000f20
 8002c48:	20000fa4 	.word	0x20000fa4
 8002c4c:	20000f68 	.word	0x20000f68
 8002c50:	20000ed8 	.word	0x20000ed8
 8002c54:	200008f0 	.word	0x200008f0
 8002c58:	200008e4 	.word	0x200008e4
 8002c5c:	20001058 	.word	0x20001058
 8002c60:	20001064 	.word	0x20001064
 8002c64:	20000854 	.word	0x20000854
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	2000009c 	.word	0x2000009c
		{
			p_pri[i][j] = mult_A_ppost_A_trans[i][j] + Q[i][j];
 8002c70:	499d      	ldr	r1, [pc, #628]	; (8002ee8 <kalman_filter+0x748>)
 8002c72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	ed93 7a00 	vldr	s14, [r3]
 8002c88:	4998      	ldr	r1, [pc, #608]	; (8002eec <kalman_filter+0x74c>)
 8002c8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	4992      	ldr	r1, [pc, #584]	; (8002ef0 <kalman_filter+0x750>)
 8002ca6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 6; j++)
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	ddd3      	ble.n	8002c70 <kalman_filter+0x4d0>
	for (int i = 0; i < 6; i++)
 8002cc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cca:	3301      	adds	r3, #1
 8002ccc:	673b      	str	r3, [r7, #112]	; 0x70
 8002cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	dd97      	ble.n	8002c04 <kalman_filter+0x464>
	}

	//Korekcja
	// K = P_pri * H' * 1/(H * p_pri * H' + R)
	// H'
	for (int i = 0; i < 6; i++)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd8:	e020      	b.n	8002d1c <kalman_filter+0x57c>
	{
		for (int j = 0; j < 3; j++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8002cde:	e017      	b.n	8002d10 <kalman_filter+0x570>
		{
			H_trans[i][j] = H[j][i];
 8002ce0:	4984      	ldr	r1, [pc, #528]	; (8002ef4 <kalman_filter+0x754>)
 8002ce2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	4880      	ldr	r0, [pc, #512]	; (8002ef8 <kalman_filter+0x758>)
 8002cf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4403      	add	r3, r0
 8002d08:	6019      	str	r1, [r3, #0]
		for (int j = 0; j < 3; j++)
 8002d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	dde4      	ble.n	8002ce0 <kalman_filter+0x540>
	for (int i = 0; i < 6; i++)
 8002d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d18:	3301      	adds	r3, #1
 8002d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	dddb      	ble.n	8002cda <kalman_filter+0x53a>
		}
	}

	mult_matrix(6, 6, 3, p_pri, H_trans, mult_ppri_H_trans);
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <kalman_filter+0x75c>)
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	4b74      	ldr	r3, [pc, #464]	; (8002ef8 <kalman_filter+0x758>)
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4b71      	ldr	r3, [pc, #452]	; (8002ef0 <kalman_filter+0x750>)
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	2106      	movs	r1, #6
 8002d30:	2006      	movs	r0, #6
 8002d32:	f000 f9b1 	bl	8003098 <mult_matrix>

	mult_matrix(3, 6, 6, H, p_pri, mult_H_ppri);
 8002d36:	4b72      	ldr	r3, [pc, #456]	; (8002f00 <kalman_filter+0x760>)
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ef0 <kalman_filter+0x750>)
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4b6d      	ldr	r3, [pc, #436]	; (8002ef4 <kalman_filter+0x754>)
 8002d40:	2206      	movs	r2, #6
 8002d42:	2106      	movs	r1, #6
 8002d44:	2003      	movs	r0, #3
 8002d46:	f000 f9a7 	bl	8003098 <mult_matrix>

	mult_matrix(3, 6, 3, mult_H_ppri, H_trans, mult_H_ppri_H_trans);
 8002d4a:	4b6e      	ldr	r3, [pc, #440]	; (8002f04 <kalman_filter+0x764>)
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <kalman_filter+0x758>)
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <kalman_filter+0x760>)
 8002d54:	2203      	movs	r2, #3
 8002d56:	2106      	movs	r1, #6
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f000 f99d 	bl	8003098 <mult_matrix>

	for (int i = 0; i < 3; i++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	663b      	str	r3, [r7, #96]	; 0x60
 8002d62:	e05a      	b.n	8002e1a <kalman_filter+0x67a>
	{
		for (int j = 0; j < 3; j++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d68:	e051      	b.n	8002e0e <kalman_filter+0x66e>
		{
			if (i == j)
 8002d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d127      	bne.n	8002dc2 <kalman_filter+0x622>
				H_ppri_H_trans_plus_R_dev_1[i][j] = 1.0f/(mult_H_ppri_H_trans[i][j] + R[i][j]);
 8002d72:	4964      	ldr	r1, [pc, #400]	; (8002f04 <kalman_filter+0x764>)
 8002d74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	ed93 7a00 	vldr	s14, [r3]
 8002d88:	495f      	ldr	r1, [pc, #380]	; (8002f08 <kalman_filter+0x768>)
 8002d8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002daa:	4958      	ldr	r1, [pc, #352]	; (8002f0c <kalman_filter+0x76c>)
 8002dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	edc3 7a00 	vstr	s15, [r3]
 8002dc0:	e022      	b.n	8002e08 <kalman_filter+0x668>
			else
				H_ppri_H_trans_plus_R_dev_1[i][j] = (mult_H_ppri_H_trans[i][j] + R[i][j]);
 8002dc2:	4950      	ldr	r1, [pc, #320]	; (8002f04 <kalman_filter+0x764>)
 8002dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	ed93 7a00 	vldr	s14, [r3]
 8002dd8:	494b      	ldr	r1, [pc, #300]	; (8002f08 <kalman_filter+0x768>)
 8002dda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df2:	4946      	ldr	r1, [pc, #280]	; (8002f0c <kalman_filter+0x76c>)
 8002df4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 3; j++)
 8002e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	ddaa      	ble.n	8002d6a <kalman_filter+0x5ca>
	for (int i = 0; i < 3; i++)
 8002e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e16:	3301      	adds	r3, #1
 8002e18:	663b      	str	r3, [r7, #96]	; 0x60
 8002e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	dda1      	ble.n	8002d64 <kalman_filter+0x5c4>
		}
	}

	mult_matrix(6, 3, 3, mult_ppri_H_trans, H_ppri_H_trans_plus_R_dev_1, GainK);
 8002e20:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <kalman_filter+0x770>)
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <kalman_filter+0x76c>)
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4b34      	ldr	r3, [pc, #208]	; (8002efc <kalman_filter+0x75c>)
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	2006      	movs	r0, #6
 8002e30:	f000 f932 	bl	8003098 <mult_matrix>

	// x_post = xpri + GainK * (acc_data - H * x_pri)

	for (int k = 0; k < 3; k++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e38:	e02d      	b.n	8002e96 <kalman_filter+0x6f6>
	{
		for (int j = 0; j < 6; j++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	657b      	str	r3, [r7, #84]	; 0x54
 8002e3e:	e024      	b.n	8002e8a <kalman_filter+0x6ea>
		{
			mult_H_x_pri[k] += H[k][j] * x_pri[j];
 8002e40:	4a34      	ldr	r2, [pc, #208]	; (8002f14 <kalman_filter+0x774>)
 8002e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	ed93 7a00 	vldr	s14, [r3]
 8002e4c:	4929      	ldr	r1, [pc, #164]	; (8002ef4 <kalman_filter+0x754>)
 8002e4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	edd3 6a00 	vldr	s13, [r3]
 8002e64:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <kalman_filter+0x778>)
 8002e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <kalman_filter+0x774>)
 8002e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 6; j++)
 8002e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e86:	3301      	adds	r3, #1
 8002e88:	657b      	str	r3, [r7, #84]	; 0x54
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	ddd7      	ble.n	8002e40 <kalman_filter+0x6a0>
	for (int k = 0; k < 3; k++)
 8002e90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e92:	3301      	adds	r3, #1
 8002e94:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	ddce      	ble.n	8002e3a <kalman_filter+0x69a>
		}
	}

	for (int i = 0; i < 3; i++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8002ea0:	e018      	b.n	8002ed4 <kalman_filter+0x734>
	{
		acc_data_minus_H_xpri[i] = acc_data_[i] - mult_H_x_pri[i];
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b60      	subs	r3, #96	; 0x60
 8002eae:	ed93 7a00 	vldr	s14, [r3]
 8002eb2:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <kalman_filter+0x774>)
 8002eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <kalman_filter+0x77c>)
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++)
 8002ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	dde3      	ble.n	8002ea2 <kalman_filter+0x702>
	}


	for (int k = 0; k < 6; k++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ede:	e049      	b.n	8002f74 <kalman_filter+0x7d4>
	{
		for (int j = 0; j < 3; j++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ee4:	e040      	b.n	8002f68 <kalman_filter+0x7c8>
 8002ee6:	bf00      	nop
 8002ee8:	200007c4 	.word	0x200007c4
 8002eec:	2000012c 	.word	0x2000012c
 8002ef0:	20000fc8 	.word	0x20000fc8
 8002ef4:	200000e4 	.word	0x200000e4
 8002ef8:	20000980 	.word	0x20000980
 8002efc:	200006c8 	.word	0x200006c8
 8002f00:	20000f20 	.word	0x20000f20
 8002f04:	20000fa4 	.word	0x20000fa4
 8002f08:	200001bc 	.word	0x200001bc
 8002f0c:	20000f68 	.word	0x20000f68
 8002f10:	20000ed8 	.word	0x20000ed8
 8002f14:	200008e4 	.word	0x200008e4
 8002f18:	200007a0 	.word	0x200007a0
 8002f1c:	20001058 	.word	0x20001058
		{
			mult_GainK_acc_data_minus_H_xpri[k] += GainK[k][j] * acc_data_minus_H_xpri[j];
 8002f20:	4a52      	ldr	r2, [pc, #328]	; (800306c <kalman_filter+0x8cc>)
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	ed93 7a00 	vldr	s14, [r3]
 8002f2c:	4950      	ldr	r1, [pc, #320]	; (8003070 <kalman_filter+0x8d0>)
 8002f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	edd3 6a00 	vldr	s13, [r3]
 8002f42:	4a4c      	ldr	r2, [pc, #304]	; (8003074 <kalman_filter+0x8d4>)
 8002f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	edd3 7a00 	vldr	s15, [r3]
 8002f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f56:	4a45      	ldr	r2, [pc, #276]	; (800306c <kalman_filter+0x8cc>)
 8002f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 3; j++)
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f64:	3301      	adds	r3, #1
 8002f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	ddd8      	ble.n	8002f20 <kalman_filter+0x780>
	for (int k = 0; k < 6; k++)
 8002f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f70:	3301      	adds	r3, #1
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	ddb2      	ble.n	8002ee0 <kalman_filter+0x740>
		}
	}

	for (int i = 0; i < 6; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7e:	e018      	b.n	8002fb2 <kalman_filter+0x812>
	{
		x_post[i] = x_pri[i] + mult_GainK_acc_data_minus_H_xpri[i];
 8002f80:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <kalman_filter+0x8d8>)
 8002f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	ed93 7a00 	vldr	s14, [r3]
 8002f8c:	4a37      	ldr	r2, [pc, #220]	; (800306c <kalman_filter+0x8cc>)
 8002f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b84      	subs	r3, #132	; 0x84
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 6; i++)
 8002fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fae:	3301      	adds	r3, #1
 8002fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	dde3      	ble.n	8002f80 <kalman_filter+0x7e0>
	}

	//p_post = (I - K * H) * P_pri

	mult_matrix(6, 3, 6, GainK, H, mult_GainK_H);
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <kalman_filter+0x8dc>)
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <kalman_filter+0x8e0>)
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <kalman_filter+0x8d0>)
 8002fc2:	2206      	movs	r2, #6
 8002fc4:	2103      	movs	r1, #3
 8002fc6:	2006      	movs	r0, #6
 8002fc8:	f000 f866 	bl	8003098 <mult_matrix>


	for (int i = 0; i < 6; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd0:	e031      	b.n	8003036 <kalman_filter+0x896>
	{
		for (int j = 0; j < 6; j++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd6:	e028      	b.n	800302a <kalman_filter+0x88a>
		{
			I_minus_GainK_H[i][j] = I[i][j] - mult_GainK_H[i][j];
 8002fd8:	492a      	ldr	r1, [pc, #168]	; (8003084 <kalman_filter+0x8e4>)
 8002fda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	ed93 7a00 	vldr	s14, [r3]
 8002ff0:	4922      	ldr	r1, [pc, #136]	; (800307c <kalman_filter+0x8dc>)
 8002ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	491e      	ldr	r1, [pc, #120]	; (8003088 <kalman_filter+0x8e8>)
 800300e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < 6; j++)
 8003024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003026:	3301      	adds	r3, #1
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302c:	2b05      	cmp	r3, #5
 800302e:	ddd3      	ble.n	8002fd8 <kalman_filter+0x838>
	for (int i = 0; i < 6; i++)
 8003030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003032:	3301      	adds	r3, #1
 8003034:	643b      	str	r3, [r7, #64]	; 0x40
 8003036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003038:	2b05      	cmp	r3, #5
 800303a:	ddca      	ble.n	8002fd2 <kalman_filter+0x832>
		}
	}

	mult_matrix(6, 6, 6, I_minus_GainK_H, p_pri, p_post);
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <kalman_filter+0x8ec>)
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <kalman_filter+0x8f0>)
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <kalman_filter+0x8e8>)
 8003046:	2206      	movs	r2, #6
 8003048:	2106      	movs	r1, #6
 800304a:	2006      	movs	r0, #6
 800304c:	f000 f824 	bl	8003098 <mult_matrix>

	output_data[0] = x_post[0];
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a10      	ldr	r2, [pc, #64]	; (8003094 <kalman_filter+0x8f4>)
 8003054:	6013      	str	r3, [r2, #0]
	output_data[1] = x_post[1];
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <kalman_filter+0x8f4>)
 800305a:	6053      	str	r3, [r2, #4]
	output_data[2] = x_post[2];
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <kalman_filter+0x8f4>)
 8003060:	6093      	str	r3, [r2, #8]
	return 0;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3790      	adds	r7, #144	; 0x90
 8003068:	46bd      	mov	sp, r7
 800306a:	bdb0      	pop	{r4, r5, r7, pc}
 800306c:	20001064 	.word	0x20001064
 8003070:	20000ed8 	.word	0x20000ed8
 8003074:	20001058 	.word	0x20001058
 8003078:	200007a0 	.word	0x200007a0
 800307c:	200008f0 	.word	0x200008f0
 8003080:	200000e4 	.word	0x200000e4
 8003084:	200001e0 	.word	0x200001e0
 8003088:	20000854 	.word	0x20000854
 800308c:	20000710 	.word	0x20000710
 8003090:	20000fc8 	.word	0x20000fc8
 8003094:	20000640 	.word	0x20000640

08003098 <mult_matrix>:

void mult_matrix(int m, int n, int l, float A[m][n], float B[n][l], float C[m][l])
{
 8003098:	b4f0      	push	{r4, r5, r6, r7}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
void mult_matrix(int m, int n, int l, float A[m][n], float B[n][l], float C[m][l])
 80030a6:	68bd      	ldr	r5, [r7, #8]
 80030a8:	1e6b      	subs	r3, r5, #1
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	462b      	mov	r3, r5
 80030ae:	4618      	mov	r0, r3
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	014b      	lsls	r3, r1, #5
 80030be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030c2:	0142      	lsls	r2, r0, #5
 80030c4:	687e      	ldr	r6, [r7, #4]
 80030c6:	1e73      	subs	r3, r6, #1
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	4633      	mov	r3, r6
 80030cc:	4618      	mov	r0, r3
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	014b      	lsls	r3, r1, #5
 80030dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030e0:	0142      	lsls	r2, r0, #5
 80030e2:	687c      	ldr	r4, [r7, #4]
 80030e4:	1e63      	subs	r3, r4, #1
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	4623      	mov	r3, r4
 80030ea:	4618      	mov	r0, r3
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	014b      	lsls	r3, r1, #5
 80030fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030fe:	0142      	lsls	r2, r0, #5
	for (int k = 0; k < 6; k++)
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e048      	b.n	8003198 <mult_matrix+0x100>
	{
		for (int i = 0; i < 6; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e03f      	b.n	800318c <mult_matrix+0xf4>
		{
			for (int j = 0; j < 6; j++)
 800310c:	2300      	movs	r3, #0
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	e036      	b.n	8003180 <mult_matrix+0xe8>
			{
				C[k][i] += A[k][j] * B[j][i];
 8003112:	462a      	mov	r2, r5
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fb03 f302 	mul.w	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	441a      	add	r2, r3
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	ed93 7a00 	vldr	s14, [r3]
 800312a:	4632      	mov	r2, r6
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	fb03 f302 	mul.w	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003136:	441a      	add	r2, r3
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003146:	4622      	mov	r2, r4
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fb03 f302 	mul.w	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003152:	441a      	add	r2, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	edd3 7a00 	vldr	s15, [r3]
 800315e:	4622      	mov	r2, r4
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	fb03 f302 	mul.w	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800316a:	441a      	add	r2, r3
 800316c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 0; j < 6; j++)
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	3301      	adds	r3, #1
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2b05      	cmp	r3, #5
 8003184:	ddc5      	ble.n	8003112 <mult_matrix+0x7a>
		for (int i = 0; i < 6; i++)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3301      	adds	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b05      	cmp	r3, #5
 8003190:	ddbc      	ble.n	800310c <mult_matrix+0x74>
	for (int k = 0; k < 6; k++)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	3301      	adds	r3, #1
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b05      	cmp	r3, #5
 800319c:	ddb3      	ble.n	8003106 <mult_matrix+0x6e>
			}
		}
	}
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	3728      	adds	r7, #40	; 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bcf0      	pop	{r4, r5, r6, r7}
 80031a8:	4770      	bx	lr
 80031aa:	0000      	movs	r0, r0
 80031ac:	0000      	movs	r0, r0
	...

080031b0 <madgwick_filter>:

int32_t madgwick_filter(float acc_data[], float gyr_data[])
{
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b09e      	sub	sp, #120	; 0x78
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]

	float ax = acc_data[0];
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	667b      	str	r3, [r7, #100]	; 0x64
	float ay = acc_data[1];
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	663b      	str	r3, [r7, #96]	; 0x60
	float az = acc_data[2];
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	65fb      	str	r3, [r7, #92]	; 0x5c
	float gx = ToRad(gyr_data[0] - offsetX);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	ed93 7a00 	vldr	s14, [r3]
 80031d2:	4be7      	ldr	r3, [pc, #924]	; (8003570 <madgwick_filter+0x3c0>)
 80031d4:	edd3 7a00 	vldr	s15, [r3]
 80031d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031dc:	ee17 0a90 	vmov	r0, s15
 80031e0:	f7fd f9d2 	bl	8000588 <__aeabi_f2d>
 80031e4:	a3e0      	add	r3, pc, #896	; (adr r3, 8003568 <madgwick_filter+0x3b8>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f7fd fa25 	bl	8000638 <__aeabi_dmul>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f7fd fd17 	bl	8000c28 <__aeabi_d2f>
 80031fa:	4603      	mov	r3, r0
 80031fc:	65bb      	str	r3, [r7, #88]	; 0x58
	float gy = ToRad(gyr_data[1] - offsetY);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	3304      	adds	r3, #4
 8003202:	ed93 7a00 	vldr	s14, [r3]
 8003206:	4bdb      	ldr	r3, [pc, #876]	; (8003574 <madgwick_filter+0x3c4>)
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003210:	ee17 0a90 	vmov	r0, s15
 8003214:	f7fd f9b8 	bl	8000588 <__aeabi_f2d>
 8003218:	a3d3      	add	r3, pc, #844	; (adr r3, 8003568 <madgwick_filter+0x3b8>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f7fd fa0b 	bl	8000638 <__aeabi_dmul>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f7fd fcfd 	bl	8000c28 <__aeabi_d2f>
 800322e:	4603      	mov	r3, r0
 8003230:	657b      	str	r3, [r7, #84]	; 0x54
	float gz = ToRad(gyr_data[2] - offsetZ);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	3308      	adds	r3, #8
 8003236:	ed93 7a00 	vldr	s14, [r3]
 800323a:	4bcf      	ldr	r3, [pc, #828]	; (8003578 <madgwick_filter+0x3c8>)
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003244:	ee17 0a90 	vmov	r0, s15
 8003248:	f7fd f99e 	bl	8000588 <__aeabi_f2d>
 800324c:	a3c6      	add	r3, pc, #792	; (adr r3, 8003568 <madgwick_filter+0x3b8>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f7fd f9f1 	bl	8000638 <__aeabi_dmul>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f7fd fce3 	bl	8000c28 <__aeabi_d2f>
 8003262:	4603      	mov	r3, r0
 8003264:	653b      	str	r3, [r7, #80]	; 0x50
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003266:	4bc5      	ldr	r3, [pc, #788]	; (800357c <madgwick_filter+0x3cc>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	eeb1 7a67 	vneg.f32	s14, s15
 8003270:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003278:	4bc1      	ldr	r3, [pc, #772]	; (8003580 <madgwick_filter+0x3d0>)
 800327a:	edd3 6a00 	vldr	s13, [r3]
 800327e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003286:	ee37 7a67 	vsub.f32	s14, s14, s15
 800328a:	4bbe      	ldr	r3, [pc, #760]	; (8003584 <madgwick_filter+0x3d4>)
 800328c:	edd3 6a00 	vldr	s13, [r3]
 8003290:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003294:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800329c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80032a8:	4bb7      	ldr	r3, [pc, #732]	; (8003588 <madgwick_filter+0x3d8>)
 80032aa:	ed93 7a00 	vldr	s14, [r3]
 80032ae:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80032b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b6:	4bb2      	ldr	r3, [pc, #712]	; (8003580 <madgwick_filter+0x3d0>)
 80032b8:	edd3 6a00 	vldr	s13, [r3]
 80032bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80032c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c8:	4bae      	ldr	r3, [pc, #696]	; (8003584 <madgwick_filter+0x3d4>)
 80032ca:	edd3 6a00 	vldr	s13, [r3]
 80032ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80032d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80032e6:	4ba8      	ldr	r3, [pc, #672]	; (8003588 <madgwick_filter+0x3d8>)
 80032e8:	ed93 7a00 	vldr	s14, [r3]
 80032ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80032f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032f4:	4ba1      	ldr	r3, [pc, #644]	; (800357c <madgwick_filter+0x3cc>)
 80032f6:	edd3 6a00 	vldr	s13, [r3]
 80032fa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80032fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003302:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003306:	4b9f      	ldr	r3, [pc, #636]	; (8003584 <madgwick_filter+0x3d4>)
 8003308:	edd3 6a00 	vldr	s13, [r3]
 800330c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003318:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800331c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003320:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003324:	4b98      	ldr	r3, [pc, #608]	; (8003588 <madgwick_filter+0x3d8>)
 8003326:	ed93 7a00 	vldr	s14, [r3]
 800332a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800332e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003332:	4b92      	ldr	r3, [pc, #584]	; (800357c <madgwick_filter+0x3cc>)
 8003334:	edd3 6a00 	vldr	s13, [r3]
 8003338:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800333c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003344:	4b8e      	ldr	r3, [pc, #568]	; (8003580 <madgwick_filter+0x3d0>)
 8003346:	edd3 6a00 	vldr	s13, [r3]
 800334a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800334e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003356:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800335a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800335e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003362:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003366:	eef5 7a40 	vcmp.f32	s15, #0.0
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d10e      	bne.n	800338e <madgwick_filter+0x1de>
 8003370:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003374:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d107      	bne.n	800338e <madgwick_filter+0x1de>
 800337e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003382:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	f000 81f0 	beq.w	800376e <madgwick_filter+0x5be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800338e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003392:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003396:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800339a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800339e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80033a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ae:	eeb0 0a67 	vmov.f32	s0, s15
 80033b2:	f000 fb6f 	bl	8003a94 <invSqrt>
 80033b6:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
		ax *= recipNorm;
 80033ba:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80033be:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		ay *= recipNorm;
 80033ca:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80033ce:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80033d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		az *= recipNorm;
 80033da:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80033de:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <madgwick_filter+0x3d8>)
 80033ec:	edd3 7a00 	vldr	s15, [r3]
 80033f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2q1 = 2.0f * q1;
 80033f8:	4b60      	ldr	r3, [pc, #384]	; (800357c <madgwick_filter+0x3cc>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003402:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_2q2 = 2.0f * q2;
 8003406:	4b5e      	ldr	r3, [pc, #376]	; (8003580 <madgwick_filter+0x3d0>)
 8003408:	edd3 7a00 	vldr	s15, [r3]
 800340c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003410:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_2q3 = 2.0f * q3;
 8003414:	4b5b      	ldr	r3, [pc, #364]	; (8003584 <madgwick_filter+0x3d4>)
 8003416:	edd3 7a00 	vldr	s15, [r3]
 800341a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800341e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_4q0 = 4.0f * q0;
 8003422:	4b59      	ldr	r3, [pc, #356]	; (8003588 <madgwick_filter+0x3d8>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800342c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003430:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		_4q1 = 4.0f * q1;
 8003434:	4b51      	ldr	r3, [pc, #324]	; (800357c <madgwick_filter+0x3cc>)
 8003436:	edd3 7a00 	vldr	s15, [r3]
 800343a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800343e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003442:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		_4q2 = 4.0f * q2;
 8003446:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <madgwick_filter+0x3d0>)
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003454:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		_8q1 = 8.0f * q1;
 8003458:	4b48      	ldr	r3, [pc, #288]	; (800357c <madgwick_filter+0x3cc>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003466:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		_8q2 = 8.0f * q2;
 800346a:	4b45      	ldr	r3, [pc, #276]	; (8003580 <madgwick_filter+0x3d0>)
 800346c:	edd3 7a00 	vldr	s15, [r3]
 8003470:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003478:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		q0q0 = q0 * q0;
 800347c:	4b42      	ldr	r3, [pc, #264]	; (8003588 <madgwick_filter+0x3d8>)
 800347e:	ed93 7a00 	vldr	s14, [r3]
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <madgwick_filter+0x3d8>)
 8003484:	edd3 7a00 	vldr	s15, [r3]
 8003488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		q1q1 = q1 * q1;
 8003490:	4b3a      	ldr	r3, [pc, #232]	; (800357c <madgwick_filter+0x3cc>)
 8003492:	ed93 7a00 	vldr	s14, [r3]
 8003496:	4b39      	ldr	r3, [pc, #228]	; (800357c <madgwick_filter+0x3cc>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a0:	edc7 7a08 	vstr	s15, [r7, #32]
		q2q2 = q2 * q2;
 80034a4:	4b36      	ldr	r3, [pc, #216]	; (8003580 <madgwick_filter+0x3d0>)
 80034a6:	ed93 7a00 	vldr	s14, [r3]
 80034aa:	4b35      	ldr	r3, [pc, #212]	; (8003580 <madgwick_filter+0x3d0>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b4:	edc7 7a07 	vstr	s15, [r7, #28]
		q3q3 = q3 * q3;
 80034b8:	4b32      	ldr	r3, [pc, #200]	; (8003584 <madgwick_filter+0x3d4>)
 80034ba:	ed93 7a00 	vldr	s14, [r3]
 80034be:	4b31      	ldr	r3, [pc, #196]	; (8003584 <madgwick_filter+0x3d4>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c8:	edc7 7a06 	vstr	s15, [r7, #24]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80034cc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80034d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80034d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80034dc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80034e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034e8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80034ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80034f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80034fc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003508:	edc7 7a05 	vstr	s15, [r7, #20]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800350c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003510:	edd7 7a06 	vldr	s15, [r7, #24]
 8003514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003518:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800351c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003524:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003528:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800352c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003530:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <madgwick_filter+0x3cc>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003542:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8003546:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800354a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800354e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003552:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003556:	ee37 7a67 	vsub.f32	s14, s14, s15
 800355a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800355e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003562:	e013      	b.n	800358c <madgwick_filter+0x3dc>
 8003564:	f3af 8000 	nop.w
 8003568:	a252dd11 	.word	0xa252dd11
 800356c:	3f91df46 	.word	0x3f91df46
 8003570:	20000280 	.word	0x20000280
 8003574:	20000284 	.word	0x20000284
 8003578:	20000288 	.word	0x20000288
 800357c:	20000658 	.word	0x20000658
 8003580:	2000065c 	.word	0x2000065c
 8003584:	20000660 	.word	0x20000660
 8003588:	20000000 	.word	0x20000000
 800358c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003594:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003598:	edd7 7a07 	vldr	s15, [r7, #28]
 800359c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035a4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80035a8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80035ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b4:	edc7 7a04 	vstr	s15, [r7, #16]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80035b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035bc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80035c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035c4:	4be6      	ldr	r3, [pc, #920]	; (8003960 <madgwick_filter+0x7b0>)
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ce:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80035d2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80035d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035de:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80035e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80035e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ee:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80035f2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80035f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003602:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003606:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800360a:	edd7 7a08 	vldr	s15, [r7, #32]
 800360e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003616:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800361a:	edd7 7a07 	vldr	s15, [r7, #28]
 800361e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003626:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800362a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800362e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003636:	edc7 7a03 	vstr	s15, [r7, #12]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800363a:	edd7 7a08 	vldr	s15, [r7, #32]
 800363e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003642:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003646:	4bc7      	ldr	r3, [pc, #796]	; (8003964 <madgwick_filter+0x7b4>)
 8003648:	edd3 7a00 	vldr	s15, [r3]
 800364c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003650:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8003654:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003660:	edd7 7a07 	vldr	s15, [r7, #28]
 8003664:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003668:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800366c:	4bbd      	ldr	r3, [pc, #756]	; (8003964 <madgwick_filter+0x7b4>)
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800367a:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800367e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368a:	edc7 7a02 	vstr	s15, [r7, #8]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800368e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003692:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003696:	edd7 7a04 	vldr	s15, [r7, #16]
 800369a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800369e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80036aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80036b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ba:	eeb0 0a67 	vmov.f32	s0, s15
 80036be:	f000 f9e9 	bl	8003a94 <invSqrt>
 80036c2:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
		s0 *= recipNorm;
 80036c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80036ca:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	edc7 7a05 	vstr	s15, [r7, #20]
		s1 *= recipNorm;
 80036d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80036da:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80036de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e2:	edc7 7a04 	vstr	s15, [r7, #16]
		s2 *= recipNorm;
 80036e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80036ea:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80036ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f2:	edc7 7a03 	vstr	s15, [r7, #12]
		s3 *= recipNorm;
 80036f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80036fa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80036fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003702:	edc7 7a02 	vstr	s15, [r7, #8]

		// Apply feedback step
		qDot1 -= beta * s0;
 8003706:	4b98      	ldr	r3, [pc, #608]	; (8003968 <madgwick_filter+0x7b8>)
 8003708:	ed93 7a00 	vldr	s14, [r3]
 800370c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 8003720:	4b91      	ldr	r3, [pc, #580]	; (8003968 <madgwick_filter+0x7b8>)
 8003722:	ed93 7a00 	vldr	s14, [r3]
 8003726:	edd7 7a04 	vldr	s15, [r7, #16]
 800372a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003736:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 800373a:	4b8b      	ldr	r3, [pc, #556]	; (8003968 <madgwick_filter+0x7b8>)
 800373c:	ed93 7a00 	vldr	s14, [r3]
 8003740:	edd7 7a03 	vldr	s15, [r7, #12]
 8003744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003748:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800374c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003750:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 8003754:	4b84      	ldr	r3, [pc, #528]	; (8003968 <madgwick_filter+0x7b8>)
 8003756:	ed93 7a00 	vldr	s14, [r3]
 800375a:	edd7 7a02 	vldr	s15, [r7, #8]
 800375e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003762:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800376a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800376e:	4b7f      	ldr	r3, [pc, #508]	; (800396c <madgwick_filter+0x7bc>)
 8003770:	edd3 7a00 	vldr	s15, [r3]
 8003774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003784:	4b7a      	ldr	r3, [pc, #488]	; (8003970 <madgwick_filter+0x7c0>)
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378e:	4b78      	ldr	r3, [pc, #480]	; (8003970 <madgwick_filter+0x7c0>)
 8003790:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8003794:	4b75      	ldr	r3, [pc, #468]	; (800396c <madgwick_filter+0x7bc>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800379e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80037a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <madgwick_filter+0x7c4>)
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b4:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <madgwick_filter+0x7c4>)
 80037b6:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80037ba:	4b6c      	ldr	r3, [pc, #432]	; (800396c <madgwick_filter+0x7bc>)
 80037bc:	edd3 7a00 	vldr	s15, [r3]
 80037c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037c8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80037cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037d0:	4b63      	ldr	r3, [pc, #396]	; (8003960 <madgwick_filter+0x7b0>)
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037da:	4b61      	ldr	r3, [pc, #388]	; (8003960 <madgwick_filter+0x7b0>)
 80037dc:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80037e0:	4b62      	ldr	r3, [pc, #392]	; (800396c <madgwick_filter+0x7bc>)
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ee:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80037f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f6:	4b5b      	ldr	r3, [pc, #364]	; (8003964 <madgwick_filter+0x7b4>)
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003800:	4b58      	ldr	r3, [pc, #352]	; (8003964 <madgwick_filter+0x7b4>)
 8003802:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003806:	4b5a      	ldr	r3, [pc, #360]	; (8003970 <madgwick_filter+0x7c0>)
 8003808:	ed93 7a00 	vldr	s14, [r3]
 800380c:	4b58      	ldr	r3, [pc, #352]	; (8003970 <madgwick_filter+0x7c0>)
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003816:	4b57      	ldr	r3, [pc, #348]	; (8003974 <madgwick_filter+0x7c4>)
 8003818:	edd3 6a00 	vldr	s13, [r3]
 800381c:	4b55      	ldr	r3, [pc, #340]	; (8003974 <madgwick_filter+0x7c4>)
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800382a:	4b4d      	ldr	r3, [pc, #308]	; (8003960 <madgwick_filter+0x7b0>)
 800382c:	edd3 6a00 	vldr	s13, [r3]
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <madgwick_filter+0x7b0>)
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800383a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800383e:	4b49      	ldr	r3, [pc, #292]	; (8003964 <madgwick_filter+0x7b4>)
 8003840:	edd3 6a00 	vldr	s13, [r3]
 8003844:	4b47      	ldr	r3, [pc, #284]	; (8003964 <madgwick_filter+0x7b4>)
 8003846:	edd3 7a00 	vldr	s15, [r3]
 800384a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003852:	eeb0 0a67 	vmov.f32	s0, s15
 8003856:	f000 f91d 	bl	8003a94 <invSqrt>
 800385a:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	q0 *= recipNorm;
 800385e:	4b44      	ldr	r3, [pc, #272]	; (8003970 <madgwick_filter+0x7c0>)
 8003860:	ed93 7a00 	vldr	s14, [r3]
 8003864:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386c:	4b40      	ldr	r3, [pc, #256]	; (8003970 <madgwick_filter+0x7c0>)
 800386e:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8003872:	4b40      	ldr	r3, [pc, #256]	; (8003974 <madgwick_filter+0x7c4>)
 8003874:	ed93 7a00 	vldr	s14, [r3]
 8003878:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800387c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003880:	4b3c      	ldr	r3, [pc, #240]	; (8003974 <madgwick_filter+0x7c4>)
 8003882:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8003886:	4b36      	ldr	r3, [pc, #216]	; (8003960 <madgwick_filter+0x7b0>)
 8003888:	ed93 7a00 	vldr	s14, [r3]
 800388c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003894:	4b32      	ldr	r3, [pc, #200]	; (8003960 <madgwick_filter+0x7b0>)
 8003896:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800389a:	4b32      	ldr	r3, [pc, #200]	; (8003964 <madgwick_filter+0x7b4>)
 800389c:	ed93 7a00 	vldr	s14, [r3]
 80038a0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80038a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a8:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <madgwick_filter+0x7b4>)
 80038aa:	edc3 7a00 	vstr	s15, [r3]


	// quatern2euler
	output_data[0] = ToDeg(atan2(2*(q0*q1+q2*q3),1-2*(q1*q1+q2*q2)));
 80038ae:	4b30      	ldr	r3, [pc, #192]	; (8003970 <madgwick_filter+0x7c0>)
 80038b0:	ed93 7a00 	vldr	s14, [r3]
 80038b4:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <madgwick_filter+0x7c4>)
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038be:	4b28      	ldr	r3, [pc, #160]	; (8003960 <madgwick_filter+0x7b0>)
 80038c0:	edd3 6a00 	vldr	s13, [r3]
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <madgwick_filter+0x7b4>)
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80038d6:	ee17 0a90 	vmov	r0, s15
 80038da:	f7fc fe55 	bl	8000588 <__aeabi_f2d>
 80038de:	4604      	mov	r4, r0
 80038e0:	460d      	mov	r5, r1
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <madgwick_filter+0x7c4>)
 80038e4:	ed93 7a00 	vldr	s14, [r3]
 80038e8:	4b22      	ldr	r3, [pc, #136]	; (8003974 <madgwick_filter+0x7c4>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <madgwick_filter+0x7b0>)
 80038f4:	edd3 6a00 	vldr	s13, [r3]
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <madgwick_filter+0x7b0>)
 80038fa:	edd3 7a00 	vldr	s15, [r3]
 80038fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003906:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800390a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800390e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003912:	ee17 0a90 	vmov	r0, s15
 8003916:	f7fc fe37 	bl	8000588 <__aeabi_f2d>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	ec43 2b11 	vmov	d1, r2, r3
 8003922:	ec45 4b10 	vmov	d0, r4, r5
 8003926:	f00c fc7f 	bl	8010228 <atan2>
 800392a:	ec51 0b10 	vmov	r0, r1, d0
 800392e:	a30a      	add	r3, pc, #40	; (adr r3, 8003958 <madgwick_filter+0x7a8>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f7fc fe80 	bl	8000638 <__aeabi_dmul>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	f7fd f972 	bl	8000c28 <__aeabi_d2f>
 8003944:	4603      	mov	r3, r0
 8003946:	4a0c      	ldr	r2, [pc, #48]	; (8003978 <madgwick_filter+0x7c8>)
 8003948:	6013      	str	r3, [r2, #0]
	output_data[1] = ToDeg(asin(2*(q0*q2-q3*q1)));
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <madgwick_filter+0x7c0>)
 800394c:	ed93 7a00 	vldr	s14, [r3]
 8003950:	e014      	b.n	800397c <madgwick_filter+0x7cc>
 8003952:	bf00      	nop
 8003954:	f3af 8000 	nop.w
 8003958:	1a63cbb0 	.word	0x1a63cbb0
 800395c:	404ca5dc 	.word	0x404ca5dc
 8003960:	2000065c 	.word	0x2000065c
 8003964:	20000660 	.word	0x20000660
 8003968:	20000004 	.word	0x20000004
 800396c:	20000008 	.word	0x20000008
 8003970:	20000000 	.word	0x20000000
 8003974:	20000658 	.word	0x20000658
 8003978:	20000640 	.word	0x20000640
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <madgwick_filter+0x8d0>)
 800397e:	edd3 7a00 	vldr	s15, [r3]
 8003982:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <madgwick_filter+0x8d4>)
 8003988:	edd3 6a00 	vldr	s13, [r3]
 800398c:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <madgwick_filter+0x8d8>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800399a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800399e:	ee17 0a90 	vmov	r0, s15
 80039a2:	f7fc fdf1 	bl	8000588 <__aeabi_f2d>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	ec43 2b10 	vmov	d0, r2, r3
 80039ae:	f00c fc01 	bl	80101b4 <asin>
 80039b2:	ec51 0b10 	vmov	r0, r1, d0
 80039b6:	a330      	add	r3, pc, #192	; (adr r3, 8003a78 <madgwick_filter+0x8c8>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc fe3c 	bl	8000638 <__aeabi_dmul>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7fd f92e 	bl	8000c28 <__aeabi_d2f>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <madgwick_filter+0x8dc>)
 80039d0:	6053      	str	r3, [r2, #4]
	output_data[2] = ToDeg(atan2(2*(q0*q3+q1*q2),1-2*(q2*q2+q3*q3)));
 80039d2:	4b2f      	ldr	r3, [pc, #188]	; (8003a90 <madgwick_filter+0x8e0>)
 80039d4:	ed93 7a00 	vldr	s14, [r3]
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <madgwick_filter+0x8d4>)
 80039da:	edd3 7a00 	vldr	s15, [r3]
 80039de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <madgwick_filter+0x8d8>)
 80039e4:	edd3 6a00 	vldr	s13, [r3]
 80039e8:	4b25      	ldr	r3, [pc, #148]	; (8003a80 <madgwick_filter+0x8d0>)
 80039ea:	edd3 7a00 	vldr	s15, [r3]
 80039ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039fa:	ee17 0a90 	vmov	r0, s15
 80039fe:	f7fc fdc3 	bl	8000588 <__aeabi_f2d>
 8003a02:	4604      	mov	r4, r0
 8003a04:	460d      	mov	r5, r1
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <madgwick_filter+0x8d0>)
 8003a08:	ed93 7a00 	vldr	s14, [r3]
 8003a0c:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <madgwick_filter+0x8d0>)
 8003a0e:	edd3 7a00 	vldr	s15, [r3]
 8003a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <madgwick_filter+0x8d4>)
 8003a18:	edd3 6a00 	vldr	s13, [r3]
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <madgwick_filter+0x8d4>)
 8003a1e:	edd3 7a00 	vldr	s15, [r3]
 8003a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a36:	ee17 0a90 	vmov	r0, s15
 8003a3a:	f7fc fda5 	bl	8000588 <__aeabi_f2d>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	ec43 2b11 	vmov	d1, r2, r3
 8003a46:	ec45 4b10 	vmov	d0, r4, r5
 8003a4a:	f00c fbed 	bl	8010228 <atan2>
 8003a4e:	ec51 0b10 	vmov	r0, r1, d0
 8003a52:	a309      	add	r3, pc, #36	; (adr r3, 8003a78 <madgwick_filter+0x8c8>)
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f7fc fdee 	bl	8000638 <__aeabi_dmul>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	f7fd f8e0 	bl	8000c28 <__aeabi_d2f>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a08      	ldr	r2, [pc, #32]	; (8003a8c <madgwick_filter+0x8dc>)
 8003a6c:	6093      	str	r3, [r2, #8]


	return 0;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3778      	adds	r7, #120	; 0x78
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bdb0      	pop	{r4, r5, r7, pc}
 8003a78:	1a63cbb0 	.word	0x1a63cbb0
 8003a7c:	404ca5dc 	.word	0x404ca5dc
 8003a80:	2000065c 	.word	0x2000065c
 8003a84:	20000660 	.word	0x20000660
 8003a88:	20000658 	.word	0x20000658
 8003a8c:	20000640 	.word	0x20000640
 8003a90:	20000000 	.word	0x20000000

08003a94 <invSqrt>:

float invSqrt(float x) {
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003a9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aaa:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8003ab2:	f107 0310 	add.w	r3, r7, #16
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	105a      	asrs	r2, r3, #1
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <invSqrt+0x74>)
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003ac4:	f107 030c 	add.w	r3, r7, #12
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003acc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ad0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ad8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ae8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	ee07 3a90 	vmov	s15, r3
}
 8003afa:	eeb0 0a67 	vmov.f32	s0, s15
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	5f3759df 	.word	0x5f3759df

08003b0c <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fa27 	bl	8003f68 <HAL_Delay>
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b22:	b480      	push	{r7}
 8003b24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b26:	b672      	cpsid	i
}
 8003b28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b2a:	e7fe      	b.n	8003b2a <Error_Handler+0x8>

08003b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <HAL_MspInit+0x44>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <HAL_MspInit+0x44>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <HAL_MspInit+0x44>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_MspInit+0x44>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <HAL_MspInit+0x44>)
 8003b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b54:	6453      	str	r3, [r2, #68]	; 0x44
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_MspInit+0x44>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800

08003b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b78:	e7fe      	b.n	8003b78 <NMI_Handler+0x4>

08003b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b7e:	e7fe      	b.n	8003b7e <HardFault_Handler+0x4>

08003b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <MemManage_Handler+0x4>

08003b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b8a:	e7fe      	b.n	8003b8a <BusFault_Handler+0x4>

08003b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b90:	e7fe      	b.n	8003b90 <UsageFault_Handler+0x4>

08003b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b92:	b480      	push	{r7}
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc0:	f000 f9b2 	bl	8003f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bc4:	bf00      	nop
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <TIM6_DAC_IRQHandler+0x10>)
 8003bce:	f003 fd4f 	bl	8007670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20001094 	.word	0x20001094

08003bdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <OTG_FS_IRQHandler+0x10>)
 8003be2:	f001 fb8e 	bl	8005302 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200025b4 	.word	0x200025b4

08003bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
	return 1;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <_kill>:

int _kill(int pid, int sig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c0a:	f007 fcc9 	bl	800b5a0 <__errno>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2216      	movs	r2, #22
 8003c12:	601a      	str	r2, [r3, #0]
	return -1;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <_exit>:

void _exit (int status)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c28:	f04f 31ff 	mov.w	r1, #4294967295
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ffe7 	bl	8003c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c32:	e7fe      	b.n	8003c32 <_exit+0x12>

08003c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e00a      	b.n	8003c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c46:	f3af 8000 	nop.w
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	60ba      	str	r2, [r7, #8]
 8003c52:	b2ca      	uxtb	r2, r1
 8003c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	dbf0      	blt.n	8003c46 <_read+0x12>
	}

return len;
 8003c64:	687b      	ldr	r3, [r7, #4]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e009      	b.n	8003c94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	60ba      	str	r2, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	3301      	adds	r3, #1
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	dbf1      	blt.n	8003c80 <_write+0x12>
	}
	return len;
 8003c9c:	687b      	ldr	r3, [r7, #4]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <_close>:

int _close(int file)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
	return -1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cce:	605a      	str	r2, [r3, #4]
	return 0;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <_isatty>:

int _isatty(int file)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
	return 1;
 8003ce6:	2301      	movs	r3, #1
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
	return 0;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <_sbrk+0x5c>)
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <_sbrk+0x60>)
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <_sbrk+0x64>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <_sbrk+0x64>)
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <_sbrk+0x68>)
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <_sbrk+0x64>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d207      	bcs.n	8003d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d40:	f007 fc2e 	bl	800b5a0 <__errno>
 8003d44:	4603      	mov	r3, r0
 8003d46:	220c      	movs	r2, #12
 8003d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	e009      	b.n	8003d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <_sbrk+0x64>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <_sbrk+0x64>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <_sbrk+0x64>)
 8003d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d62:	68fb      	ldr	r3, [r7, #12]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20050000 	.word	0x20050000
 8003d70:	00001500 	.word	0x00001500
 8003d74:	2000066c 	.word	0x2000066c
 8003d78:	200029c8 	.word	0x200029c8

08003d7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <SystemInit+0x20>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	4a05      	ldr	r2, [pc, #20]	; (8003d9c <SystemInit+0x20>)
 8003d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003db0:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <MX_TIM6_Init+0x68>)
 8003db2:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <MX_TIM6_Init+0x6c>)
 8003db4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 719;
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <MX_TIM6_Init+0x68>)
 8003db8:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003dbc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <MX_TIM6_Init+0x68>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003dc4:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <MX_TIM6_Init+0x68>)
 8003dc6:	f242 720f 	movw	r2, #9999	; 0x270f
 8003dca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <MX_TIM6_Init+0x68>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003dd2:	480d      	ldr	r0, [pc, #52]	; (8003e08 <MX_TIM6_Init+0x68>)
 8003dd4:	f003 fb7c 	bl	80074d0 <HAL_TIM_Base_Init>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003dde:	f7ff fea0 	bl	8003b22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	4619      	mov	r1, r3
 8003dee:	4806      	ldr	r0, [pc, #24]	; (8003e08 <MX_TIM6_Init+0x68>)
 8003df0:	f003 fe26 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003dfa:	f7ff fe92 	bl	8003b22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20001094 	.word	0x20001094
 8003e0c:	40001000 	.word	0x40001000

08003e10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <HAL_TIM_Base_MspInit+0x44>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d113      	bne.n	8003e4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <HAL_TIM_Base_MspInit+0x48>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a0c      	ldr	r2, [pc, #48]	; (8003e58 <HAL_TIM_Base_MspInit+0x48>)
 8003e28:	f043 0310 	orr.w	r3, r3, #16
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_TIM_Base_MspInit+0x48>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	2036      	movs	r0, #54	; 0x36
 8003e40:	f000 f991 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e44:	2036      	movs	r0, #54	; 0x36
 8003e46:	f000 f9aa 	bl	800419e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40001000 	.word	0x40001000
 8003e58:	40023800 	.word	0x40023800

08003e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e60:	480d      	ldr	r0, [pc, #52]	; (8003e98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e62:	490e      	ldr	r1, [pc, #56]	; (8003e9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e64:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e68:	e002      	b.n	8003e70 <LoopCopyDataInit>

08003e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e6e:	3304      	adds	r3, #4

08003e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e74:	d3f9      	bcc.n	8003e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e76:	4a0b      	ldr	r2, [pc, #44]	; (8003ea4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e78:	4c0b      	ldr	r4, [pc, #44]	; (8003ea8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e7c:	e001      	b.n	8003e82 <LoopFillZerobss>

08003e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e80:	3204      	adds	r2, #4

08003e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e84:	d3fb      	bcc.n	8003e7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e86:	f7ff ff79 	bl	8003d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e8a:	f007 fb8f 	bl	800b5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e8e:	f7fe f9db 	bl	8002248 <main>
  bx  lr    
 8003e92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e9c:	200005fc 	.word	0x200005fc
  ldr r2, =_sidata
 8003ea0:	08010fb0 	.word	0x08010fb0
  ldr r2, =_sbss
 8003ea4:	200005fc 	.word	0x200005fc
  ldr r4, =_ebss
 8003ea8:	200029c8 	.word	0x200029c8

08003eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003eac:	e7fe      	b.n	8003eac <ADC_IRQHandler>

08003eae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eb2:	2003      	movs	r0, #3
 8003eb4:	f000 f94c 	bl	8004150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eb8:	200f      	movs	r0, #15
 8003eba:	f000 f805 	bl	8003ec8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003ebe:	f7ff fe35 	bl	8003b2c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ed0:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_InitTick+0x54>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <HAL_InitTick+0x58>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f967 	bl	80041ba <HAL_SYSTICK_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e00e      	b.n	8003f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b0f      	cmp	r3, #15
 8003efa:	d80a      	bhi.n	8003f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003efc:	2200      	movs	r2, #0
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	f000 f92f 	bl	8004166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f08:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <HAL_InitTick+0x5c>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	2000028c 	.word	0x2000028c
 8003f20:	20000294 	.word	0x20000294
 8003f24:	20000290 	.word	0x20000290

08003f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_IncTick+0x20>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_IncTick+0x24>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <HAL_IncTick+0x24>)
 8003f3a:	6013      	str	r3, [r2, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000294 	.word	0x20000294
 8003f4c:	200010e0 	.word	0x200010e0

08003f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return uwTick;
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <HAL_GetTick+0x14>)
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	200010e0 	.word	0x200010e0

08003f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f70:	f7ff ffee 	bl	8003f50 <HAL_GetTick>
 8003f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d005      	beq.n	8003f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_Delay+0x44>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f8e:	bf00      	nop
 8003f90:	f7ff ffde 	bl	8003f50 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d8f7      	bhi.n	8003f90 <HAL_Delay+0x28>
  {
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000294 	.word	0x20000294

08003fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fde:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	60d3      	str	r3, [r2, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000ed00 	.word	0xe000ed00
 8003ff4:	05fa0000 	.word	0x05fa0000

08003ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <__NVIC_GetPriorityGrouping+0x18>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	f003 0307 	and.w	r3, r3, #7
}
 8004006:	4618      	mov	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800401e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004022:	2b00      	cmp	r3, #0
 8004024:	db0b      	blt.n	800403e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	f003 021f 	and.w	r2, r3, #31
 800402c:	4907      	ldr	r1, [pc, #28]	; (800404c <__NVIC_EnableIRQ+0x38>)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	2001      	movs	r0, #1
 8004036:	fa00 f202 	lsl.w	r2, r0, r2
 800403a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000e100 	.word	0xe000e100

08004050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	6039      	str	r1, [r7, #0]
 800405a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800405c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004060:	2b00      	cmp	r3, #0
 8004062:	db0a      	blt.n	800407a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	490c      	ldr	r1, [pc, #48]	; (800409c <__NVIC_SetPriority+0x4c>)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	0112      	lsls	r2, r2, #4
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	440b      	add	r3, r1
 8004074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004078:	e00a      	b.n	8004090 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4908      	ldr	r1, [pc, #32]	; (80040a0 <__NVIC_SetPriority+0x50>)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	3b04      	subs	r3, #4
 8004088:	0112      	lsls	r2, r2, #4
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	440b      	add	r3, r1
 800408e:	761a      	strb	r2, [r3, #24]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000e100 	.word	0xe000e100
 80040a0:	e000ed00 	.word	0xe000ed00

080040a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f1c3 0307 	rsb	r3, r3, #7
 80040be:	2b04      	cmp	r3, #4
 80040c0:	bf28      	it	cs
 80040c2:	2304      	movcs	r3, #4
 80040c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d902      	bls.n	80040d4 <NVIC_EncodePriority+0x30>
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3b03      	subs	r3, #3
 80040d2:	e000      	b.n	80040d6 <NVIC_EncodePriority+0x32>
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43da      	mvns	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	401a      	ands	r2, r3
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040ec:	f04f 31ff 	mov.w	r1, #4294967295
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	43d9      	mvns	r1, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	4313      	orrs	r3, r2
         );
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3724      	adds	r7, #36	; 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3b01      	subs	r3, #1
 8004118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800411c:	d301      	bcc.n	8004122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800411e:	2301      	movs	r3, #1
 8004120:	e00f      	b.n	8004142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004122:	4a0a      	ldr	r2, [pc, #40]	; (800414c <SysTick_Config+0x40>)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3b01      	subs	r3, #1
 8004128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800412a:	210f      	movs	r1, #15
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f7ff ff8e 	bl	8004050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <SysTick_Config+0x40>)
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800413a:	4b04      	ldr	r3, [pc, #16]	; (800414c <SysTick_Config+0x40>)
 800413c:	2207      	movs	r2, #7
 800413e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	e000e010 	.word	0xe000e010

08004150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff29 	bl	8003fb0 <__NVIC_SetPriorityGrouping>
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	4603      	mov	r3, r0
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004178:	f7ff ff3e 	bl	8003ff8 <__NVIC_GetPriorityGrouping>
 800417c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f7ff ff8e 	bl	80040a4 <NVIC_EncodePriority>
 8004188:	4602      	mov	r2, r0
 800418a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff5d 	bl	8004050 <__NVIC_SetPriority>
}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff31 	bl	8004014 <__NVIC_EnableIRQ>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ffa2 	bl	800410c <SysTick_Config>
 80041c8:	4603      	mov	r3, r0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e175      	b.n	80044e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041f4:	2201      	movs	r2, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	f040 8164 	bne.w	80044da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d00b      	beq.n	8004232 <HAL_GPIO_Init+0x5e>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d007      	beq.n	8004232 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004226:	2b11      	cmp	r3, #17
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b12      	cmp	r3, #18
 8004230:	d130      	bne.n	8004294 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	2203      	movs	r2, #3
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4313      	orrs	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004268:	2201      	movs	r2, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 0201 	and.w	r2, r3, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	2203      	movs	r2, #3
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d003      	beq.n	80042d4 <HAL_GPIO_Init+0x100>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b12      	cmp	r3, #18
 80042d2:	d123      	bne.n	800431c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	08da      	lsrs	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3208      	adds	r2, #8
 80042dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	220f      	movs	r2, #15
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	08da      	lsrs	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3208      	adds	r2, #8
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	2203      	movs	r2, #3
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43db      	mvns	r3, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4013      	ands	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0203 	and.w	r2, r3, #3
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80be 	beq.w	80044da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435e:	4b66      	ldr	r3, [pc, #408]	; (80044f8 <HAL_GPIO_Init+0x324>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	4a65      	ldr	r2, [pc, #404]	; (80044f8 <HAL_GPIO_Init+0x324>)
 8004364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004368:	6453      	str	r3, [r2, #68]	; 0x44
 800436a:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_GPIO_Init+0x324>)
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004376:	4a61      	ldr	r2, [pc, #388]	; (80044fc <HAL_GPIO_Init+0x328>)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	3302      	adds	r3, #2
 800437e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	220f      	movs	r2, #15
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a58      	ldr	r2, [pc, #352]	; (8004500 <HAL_GPIO_Init+0x32c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d037      	beq.n	8004412 <HAL_GPIO_Init+0x23e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a57      	ldr	r2, [pc, #348]	; (8004504 <HAL_GPIO_Init+0x330>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d031      	beq.n	800440e <HAL_GPIO_Init+0x23a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a56      	ldr	r2, [pc, #344]	; (8004508 <HAL_GPIO_Init+0x334>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d02b      	beq.n	800440a <HAL_GPIO_Init+0x236>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a55      	ldr	r2, [pc, #340]	; (800450c <HAL_GPIO_Init+0x338>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d025      	beq.n	8004406 <HAL_GPIO_Init+0x232>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a54      	ldr	r2, [pc, #336]	; (8004510 <HAL_GPIO_Init+0x33c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01f      	beq.n	8004402 <HAL_GPIO_Init+0x22e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a53      	ldr	r2, [pc, #332]	; (8004514 <HAL_GPIO_Init+0x340>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d019      	beq.n	80043fe <HAL_GPIO_Init+0x22a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a52      	ldr	r2, [pc, #328]	; (8004518 <HAL_GPIO_Init+0x344>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_GPIO_Init+0x226>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a51      	ldr	r2, [pc, #324]	; (800451c <HAL_GPIO_Init+0x348>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00d      	beq.n	80043f6 <HAL_GPIO_Init+0x222>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a50      	ldr	r2, [pc, #320]	; (8004520 <HAL_GPIO_Init+0x34c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <HAL_GPIO_Init+0x21e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a4f      	ldr	r2, [pc, #316]	; (8004524 <HAL_GPIO_Init+0x350>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_GPIO_Init+0x21a>
 80043ea:	2309      	movs	r3, #9
 80043ec:	e012      	b.n	8004414 <HAL_GPIO_Init+0x240>
 80043ee:	230a      	movs	r3, #10
 80043f0:	e010      	b.n	8004414 <HAL_GPIO_Init+0x240>
 80043f2:	2308      	movs	r3, #8
 80043f4:	e00e      	b.n	8004414 <HAL_GPIO_Init+0x240>
 80043f6:	2307      	movs	r3, #7
 80043f8:	e00c      	b.n	8004414 <HAL_GPIO_Init+0x240>
 80043fa:	2306      	movs	r3, #6
 80043fc:	e00a      	b.n	8004414 <HAL_GPIO_Init+0x240>
 80043fe:	2305      	movs	r3, #5
 8004400:	e008      	b.n	8004414 <HAL_GPIO_Init+0x240>
 8004402:	2304      	movs	r3, #4
 8004404:	e006      	b.n	8004414 <HAL_GPIO_Init+0x240>
 8004406:	2303      	movs	r3, #3
 8004408:	e004      	b.n	8004414 <HAL_GPIO_Init+0x240>
 800440a:	2302      	movs	r3, #2
 800440c:	e002      	b.n	8004414 <HAL_GPIO_Init+0x240>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_GPIO_Init+0x240>
 8004412:	2300      	movs	r3, #0
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	f002 0203 	and.w	r2, r2, #3
 800441a:	0092      	lsls	r2, r2, #2
 800441c:	4093      	lsls	r3, r2
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004424:	4935      	ldr	r1, [pc, #212]	; (80044fc <HAL_GPIO_Init+0x328>)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	3302      	adds	r3, #2
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004432:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_GPIO_Init+0x354>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	43db      	mvns	r3, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4013      	ands	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004456:	4a34      	ldr	r2, [pc, #208]	; (8004528 <HAL_GPIO_Init+0x354>)
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800445c:	4b32      	ldr	r3, [pc, #200]	; (8004528 <HAL_GPIO_Init+0x354>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	43db      	mvns	r3, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4013      	ands	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004480:	4a29      	ldr	r2, [pc, #164]	; (8004528 <HAL_GPIO_Init+0x354>)
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004486:	4b28      	ldr	r3, [pc, #160]	; (8004528 <HAL_GPIO_Init+0x354>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_GPIO_Init+0x354>)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_GPIO_Init+0x354>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <HAL_GPIO_Init+0x354>)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3301      	adds	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2b0f      	cmp	r3, #15
 80044e4:	f67f ae86 	bls.w	80041f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	3724      	adds	r7, #36	; 0x24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40013800 	.word	0x40013800
 8004500:	40020000 	.word	0x40020000
 8004504:	40020400 	.word	0x40020400
 8004508:	40020800 	.word	0x40020800
 800450c:	40020c00 	.word	0x40020c00
 8004510:	40021000 	.word	0x40021000
 8004514:	40021400 	.word	0x40021400
 8004518:	40021800 	.word	0x40021800
 800451c:	40021c00 	.word	0x40021c00
 8004520:	40022000 	.word	0x40022000
 8004524:	40022400 	.word	0x40022400
 8004528:	40013c00 	.word	0x40013c00

0800452c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	807b      	strh	r3, [r7, #2]
 8004538:	4613      	mov	r3, r2
 800453a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800453c:	787b      	ldrb	r3, [r7, #1]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004542:	887a      	ldrh	r2, [r7, #2]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004548:	e003      	b.n	8004552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800454a:	887b      	ldrh	r3, [r7, #2]
 800454c:	041a      	lsls	r2, r3, #16
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	619a      	str	r2, [r3, #24]
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004570:	887a      	ldrh	r2, [r7, #2]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4013      	ands	r3, r2
 8004576:	041a      	lsls	r2, r3, #16
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	43d9      	mvns	r1, r3
 800457c:	887b      	ldrh	r3, [r7, #2]
 800457e:	400b      	ands	r3, r1
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	619a      	str	r2, [r3, #24]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e07f      	b.n	80046a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fc fde4 	bl	8001188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2224      	movs	r2, #36	; 0x24
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d107      	bne.n	800460e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800460a:	609a      	str	r2, [r3, #8]
 800460c:	e006      	b.n	800461c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800461a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d104      	bne.n	800462e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800462c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_I2C_Init+0x11c>)
 800463a:	430b      	orrs	r3, r1
 800463c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800464c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	ea42 0103 	orr.w	r1, r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	021a      	lsls	r2, r3, #8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69d9      	ldr	r1, [r3, #28]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1a      	ldr	r2, [r3, #32]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	02008000 	.word	0x02008000

080046b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	4608      	mov	r0, r1
 80046be:	4611      	mov	r1, r2
 80046c0:	461a      	mov	r2, r3
 80046c2:	4603      	mov	r3, r0
 80046c4:	817b      	strh	r3, [r7, #10]
 80046c6:	460b      	mov	r3, r1
 80046c8:	813b      	strh	r3, [r7, #8]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	f040 80f9 	bne.w	80048ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_I2C_Mem_Write+0x34>
 80046e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0ed      	b.n	80048d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_I2C_Mem_Write+0x4e>
 80046fe:	2302      	movs	r3, #2
 8004700:	e0e6      	b.n	80048d0 <HAL_I2C_Mem_Write+0x21c>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800470a:	f7ff fc21 	bl	8003f50 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2319      	movs	r3, #25
 8004716:	2201      	movs	r2, #1
 8004718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fac3 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0d1      	b.n	80048d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2221      	movs	r2, #33	; 0x21
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2240      	movs	r2, #64	; 0x40
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a3a      	ldr	r2, [r7, #32]
 8004746:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004754:	88f8      	ldrh	r0, [r7, #6]
 8004756:	893a      	ldrh	r2, [r7, #8]
 8004758:	8979      	ldrh	r1, [r7, #10]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	4603      	mov	r3, r0
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f9d3 	bl	8004b10 <I2C_RequestMemoryWrite>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0a9      	b.n	80048d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2bff      	cmp	r3, #255	; 0xff
 8004784:	d90e      	bls.n	80047a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	22ff      	movs	r2, #255	; 0xff
 800478a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	b2da      	uxtb	r2, r3
 8004792:	8979      	ldrh	r1, [r7, #10]
 8004794:	2300      	movs	r3, #0
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fba5 	bl	8004eec <I2C_TransferConfig>
 80047a2:	e00f      	b.n	80047c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	8979      	ldrh	r1, [r7, #10]
 80047b6:	2300      	movs	r3, #0
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fb94 	bl	8004eec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 faad 	bl	8004d28 <I2C_WaitOnTXISFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e07b      	b.n	80048d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d034      	beq.n	800487c <HAL_I2C_Mem_Write+0x1c8>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d130      	bne.n	800487c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	2200      	movs	r2, #0
 8004822:	2180      	movs	r1, #128	; 0x80
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fa3f 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e04d      	b.n	80048d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2bff      	cmp	r3, #255	; 0xff
 800483c:	d90e      	bls.n	800485c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	22ff      	movs	r2, #255	; 0xff
 8004842:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	b2da      	uxtb	r2, r3
 800484a:	8979      	ldrh	r1, [r7, #10]
 800484c:	2300      	movs	r3, #0
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fb49 	bl	8004eec <I2C_TransferConfig>
 800485a:	e00f      	b.n	800487c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	b2da      	uxtb	r2, r3
 800486c:	8979      	ldrh	r1, [r7, #10]
 800486e:	2300      	movs	r3, #0
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fb38 	bl	8004eec <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d19e      	bne.n	80047c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fa8c 	bl	8004da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e01a      	b.n	80048d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2220      	movs	r2, #32
 80048a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_I2C_Mem_Write+0x224>)
 80048ae:	400b      	ands	r3, r1
 80048b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	fe00e800 	.word	0xfe00e800

080048dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	461a      	mov	r2, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	817b      	strh	r3, [r7, #10]
 80048ee:	460b      	mov	r3, r1
 80048f0:	813b      	strh	r3, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b20      	cmp	r3, #32
 8004900:	f040 80fd 	bne.w	8004afe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_I2C_Mem_Read+0x34>
 800490a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004916:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0f1      	b.n	8004b00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_I2C_Mem_Read+0x4e>
 8004926:	2302      	movs	r3, #2
 8004928:	e0ea      	b.n	8004b00 <HAL_I2C_Mem_Read+0x224>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004932:	f7ff fb0d 	bl	8003f50 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2319      	movs	r3, #25
 800493e:	2201      	movs	r2, #1
 8004940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f9af 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0d5      	b.n	8004b00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2222      	movs	r2, #34	; 0x22
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2240      	movs	r2, #64	; 0x40
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004974:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800497c:	88f8      	ldrh	r0, [r7, #6]
 800497e:	893a      	ldrh	r2, [r7, #8]
 8004980:	8979      	ldrh	r1, [r7, #10]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	4603      	mov	r3, r0
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 f913 	bl	8004bb8 <I2C_RequestMemoryRead>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0ad      	b.n	8004b00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2bff      	cmp	r3, #255	; 0xff
 80049ac:	d90e      	bls.n	80049cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	8979      	ldrh	r1, [r7, #10]
 80049bc:	4b52      	ldr	r3, [pc, #328]	; (8004b08 <HAL_I2C_Mem_Read+0x22c>)
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fa91 	bl	8004eec <I2C_TransferConfig>
 80049ca:	e00f      	b.n	80049ec <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	8979      	ldrh	r1, [r7, #10]
 80049de:	4b4a      	ldr	r3, [pc, #296]	; (8004b08 <HAL_I2C_Mem_Read+0x22c>)
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 fa80 	bl	8004eec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	2200      	movs	r2, #0
 80049f4:	2104      	movs	r1, #4
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f956 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07c      	b.n	8004b00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d034      	beq.n	8004aac <HAL_I2C_Mem_Read+0x1d0>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d130      	bne.n	8004aac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	2200      	movs	r2, #0
 8004a52:	2180      	movs	r1, #128	; 0x80
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f927 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e04d      	b.n	8004b00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2bff      	cmp	r3, #255	; 0xff
 8004a6c:	d90e      	bls.n	8004a8c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	22ff      	movs	r2, #255	; 0xff
 8004a72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	8979      	ldrh	r1, [r7, #10]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fa31 	bl	8004eec <I2C_TransferConfig>
 8004a8a:	e00f      	b.n	8004aac <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	8979      	ldrh	r1, [r7, #10]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fa20 	bl	8004eec <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d19a      	bne.n	80049ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f974 	bl	8004da8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e01a      	b.n	8004b00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_I2C_Mem_Read+0x230>)
 8004ade:	400b      	ands	r3, r1
 8004ae0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e000      	b.n	8004b00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004afe:	2302      	movs	r3, #2
  }
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	80002400 	.word	0x80002400
 8004b0c:	fe00e800 	.word	0xfe00e800

08004b10 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	4608      	mov	r0, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4603      	mov	r3, r0
 8004b20:	817b      	strh	r3, [r7, #10]
 8004b22:	460b      	mov	r3, r1
 8004b24:	813b      	strh	r3, [r7, #8]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	8979      	ldrh	r1, [r7, #10]
 8004b30:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <I2C_RequestMemoryWrite+0xa4>)
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f9d7 	bl	8004eec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	69b9      	ldr	r1, [r7, #24]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f8f0 	bl	8004d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e02c      	b.n	8004bac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d105      	bne.n	8004b64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b58:	893b      	ldrh	r3, [r7, #8]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
 8004b62:	e015      	b.n	8004b90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	0a1b      	lsrs	r3, r3, #8
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	69b9      	ldr	r1, [r7, #24]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f8d6 	bl	8004d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e012      	b.n	8004bac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b86:	893b      	ldrh	r3, [r7, #8]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2200      	movs	r2, #0
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f884 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	80002000 	.word	0x80002000

08004bb8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	817b      	strh	r3, [r7, #10]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	813b      	strh	r3, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	8979      	ldrh	r1, [r7, #10]
 8004bd8:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <I2C_RequestMemoryRead+0xa4>)
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f984 	bl	8004eec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	69b9      	ldr	r1, [r7, #24]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f89d 	bl	8004d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e02c      	b.n	8004c52 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bfe:	893b      	ldrh	r3, [r7, #8]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28
 8004c08:	e015      	b.n	8004c36 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c0a:	893b      	ldrh	r3, [r7, #8]
 8004c0c:	0a1b      	lsrs	r3, r3, #8
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	69b9      	ldr	r1, [r7, #24]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f883 	bl	8004d28 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e012      	b.n	8004c52 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c2c:	893b      	ldrh	r3, [r7, #8]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2140      	movs	r1, #64	; 0x40
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f831 	bl	8004ca8 <I2C_WaitOnFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	80002000 	.word	0x80002000

08004c60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d103      	bne.n	8004c7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d007      	beq.n	8004c9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	619a      	str	r2, [r3, #24]
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb8:	e022      	b.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d01e      	beq.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7ff f945 	bl	8003f50 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d113      	bne.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e00f      	b.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d0cd      	beq.n	8004cba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d34:	e02c      	b.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f870 	bl	8004e20 <I2C_IsAcknowledgeFailed>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e02a      	b.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d01e      	beq.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d52:	f7ff f8fd 	bl	8003f50 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d113      	bne.n	8004d90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e007      	b.n	8004da0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d1cb      	bne.n	8004d36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004db4:	e028      	b.n	8004e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f830 	bl	8004e20 <I2C_IsAcknowledgeFailed>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e026      	b.n	8004e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dca:	f7ff f8c1 	bl	8003f50 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d113      	bne.n	8004e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e007      	b.n	8004e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d1cf      	bne.n	8004db6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d151      	bne.n	8004ede <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e3a:	e022      	b.n	8004e82 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d01e      	beq.n	8004e82 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e44:	f7ff f884 	bl	8003f50 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d302      	bcc.n	8004e5a <I2C_IsAcknowledgeFailed+0x3a>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d113      	bne.n	8004e82 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f043 0220 	orr.w	r2, r3, #32
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e02e      	b.n	8004ee0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d1d5      	bne.n	8004e3c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2210      	movs	r2, #16
 8004e96:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff fedd 	bl	8004c60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f043 0204 	orr.w	r2, r3, #4
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	fe00e800 	.word	0xfe00e800

08004eec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	817b      	strh	r3, [r7, #10]
 8004efa:	4613      	mov	r3, r2
 8004efc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	0d5b      	lsrs	r3, r3, #21
 8004f08:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <I2C_TransferConfig+0x58>)
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	43db      	mvns	r3, r3
 8004f12:	ea02 0103 	and.w	r1, r2, r3
 8004f16:	897b      	ldrh	r3, [r7, #10]
 8004f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f1c:	7a7b      	ldrb	r3, [r7, #9]
 8004f1e:	041b      	lsls	r3, r3, #16
 8004f20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	03ff63ff 	.word	0x03ff63ff

08004f48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d138      	bne.n	8004fd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e032      	b.n	8004fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2224      	movs	r2, #36	; 0x24
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6819      	ldr	r1, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e000      	b.n	8004fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d139      	bne.n	8005068 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d101      	bne.n	8005002 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ffe:	2302      	movs	r3, #2
 8005000:	e033      	b.n	800506a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2224      	movs	r2, #36	; 0x24
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0201 	bic.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005030:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	e000      	b.n	800506a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005068:	2302      	movs	r3, #2
  }
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005078:	b08f      	sub	sp, #60	; 0x3c
 800507a:	af0a      	add	r7, sp, #40	; 0x28
 800507c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e116      	b.n	80052b6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f005 ff1c 	bl	800aee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2203      	movs	r2, #3
 80050ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f002 fe71 	bl	8007dae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	687e      	ldr	r6, [r7, #4]
 80050d4:	466d      	mov	r5, sp
 80050d6:	f106 0410 	add.w	r4, r6, #16
 80050da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80050ea:	1d33      	adds	r3, r6, #4
 80050ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050ee:	6838      	ldr	r0, [r7, #0]
 80050f0:	f002 fd52 	bl	8007b98 <USB_CoreInit>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e0d7      	b.n	80052b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2100      	movs	r1, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f002 fe5f 	bl	8007dd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
 8005116:	e04a      	b.n	80051ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005118:	7bfa      	ldrb	r2, [r7, #15]
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	333d      	adds	r3, #61	; 0x3d
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800512c:	7bfa      	ldrb	r2, [r7, #15]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	333c      	adds	r3, #60	; 0x3c
 800513c:	7bfa      	ldrb	r2, [r7, #15]
 800513e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005140:	7bfa      	ldrb	r2, [r7, #15]
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	b298      	uxth	r0, r3
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	3342      	adds	r3, #66	; 0x42
 8005154:	4602      	mov	r2, r0
 8005156:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005158:	7bfa      	ldrb	r2, [r7, #15]
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	333f      	adds	r3, #63	; 0x3f
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800516c:	7bfa      	ldrb	r2, [r7, #15]
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	3344      	adds	r3, #68	; 0x44
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3348      	adds	r3, #72	; 0x48
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005194:	7bfa      	ldrb	r2, [r7, #15]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	3350      	adds	r3, #80	; 0x50
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	3301      	adds	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
 80051ae:	7bfa      	ldrb	r2, [r7, #15]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d3af      	bcc.n	8005118 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	73fb      	strb	r3, [r7, #15]
 80051bc:	e044      	b.n	8005248 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051d4:	7bfa      	ldrb	r2, [r7, #15]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051ea:	7bfa      	ldrb	r2, [r7, #15]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005200:	7bfa      	ldrb	r2, [r7, #15]
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005216:	7bfa      	ldrb	r2, [r7, #15]
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800522c:	7bfa      	ldrb	r2, [r7, #15]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	3301      	adds	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
 8005248:	7bfa      	ldrb	r2, [r7, #15]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	429a      	cmp	r2, r3
 8005250:	d3b5      	bcc.n	80051be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	687e      	ldr	r6, [r7, #4]
 800525a:	466d      	mov	r5, sp
 800525c:	f106 0410 	add.w	r4, r6, #16
 8005260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005268:	e894 0003 	ldmia.w	r4, {r0, r1}
 800526c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005270:	1d33      	adds	r3, r6, #4
 8005272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005274:	6838      	ldr	r0, [r7, #0]
 8005276:	f002 fdd5 	bl	8007e24 <USB_DevInit>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e014      	b.n	80052b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d102      	bne.n	80052aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f001 f881 	bl	80063ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f003 fe2d 	bl	8008f0e <USB_DevDisconnect>

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_PCD_Start+0x16>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e012      	b.n	80052fa <HAL_PCD_Start+0x3c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f002 fd53 	bl	8007d8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f003 fdee 	bl	8008ecc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005302:	b590      	push	{r4, r7, lr}
 8005304:	b08d      	sub	sp, #52	; 0x34
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f003 feac 	bl	8009076 <USB_GetMode>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	f040 83ca 	bne.w	8005aba <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f003 fe10 	bl	8008f50 <USB_ReadInterrupts>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	f000 83c0 	beq.w	8005ab8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f003 fe07 	bl	8008f50 <USB_ReadInterrupts>
 8005342:	4603      	mov	r3, r0
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b02      	cmp	r3, #2
 800534a:	d107      	bne.n	800535c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f002 0202 	and.w	r2, r2, #2
 800535a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f003 fdf5 	bl	8008f50 <USB_ReadInterrupts>
 8005366:	4603      	mov	r3, r0
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b10      	cmp	r3, #16
 800536e:	d161      	bne.n	8005434 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0210 	bic.w	r2, r2, #16
 800537e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f003 020f 	and.w	r2, r3, #15
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	3304      	adds	r3, #4
 800539e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	0c5b      	lsrs	r3, r3, #17
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d124      	bne.n	80053f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d035      	beq.n	8005424 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	6a38      	ldr	r0, [r7, #32]
 80053cc:	f003 fc5b 	bl	8008c86 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	091b      	lsrs	r3, r3, #4
 80053d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053dc:	441a      	add	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053ee:	441a      	add	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	619a      	str	r2, [r3, #24]
 80053f4:	e016      	b.n	8005424 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	0c5b      	lsrs	r3, r3, #17
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	2b06      	cmp	r3, #6
 8005400:	d110      	bne.n	8005424 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005408:	2208      	movs	r2, #8
 800540a:	4619      	mov	r1, r3
 800540c:	6a38      	ldr	r0, [r7, #32]
 800540e:	f003 fc3a 	bl	8008c86 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800541e:	441a      	add	r2, r3
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0210 	orr.w	r2, r2, #16
 8005432:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f003 fd89 	bl	8008f50 <USB_ReadInterrupts>
 800543e:	4603      	mov	r3, r0
 8005440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005448:	d16e      	bne.n	8005528 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f003 fd8f 	bl	8008f76 <USB_ReadDevAllOutEpInterrupt>
 8005458:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800545a:	e062      	b.n	8005522 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d057      	beq.n	8005516 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f003 fdb4 	bl	8008fde <USB_ReadDevOutEPInterrupt>
 8005476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00c      	beq.n	800549c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	461a      	mov	r2, r3
 8005490:	2301      	movs	r3, #1
 8005492:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fdde 	bl	8006058 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	461a      	mov	r2, r3
 80054b4:	2308      	movs	r3, #8
 80054b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80054b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fed8 	bl	8006270 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d6:	461a      	mov	r2, r3
 80054d8:	2310      	movs	r3, #16
 80054da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d008      	beq.n	80054f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	461a      	mov	r2, r3
 80054f4:	2320      	movs	r3, #32
 80054f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	461a      	mov	r2, r3
 8005510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005514:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	3301      	adds	r3, #1
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	2b00      	cmp	r3, #0
 8005526:	d199      	bne.n	800545c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f003 fd0f 	bl	8008f50 <USB_ReadInterrupts>
 8005532:	4603      	mov	r3, r0
 8005534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800553c:	f040 80c0 	bne.w	80056c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f003 fd30 	bl	8008faa <USB_ReadDevAllInEpInterrupt>
 800554a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005550:	e0b2      	b.n	80056b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80a7 	beq.w	80056ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	4611      	mov	r1, r2
 8005568:	4618      	mov	r0, r3
 800556a:	f003 fd56 	bl	800901a <USB_ReadDevInEPInterrupt>
 800556e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d057      	beq.n	800562a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	2201      	movs	r2, #1
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	43db      	mvns	r3, r3
 8005594:	69f9      	ldr	r1, [r7, #28]
 8005596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800559a:	4013      	ands	r3, r2
 800559c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	461a      	mov	r2, r3
 80055ac:	2301      	movs	r3, #1
 80055ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d132      	bne.n	800561e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055bc:	4613      	mov	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	3348      	adds	r3, #72	; 0x48
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4403      	add	r3, r0
 80055d8:	3344      	adds	r3, #68	; 0x44
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4419      	add	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	4613      	mov	r3, r2
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4403      	add	r3, r0
 80055ec:	3348      	adds	r3, #72	; 0x48
 80055ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d113      	bne.n	800561e <HAL_PCD_IRQHandler+0x31c>
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	4613      	mov	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	3350      	adds	r3, #80	; 0x50
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d108      	bne.n	800561e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005616:	461a      	mov	r2, r3
 8005618:	2101      	movs	r1, #1
 800561a:	f003 fd5f 	bl	80090dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	b2db      	uxtb	r3, r3
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f005 fcec 	bl	800b002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	461a      	mov	r2, r3
 8005642:	2308      	movs	r3, #8
 8005644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	461a      	mov	r2, r3
 800565e:	2310      	movs	r3, #16
 8005660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005678:	461a      	mov	r2, r3
 800567a:	2340      	movs	r3, #64	; 0x40
 800567c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	461a      	mov	r2, r3
 8005696:	2302      	movs	r3, #2
 8005698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80056a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fc48 	bl	8005f3c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	3301      	adds	r3, #1
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	085b      	lsrs	r3, r3, #1
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f47f af49 	bne.w	8005552 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f003 fc43 	bl	8008f50 <USB_ReadInterrupts>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056d4:	d122      	bne.n	800571c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d108      	bne.n	8005706 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056fc:	2100      	movs	r1, #0
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f005 fece 	bl	800b4a0 <HAL_PCDEx_LPM_Callback>
 8005704:	e002      	b.n	800570c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f005 fcf2 	bl	800b0f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800571a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f003 fc15 	bl	8008f50 <USB_ReadInterrupts>
 8005726:	4603      	mov	r3, r0
 8005728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005730:	d112      	bne.n	8005758 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d102      	bne.n	8005748 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f005 fcae 	bl	800b0a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005756:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f003 fbf7 	bl	8008f50 <USB_ReadInterrupts>
 8005762:	4603      	mov	r3, r0
 8005764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800576c:	d121      	bne.n	80057b2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695a      	ldr	r2, [r3, #20]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800577c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d111      	bne.n	80057ac <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	089b      	lsrs	r3, r3, #2
 8005798:	f003 020f 	and.w	r2, r3, #15
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80057a2:	2101      	movs	r1, #1
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f005 fe7b 	bl	800b4a0 <HAL_PCDEx_LPM_Callback>
 80057aa:	e002      	b.n	80057b2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f005 fc79 	bl	800b0a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f003 fbca 	bl	8008f50 <USB_ReadInterrupts>
 80057bc:	4603      	mov	r3, r0
 80057be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c6:	f040 80c7 	bne.w	8005958 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2110      	movs	r1, #16
 80057e4:	4618      	mov	r0, r3
 80057e6:	f002 fc8b 	bl	8008100 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ee:	e056      	b.n	800589e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	461a      	mov	r2, r3
 80057fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005802:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005822:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	440a      	add	r2, r1
 800583a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005842:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	461a      	mov	r2, r3
 8005852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005856:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005876:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005896:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	3301      	adds	r3, #1
 800589c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3a3      	bcc.n	80057f0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80058ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d016      	beq.n	80058f2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d4:	f043 030b 	orr.w	r3, r3, #11
 80058d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f043 030b 	orr.w	r3, r3, #11
 80058ee:	6453      	str	r3, [r2, #68]	; 0x44
 80058f0:	e015      	b.n	800591e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005900:	4619      	mov	r1, r3
 8005902:	f242 032b 	movw	r3, #8235	; 0x202b
 8005906:	4313      	orrs	r3, r2
 8005908:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005918:	f043 030b 	orr.w	r3, r3, #11
 800591c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005930:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005942:	461a      	mov	r2, r3
 8005944:	f003 fbca 	bl	80090dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695a      	ldr	r2, [r3, #20]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005956:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4618      	mov	r0, r3
 800595e:	f003 faf7 	bl	8008f50 <USB_ReadInterrupts>
 8005962:	4603      	mov	r3, r0
 8005964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596c:	d124      	bne.n	80059b8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f003 fb8e 	bl	8009094 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f002 fc20 	bl	80081c2 <USB_GetDevSpeed>
 8005982:	4603      	mov	r3, r0
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681c      	ldr	r4, [r3, #0]
 800598e:	f001 f9a3 	bl	8006cd8 <HAL_RCC_GetHCLKFreq>
 8005992:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	4620      	mov	r0, r4
 800599e:	f002 f953 	bl	8007c48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f005 fb55 	bl	800b052 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80059b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f003 fac7 	bl	8008f50 <USB_ReadInterrupts>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d10a      	bne.n	80059e2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f005 fb32 	bl	800b036 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f002 0208 	and.w	r2, r2, #8
 80059e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f003 fab2 	bl	8008f50 <USB_ReadInterrupts>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059f6:	d10f      	bne.n	8005a18 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	4619      	mov	r1, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f005 fb94 	bl	800b130 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f003 fa97 	bl	8008f50 <USB_ReadInterrupts>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a2c:	d10f      	bne.n	8005a4e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f005 fb67 	bl	800b10c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f003 fa7c 	bl	8008f50 <USB_ReadInterrupts>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d10a      	bne.n	8005a7a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f005 fb75 	bl	800b154 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f003 fa66 	bl	8008f50 <USB_ReadInterrupts>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d115      	bne.n	8005aba <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f005 fb65 	bl	800b170 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6859      	ldr	r1, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	e000      	b.n	8005aba <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005ab8:	bf00      	nop
    }
  }
}
 8005aba:	3734      	adds	r7, #52	; 0x34
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd90      	pop	{r4, r7, pc}

08005ac0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_PCD_SetAddress+0x1a>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e013      	b.n	8005b02 <HAL_PCD_SetAddress+0x42>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	78fa      	ldrb	r2, [r7, #3]
 8005ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f003 f9c4 	bl	8008e80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	461a      	mov	r2, r3
 8005b18:	4603      	mov	r3, r0
 8005b1a:	70fb      	strb	r3, [r7, #3]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	803b      	strh	r3, [r7, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	da0f      	bge.n	8005b50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	4613      	mov	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	3338      	adds	r3, #56	; 0x38
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4413      	add	r3, r2
 8005b44:	3304      	adds	r3, #4
 8005b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	705a      	strb	r2, [r3, #1]
 8005b4e:	e00f      	b.n	8005b70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	f003 020f 	and.w	r2, r3, #15
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	3304      	adds	r3, #4
 8005b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b7c:	883a      	ldrh	r2, [r7, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	78ba      	ldrb	r2, [r7, #2]
 8005b86:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b9a:	78bb      	ldrb	r3, [r7, #2]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d102      	bne.n	8005ba6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_PCD_EP_Open+0xaa>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e00e      	b.n	8005bd2 <HAL_PCD_EP_Open+0xc8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68f9      	ldr	r1, [r7, #12]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f002 fb22 	bl	800820c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	da0f      	bge.n	8005c0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	f003 020f 	and.w	r2, r3, #15
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	3338      	adds	r3, #56	; 0x38
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	3304      	adds	r3, #4
 8005c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	705a      	strb	r2, [r3, #1]
 8005c0c:	e00f      	b.n	8005c2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	f003 020f 	and.w	r2, r3, #15
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3304      	adds	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_PCD_EP_Close+0x6e>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e00e      	b.n	8005c66 <HAL_PCD_EP_Close+0x8c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68f9      	ldr	r1, [r7, #12]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f002 fb60 	bl	800831c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	f003 020f 	and.w	r2, r3, #15
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	1a9b      	subs	r3, r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	3304      	adds	r3, #4
 8005c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d102      	bne.n	8005cca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6979      	ldr	r1, [r7, #20]
 8005ce2:	f002 fe43 	bl	800896c <USB_EP0StartXfer>
 8005ce6:	e008      	b.n	8005cfa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	f002 fbed 	bl	80084d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	f003 020f 	and.w	r2, r3, #15
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	460b      	mov	r3, r1
 8005d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	f003 020f 	and.w	r2, r3, #15
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	3338      	adds	r3, #56	; 0x38
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	3304      	adds	r3, #4
 8005d5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2201      	movs	r2, #1
 8005d72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d74:	7afb      	ldrb	r3, [r7, #11]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	f002 fde1 	bl	800896c <USB_EP0StartXfer>
 8005daa:	e008      	b.n	8005dbe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	6979      	ldr	r1, [r7, #20]
 8005dba:	f002 fb8b 	bl	80084d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	f003 020f 	and.w	r2, r3, #15
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d901      	bls.n	8005de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e050      	b.n	8005e88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da0f      	bge.n	8005e0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	3338      	adds	r3, #56	; 0x38
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	3304      	adds	r3, #4
 8005e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	705a      	strb	r2, [r3, #1]
 8005e0c:	e00d      	b.n	8005e2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	3304      	adds	r3, #4
 8005e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_PCD_EP_SetStall+0x82>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e01e      	b.n	8005e88 <HAL_PCD_EP_SetStall+0xc0>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f002 ff3d 	bl	8008cd8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	b2d9      	uxtb	r1, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f003 f92f 	bl	80090dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	f003 020f 	and.w	r2, r3, #15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d901      	bls.n	8005eae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e042      	b.n	8005f34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da0f      	bge.n	8005ed6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 020f 	and.w	r2, r3, #15
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	3338      	adds	r3, #56	; 0x38
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	3304      	adds	r3, #4
 8005ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	705a      	strb	r2, [r3, #1]
 8005ed4:	e00f      	b.n	8005ef6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	f003 020f 	and.w	r2, r3, #15
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4413      	add	r3, r2
 8005eec:	3304      	adds	r3, #4
 8005eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_PCD_EP_ClrStall+0x86>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e00e      	b.n	8005f34 <HAL_PCD_EP_ClrStall+0xa4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f002 ff45 	bl	8008db4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08a      	sub	sp, #40	; 0x28
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	1a9b      	subs	r3, r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	3338      	adds	r3, #56	; 0x38
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	4413      	add	r3, r2
 8005f60:	3304      	adds	r3, #4
 8005f62:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	699a      	ldr	r2, [r3, #24]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d901      	bls.n	8005f74 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e06c      	b.n	800604e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d902      	bls.n	8005f90 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	3303      	adds	r3, #3
 8005f94:	089b      	lsrs	r3, r3, #2
 8005f96:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f98:	e02b      	b.n	8005ff2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	695a      	ldr	r2, [r3, #20]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d902      	bls.n	8005fb6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3303      	adds	r3, #3
 8005fba:	089b      	lsrs	r3, r3, #2
 8005fbc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	68d9      	ldr	r1, [r3, #12]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	6978      	ldr	r0, [r7, #20]
 8005fd6:	f002 fe21 	bl	8008c1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	b29b      	uxth	r3, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	429a      	cmp	r2, r3
 8006006:	d809      	bhi.n	800601c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006010:	429a      	cmp	r2, r3
 8006012:	d203      	bcs.n	800601c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1be      	bne.n	8005f9a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	429a      	cmp	r2, r3
 8006026:	d811      	bhi.n	800604c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	2201      	movs	r2, #1
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	43db      	mvns	r3, r3
 8006042:	6939      	ldr	r1, [r7, #16]
 8006044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006048:	4013      	ands	r3, r2
 800604a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	333c      	adds	r3, #60	; 0x3c
 8006070:	3304      	adds	r3, #4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b01      	cmp	r3, #1
 800608c:	f040 80a0 	bne.w	80061d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d015      	beq.n	80060c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4a72      	ldr	r2, [pc, #456]	; (8006268 <PCD_EP_OutXfrComplete_int+0x210>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	f240 80dd 	bls.w	800625e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80d7 	beq.w	800625e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c2:	6093      	str	r3, [r2, #8]
 80060c4:	e0cb      	b.n	800625e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d009      	beq.n	80060e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	461a      	mov	r2, r3
 80060de:	2320      	movs	r3, #32
 80060e0:	6093      	str	r3, [r2, #8]
 80060e2:	e0bc      	b.n	800625e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f040 80b7 	bne.w	800625e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4a5d      	ldr	r2, [pc, #372]	; (8006268 <PCD_EP_OutXfrComplete_int+0x210>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d90f      	bls.n	8006118 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	461a      	mov	r2, r3
 8006110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006114:	6093      	str	r3, [r2, #8]
 8006116:	e0a2      	b.n	800625e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800612a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	0159      	lsls	r1, r3, #5
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	440b      	add	r3, r1
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800613e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	4613      	mov	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4403      	add	r3, r0
 800614e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006152:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006166:	6819      	ldr	r1, [r3, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4403      	add	r3, r0
 8006176:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4419      	add	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	4613      	mov	r3, r2
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4403      	add	r3, r0
 800618c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006190:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d114      	bne.n	80061c2 <PCD_EP_OutXfrComplete_int+0x16a>
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d108      	bne.n	80061c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80061ba:	461a      	mov	r2, r3
 80061bc:	2101      	movs	r1, #1
 80061be:	f002 ff8d 	bl	80090dc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f004 feff 	bl	800afcc <HAL_PCD_DataOutStageCallback>
 80061ce:	e046      	b.n	800625e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a26      	ldr	r2, [pc, #152]	; (800626c <PCD_EP_OutXfrComplete_int+0x214>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d124      	bne.n	8006222 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ee:	461a      	mov	r2, r3
 80061f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f4:	6093      	str	r3, [r2, #8]
 80061f6:	e032      	b.n	800625e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	4413      	add	r3, r2
 800620a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620e:	461a      	mov	r2, r3
 8006210:	2320      	movs	r3, #32
 8006212:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f004 fed6 	bl	800afcc <HAL_PCD_DataOutStageCallback>
 8006220:	e01d      	b.n	800625e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d114      	bne.n	8006252 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d108      	bne.n	8006252 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800624a:	461a      	mov	r2, r3
 800624c:	2100      	movs	r1, #0
 800624e:	f002 ff45 	bl	80090dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	4619      	mov	r1, r3
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f004 feb7 	bl	800afcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	4f54300a 	.word	0x4f54300a
 800626c:	4f54310a 	.word	0x4f54310a

08006270 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	333c      	adds	r3, #60	; 0x3c
 8006288:	3304      	adds	r3, #4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d90e      	bls.n	80062c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062bc:	461a      	mov	r2, r3
 80062be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f004 fe6f 	bl	800afa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a0a      	ldr	r2, [pc, #40]	; (80062f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d90c      	bls.n	80062ec <PCD_EP_OutSetupPacket_int+0x7c>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d108      	bne.n	80062ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062e4:	461a      	mov	r2, r3
 80062e6:	2101      	movs	r1, #1
 80062e8:	f002 fef8 	bl	80090dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	4f54300a 	.word	0x4f54300a

080062fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	70fb      	strb	r3, [r7, #3]
 8006308:	4613      	mov	r3, r2
 800630a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d107      	bne.n	800632a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800631a:	883b      	ldrh	r3, [r7, #0]
 800631c:	0419      	lsls	r1, r3, #16
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	430a      	orrs	r2, r1
 8006326:	629a      	str	r2, [r3, #40]	; 0x28
 8006328:	e028      	b.n	800637c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	0c1b      	lsrs	r3, r3, #16
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	4413      	add	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	e00d      	b.n	800635a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	3340      	adds	r3, #64	; 0x40
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	0c1b      	lsrs	r3, r3, #16
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	4413      	add	r3, r2
 8006352:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	3301      	adds	r3, #1
 8006358:	73fb      	strb	r3, [r7, #15]
 800635a:	7bfa      	ldrb	r2, [r7, #15]
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	3b01      	subs	r3, #1
 8006360:	429a      	cmp	r2, r3
 8006362:	d3ec      	bcc.n	800633e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006364:	883b      	ldrh	r3, [r7, #0]
 8006366:	0418      	lsls	r0, r3, #16
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6819      	ldr	r1, [r3, #0]
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	3b01      	subs	r3, #1
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	4302      	orrs	r2, r0
 8006374:	3340      	adds	r3, #64	; 0x40
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	887a      	ldrh	r2, [r7, #2]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063da:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	10000003 	.word	0x10000003

080063f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80063fc:	2300      	movs	r3, #0
 80063fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e291      	b.n	800692e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 8087 	beq.w	8006526 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006418:	4b96      	ldr	r3, [pc, #600]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 030c 	and.w	r3, r3, #12
 8006420:	2b04      	cmp	r3, #4
 8006422:	d00c      	beq.n	800643e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006424:	4b93      	ldr	r3, [pc, #588]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 030c 	and.w	r3, r3, #12
 800642c:	2b08      	cmp	r3, #8
 800642e:	d112      	bne.n	8006456 <HAL_RCC_OscConfig+0x62>
 8006430:	4b90      	ldr	r3, [pc, #576]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800643c:	d10b      	bne.n	8006456 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643e:	4b8d      	ldr	r3, [pc, #564]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d06c      	beq.n	8006524 <HAL_RCC_OscConfig+0x130>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d168      	bne.n	8006524 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e26b      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645e:	d106      	bne.n	800646e <HAL_RCC_OscConfig+0x7a>
 8006460:	4b84      	ldr	r3, [pc, #528]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a83      	ldr	r2, [pc, #524]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e02e      	b.n	80064cc <HAL_RCC_OscConfig+0xd8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10c      	bne.n	8006490 <HAL_RCC_OscConfig+0x9c>
 8006476:	4b7f      	ldr	r3, [pc, #508]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a7e      	ldr	r2, [pc, #504]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800647c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4b7c      	ldr	r3, [pc, #496]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a7b      	ldr	r2, [pc, #492]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e01d      	b.n	80064cc <HAL_RCC_OscConfig+0xd8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006498:	d10c      	bne.n	80064b4 <HAL_RCC_OscConfig+0xc0>
 800649a:	4b76      	ldr	r3, [pc, #472]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a75      	ldr	r2, [pc, #468]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b73      	ldr	r3, [pc, #460]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a72      	ldr	r2, [pc, #456]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e00b      	b.n	80064cc <HAL_RCC_OscConfig+0xd8>
 80064b4:	4b6f      	ldr	r3, [pc, #444]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a6e      	ldr	r2, [pc, #440]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	4b6c      	ldr	r3, [pc, #432]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a6b      	ldr	r2, [pc, #428]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d013      	beq.n	80064fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fd fd3c 	bl	8003f50 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064dc:	f7fd fd38 	bl	8003f50 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b64      	cmp	r3, #100	; 0x64
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e21f      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ee:	4b61      	ldr	r3, [pc, #388]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0xe8>
 80064fa:	e014      	b.n	8006526 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fc:	f7fd fd28 	bl	8003f50 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006504:	f7fd fd24 	bl	8003f50 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	; 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e20b      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006516:	4b57      	ldr	r3, [pc, #348]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1f0      	bne.n	8006504 <HAL_RCC_OscConfig+0x110>
 8006522:	e000      	b.n	8006526 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d069      	beq.n	8006606 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006532:	4b50      	ldr	r3, [pc, #320]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 030c 	and.w	r3, r3, #12
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800653e:	4b4d      	ldr	r3, [pc, #308]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b08      	cmp	r3, #8
 8006548:	d11c      	bne.n	8006584 <HAL_RCC_OscConfig+0x190>
 800654a:	4b4a      	ldr	r3, [pc, #296]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d116      	bne.n	8006584 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006556:	4b47      	ldr	r3, [pc, #284]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_RCC_OscConfig+0x17a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d001      	beq.n	800656e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e1df      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656e:	4b41      	ldr	r3, [pc, #260]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	493d      	ldr	r1, [pc, #244]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800657e:	4313      	orrs	r3, r2
 8006580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006582:	e040      	b.n	8006606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d023      	beq.n	80065d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800658c:	4b39      	ldr	r3, [pc, #228]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a38      	ldr	r2, [pc, #224]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fd fcda 	bl	8003f50 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a0:	f7fd fcd6 	bl	8003f50 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e1bd      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b2:	4b30      	ldr	r3, [pc, #192]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065be:	4b2d      	ldr	r3, [pc, #180]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4929      	ldr	r1, [pc, #164]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]
 80065d2:	e018      	b.n	8006606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065d4:	4b27      	ldr	r3, [pc, #156]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a26      	ldr	r2, [pc, #152]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e0:	f7fd fcb6 	bl	8003f50 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e8:	f7fd fcb2 	bl	8003f50 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e199      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065fa:	4b1e      	ldr	r3, [pc, #120]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f0      	bne.n	80065e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0308 	and.w	r3, r3, #8
 800660e:	2b00      	cmp	r3, #0
 8006610:	d038      	beq.n	8006684 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d019      	beq.n	800664e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800661a:	4b16      	ldr	r3, [pc, #88]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 800661c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661e:	4a15      	ldr	r2, [pc, #84]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006626:	f7fd fc93 	bl	8003f50 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800662e:	f7fd fc8f 	bl	8003f50 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e176      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006640:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x23a>
 800664c:	e01a      	b.n	8006684 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800664e:	4b09      	ldr	r3, [pc, #36]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006652:	4a08      	ldr	r2, [pc, #32]	; (8006674 <HAL_RCC_OscConfig+0x280>)
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665a:	f7fd fc79 	bl	8003f50 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006660:	e00a      	b.n	8006678 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006662:	f7fd fc75 	bl	8003f50 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d903      	bls.n	8006678 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e15c      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
 8006674:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006678:	4b91      	ldr	r3, [pc, #580]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800667a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1ee      	bne.n	8006662 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80a4 	beq.w	80067da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006692:	4b8b      	ldr	r3, [pc, #556]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800669e:	4b88      	ldr	r3, [pc, #544]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	4a87      	ldr	r2, [pc, #540]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80066a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a8:	6413      	str	r3, [r2, #64]	; 0x40
 80066aa:	4b85      	ldr	r3, [pc, #532]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ba:	4b82      	ldr	r3, [pc, #520]	; (80068c4 <HAL_RCC_OscConfig+0x4d0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d118      	bne.n	80066f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80066c6:	4b7f      	ldr	r3, [pc, #508]	; (80068c4 <HAL_RCC_OscConfig+0x4d0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a7e      	ldr	r2, [pc, #504]	; (80068c4 <HAL_RCC_OscConfig+0x4d0>)
 80066cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066d2:	f7fd fc3d 	bl	8003f50 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066da:	f7fd fc39 	bl	8003f50 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b64      	cmp	r3, #100	; 0x64
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e120      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ec:	4b75      	ldr	r3, [pc, #468]	; (80068c4 <HAL_RCC_OscConfig+0x4d0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f0      	beq.n	80066da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d106      	bne.n	800670e <HAL_RCC_OscConfig+0x31a>
 8006700:	4b6f      	ldr	r3, [pc, #444]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006704:	4a6e      	ldr	r2, [pc, #440]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	6713      	str	r3, [r2, #112]	; 0x70
 800670c:	e02d      	b.n	800676a <HAL_RCC_OscConfig+0x376>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10c      	bne.n	8006730 <HAL_RCC_OscConfig+0x33c>
 8006716:	4b6a      	ldr	r3, [pc, #424]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	4a69      	ldr	r2, [pc, #420]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	6713      	str	r3, [r2, #112]	; 0x70
 8006722:	4b67      	ldr	r3, [pc, #412]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	4a66      	ldr	r2, [pc, #408]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006728:	f023 0304 	bic.w	r3, r3, #4
 800672c:	6713      	str	r3, [r2, #112]	; 0x70
 800672e:	e01c      	b.n	800676a <HAL_RCC_OscConfig+0x376>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b05      	cmp	r3, #5
 8006736:	d10c      	bne.n	8006752 <HAL_RCC_OscConfig+0x35e>
 8006738:	4b61      	ldr	r3, [pc, #388]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4a60      	ldr	r2, [pc, #384]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800673e:	f043 0304 	orr.w	r3, r3, #4
 8006742:	6713      	str	r3, [r2, #112]	; 0x70
 8006744:	4b5e      	ldr	r3, [pc, #376]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a5d      	ldr	r2, [pc, #372]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
 8006750:	e00b      	b.n	800676a <HAL_RCC_OscConfig+0x376>
 8006752:	4b5b      	ldr	r3, [pc, #364]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	4a5a      	ldr	r2, [pc, #360]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	6713      	str	r3, [r2, #112]	; 0x70
 800675e:	4b58      	ldr	r3, [pc, #352]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006762:	4a57      	ldr	r2, [pc, #348]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d015      	beq.n	800679e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006772:	f7fd fbed 	bl	8003f50 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006778:	e00a      	b.n	8006790 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677a:	f7fd fbe9 	bl	8003f50 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	f241 3288 	movw	r2, #5000	; 0x1388
 8006788:	4293      	cmp	r3, r2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e0ce      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006790:	4b4b      	ldr	r3, [pc, #300]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0ee      	beq.n	800677a <HAL_RCC_OscConfig+0x386>
 800679c:	e014      	b.n	80067c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679e:	f7fd fbd7 	bl	8003f50 <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a4:	e00a      	b.n	80067bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a6:	f7fd fbd3 	bl	8003f50 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e0b8      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067bc:	4b40      	ldr	r3, [pc, #256]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ee      	bne.n	80067a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d105      	bne.n	80067da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ce:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	4a3b      	ldr	r2, [pc, #236]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80a4 	beq.w	800692c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067e4:	4b36      	ldr	r3, [pc, #216]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 030c 	and.w	r3, r3, #12
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d06b      	beq.n	80068c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d149      	bne.n	800688c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f8:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a30      	ldr	r2, [pc, #192]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80067fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006804:	f7fd fba4 	bl	8003f50 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800680c:	f7fd fba0 	bl	8003f50 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e087      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f0      	bne.n	800680c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69da      	ldr	r2, [r3, #28]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	019b      	lsls	r3, r3, #6
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	3b01      	subs	r3, #1
 8006844:	041b      	lsls	r3, r3, #16
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	061b      	lsls	r3, r3, #24
 800684e:	4313      	orrs	r3, r2
 8006850:	4a1b      	ldr	r2, [pc, #108]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006852:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006856:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006858:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a18      	ldr	r2, [pc, #96]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800685e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006864:	f7fd fb74 	bl	8003f50 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800686c:	f7fd fb70 	bl	8003f50 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e057      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687e:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x478>
 800688a:	e04f      	b.n	800692c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 8006892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fd fb5a 	bl	8003f50 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a0:	f7fd fb56 	bl	8003f50 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e03d      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068b2:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <HAL_RCC_OscConfig+0x4cc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f0      	bne.n	80068a0 <HAL_RCC_OscConfig+0x4ac>
 80068be:	e035      	b.n	800692c <HAL_RCC_OscConfig+0x538>
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80068c8:	4b1b      	ldr	r3, [pc, #108]	; (8006938 <HAL_RCC_OscConfig+0x544>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d028      	beq.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d121      	bne.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d11a      	bne.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068f8:	4013      	ands	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006900:	4293      	cmp	r3, r2
 8006902:	d111      	bne.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	3b01      	subs	r3, #1
 8006912:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006914:	429a      	cmp	r2, r3
 8006916:	d107      	bne.n	8006928 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40023800 	.word	0x40023800

0800693c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0d0      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006954:	4b6a      	ldr	r3, [pc, #424]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d910      	bls.n	8006984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006962:	4b67      	ldr	r3, [pc, #412]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 020f 	bic.w	r2, r3, #15
 800696a:	4965      	ldr	r1, [pc, #404]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	4313      	orrs	r3, r2
 8006970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006972:	4b63      	ldr	r3, [pc, #396]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d001      	beq.n	8006984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0b8      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d020      	beq.n	80069d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800699c:	4b59      	ldr	r3, [pc, #356]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4a58      	ldr	r2, [pc, #352]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069b4:	4b53      	ldr	r3, [pc, #332]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	4a52      	ldr	r2, [pc, #328]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069c0:	4b50      	ldr	r3, [pc, #320]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	494d      	ldr	r1, [pc, #308]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d040      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d107      	bne.n	80069f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e6:	4b47      	ldr	r3, [pc, #284]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d115      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e07f      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d107      	bne.n	8006a0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069fe:	4b41      	ldr	r3, [pc, #260]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e073      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a0e:	4b3d      	ldr	r3, [pc, #244]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e06b      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a1e:	4b39      	ldr	r3, [pc, #228]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f023 0203 	bic.w	r2, r3, #3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4936      	ldr	r1, [pc, #216]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a30:	f7fd fa8e 	bl	8003f50 <HAL_GetTick>
 8006a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a36:	e00a      	b.n	8006a4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a38:	f7fd fa8a 	bl	8003f50 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e053      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a4e:	4b2d      	ldr	r3, [pc, #180]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 020c 	and.w	r2, r3, #12
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d1eb      	bne.n	8006a38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d210      	bcs.n	8006a90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6e:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f023 020f 	bic.w	r2, r3, #15
 8006a76:	4922      	ldr	r1, [pc, #136]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7e:	4b20      	ldr	r3, [pc, #128]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e032      	b.n	8006af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d008      	beq.n	8006aae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a9c:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4916      	ldr	r1, [pc, #88]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d009      	beq.n	8006ace <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006aba:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	490e      	ldr	r1, [pc, #56]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ace:	f000 f821 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	091b      	lsrs	r3, r3, #4
 8006ada:	f003 030f 	and.w	r3, r3, #15
 8006ade:	490a      	ldr	r1, [pc, #40]	; (8006b08 <HAL_RCC_ClockConfig+0x1cc>)
 8006ae0:	5ccb      	ldrb	r3, [r1, r3]
 8006ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae6:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <HAL_RCC_ClockConfig+0x1d0>)
 8006ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006aea:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <HAL_RCC_ClockConfig+0x1d4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fd f9ea 	bl	8003ec8 <HAL_InitTick>

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40023c00 	.word	0x40023c00
 8006b04:	40023800 	.word	0x40023800
 8006b08:	08010a68 	.word	0x08010a68
 8006b0c:	2000028c 	.word	0x2000028c
 8006b10:	20000290 	.word	0x20000290

08006b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	607b      	str	r3, [r7, #4]
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	2300      	movs	r3, #0
 8006b26:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b2c:	4b67      	ldr	r3, [pc, #412]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d00d      	beq.n	8006b54 <HAL_RCC_GetSysClockFreq+0x40>
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	f200 80bd 	bhi.w	8006cb8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <HAL_RCC_GetSysClockFreq+0x34>
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d003      	beq.n	8006b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006b46:	e0b7      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b48:	4b61      	ldr	r3, [pc, #388]	; (8006cd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b4a:	60bb      	str	r3, [r7, #8]
      break;
 8006b4c:	e0b7      	b.n	8006cbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b4e:	4b61      	ldr	r3, [pc, #388]	; (8006cd4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006b50:	60bb      	str	r3, [r7, #8]
      break;
 8006b52:	e0b4      	b.n	8006cbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b54:	4b5d      	ldr	r3, [pc, #372]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b5c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006b5e:	4b5b      	ldr	r3, [pc, #364]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d04d      	beq.n	8006c06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b6a:	4b58      	ldr	r3, [pc, #352]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	099b      	lsrs	r3, r3, #6
 8006b70:	461a      	mov	r2, r3
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b7a:	f04f 0100 	mov.w	r1, #0
 8006b7e:	ea02 0800 	and.w	r8, r2, r0
 8006b82:	ea03 0901 	and.w	r9, r3, r1
 8006b86:	4640      	mov	r0, r8
 8006b88:	4649      	mov	r1, r9
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	014b      	lsls	r3, r1, #5
 8006b94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b98:	0142      	lsls	r2, r0, #5
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	ebb0 0008 	subs.w	r0, r0, r8
 8006ba2:	eb61 0109 	sbc.w	r1, r1, r9
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	018b      	lsls	r3, r1, #6
 8006bb0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006bb4:	0182      	lsls	r2, r0, #6
 8006bb6:	1a12      	subs	r2, r2, r0
 8006bb8:	eb63 0301 	sbc.w	r3, r3, r1
 8006bbc:	f04f 0000 	mov.w	r0, #0
 8006bc0:	f04f 0100 	mov.w	r1, #0
 8006bc4:	00d9      	lsls	r1, r3, #3
 8006bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bca:	00d0      	lsls	r0, r2, #3
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	eb12 0208 	adds.w	r2, r2, r8
 8006bd4:	eb43 0309 	adc.w	r3, r3, r9
 8006bd8:	f04f 0000 	mov.w	r0, #0
 8006bdc:	f04f 0100 	mov.w	r1, #0
 8006be0:	0259      	lsls	r1, r3, #9
 8006be2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006be6:	0250      	lsls	r0, r2, #9
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4610      	mov	r0, r2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	f7fa f866 	bl	8000cc8 <__aeabi_uldivmod>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4613      	mov	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e04a      	b.n	8006c9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c06:	4b31      	ldr	r3, [pc, #196]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	099b      	lsrs	r3, r3, #6
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c16:	f04f 0100 	mov.w	r1, #0
 8006c1a:	ea02 0400 	and.w	r4, r2, r0
 8006c1e:	ea03 0501 	and.w	r5, r3, r1
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f04f 0200 	mov.w	r2, #0
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	014b      	lsls	r3, r1, #5
 8006c30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c34:	0142      	lsls	r2, r0, #5
 8006c36:	4610      	mov	r0, r2
 8006c38:	4619      	mov	r1, r3
 8006c3a:	1b00      	subs	r0, r0, r4
 8006c3c:	eb61 0105 	sbc.w	r1, r1, r5
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	018b      	lsls	r3, r1, #6
 8006c4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c4e:	0182      	lsls	r2, r0, #6
 8006c50:	1a12      	subs	r2, r2, r0
 8006c52:	eb63 0301 	sbc.w	r3, r3, r1
 8006c56:	f04f 0000 	mov.w	r0, #0
 8006c5a:	f04f 0100 	mov.w	r1, #0
 8006c5e:	00d9      	lsls	r1, r3, #3
 8006c60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c64:	00d0      	lsls	r0, r2, #3
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	1912      	adds	r2, r2, r4
 8006c6c:	eb45 0303 	adc.w	r3, r5, r3
 8006c70:	f04f 0000 	mov.w	r0, #0
 8006c74:	f04f 0100 	mov.w	r1, #0
 8006c78:	0299      	lsls	r1, r3, #10
 8006c7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006c7e:	0290      	lsls	r0, r2, #10
 8006c80:	4602      	mov	r2, r0
 8006c82:	460b      	mov	r3, r1
 8006c84:	4610      	mov	r0, r2
 8006c86:	4619      	mov	r1, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	f7fa f81a 	bl	8000cc8 <__aeabi_uldivmod>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4613      	mov	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006c9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	0c1b      	lsrs	r3, r3, #16
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	60bb      	str	r3, [r7, #8]
      break;
 8006cb6:	e002      	b.n	8006cbe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006cba:	60bb      	str	r3, [r7, #8]
      break;
 8006cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006cca:	bf00      	nop
 8006ccc:	40023800 	.word	0x40023800
 8006cd0:	00f42400 	.word	0x00f42400
 8006cd4:	007a1200 	.word	0x007a1200

08006cd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cdc:	4b03      	ldr	r3, [pc, #12]	; (8006cec <HAL_RCC_GetHCLKFreq+0x14>)
 8006cde:	681b      	ldr	r3, [r3, #0]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	2000028c 	.word	0x2000028c

08006cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d012      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d18:	4b69      	ldr	r3, [pc, #420]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	4a68      	ldr	r2, [pc, #416]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d22:	6093      	str	r3, [r2, #8]
 8006d24:	4b66      	ldr	r3, [pc, #408]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2c:	4964      	ldr	r1, [pc, #400]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d017      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d4a:	4b5d      	ldr	r3, [pc, #372]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d58:	4959      	ldr	r1, [pc, #356]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d68:	d101      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006d76:	2301      	movs	r3, #1
 8006d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d017      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d86:	4b4e      	ldr	r3, [pc, #312]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	494a      	ldr	r1, [pc, #296]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da4:	d101      	bne.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006da6:	2301      	movs	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006db2:	2301      	movs	r3, #1
 8006db4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 808b 	beq.w	8006eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dd4:	4b3a      	ldr	r3, [pc, #232]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	4a39      	ldr	r2, [pc, #228]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dde:	6413      	str	r3, [r2, #64]	; 0x40
 8006de0:	4b37      	ldr	r3, [pc, #220]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006dec:	4b35      	ldr	r3, [pc, #212]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a34      	ldr	r2, [pc, #208]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df8:	f7fd f8aa 	bl	8003f50 <HAL_GetTick>
 8006dfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e00:	f7fd f8a6 	bl	8003f50 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b64      	cmp	r3, #100	; 0x64
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e357      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006e12:	4b2c      	ldr	r3, [pc, #176]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0f0      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e1e:	4b28      	ldr	r3, [pc, #160]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d035      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d02e      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e3c:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e46:	4b1e      	ldr	r3, [pc, #120]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	4a1d      	ldr	r2, [pc, #116]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e52:	4b1b      	ldr	r3, [pc, #108]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	4a1a      	ldr	r2, [pc, #104]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006e5e:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e64:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d114      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e70:	f7fd f86e 	bl	8003f50 <HAL_GetTick>
 8006e74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e76:	e00a      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e78:	f7fd f86a 	bl	8003f50 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e319      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0ee      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ea6:	d111      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006eb6:	400b      	ands	r3, r1
 8006eb8:	4901      	ldr	r1, [pc, #4]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	608b      	str	r3, [r1, #8]
 8006ebe:	e00b      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	40007000 	.word	0x40007000
 8006ec8:	0ffffcff 	.word	0x0ffffcff
 8006ecc:	4bb1      	ldr	r3, [pc, #708]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4ab0      	ldr	r2, [pc, #704]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ed2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ed6:	6093      	str	r3, [r2, #8]
 8006ed8:	4bae      	ldr	r3, [pc, #696]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ee4:	49ab      	ldr	r1, [pc, #684]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d010      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ef6:	4ba7      	ldr	r3, [pc, #668]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006efc:	4aa5      	ldr	r2, [pc, #660]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006f06:	4ba3      	ldr	r3, [pc, #652]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	49a0      	ldr	r1, [pc, #640]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00a      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f24:	4b9b      	ldr	r3, [pc, #620]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f32:	4998      	ldr	r1, [pc, #608]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f46:	4b93      	ldr	r3, [pc, #588]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f54:	498f      	ldr	r1, [pc, #572]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00a      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f68:	4b8a      	ldr	r3, [pc, #552]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f76:	4987      	ldr	r1, [pc, #540]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f8a:	4b82      	ldr	r3, [pc, #520]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f98:	497e      	ldr	r1, [pc, #504]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fac:	4b79      	ldr	r3, [pc, #484]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb2:	f023 0203 	bic.w	r2, r3, #3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fba:	4976      	ldr	r1, [pc, #472]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fce:	4b71      	ldr	r3, [pc, #452]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd4:	f023 020c 	bic.w	r2, r3, #12
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fdc:	496d      	ldr	r1, [pc, #436]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00a      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ff0:	4b68      	ldr	r3, [pc, #416]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ffe:	4965      	ldr	r1, [pc, #404]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007000:	4313      	orrs	r3, r2
 8007002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007012:	4b60      	ldr	r3, [pc, #384]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007018:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007020:	495c      	ldr	r1, [pc, #368]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007022:	4313      	orrs	r3, r2
 8007024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00a      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007034:	4b57      	ldr	r3, [pc, #348]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007042:	4954      	ldr	r1, [pc, #336]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007044:	4313      	orrs	r3, r2
 8007046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007056:	4b4f      	ldr	r3, [pc, #316]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007064:	494b      	ldr	r1, [pc, #300]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007078:	4b46      	ldr	r3, [pc, #280]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800707a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007086:	4943      	ldr	r1, [pc, #268]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800709a:	4b3e      	ldr	r3, [pc, #248]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800709c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a8:	493a      	ldr	r1, [pc, #232]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070bc:	4b35      	ldr	r3, [pc, #212]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070ca:	4932      	ldr	r1, [pc, #200]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d011      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80070de:	4b2d      	ldr	r3, [pc, #180]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ec:	4929      	ldr	r1, [pc, #164]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070fc:	d101      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80070fe:	2301      	movs	r3, #1
 8007100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800710e:	2301      	movs	r3, #1
 8007110:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800711e:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007124:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712c:	4919      	ldr	r1, [pc, #100]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007140:	4b14      	ldr	r3, [pc, #80]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007146:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007150:	4910      	ldr	r1, [pc, #64]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d006      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80d9 	beq.w	800731e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800716c:	4b09      	ldr	r3, [pc, #36]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a08      	ldr	r2, [pc, #32]	; (8007194 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007178:	f7fc feea 	bl	8003f50 <HAL_GetTick>
 800717c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800717e:	e00b      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007180:	f7fc fee6 	bl	8003f50 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d904      	bls.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e197      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007192:	bf00      	nop
 8007194:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007198:	4b6c      	ldr	r3, [pc, #432]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1ed      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d021      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d11d      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071b8:	4b64      	ldr	r3, [pc, #400]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071be:	0c1b      	lsrs	r3, r3, #16
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071c6:	4b61      	ldr	r3, [pc, #388]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071cc:	0e1b      	lsrs	r3, r3, #24
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	019a      	lsls	r2, r3, #6
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	431a      	orrs	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	061b      	lsls	r3, r3, #24
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	071b      	lsls	r3, r3, #28
 80071ec:	4957      	ldr	r1, [pc, #348]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d004      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007208:	d00a      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007212:	2b00      	cmp	r3, #0
 8007214:	d02e      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721e:	d129      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007220:	4b4a      	ldr	r3, [pc, #296]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007226:	0c1b      	lsrs	r3, r3, #16
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800722e:	4b47      	ldr	r3, [pc, #284]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007234:	0f1b      	lsrs	r3, r3, #28
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	019a      	lsls	r2, r3, #6
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	431a      	orrs	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	071b      	lsls	r3, r3, #28
 8007254:	493d      	ldr	r1, [pc, #244]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800725c:	4b3b      	ldr	r3, [pc, #236]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800725e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007262:	f023 021f 	bic.w	r2, r3, #31
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	3b01      	subs	r3, #1
 800726c:	4937      	ldr	r1, [pc, #220]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01d      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007280:	4b32      	ldr	r3, [pc, #200]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007286:	0e1b      	lsrs	r3, r3, #24
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800728e:	4b2f      	ldr	r3, [pc, #188]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007294:	0f1b      	lsrs	r3, r3, #28
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	019a      	lsls	r2, r3, #6
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	041b      	lsls	r3, r3, #16
 80072a8:	431a      	orrs	r2, r3
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	061b      	lsls	r3, r3, #24
 80072ae:	431a      	orrs	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	071b      	lsls	r3, r3, #28
 80072b4:	4925      	ldr	r1, [pc, #148]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d011      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	019a      	lsls	r2, r3, #6
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	061b      	lsls	r3, r3, #24
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	071b      	lsls	r3, r3, #28
 80072e4:	4919      	ldr	r1, [pc, #100]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a16      	ldr	r2, [pc, #88]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072f8:	f7fc fe2a 	bl	8003f50 <HAL_GetTick>
 80072fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072fe:	e008      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007300:	f7fc fe26 	bl	8003f50 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b64      	cmp	r3, #100	; 0x64
 800730c:	d901      	bls.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e0d7      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007312:	4b0e      	ldr	r3, [pc, #56]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0f0      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b01      	cmp	r3, #1
 8007322:	f040 80cd 	bne.w	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a08      	ldr	r2, [pc, #32]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800732c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007332:	f7fc fe0d 	bl	8003f50 <HAL_GetTick>
 8007336:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007338:	e00a      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800733a:	f7fc fe09 	bl	8003f50 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b64      	cmp	r3, #100	; 0x64
 8007346:	d903      	bls.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e0ba      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800734c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007350:	4b5e      	ldr	r3, [pc, #376]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800735c:	d0ed      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d009      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800737a:	2b00      	cmp	r3, #0
 800737c:	d02e      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d12a      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007386:	4b51      	ldr	r3, [pc, #324]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738c:	0c1b      	lsrs	r3, r3, #16
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007394:	4b4d      	ldr	r3, [pc, #308]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739a:	0f1b      	lsrs	r3, r3, #28
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	019a      	lsls	r2, r3, #6
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	061b      	lsls	r3, r3, #24
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	071b      	lsls	r3, r3, #28
 80073ba:	4944      	ldr	r1, [pc, #272]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80073c2:	4b42      	ldr	r3, [pc, #264]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	3b01      	subs	r3, #1
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	493d      	ldr	r1, [pc, #244]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d022      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073f0:	d11d      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073f2:	4b36      	ldr	r3, [pc, #216]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f8:	0e1b      	lsrs	r3, r3, #24
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007400:	4b32      	ldr	r3, [pc, #200]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007406:	0f1b      	lsrs	r3, r3, #28
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	019a      	lsls	r2, r3, #6
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	431a      	orrs	r2, r3
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	061b      	lsls	r3, r3, #24
 8007420:	431a      	orrs	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	071b      	lsls	r3, r3, #28
 8007426:	4929      	ldr	r1, [pc, #164]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007428:	4313      	orrs	r3, r2
 800742a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d028      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800743a:	4b24      	ldr	r3, [pc, #144]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007440:	0e1b      	lsrs	r3, r3, #24
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007448:	4b20      	ldr	r3, [pc, #128]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800744a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744e:	0c1b      	lsrs	r3, r3, #16
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	019a      	lsls	r2, r3, #6
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	041b      	lsls	r3, r3, #16
 8007460:	431a      	orrs	r2, r3
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	061b      	lsls	r3, r3, #24
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	071b      	lsls	r3, r3, #28
 800746e:	4917      	ldr	r1, [pc, #92]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007476:	4b15      	ldr	r3, [pc, #84]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800747c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	4911      	ldr	r1, [pc, #68]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007486:	4313      	orrs	r3, r2
 8007488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800748c:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0e      	ldr	r2, [pc, #56]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007498:	f7fc fd5a 	bl	8003f50 <HAL_GetTick>
 800749c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074a0:	f7fc fd56 	bl	8003f50 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b64      	cmp	r3, #100	; 0x64
 80074ac:	d901      	bls.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e007      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074b2:	4b06      	ldr	r3, [pc, #24]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074be:	d1ef      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40023800 	.word	0x40023800

080074d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e049      	b.n	8007576 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d106      	bne.n	80074fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fc fc8a 	bl	8003e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3304      	adds	r3, #4
 800750c:	4619      	mov	r1, r3
 800750e:	4610      	mov	r0, r2
 8007510:	f000 f9f6 	bl	8007900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
	...

08007580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d001      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e054      	b.n	8007642 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a26      	ldr	r2, [pc, #152]	; (8007650 <HAL_TIM_Base_Start_IT+0xd0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d022      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c2:	d01d      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a22      	ldr	r2, [pc, #136]	; (8007654 <HAL_TIM_Base_Start_IT+0xd4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d018      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a21      	ldr	r2, [pc, #132]	; (8007658 <HAL_TIM_Base_Start_IT+0xd8>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d013      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1f      	ldr	r2, [pc, #124]	; (800765c <HAL_TIM_Base_Start_IT+0xdc>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00e      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a1e      	ldr	r2, [pc, #120]	; (8007660 <HAL_TIM_Base_Start_IT+0xe0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d009      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1c      	ldr	r2, [pc, #112]	; (8007664 <HAL_TIM_Base_Start_IT+0xe4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <HAL_TIM_Base_Start_IT+0x80>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a1b      	ldr	r2, [pc, #108]	; (8007668 <HAL_TIM_Base_Start_IT+0xe8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d115      	bne.n	800762c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	4b19      	ldr	r3, [pc, #100]	; (800766c <HAL_TIM_Base_Start_IT+0xec>)
 8007608:	4013      	ands	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b06      	cmp	r3, #6
 8007610:	d015      	beq.n	800763e <HAL_TIM_Base_Start_IT+0xbe>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007618:	d011      	beq.n	800763e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0201 	orr.w	r2, r2, #1
 8007628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800762a:	e008      	b.n	800763e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	e000      	b.n	8007640 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	40010000 	.word	0x40010000
 8007654:	40000400 	.word	0x40000400
 8007658:	40000800 	.word	0x40000800
 800765c:	40000c00 	.word	0x40000c00
 8007660:	40010400 	.word	0x40010400
 8007664:	40014000 	.word	0x40014000
 8007668:	40001800 	.word	0x40001800
 800766c:	00010007 	.word	0x00010007

08007670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b02      	cmp	r3, #2
 8007684:	d122      	bne.n	80076cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b02      	cmp	r3, #2
 8007692:	d11b      	bne.n	80076cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0202 	mvn.w	r2, #2
 800769c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f905 	bl	80078c2 <HAL_TIM_IC_CaptureCallback>
 80076b8:	e005      	b.n	80076c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8f7 	bl	80078ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f908 	bl	80078d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d122      	bne.n	8007720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d11b      	bne.n	8007720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f06f 0204 	mvn.w	r2, #4
 80076f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2202      	movs	r2, #2
 80076f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f8db 	bl	80078c2 <HAL_TIM_IC_CaptureCallback>
 800770c:	e005      	b.n	800771a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f8cd 	bl	80078ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f8de 	bl	80078d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b08      	cmp	r3, #8
 800772c:	d122      	bne.n	8007774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	2b08      	cmp	r3, #8
 800773a:	d11b      	bne.n	8007774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0208 	mvn.w	r2, #8
 8007744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2204      	movs	r2, #4
 800774a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f8b1 	bl	80078c2 <HAL_TIM_IC_CaptureCallback>
 8007760:	e005      	b.n	800776e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f8a3 	bl	80078ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 f8b4 	bl	80078d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f003 0310 	and.w	r3, r3, #16
 800777e:	2b10      	cmp	r3, #16
 8007780:	d122      	bne.n	80077c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	f003 0310 	and.w	r3, r3, #16
 800778c:	2b10      	cmp	r3, #16
 800778e:	d11b      	bne.n	80077c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0210 	mvn.w	r2, #16
 8007798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2208      	movs	r2, #8
 800779e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f887 	bl	80078c2 <HAL_TIM_IC_CaptureCallback>
 80077b4:	e005      	b.n	80077c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f879 	bl	80078ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f88a 	bl	80078d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d10e      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d107      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f06f 0201 	mvn.w	r2, #1
 80077ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fa fbea 	bl	8001fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fe:	2b80      	cmp	r3, #128	; 0x80
 8007800:	d10e      	bne.n	8007820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780c:	2b80      	cmp	r3, #128	; 0x80
 800780e:	d107      	bne.n	8007820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9a8 	bl	8007b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800782a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782e:	d10e      	bne.n	800784e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	d107      	bne.n	800784e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f99b 	bl	8007b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007858:	2b40      	cmp	r3, #64	; 0x40
 800785a:	d10e      	bne.n	800787a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d107      	bne.n	800787a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f838 	bl	80078ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b20      	cmp	r3, #32
 8007886:	d10e      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b20      	cmp	r3, #32
 8007894:	d107      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f06f 0220 	mvn.w	r2, #32
 800789e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f95b 	bl	8007b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
	...

08007900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a40      	ldr	r2, [pc, #256]	; (8007a14 <TIM_Base_SetConfig+0x114>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d013      	beq.n	8007940 <TIM_Base_SetConfig+0x40>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791e:	d00f      	beq.n	8007940 <TIM_Base_SetConfig+0x40>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a3d      	ldr	r2, [pc, #244]	; (8007a18 <TIM_Base_SetConfig+0x118>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d00b      	beq.n	8007940 <TIM_Base_SetConfig+0x40>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a3c      	ldr	r2, [pc, #240]	; (8007a1c <TIM_Base_SetConfig+0x11c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d007      	beq.n	8007940 <TIM_Base_SetConfig+0x40>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a3b      	ldr	r2, [pc, #236]	; (8007a20 <TIM_Base_SetConfig+0x120>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d003      	beq.n	8007940 <TIM_Base_SetConfig+0x40>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a3a      	ldr	r2, [pc, #232]	; (8007a24 <TIM_Base_SetConfig+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d108      	bne.n	8007952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a2f      	ldr	r2, [pc, #188]	; (8007a14 <TIM_Base_SetConfig+0x114>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d02b      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007960:	d027      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2c      	ldr	r2, [pc, #176]	; (8007a18 <TIM_Base_SetConfig+0x118>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d023      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a2b      	ldr	r2, [pc, #172]	; (8007a1c <TIM_Base_SetConfig+0x11c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d01f      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a2a      	ldr	r2, [pc, #168]	; (8007a20 <TIM_Base_SetConfig+0x120>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d01b      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a29      	ldr	r2, [pc, #164]	; (8007a24 <TIM_Base_SetConfig+0x124>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d017      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a28      	ldr	r2, [pc, #160]	; (8007a28 <TIM_Base_SetConfig+0x128>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d013      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a27      	ldr	r2, [pc, #156]	; (8007a2c <TIM_Base_SetConfig+0x12c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00f      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a26      	ldr	r2, [pc, #152]	; (8007a30 <TIM_Base_SetConfig+0x130>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a25      	ldr	r2, [pc, #148]	; (8007a34 <TIM_Base_SetConfig+0x134>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a24      	ldr	r2, [pc, #144]	; (8007a38 <TIM_Base_SetConfig+0x138>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_Base_SetConfig+0xb2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a23      	ldr	r2, [pc, #140]	; (8007a3c <TIM_Base_SetConfig+0x13c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d108      	bne.n	80079c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a0a      	ldr	r2, [pc, #40]	; (8007a14 <TIM_Base_SetConfig+0x114>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d003      	beq.n	80079f8 <TIM_Base_SetConfig+0xf8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a0c      	ldr	r2, [pc, #48]	; (8007a24 <TIM_Base_SetConfig+0x124>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d103      	bne.n	8007a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	691a      	ldr	r2, [r3, #16]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	615a      	str	r2, [r3, #20]
}
 8007a06:	bf00      	nop
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	40000c00 	.word	0x40000c00
 8007a24:	40010400 	.word	0x40010400
 8007a28:	40014000 	.word	0x40014000
 8007a2c:	40014400 	.word	0x40014400
 8007a30:	40014800 	.word	0x40014800
 8007a34:	40001800 	.word	0x40001800
 8007a38:	40001c00 	.word	0x40001c00
 8007a3c:	40002000 	.word	0x40002000

08007a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e06d      	b.n	8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a30      	ldr	r2, [pc, #192]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d004      	beq.n	8007a8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a2f      	ldr	r2, [pc, #188]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d108      	bne.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a20      	ldr	r2, [pc, #128]	; (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d022      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aca:	d01d      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1d      	ldr	r2, [pc, #116]	; (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d018      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1c      	ldr	r2, [pc, #112]	; (8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d013      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1a      	ldr	r2, [pc, #104]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00e      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a15      	ldr	r2, [pc, #84]	; (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a16      	ldr	r2, [pc, #88]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d10c      	bne.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40010400 	.word	0x40010400
 8007b48:	40000400 	.word	0x40000400
 8007b4c:	40000800 	.word	0x40000800
 8007b50:	40000c00 	.word	0x40000c00
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40001800 	.word	0x40001800

08007b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b98:	b084      	sub	sp, #16
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	f107 001c 	add.w	r0, r7, #28
 8007ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d120      	bne.n	8007bf2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	4b20      	ldr	r3, [pc, #128]	; (8007c44 <USB_CoreInit+0xac>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d105      	bne.n	8007be6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 fad6 	bl	8009198 <USB_CoreReset>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]
 8007bf0:	e010      	b.n	8007c14 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 faca 	bl	8009198 <USB_CoreReset>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d10b      	bne.n	8007c32 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f043 0206 	orr.w	r2, r3, #6
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f043 0220 	orr.w	r2, r3, #32
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c3e:	b004      	add	sp, #16
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	ffbdffbf 	.word	0xffbdffbf

08007c48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	4613      	mov	r3, r2
 8007c54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d165      	bne.n	8007d28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	4a41      	ldr	r2, [pc, #260]	; (8007d64 <USB_SetTurnaroundTime+0x11c>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d906      	bls.n	8007c72 <USB_SetTurnaroundTime+0x2a>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	4a40      	ldr	r2, [pc, #256]	; (8007d68 <USB_SetTurnaroundTime+0x120>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d202      	bcs.n	8007c72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c6c:	230f      	movs	r3, #15
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	e062      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	4a3c      	ldr	r2, [pc, #240]	; (8007d68 <USB_SetTurnaroundTime+0x120>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d306      	bcc.n	8007c88 <USB_SetTurnaroundTime+0x40>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	4a3b      	ldr	r2, [pc, #236]	; (8007d6c <USB_SetTurnaroundTime+0x124>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d202      	bcs.n	8007c88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c82:	230e      	movs	r3, #14
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	e057      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4a38      	ldr	r2, [pc, #224]	; (8007d6c <USB_SetTurnaroundTime+0x124>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d306      	bcc.n	8007c9e <USB_SetTurnaroundTime+0x56>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4a37      	ldr	r2, [pc, #220]	; (8007d70 <USB_SetTurnaroundTime+0x128>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d202      	bcs.n	8007c9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c98:	230d      	movs	r3, #13
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e04c      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	4a33      	ldr	r2, [pc, #204]	; (8007d70 <USB_SetTurnaroundTime+0x128>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d306      	bcc.n	8007cb4 <USB_SetTurnaroundTime+0x6c>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4a32      	ldr	r2, [pc, #200]	; (8007d74 <USB_SetTurnaroundTime+0x12c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d802      	bhi.n	8007cb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007cae:	230c      	movs	r3, #12
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	e041      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4a2f      	ldr	r2, [pc, #188]	; (8007d74 <USB_SetTurnaroundTime+0x12c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d906      	bls.n	8007cca <USB_SetTurnaroundTime+0x82>
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4a2e      	ldr	r2, [pc, #184]	; (8007d78 <USB_SetTurnaroundTime+0x130>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d802      	bhi.n	8007cca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007cc4:	230b      	movs	r3, #11
 8007cc6:	617b      	str	r3, [r7, #20]
 8007cc8:	e036      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	4a2a      	ldr	r2, [pc, #168]	; (8007d78 <USB_SetTurnaroundTime+0x130>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d906      	bls.n	8007ce0 <USB_SetTurnaroundTime+0x98>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	4a29      	ldr	r2, [pc, #164]	; (8007d7c <USB_SetTurnaroundTime+0x134>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d802      	bhi.n	8007ce0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007cda:	230a      	movs	r3, #10
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	e02b      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4a26      	ldr	r2, [pc, #152]	; (8007d7c <USB_SetTurnaroundTime+0x134>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d906      	bls.n	8007cf6 <USB_SetTurnaroundTime+0xae>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4a25      	ldr	r2, [pc, #148]	; (8007d80 <USB_SetTurnaroundTime+0x138>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d202      	bcs.n	8007cf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007cf0:	2309      	movs	r3, #9
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	e020      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4a21      	ldr	r2, [pc, #132]	; (8007d80 <USB_SetTurnaroundTime+0x138>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d306      	bcc.n	8007d0c <USB_SetTurnaroundTime+0xc4>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	4a20      	ldr	r2, [pc, #128]	; (8007d84 <USB_SetTurnaroundTime+0x13c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d802      	bhi.n	8007d0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d06:	2308      	movs	r3, #8
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	e015      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <USB_SetTurnaroundTime+0x13c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d906      	bls.n	8007d22 <USB_SetTurnaroundTime+0xda>
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4a1c      	ldr	r2, [pc, #112]	; (8007d88 <USB_SetTurnaroundTime+0x140>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d202      	bcs.n	8007d22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d1c:	2307      	movs	r3, #7
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	e00a      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d22:	2306      	movs	r3, #6
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	e007      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d102      	bne.n	8007d34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d2e:	2309      	movs	r3, #9
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e001      	b.n	8007d38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d34:	2309      	movs	r3, #9
 8007d36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	029b      	lsls	r3, r3, #10
 8007d4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007d50:	431a      	orrs	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	371c      	adds	r7, #28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	00d8acbf 	.word	0x00d8acbf
 8007d68:	00e4e1c0 	.word	0x00e4e1c0
 8007d6c:	00f42400 	.word	0x00f42400
 8007d70:	01067380 	.word	0x01067380
 8007d74:	011a499f 	.word	0x011a499f
 8007d78:	01312cff 	.word	0x01312cff
 8007d7c:	014ca43f 	.word	0x014ca43f
 8007d80:	016e3600 	.word	0x016e3600
 8007d84:	01a6ab1f 	.word	0x01a6ab1f
 8007d88:	01e84800 	.word	0x01e84800

08007d8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f043 0201 	orr.w	r2, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f023 0201 	bic.w	r2, r3, #1
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d106      	bne.n	8007dfc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60da      	str	r2, [r3, #12]
 8007dfa:	e00b      	b.n	8007e14 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60da      	str	r2, [r3, #12]
 8007e0e:	e001      	b.n	8007e14 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e003      	b.n	8007e1c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007e14:	2032      	movs	r0, #50	; 0x32
 8007e16:	f7fc f8a7 	bl	8003f68 <HAL_Delay>

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e24:	b084      	sub	sp, #16
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b086      	sub	sp, #24
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e3e:	2300      	movs	r3, #0
 8007e40:	613b      	str	r3, [r7, #16]
 8007e42:	e009      	b.n	8007e58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	3340      	adds	r3, #64	; 0x40
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	3301      	adds	r3, #1
 8007e56:	613b      	str	r3, [r7, #16]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b0e      	cmp	r3, #14
 8007e5c:	d9f2      	bls.n	8007e44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d11c      	bne.n	8007e9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e72:	f043 0302 	orr.w	r3, r3, #2
 8007e76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e005      	b.n	8007eaa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	680b      	ldr	r3, [r1, #0]
 8007ec8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d10c      	bne.n	8007eea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d104      	bne.n	8007ee0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f959 	bl	8008190 <USB_SetDevSpeed>
 8007ede:	e018      	b.n	8007f12 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f954 	bl	8008190 <USB_SetDevSpeed>
 8007ee8:	e013      	b.n	8007f12 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d10c      	bne.n	8007f0a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d104      	bne.n	8007f00 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f949 	bl	8008190 <USB_SetDevSpeed>
 8007efe:	e008      	b.n	8007f12 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f00:	2101      	movs	r1, #1
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f944 	bl	8008190 <USB_SetDevSpeed>
 8007f08:	e003      	b.n	8007f12 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f0a:	2103      	movs	r1, #3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f93f 	bl	8008190 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f12:	2110      	movs	r1, #16
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f8f3 	bl	8008100 <USB_FlushTxFifo>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f911 	bl	800814c <USB_FlushRxFifo>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f46:	461a      	mov	r2, r3
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f52:	461a      	mov	r2, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	e043      	b.n	8007fe6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f74:	d118      	bne.n	8007fa8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	e013      	b.n	8007fba <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	e008      	b.n	8007fba <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	2300      	movs	r3, #0
 8007fca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	613b      	str	r3, [r7, #16]
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d3b7      	bcc.n	8007f5e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fee:	2300      	movs	r3, #0
 8007ff0:	613b      	str	r3, [r7, #16]
 8007ff2:	e043      	b.n	800807c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800800a:	d118      	bne.n	800803e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10a      	bne.n	8008028 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	461a      	mov	r2, r3
 8008020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	e013      	b.n	8008050 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	461a      	mov	r2, r3
 8008036:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	e008      	b.n	8008050 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804a:	461a      	mov	r2, r3
 800804c:	2300      	movs	r3, #0
 800804e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805c:	461a      	mov	r2, r3
 800805e:	2300      	movs	r3, #0
 8008060:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806e:	461a      	mov	r2, r3
 8008070:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008074:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	3301      	adds	r3, #1
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	429a      	cmp	r2, r3
 8008082:	d3b7      	bcc.n	8007ff4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008096:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80080a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	f043 0210 	orr.w	r2, r3, #16
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699a      	ldr	r2, [r3, #24]
 80080bc:	4b0e      	ldr	r3, [pc, #56]	; (80080f8 <USB_DevInit+0x2d4>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f043 0208 	orr.w	r2, r3, #8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d105      	bne.n	80080e8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699a      	ldr	r2, [r3, #24]
 80080e0:	4b06      	ldr	r3, [pc, #24]	; (80080fc <USB_DevInit+0x2d8>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080f4:	b004      	add	sp, #16
 80080f6:	4770      	bx	lr
 80080f8:	803c3800 	.word	0x803c3800
 80080fc:	40000004 	.word	0x40000004

08008100 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	019b      	lsls	r3, r3, #6
 8008112:	f043 0220 	orr.w	r2, r3, #32
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4a09      	ldr	r2, [pc, #36]	; (8008148 <USB_FlushTxFifo+0x48>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d901      	bls.n	800812c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e006      	b.n	800813a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	f003 0320 	and.w	r3, r3, #32
 8008134:	2b20      	cmp	r3, #32
 8008136:	d0f0      	beq.n	800811a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	00030d40 	.word	0x00030d40

0800814c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2210      	movs	r2, #16
 800815c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3301      	adds	r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4a09      	ldr	r2, [pc, #36]	; (800818c <USB_FlushRxFifo+0x40>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d901      	bls.n	8008170 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e006      	b.n	800817e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b10      	cmp	r3, #16
 800817a:	d0f0      	beq.n	800815e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	00030d40 	.word	0x00030d40

08008190 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	78fb      	ldrb	r3, [r7, #3]
 80081aa:	68f9      	ldr	r1, [r7, #12]
 80081ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081b0:	4313      	orrs	r3, r2
 80081b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b087      	sub	sp, #28
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 0306 	and.w	r3, r3, #6
 80081da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081e2:	2300      	movs	r3, #0
 80081e4:	75fb      	strb	r3, [r7, #23]
 80081e6:	e00a      	b.n	80081fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d002      	beq.n	80081f4 <USB_GetDevSpeed+0x32>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b06      	cmp	r3, #6
 80081f2:	d102      	bne.n	80081fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081f4:	2302      	movs	r3, #2
 80081f6:	75fb      	strb	r3, [r7, #23]
 80081f8:	e001      	b.n	80081fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081fa:	230f      	movs	r3, #15
 80081fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008200:	4618      	mov	r0, r3
 8008202:	371c      	adds	r7, #28
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	785b      	ldrb	r3, [r3, #1]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d139      	bne.n	800829c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	2101      	movs	r1, #1
 800823a:	fa01 f303 	lsl.w	r3, r1, r3
 800823e:	b29b      	uxth	r3, r3
 8008240:	68f9      	ldr	r1, [r7, #12]
 8008242:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008246:	4313      	orrs	r3, r2
 8008248:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d153      	bne.n	8008308 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	78db      	ldrb	r3, [r3, #3]
 800827a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800827c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	059b      	lsls	r3, r3, #22
 8008282:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008284:	431a      	orrs	r2, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	0159      	lsls	r1, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	440b      	add	r3, r1
 800828e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008292:	4619      	mov	r1, r3
 8008294:	4b20      	ldr	r3, [pc, #128]	; (8008318 <USB_ActivateEndpoint+0x10c>)
 8008296:	4313      	orrs	r3, r2
 8008298:	600b      	str	r3, [r1, #0]
 800829a:	e035      	b.n	8008308 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	2101      	movs	r1, #1
 80082ae:	fa01 f303 	lsl.w	r3, r1, r3
 80082b2:	041b      	lsls	r3, r3, #16
 80082b4:	68f9      	ldr	r1, [r7, #12]
 80082b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ba:	4313      	orrs	r3, r2
 80082bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d119      	bne.n	8008308 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	78db      	ldrb	r3, [r3, #3]
 80082ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082f0:	430b      	orrs	r3, r1
 80082f2:	431a      	orrs	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	0159      	lsls	r1, r3, #5
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	440b      	add	r3, r1
 80082fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008300:	4619      	mov	r1, r3
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <USB_ActivateEndpoint+0x10c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	10008000 	.word	0x10008000

0800831c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d161      	bne.n	80083fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800834a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800834e:	d11f      	bne.n	8008390 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	440a      	add	r2, r1
 8008366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800836e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	0151      	lsls	r1, r2, #5
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	440a      	add	r2, r1
 8008386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800838e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	2101      	movs	r1, #1
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	43db      	mvns	r3, r3
 80083aa:	68f9      	ldr	r1, [r7, #12]
 80083ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b0:	4013      	ands	r3, r2
 80083b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f003 030f 	and.w	r3, r3, #15
 80083c4:	2101      	movs	r1, #1
 80083c6:	fa01 f303 	lsl.w	r3, r1, r3
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	43db      	mvns	r3, r3
 80083ce:	68f9      	ldr	r1, [r7, #12]
 80083d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083d4:	4013      	ands	r3, r2
 80083d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	0159      	lsls	r1, r3, #5
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	440b      	add	r3, r1
 80083ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f2:	4619      	mov	r1, r3
 80083f4:	4b35      	ldr	r3, [pc, #212]	; (80084cc <USB_DeactivateEndpoint+0x1b0>)
 80083f6:	4013      	ands	r3, r2
 80083f8:	600b      	str	r3, [r1, #0]
 80083fa:	e060      	b.n	80084be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800840e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008412:	d11f      	bne.n	8008454 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800842e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008432:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	440a      	add	r2, r1
 800844a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800844e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008452:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	2101      	movs	r1, #1
 8008466:	fa01 f303 	lsl.w	r3, r1, r3
 800846a:	041b      	lsls	r3, r3, #16
 800846c:	43db      	mvns	r3, r3
 800846e:	68f9      	ldr	r1, [r7, #12]
 8008470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008474:	4013      	ands	r3, r2
 8008476:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	2101      	movs	r1, #1
 800848a:	fa01 f303 	lsl.w	r3, r1, r3
 800848e:	041b      	lsls	r3, r3, #16
 8008490:	43db      	mvns	r3, r3
 8008492:	68f9      	ldr	r1, [r7, #12]
 8008494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008498:	4013      	ands	r3, r2
 800849a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	0159      	lsls	r1, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	440b      	add	r3, r1
 80084b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b6:	4619      	mov	r1, r3
 80084b8:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <USB_DeactivateEndpoint+0x1b4>)
 80084ba:	4013      	ands	r3, r2
 80084bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	ec337800 	.word	0xec337800
 80084d0:	eff37800 	.word	0xeff37800

080084d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08a      	sub	sp, #40	; 0x28
 80084d8:	af02      	add	r7, sp, #8
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	f040 8163 	bne.w	80087bc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d132      	bne.n	8008564 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850a:	691a      	ldr	r2, [r3, #16]
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	0159      	lsls	r1, r3, #5
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	440b      	add	r3, r1
 8008514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008518:	4619      	mov	r1, r3
 800851a:	4ba5      	ldr	r3, [pc, #660]	; (80087b0 <USB_EPStartXfer+0x2dc>)
 800851c:	4013      	ands	r3, r2
 800851e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	0151      	lsls	r1, r2, #5
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	440a      	add	r2, r1
 8008536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800853a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800853e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854c:	691a      	ldr	r2, [r3, #16]
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	0159      	lsls	r1, r3, #5
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	440b      	add	r3, r1
 8008556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855a:	4619      	mov	r1, r3
 800855c:	4b95      	ldr	r3, [pc, #596]	; (80087b4 <USB_EPStartXfer+0x2e0>)
 800855e:	4013      	ands	r3, r2
 8008560:	610b      	str	r3, [r1, #16]
 8008562:	e074      	b.n	800864e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008570:	691a      	ldr	r2, [r3, #16]
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	0159      	lsls	r1, r3, #5
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	440b      	add	r3, r1
 800857a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857e:	4619      	mov	r1, r3
 8008580:	4b8c      	ldr	r3, [pc, #560]	; (80087b4 <USB_EPStartXfer+0x2e0>)
 8008582:	4013      	ands	r3, r2
 8008584:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008592:	691a      	ldr	r2, [r3, #16]
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	0159      	lsls	r1, r3, #5
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	440b      	add	r3, r1
 800859c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a0:	4619      	mov	r1, r3
 80085a2:	4b83      	ldr	r3, [pc, #524]	; (80087b0 <USB_EPStartXfer+0x2dc>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	6959      	ldr	r1, [r3, #20]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	440b      	add	r3, r1
 80085c0:	1e59      	subs	r1, r3, #1
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80085ca:	04d9      	lsls	r1, r3, #19
 80085cc:	4b7a      	ldr	r3, [pc, #488]	; (80087b8 <USB_EPStartXfer+0x2e4>)
 80085ce:	400b      	ands	r3, r1
 80085d0:	69b9      	ldr	r1, [r7, #24]
 80085d2:	0148      	lsls	r0, r1, #5
 80085d4:	69f9      	ldr	r1, [r7, #28]
 80085d6:	4401      	add	r1, r0
 80085d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085dc:	4313      	orrs	r3, r2
 80085de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085f6:	69b9      	ldr	r1, [r7, #24]
 80085f8:	0148      	lsls	r0, r1, #5
 80085fa:	69f9      	ldr	r1, [r7, #28]
 80085fc:	4401      	add	r1, r0
 80085fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008602:	4313      	orrs	r3, r2
 8008604:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	78db      	ldrb	r3, [r3, #3]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d11f      	bne.n	800864e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	0151      	lsls	r1, r2, #5
 8008620:	69fa      	ldr	r2, [r7, #28]
 8008622:	440a      	add	r2, r1
 8008624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008628:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800862c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	440a      	add	r2, r1
 8008644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800864c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800864e:	79fb      	ldrb	r3, [r7, #7]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d14b      	bne.n	80086ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d009      	beq.n	8008670 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008668:	461a      	mov	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	78db      	ldrb	r3, [r3, #3]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d128      	bne.n	80086ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008684:	2b00      	cmp	r3, #0
 8008686:	d110      	bne.n	80086aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69ba      	ldr	r2, [r7, #24]
 8008698:	0151      	lsls	r1, r2, #5
 800869a:	69fa      	ldr	r2, [r7, #28]
 800869c:	440a      	add	r2, r1
 800869e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	e00f      	b.n	80086ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	0151      	lsls	r1, r2, #5
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	440a      	add	r2, r1
 80086c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	0151      	lsls	r1, r2, #5
 80086dc:	69fa      	ldr	r2, [r7, #28]
 80086de:	440a      	add	r2, r1
 80086e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086e8:	6013      	str	r3, [r2, #0]
 80086ea:	e133      	b.n	8008954 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	69fa      	ldr	r2, [r7, #28]
 8008700:	440a      	add	r2, r1
 8008702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008706:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800870a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	78db      	ldrb	r3, [r3, #3]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d015      	beq.n	8008740 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 811b 	beq.w	8008954 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	f003 030f 	and.w	r3, r3, #15
 800872e:	2101      	movs	r1, #1
 8008730:	fa01 f303 	lsl.w	r3, r1, r3
 8008734:	69f9      	ldr	r1, [r7, #28]
 8008736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800873a:	4313      	orrs	r3, r2
 800873c:	634b      	str	r3, [r1, #52]	; 0x34
 800873e:	e109      	b.n	8008954 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800874c:	2b00      	cmp	r3, #0
 800874e:	d110      	bne.n	8008772 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4413      	add	r3, r2
 8008758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	0151      	lsls	r1, r2, #5
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	440a      	add	r2, r1
 8008766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800876e:	6013      	str	r3, [r2, #0]
 8008770:	e00f      	b.n	8008792 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	0151      	lsls	r1, r2, #5
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	440a      	add	r2, r1
 8008788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800878c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008790:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	68d9      	ldr	r1, [r3, #12]
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	b298      	uxth	r0, r3
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	9300      	str	r3, [sp, #0]
 80087a4:	4603      	mov	r3, r0
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 fa38 	bl	8008c1c <USB_WritePacket>
 80087ac:	e0d2      	b.n	8008954 <USB_EPStartXfer+0x480>
 80087ae:	bf00      	nop
 80087b0:	e007ffff 	.word	0xe007ffff
 80087b4:	fff80000 	.word	0xfff80000
 80087b8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	0159      	lsls	r1, r3, #5
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	440b      	add	r3, r1
 80087d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d6:	4619      	mov	r1, r3
 80087d8:	4b61      	ldr	r3, [pc, #388]	; (8008960 <USB_EPStartXfer+0x48c>)
 80087da:	4013      	ands	r3, r2
 80087dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	0159      	lsls	r1, r3, #5
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	440b      	add	r3, r1
 80087f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f8:	4619      	mov	r1, r3
 80087fa:	4b5a      	ldr	r3, [pc, #360]	; (8008964 <USB_EPStartXfer+0x490>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d123      	bne.n	8008850 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008814:	691a      	ldr	r2, [r3, #16]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800881e:	69b9      	ldr	r1, [r7, #24]
 8008820:	0148      	lsls	r0, r1, #5
 8008822:	69f9      	ldr	r1, [r7, #28]
 8008824:	4401      	add	r1, r0
 8008826:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800882a:	4313      	orrs	r3, r2
 800882c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	440a      	add	r2, r1
 8008844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800884c:	6113      	str	r3, [r2, #16]
 800884e:	e033      	b.n	80088b8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	695a      	ldr	r2, [r3, #20]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	4413      	add	r3, r2
 800885a:	1e5a      	subs	r2, r3, #1
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	fbb2 f3f3 	udiv	r3, r2, r3
 8008864:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008872:	691a      	ldr	r2, [r3, #16]
 8008874:	8afb      	ldrh	r3, [r7, #22]
 8008876:	04d9      	lsls	r1, r3, #19
 8008878:	4b3b      	ldr	r3, [pc, #236]	; (8008968 <USB_EPStartXfer+0x494>)
 800887a:	400b      	ands	r3, r1
 800887c:	69b9      	ldr	r1, [r7, #24]
 800887e:	0148      	lsls	r0, r1, #5
 8008880:	69f9      	ldr	r1, [r7, #28]
 8008882:	4401      	add	r1, r0
 8008884:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008888:	4313      	orrs	r3, r2
 800888a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008898:	691a      	ldr	r2, [r3, #16]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	8af9      	ldrh	r1, [r7, #22]
 80088a0:	fb01 f303 	mul.w	r3, r1, r3
 80088a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a8:	69b9      	ldr	r1, [r7, #24]
 80088aa:	0148      	lsls	r0, r1, #5
 80088ac:	69f9      	ldr	r1, [r7, #28]
 80088ae:	4401      	add	r1, r0
 80088b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088b4:	4313      	orrs	r3, r2
 80088b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d10d      	bne.n	80088da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	68d9      	ldr	r1, [r3, #12]
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d6:	460a      	mov	r2, r1
 80088d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	78db      	ldrb	r3, [r3, #3]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d128      	bne.n	8008934 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d110      	bne.n	8008914 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	0151      	lsls	r1, r2, #5
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	440a      	add	r2, r1
 8008908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800890c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	e00f      	b.n	8008934 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	440a      	add	r2, r1
 800892a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008932:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008952:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	fff80000 	.word	0xfff80000
 8008964:	e007ffff 	.word	0xe007ffff
 8008968:	1ff80000 	.word	0x1ff80000

0800896c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b01      	cmp	r3, #1
 800898a:	f040 80cd 	bne.w	8008b28 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d132      	bne.n	80089fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a2:	691a      	ldr	r2, [r3, #16]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	0159      	lsls	r1, r3, #5
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	440b      	add	r3, r1
 80089ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b0:	4619      	mov	r1, r3
 80089b2:	4b98      	ldr	r3, [pc, #608]	; (8008c14 <USB_EP0StartXfer+0x2a8>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	0159      	lsls	r1, r3, #5
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	440b      	add	r3, r1
 80089ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f2:	4619      	mov	r1, r3
 80089f4:	4b88      	ldr	r3, [pc, #544]	; (8008c18 <USB_EP0StartXfer+0x2ac>)
 80089f6:	4013      	ands	r3, r2
 80089f8:	610b      	str	r3, [r1, #16]
 80089fa:	e04e      	b.n	8008a9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	0159      	lsls	r1, r3, #5
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	440b      	add	r3, r1
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	4619      	mov	r1, r3
 8008a18:	4b7f      	ldr	r3, [pc, #508]	; (8008c18 <USB_EP0StartXfer+0x2ac>)
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	0159      	lsls	r1, r3, #5
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	440b      	add	r3, r1
 8008a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4b76      	ldr	r3, [pc, #472]	; (8008c14 <USB_EP0StartXfer+0x2a8>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	695a      	ldr	r2, [r3, #20]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d903      	bls.n	8008a54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	0151      	lsls	r1, r2, #5
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	440a      	add	r2, r1
 8008a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a8a:	6939      	ldr	r1, [r7, #16]
 8008a8c:	0148      	lsls	r0, r1, #5
 8008a8e:	6979      	ldr	r1, [r7, #20]
 8008a90:	4401      	add	r1, r0
 8008a92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a96:	4313      	orrs	r3, r2
 8008a98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d11e      	bne.n	8008ade <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	0151      	lsls	r1, r2, #5
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	e092      	b.n	8008c04 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008afc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d07e      	beq.n	8008c04 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	f003 030f 	and.w	r3, r3, #15
 8008b16:	2101      	movs	r1, #1
 8008b18:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1c:	6979      	ldr	r1, [r7, #20]
 8008b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b22:	4313      	orrs	r3, r2
 8008b24:	634b      	str	r3, [r1, #52]	; 0x34
 8008b26:	e06d      	b.n	8008c04 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b34:	691a      	ldr	r2, [r3, #16]
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	0159      	lsls	r1, r3, #5
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	440b      	add	r3, r1
 8008b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b42:	4619      	mov	r1, r3
 8008b44:	4b34      	ldr	r3, [pc, #208]	; (8008c18 <USB_EP0StartXfer+0x2ac>)
 8008b46:	4013      	ands	r3, r2
 8008b48:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	0159      	lsls	r1, r3, #5
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	440b      	add	r3, r1
 8008b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b64:	4619      	mov	r1, r3
 8008b66:	4b2b      	ldr	r3, [pc, #172]	; (8008c14 <USB_EP0StartXfer+0x2a8>)
 8008b68:	4013      	ands	r3, r2
 8008b6a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba8:	691a      	ldr	r2, [r3, #16]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb2:	6939      	ldr	r1, [r7, #16]
 8008bb4:	0148      	lsls	r0, r1, #5
 8008bb6:	6979      	ldr	r1, [r7, #20]
 8008bb8:	4401      	add	r1, r0
 8008bba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d10d      	bne.n	8008be4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d009      	beq.n	8008be4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	68d9      	ldr	r1, [r3, #12]
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be0:	460a      	mov	r2, r1
 8008be2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	0151      	lsls	r1, r2, #5
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	440a      	add	r2, r1
 8008bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	e007ffff 	.word	0xe007ffff
 8008c18:	fff80000 	.word	0xfff80000

08008c1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b089      	sub	sp, #36	; 0x24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4611      	mov	r1, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	71fb      	strb	r3, [r7, #7]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d11a      	bne.n	8008c78 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c42:	88bb      	ldrh	r3, [r7, #4]
 8008c44:	3303      	adds	r3, #3
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61bb      	str	r3, [r7, #24]
 8008c4e:	e00f      	b.n	8008c70 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	031a      	lsls	r2, r3, #12
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	3304      	adds	r3, #4
 8008c68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	61bb      	str	r3, [r7, #24]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d3eb      	bcc.n	8008c50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3724      	adds	r7, #36	; 0x24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b089      	sub	sp, #36	; 0x24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	60f8      	str	r0, [r7, #12]
 8008c8e:	60b9      	str	r1, [r7, #8]
 8008c90:	4613      	mov	r3, r2
 8008c92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
 8008c9e:	3303      	adds	r3, #3
 8008ca0:	089b      	lsrs	r3, r3, #2
 8008ca2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	61bb      	str	r3, [r7, #24]
 8008ca8:	e00b      	b.n	8008cc2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	601a      	str	r2, [r3, #0]
    pDest++;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	61bb      	str	r3, [r7, #24]
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d3ef      	bcc.n	8008caa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008cca:	69fb      	ldr	r3, [r7, #28]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3724      	adds	r7, #36	; 0x24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	785b      	ldrb	r3, [r3, #1]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d12c      	bne.n	8008d4e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	db12      	blt.n	8008d2c <USB_EPSetStall+0x54>
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00f      	beq.n	8008d2c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68ba      	ldr	r2, [r7, #8]
 8008d1c:	0151      	lsls	r1, r2, #5
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	440a      	add	r2, r1
 8008d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d2a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	0151      	lsls	r1, r2, #5
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	440a      	add	r2, r1
 8008d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d4a:	6013      	str	r3, [r2, #0]
 8008d4c:	e02b      	b.n	8008da6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	db12      	blt.n	8008d86 <USB_EPSetStall+0xae>
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00f      	beq.n	8008d86 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d84:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	0151      	lsls	r1, r2, #5
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008da4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	785b      	ldrb	r3, [r3, #1]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d128      	bne.n	8008e22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	0151      	lsls	r1, r2, #5
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	440a      	add	r2, r1
 8008de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	78db      	ldrb	r3, [r3, #3]
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	d003      	beq.n	8008e00 <USB_EPClearStall+0x4c>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	78db      	ldrb	r3, [r3, #3]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d138      	bne.n	8008e72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	e027      	b.n	8008e72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	0151      	lsls	r1, r2, #5
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	440a      	add	r2, r1
 8008e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	78db      	ldrb	r3, [r3, #3]
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d003      	beq.n	8008e52 <USB_EPClearStall+0x9e>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	78db      	ldrb	r3, [r3, #3]
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d10f      	bne.n	8008e72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ea2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	011b      	lsls	r3, r3, #4
 8008eb0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008eb4:	68f9      	ldr	r1, [r7, #12]
 8008eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008efa:	f023 0302 	bic.w	r3, r3, #2
 8008efe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b085      	sub	sp, #20
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f28:	f023 0303 	bic.w	r3, r3, #3
 8008f2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f3c:	f043 0302 	orr.w	r3, r3, #2
 8008f40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	4013      	ands	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f68:	68fb      	ldr	r3, [r7, #12]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr

08008f76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b085      	sub	sp, #20
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	4013      	ands	r3, r2
 8008f98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	0c1b      	lsrs	r3, r3, #16
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	b29b      	uxth	r3, r3
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	4013      	ands	r3, r2
 800900a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800900c:	68bb      	ldr	r3, [r7, #8]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800901a:	b480      	push	{r7}
 800901c:	b087      	sub	sp, #28
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	fa22 f303 	lsr.w	r3, r2, r3
 800904a:	01db      	lsls	r3, r3, #7
 800904c:	b2db      	uxtb	r3, r3
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	4313      	orrs	r3, r2
 8009052:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	4013      	ands	r3, r2
 8009066:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009068:	68bb      	ldr	r3, [r7, #8]
}
 800906a:	4618      	mov	r0, r3
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	f003 0301 	and.w	r3, r3, #1
}
 8009086:	4618      	mov	r0, r3
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
	...

08009094 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ae:	4619      	mov	r1, r3
 80090b0:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <USB_ActivateSetup+0x44>)
 80090b2:	4013      	ands	r3, r2
 80090b4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	fffff800 	.word	0xfffff800

080090dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	460b      	mov	r3, r1
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	333c      	adds	r3, #60	; 0x3c
 80090f2:	3304      	adds	r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	4a26      	ldr	r2, [pc, #152]	; (8009194 <USB_EP0_OutStart+0xb8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d90a      	bls.n	8009116 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800910c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009110:	d101      	bne.n	8009116 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	e037      	b.n	8009186 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911c:	461a      	mov	r2, r3
 800911e:	2300      	movs	r3, #0
 8009120:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009144:	f043 0318 	orr.w	r3, r3, #24
 8009148:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009158:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800915c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800915e:	7afb      	ldrb	r3, [r7, #11]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d10f      	bne.n	8009184 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916a:	461a      	mov	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800917e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	4f54300a 	.word	0x4f54300a

08009198 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4a13      	ldr	r2, [pc, #76]	; (80091fc <USB_CoreReset+0x64>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d901      	bls.n	80091b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e01b      	b.n	80091ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	daf2      	bge.n	80091a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	f043 0201 	orr.w	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3301      	adds	r3, #1
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4a09      	ldr	r2, [pc, #36]	; (80091fc <USB_CoreReset+0x64>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d901      	bls.n	80091e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e006      	b.n	80091ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d0f0      	beq.n	80091ce <USB_CoreReset+0x36>

  return HAL_OK;
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	00030d40 	.word	0x00030d40

08009200 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800920c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009210:	f002 f9f0 	bl	800b5f4 <malloc>
 8009214:	4603      	mov	r3, r0
 8009216:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d105      	bne.n	800922a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009226:	2302      	movs	r3, #2
 8009228:	e066      	b.n	80092f8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7c1b      	ldrb	r3, [r3, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d119      	bne.n	800926e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800923a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800923e:	2202      	movs	r2, #2
 8009240:	2181      	movs	r1, #129	; 0x81
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f002 f809 	bl	800b25a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800924e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009252:	2202      	movs	r2, #2
 8009254:	2101      	movs	r1, #1
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f001 ffff 	bl	800b25a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2210      	movs	r2, #16
 8009268:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800926c:	e016      	b.n	800929c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800926e:	2340      	movs	r3, #64	; 0x40
 8009270:	2202      	movs	r2, #2
 8009272:	2181      	movs	r1, #129	; 0x81
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f001 fff0 	bl	800b25a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009280:	2340      	movs	r3, #64	; 0x40
 8009282:	2202      	movs	r2, #2
 8009284:	2101      	movs	r1, #1
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 ffe7 	bl	800b25a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2210      	movs	r2, #16
 8009298:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800929c:	2308      	movs	r3, #8
 800929e:	2203      	movs	r2, #3
 80092a0:	2182      	movs	r1, #130	; 0x82
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 ffd9 	bl	800b25a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	7c1b      	ldrb	r3, [r3, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d109      	bne.n	80092e6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092dc:	2101      	movs	r1, #1
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f002 f8aa 	bl	800b438 <USBD_LL_PrepareReceive>
 80092e4:	e007      	b.n	80092f6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092ec:	2340      	movs	r3, #64	; 0x40
 80092ee:	2101      	movs	r1, #1
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f002 f8a1 	bl	800b438 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009310:	2181      	movs	r1, #129	; 0x81
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 ffc7 	bl	800b2a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800931e:	2101      	movs	r1, #1
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 ffc0 	bl	800b2a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800932e:	2182      	movs	r1, #130	; 0x82
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 ffb8 	bl	800b2a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00e      	beq.n	800936e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009360:	4618      	mov	r0, r3
 8009362:	f002 f94f 	bl	800b604 <free>
    pdev->pClassData = NULL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800936e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009388:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d03a      	beq.n	8009418 <USBD_CDC_Setup+0xa0>
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	f040 8097 	bne.w	80094d6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	88db      	ldrh	r3, [r3, #6]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d029      	beq.n	8009404 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	da11      	bge.n	80093de <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80093c6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	88d2      	ldrh	r2, [r2, #6]
 80093cc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80093ce:	6939      	ldr	r1, [r7, #16]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	88db      	ldrh	r3, [r3, #6]
 80093d4:	461a      	mov	r2, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fad6 	bl	800a988 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80093dc:	e082      	b.n	80094e4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	785a      	ldrb	r2, [r3, #1]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	88db      	ldrh	r3, [r3, #6]
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80093f4:	6939      	ldr	r1, [r7, #16]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	88db      	ldrh	r3, [r3, #6]
 80093fa:	461a      	mov	r2, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 faef 	bl	800a9e0 <USBD_CtlPrepareRx>
    break;
 8009402:	e06f      	b.n	80094e4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	7850      	ldrb	r0, [r2, #1]
 8009410:	2200      	movs	r2, #0
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	4798      	blx	r3
    break;
 8009416:	e065      	b.n	80094e4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	2b0b      	cmp	r3, #11
 800941e:	d84f      	bhi.n	80094c0 <USBD_CDC_Setup+0x148>
 8009420:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <USBD_CDC_Setup+0xb0>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	08009459 	.word	0x08009459
 800942c:	080094cf 	.word	0x080094cf
 8009430:	080094c1 	.word	0x080094c1
 8009434:	080094c1 	.word	0x080094c1
 8009438:	080094c1 	.word	0x080094c1
 800943c:	080094c1 	.word	0x080094c1
 8009440:	080094c1 	.word	0x080094c1
 8009444:	080094c1 	.word	0x080094c1
 8009448:	080094c1 	.word	0x080094c1
 800944c:	080094c1 	.word	0x080094c1
 8009450:	08009481 	.word	0x08009481
 8009454:	080094a9 	.word	0x080094a9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945e:	2b03      	cmp	r3, #3
 8009460:	d107      	bne.n	8009472 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009462:	f107 030c 	add.w	r3, r7, #12
 8009466:	2202      	movs	r2, #2
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 fa8c 	bl	800a988 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009470:	e030      	b.n	80094d4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 fa16 	bl	800a8a6 <USBD_CtlError>
        ret = USBD_FAIL;
 800947a:	2303      	movs	r3, #3
 800947c:	75fb      	strb	r3, [r7, #23]
      break;
 800947e:	e029      	b.n	80094d4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009486:	2b03      	cmp	r3, #3
 8009488:	d107      	bne.n	800949a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800948a:	f107 030f 	add.w	r3, r7, #15
 800948e:	2201      	movs	r2, #1
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f001 fa78 	bl	800a988 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009498:	e01c      	b.n	80094d4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 fa02 	bl	800a8a6 <USBD_CtlError>
        ret = USBD_FAIL;
 80094a2:	2303      	movs	r3, #3
 80094a4:	75fb      	strb	r3, [r7, #23]
      break;
 80094a6:	e015      	b.n	80094d4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d00f      	beq.n	80094d2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 f9f6 	bl	800a8a6 <USBD_CtlError>
        ret = USBD_FAIL;
 80094ba:	2303      	movs	r3, #3
 80094bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80094be:	e008      	b.n	80094d2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 f9ef 	bl	800a8a6 <USBD_CtlError>
      ret = USBD_FAIL;
 80094c8:	2303      	movs	r3, #3
 80094ca:	75fb      	strb	r3, [r7, #23]
      break;
 80094cc:	e002      	b.n	80094d4 <USBD_CDC_Setup+0x15c>
      break;
 80094ce:	bf00      	nop
 80094d0:	e008      	b.n	80094e4 <USBD_CDC_Setup+0x16c>
      break;
 80094d2:	bf00      	nop
    }
    break;
 80094d4:	e006      	b.n	80094e4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 f9e4 	bl	800a8a6 <USBD_CtlError>
    ret = USBD_FAIL;
 80094de:	2303      	movs	r3, #3
 80094e0:	75fb      	strb	r3, [r7, #23]
    break;
 80094e2:	bf00      	nop
  }

  return (uint8_t)ret;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop

080094f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009502:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800950e:	2303      	movs	r3, #3
 8009510:	e049      	b.n	80095a6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009518:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800951a:	78fa      	ldrb	r2, [r7, #3]
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	3318      	adds	r3, #24
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d029      	beq.n	8009584 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	3318      	adds	r3, #24
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	78f9      	ldrb	r1, [r7, #3]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	460b      	mov	r3, r1
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	1a5b      	subs	r3, r3, r1
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4403      	add	r3, r0
 8009550:	3344      	adds	r3, #68	; 0x44
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	fbb2 f1f3 	udiv	r1, r2, r3
 8009558:	fb03 f301 	mul.w	r3, r3, r1
 800955c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800955e:	2b00      	cmp	r3, #0
 8009560:	d110      	bne.n	8009584 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	3318      	adds	r3, #24
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009576:	78f9      	ldrb	r1, [r7, #3]
 8009578:	2300      	movs	r3, #0
 800957a:	2200      	movs	r2, #0
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 ff3a 	bl	800b3f6 <USBD_LL_Transmit>
 8009582:	e00f      	b.n	80095a4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e015      	b.n	80095fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 ff50 	bl	800b47a <USBD_LL_GetRxDataSize>
 80095da:	4602      	mov	r2, r0
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80095f6:	4611      	mov	r1, r2
 80095f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009612:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d015      	beq.n	800964a <USBD_CDC_EP0_RxReady+0x46>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009624:	2bff      	cmp	r3, #255	; 0xff
 8009626:	d010      	beq.n	800964a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009636:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800963e:	b292      	uxth	r2, r2
 8009640:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	22ff      	movs	r2, #255	; 0xff
 8009646:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2243      	movs	r2, #67	; 0x43
 8009660:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009662:	4b03      	ldr	r3, [pc, #12]	; (8009670 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	20000320 	.word	0x20000320

08009674 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2243      	movs	r2, #67	; 0x43
 8009680:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009682:	4b03      	ldr	r3, [pc, #12]	; (8009690 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009684:	4618      	mov	r0, r3
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	200002dc 	.word	0x200002dc

08009694 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2243      	movs	r2, #67	; 0x43
 80096a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80096a2:	4b03      	ldr	r3, [pc, #12]	; (80096b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	20000364 	.word	0x20000364

080096b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	220a      	movs	r2, #10
 80096c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80096c2:	4b03      	ldr	r3, [pc, #12]	; (80096d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	20000298 	.word	0x20000298

080096d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e004      	b.n	80096f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80096fe:	b480      	push	{r7}
 8009700:	b087      	sub	sp, #28
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	60b9      	str	r1, [r7, #8]
 8009708:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009710:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	371c      	adds	r7, #28
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009740:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009766:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009768:	2301      	movs	r3, #1
 800976a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009776:	2303      	movs	r3, #3
 8009778:	e01a      	b.n	80097b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009780:	2b00      	cmp	r3, #0
 8009782:	d114      	bne.n	80097ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2201      	movs	r2, #1
 8009788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80097a2:	2181      	movs	r1, #129	; 0x81
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f001 fe26 	bl	800b3f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e016      	b.n	8009804 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	7c1b      	ldrb	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d109      	bne.n	80097f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097e8:	2101      	movs	r1, #1
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f001 fe24 	bl	800b438 <USBD_LL_PrepareReceive>
 80097f0:	e007      	b.n	8009802 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80097f8:	2340      	movs	r3, #64	; 0x40
 80097fa:	2101      	movs	r1, #1
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 fe1b 	bl	800b438 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d101      	bne.n	8009824 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009820:	2303      	movs	r3, #3
 8009822:	e025      	b.n	8009870 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	79fa      	ldrb	r2, [r7, #7]
 8009862:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f001 fc91 	bl	800b18c <USBD_LL_Init>
 800986a:	4603      	mov	r3, r0
 800986c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800988c:	2303      	movs	r3, #3
 800988e:	e010      	b.n	80098b2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a0:	f107 020e 	add.w	r2, r7, #14
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	4602      	mov	r2, r0
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f001 fcae 	bl	800b224 <USBD_LL_Start>
 80098c8:	4603      	mov	r3, r0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3708      	adds	r7, #8
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80098f4:	2303      	movs	r3, #3
 80098f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d009      	beq.n	8009916 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	78fa      	ldrb	r2, [r7, #3]
 800990c:	4611      	mov	r1, r2
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
 8009912:	4603      	mov	r3, r0
 8009914:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009916:	7bfb      	ldrb	r3, [r7, #15]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009932:	2b00      	cmp	r3, #0
 8009934:	d007      	beq.n	8009946 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	4611      	mov	r1, r2
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	4798      	blx	r3
  }

  return USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	4618      	mov	r0, r3
 8009964:	f000 ff65 	bl	800a832 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009976:	461a      	mov	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009984:	f003 031f 	and.w	r3, r3, #31
 8009988:	2b02      	cmp	r3, #2
 800998a:	d01a      	beq.n	80099c2 <USBD_LL_SetupStage+0x72>
 800998c:	2b02      	cmp	r3, #2
 800998e:	d822      	bhi.n	80099d6 <USBD_LL_SetupStage+0x86>
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <USBD_LL_SetupStage+0x4a>
 8009994:	2b01      	cmp	r3, #1
 8009996:	d00a      	beq.n	80099ae <USBD_LL_SetupStage+0x5e>
 8009998:	e01d      	b.n	80099d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fa18 	bl	8009dd8 <USBD_StdDevReq>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
      break;
 80099ac:	e020      	b.n	80099f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099b4:	4619      	mov	r1, r3
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa7c 	bl	8009eb4 <USBD_StdItfReq>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]
      break;
 80099c0:	e016      	b.n	80099f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 faba 	bl	8009f44 <USBD_StdEPReq>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]
      break;
 80099d4:	e00c      	b.n	80099f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80099dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fc7d 	bl	800b2e4 <USBD_LL_StallEP>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73fb      	strb	r3, [r7, #15]
      break;
 80099ee:	bf00      	nop
  }

  return ret;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b086      	sub	sp, #24
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	460b      	mov	r3, r1
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009a08:	7afb      	ldrb	r3, [r7, #11]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d137      	bne.n	8009a7e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d14a      	bne.n	8009ab6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d913      	bls.n	8009a54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	689a      	ldr	r2, [r3, #8]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	1ad2      	subs	r2, r2, r3
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	4293      	cmp	r3, r2
 8009a44:	bf28      	it	cs
 8009a46:	4613      	movcs	r3, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 ffe4 	bl	800aa1a <USBD_CtlContinueRx>
 8009a52:	e030      	b.n	8009ab6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00a      	beq.n	8009a76 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d105      	bne.n	8009a76 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 ffe0 	bl	800aa3c <USBD_CtlSendStatus>
 8009a7c:	e01b      	b.n	8009ab6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d013      	beq.n	8009ab2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d10e      	bne.n	8009ab2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9a:	699b      	ldr	r3, [r3, #24]
 8009a9c:	7afa      	ldrb	r2, [r7, #11]
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	4798      	blx	r3
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	e002      	b.n	8009ab8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e000      	b.n	8009ab8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	460b      	mov	r3, r1
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009ace:	7afb      	ldrb	r3, [r7, #11]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d16a      	bne.n	8009baa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3314      	adds	r3, #20
 8009ad8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d155      	bne.n	8009b90 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	689a      	ldr	r2, [r3, #8]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d914      	bls.n	8009b1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	689a      	ldr	r2, [r3, #8]
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	1ad2      	subs	r2, r2, r3
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	461a      	mov	r2, r3
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f000 ff59 	bl	800a9be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2100      	movs	r1, #0
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f001 fc90 	bl	800b438 <USBD_LL_PrepareReceive>
 8009b18:	e03a      	b.n	8009b90 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d11c      	bne.n	8009b60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d316      	bcc.n	8009b60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d20f      	bcs.n	8009b60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b40:	2200      	movs	r2, #0
 8009b42:	2100      	movs	r1, #0
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 ff3a 	bl	800a9be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b52:	2300      	movs	r3, #0
 8009b54:	2200      	movs	r2, #0
 8009b56:	2100      	movs	r1, #0
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f001 fc6d 	bl	800b438 <USBD_LL_PrepareReceive>
 8009b5e:	e017      	b.n	8009b90 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00a      	beq.n	8009b82 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d105      	bne.n	8009b82 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b82:	2180      	movs	r1, #128	; 0x80
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f001 fbad 	bl	800b2e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f000 ff69 	bl	800aa62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d123      	bne.n	8009be2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f7ff fe99 	bl	80098d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ba8:	e01b      	b.n	8009be2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d013      	beq.n	8009bde <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d10e      	bne.n	8009bde <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	7afa      	ldrb	r2, [r7, #11]
 8009bca:	4611      	mov	r1, r2
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	4798      	blx	r3
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009bd4:	7dfb      	ldrb	r3, [r7, #23]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	e002      	b.n	8009be4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e000      	b.n	8009be4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d009      	beq.n	8009c30 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	6852      	ldr	r2, [r2, #4]
 8009c28:	b2d2      	uxtb	r2, r2
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c30:	2340      	movs	r3, #64	; 0x40
 8009c32:	2200      	movs	r2, #0
 8009c34:	2100      	movs	r1, #0
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 fb0f 	bl	800b25a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2240      	movs	r2, #64	; 0x40
 8009c48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c4c:	2340      	movs	r3, #64	; 0x40
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2180      	movs	r1, #128	; 0x80
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 fb01 	bl	800b25a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2240      	movs	r2, #64	; 0x40
 8009c62:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	460b      	mov	r3, r1
 8009c78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	78fa      	ldrb	r2, [r7, #3]
 8009c7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	370c      	adds	r7, #12
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b083      	sub	sp, #12
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2204      	movs	r2, #4
 8009ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	d105      	bne.n	8009cd6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d10b      	bne.n	8009d0e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d009      	beq.n	8009d90 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	6852      	ldr	r2, [r2, #4]
 8009d88:	b2d2      	uxtb	r2, r2
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	4798      	blx	r3
  }

  return USBD_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b087      	sub	sp, #28
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	3301      	adds	r3, #1
 8009db0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009db8:	8a3b      	ldrh	r3, [r7, #16]
 8009dba:	021b      	lsls	r3, r3, #8
 8009dbc:	b21a      	sxth	r2, r3
 8009dbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	b21b      	sxth	r3, r3
 8009dc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009dc8:	89fb      	ldrh	r3, [r7, #14]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	371c      	adds	r7, #28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
	...

08009dd8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dee:	2b40      	cmp	r3, #64	; 0x40
 8009df0:	d005      	beq.n	8009dfe <USBD_StdDevReq+0x26>
 8009df2:	2b40      	cmp	r3, #64	; 0x40
 8009df4:	d853      	bhi.n	8009e9e <USBD_StdDevReq+0xc6>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00b      	beq.n	8009e12 <USBD_StdDevReq+0x3a>
 8009dfa:	2b20      	cmp	r3, #32
 8009dfc:	d14f      	bne.n	8009e9e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	4798      	blx	r3
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e10:	e04a      	b.n	8009ea8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	2b09      	cmp	r3, #9
 8009e18:	d83b      	bhi.n	8009e92 <USBD_StdDevReq+0xba>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <USBD_StdDevReq+0x48>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009e75 	.word	0x08009e75
 8009e24:	08009e89 	.word	0x08009e89
 8009e28:	08009e93 	.word	0x08009e93
 8009e2c:	08009e7f 	.word	0x08009e7f
 8009e30:	08009e93 	.word	0x08009e93
 8009e34:	08009e53 	.word	0x08009e53
 8009e38:	08009e49 	.word	0x08009e49
 8009e3c:	08009e93 	.word	0x08009e93
 8009e40:	08009e6b 	.word	0x08009e6b
 8009e44:	08009e5d 	.word	0x08009e5d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009e48:	6839      	ldr	r1, [r7, #0]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f9d8 	bl	800a200 <USBD_GetDescriptor>
      break;
 8009e50:	e024      	b.n	8009e9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fb67 	bl	800a528 <USBD_SetAddress>
      break;
 8009e5a:	e01f      	b.n	8009e9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fba6 	bl	800a5b0 <USBD_SetConfig>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73fb      	strb	r3, [r7, #15]
      break;
 8009e68:	e018      	b.n	8009e9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fc43 	bl	800a6f8 <USBD_GetConfig>
      break;
 8009e72:	e013      	b.n	8009e9c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fc73 	bl	800a762 <USBD_GetStatus>
      break;
 8009e7c:	e00e      	b.n	8009e9c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fca1 	bl	800a7c8 <USBD_SetFeature>
      break;
 8009e86:	e009      	b.n	8009e9c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fcb0 	bl	800a7f0 <USBD_ClrFeature>
      break;
 8009e90:	e004      	b.n	8009e9c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fd06 	bl	800a8a6 <USBD_CtlError>
      break;
 8009e9a:	bf00      	nop
    }
    break;
 8009e9c:	e004      	b.n	8009ea8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009e9e:	6839      	ldr	r1, [r7, #0]
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fd00 	bl	800a8a6 <USBD_CtlError>
    break;
 8009ea6:	bf00      	nop
  }

  return ret;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop

08009eb4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009eca:	2b40      	cmp	r3, #64	; 0x40
 8009ecc:	d005      	beq.n	8009eda <USBD_StdItfReq+0x26>
 8009ece:	2b40      	cmp	r3, #64	; 0x40
 8009ed0:	d82e      	bhi.n	8009f30 <USBD_StdItfReq+0x7c>
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <USBD_StdItfReq+0x26>
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	d12a      	bne.n	8009f30 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d81d      	bhi.n	8009f22 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	889b      	ldrh	r3, [r3, #4]
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d813      	bhi.n	8009f18 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	4798      	blx	r3
 8009efe:	4603      	mov	r3, r0
 8009f00:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	88db      	ldrh	r3, [r3, #6]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d110      	bne.n	8009f2c <USBD_StdItfReq+0x78>
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10d      	bne.n	8009f2c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fd93 	bl	800aa3c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009f16:	e009      	b.n	8009f2c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fcc3 	bl	800a8a6 <USBD_CtlError>
      break;
 8009f20:	e004      	b.n	8009f2c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fcbe 	bl	800a8a6 <USBD_CtlError>
      break;
 8009f2a:	e000      	b.n	8009f2e <USBD_StdItfReq+0x7a>
      break;
 8009f2c:	bf00      	nop
    }
    break;
 8009f2e:	e004      	b.n	8009f3a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fcb7 	bl	800a8a6 <USBD_CtlError>
    break;
 8009f38:	bf00      	nop
  }

  return ret;
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	889b      	ldrh	r3, [r3, #4]
 8009f56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f60:	2b40      	cmp	r3, #64	; 0x40
 8009f62:	d007      	beq.n	8009f74 <USBD_StdEPReq+0x30>
 8009f64:	2b40      	cmp	r3, #64	; 0x40
 8009f66:	f200 8140 	bhi.w	800a1ea <USBD_StdEPReq+0x2a6>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00c      	beq.n	8009f88 <USBD_StdEPReq+0x44>
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	f040 813b 	bne.w	800a1ea <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	4798      	blx	r3
 8009f82:	4603      	mov	r3, r0
 8009f84:	73fb      	strb	r3, [r7, #15]
    break;
 8009f86:	e135      	b.n	800a1f4 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	785b      	ldrb	r3, [r3, #1]
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d007      	beq.n	8009fa0 <USBD_StdEPReq+0x5c>
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	f300 8124 	bgt.w	800a1de <USBD_StdEPReq+0x29a>
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d07b      	beq.n	800a092 <USBD_StdEPReq+0x14e>
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d03b      	beq.n	800a016 <USBD_StdEPReq+0xd2>
 8009f9e:	e11e      	b.n	800a1de <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d002      	beq.n	8009fb0 <USBD_StdEPReq+0x6c>
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d016      	beq.n	8009fdc <USBD_StdEPReq+0x98>
 8009fae:	e02c      	b.n	800a00a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00d      	beq.n	8009fd2 <USBD_StdEPReq+0x8e>
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	2b80      	cmp	r3, #128	; 0x80
 8009fba:	d00a      	beq.n	8009fd2 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f001 f98f 	bl	800b2e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fc6:	2180      	movs	r1, #128	; 0x80
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 f98b 	bl	800b2e4 <USBD_LL_StallEP>
 8009fce:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009fd0:	e020      	b.n	800a014 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fc66 	bl	800a8a6 <USBD_CtlError>
        break;
 8009fda:	e01b      	b.n	800a014 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	885b      	ldrh	r3, [r3, #2]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10e      	bne.n	800a002 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00b      	beq.n	800a002 <USBD_StdEPReq+0xbe>
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
 8009fec:	2b80      	cmp	r3, #128	; 0x80
 8009fee:	d008      	beq.n	800a002 <USBD_StdEPReq+0xbe>
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	88db      	ldrh	r3, [r3, #6]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d104      	bne.n	800a002 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 f971 	bl	800b2e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fd1a 	bl	800aa3c <USBD_CtlSendStatus>

        break;
 800a008:	e004      	b.n	800a014 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fc4a 	bl	800a8a6 <USBD_CtlError>
        break;
 800a012:	bf00      	nop
      }
      break;
 800a014:	e0e8      	b.n	800a1e8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d002      	beq.n	800a026 <USBD_StdEPReq+0xe2>
 800a020:	2b03      	cmp	r3, #3
 800a022:	d016      	beq.n	800a052 <USBD_StdEPReq+0x10e>
 800a024:	e02e      	b.n	800a084 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00d      	beq.n	800a048 <USBD_StdEPReq+0x104>
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	2b80      	cmp	r3, #128	; 0x80
 800a030:	d00a      	beq.n	800a048 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	4619      	mov	r1, r3
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f001 f954 	bl	800b2e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a03c:	2180      	movs	r1, #128	; 0x80
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 f950 	bl	800b2e4 <USBD_LL_StallEP>
 800a044:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a046:	e023      	b.n	800a090 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fc2b 	bl	800a8a6 <USBD_CtlError>
        break;
 800a050:	e01e      	b.n	800a090 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	885b      	ldrh	r3, [r3, #2]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d119      	bne.n	800a08e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 f95a 	bl	800b322 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fce4 	bl	800aa3c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
        }
        break;
 800a082:	e004      	b.n	800a08e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fc0d 	bl	800a8a6 <USBD_CtlError>
        break;
 800a08c:	e000      	b.n	800a090 <USBD_StdEPReq+0x14c>
        break;
 800a08e:	bf00      	nop
      }
      break;
 800a090:	e0aa      	b.n	800a1e8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d002      	beq.n	800a0a2 <USBD_StdEPReq+0x15e>
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d032      	beq.n	800a106 <USBD_StdEPReq+0x1c2>
 800a0a0:	e097      	b.n	800a1d2 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0a2:	7bbb      	ldrb	r3, [r7, #14]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d007      	beq.n	800a0b8 <USBD_StdEPReq+0x174>
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	2b80      	cmp	r3, #128	; 0x80
 800a0ac:	d004      	beq.n	800a0b8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fbf8 	bl	800a8a6 <USBD_CtlError>
          break;
 800a0b6:	e091      	b.n	800a1dc <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	da0b      	bge.n	800a0d8 <USBD_StdEPReq+0x194>
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
 800a0c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	3310      	adds	r3, #16
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	e00b      	b.n	800a0f0 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
 800a0da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fc42 	bl	800a988 <USBD_CtlSendData>
        break;
 800a104:	e06a      	b.n	800a1dc <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	da11      	bge.n	800a132 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	f003 020f 	and.w	r2, r3, #15
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	440b      	add	r3, r1
 800a120:	3324      	adds	r3, #36	; 0x24
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d117      	bne.n	800a158 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fbbb 	bl	800a8a6 <USBD_CtlError>
            break;
 800a130:	e054      	b.n	800a1dc <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a132:	7bbb      	ldrb	r3, [r7, #14]
 800a134:	f003 020f 	and.w	r2, r3, #15
 800a138:	6879      	ldr	r1, [r7, #4]
 800a13a:	4613      	mov	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	440b      	add	r3, r1
 800a144:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d104      	bne.n	800a158 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fba8 	bl	800a8a6 <USBD_CtlError>
            break;
 800a156:	e041      	b.n	800a1dc <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	da0b      	bge.n	800a178 <USBD_StdEPReq+0x234>
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	3310      	adds	r3, #16
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	4413      	add	r3, r2
 800a174:	3304      	adds	r3, #4
 800a176:	e00b      	b.n	800a190 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a17e:	4613      	mov	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	4413      	add	r3, r2
 800a18e:	3304      	adds	r3, #4
 800a190:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a192:	7bbb      	ldrb	r3, [r7, #14]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <USBD_StdEPReq+0x25a>
 800a198:	7bbb      	ldrb	r3, [r7, #14]
 800a19a:	2b80      	cmp	r3, #128	; 0x80
 800a19c:	d103      	bne.n	800a1a6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	e00e      	b.n	800a1c4 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f001 f8d8 	bl	800b360 <USBD_LL_IsStallEP>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	e002      	b.n	800a1c4 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fbdc 	bl	800a988 <USBD_CtlSendData>
          break;
 800a1d0:	e004      	b.n	800a1dc <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fb66 	bl	800a8a6 <USBD_CtlError>
        break;
 800a1da:	bf00      	nop
      }
      break;
 800a1dc:	e004      	b.n	800a1e8 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fb60 	bl	800a8a6 <USBD_CtlError>
      break;
 800a1e6:	bf00      	nop
    }
    break;
 800a1e8:	e004      	b.n	800a1f4 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fb5a 	bl	800a8a6 <USBD_CtlError>
    break;
 800a1f2:	bf00      	nop
  }

  return ret;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a212:	2300      	movs	r3, #0
 800a214:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	885b      	ldrh	r3, [r3, #2]
 800a21a:	0a1b      	lsrs	r3, r3, #8
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	3b01      	subs	r3, #1
 800a220:	2b0e      	cmp	r3, #14
 800a222:	f200 8152 	bhi.w	800a4ca <USBD_GetDescriptor+0x2ca>
 800a226:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <USBD_GetDescriptor+0x2c>)
 800a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22c:	0800a29d 	.word	0x0800a29d
 800a230:	0800a2b5 	.word	0x0800a2b5
 800a234:	0800a2f5 	.word	0x0800a2f5
 800a238:	0800a4cb 	.word	0x0800a4cb
 800a23c:	0800a4cb 	.word	0x0800a4cb
 800a240:	0800a46b 	.word	0x0800a46b
 800a244:	0800a497 	.word	0x0800a497
 800a248:	0800a4cb 	.word	0x0800a4cb
 800a24c:	0800a4cb 	.word	0x0800a4cb
 800a250:	0800a4cb 	.word	0x0800a4cb
 800a254:	0800a4cb 	.word	0x0800a4cb
 800a258:	0800a4cb 	.word	0x0800a4cb
 800a25c:	0800a4cb 	.word	0x0800a4cb
 800a260:	0800a4cb 	.word	0x0800a4cb
 800a264:	0800a269 	.word	0x0800a269
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00b      	beq.n	800a28c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	7c12      	ldrb	r2, [r2, #16]
 800a280:	f107 0108 	add.w	r1, r7, #8
 800a284:	4610      	mov	r0, r2
 800a286:	4798      	blx	r3
 800a288:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a28a:	e126      	b.n	800a4da <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 fb09 	bl	800a8a6 <USBD_CtlError>
      err++;
 800a294:	7afb      	ldrb	r3, [r7, #11]
 800a296:	3301      	adds	r3, #1
 800a298:	72fb      	strb	r3, [r7, #11]
    break;
 800a29a:	e11e      	b.n	800a4da <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	7c12      	ldrb	r2, [r2, #16]
 800a2a8:	f107 0108 	add.w	r1, r7, #8
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	4798      	blx	r3
 800a2b0:	60f8      	str	r0, [r7, #12]
    break;
 800a2b2:	e112      	b.n	800a4da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	7c1b      	ldrb	r3, [r3, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10d      	bne.n	800a2d8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c4:	f107 0208 	add.w	r2, r7, #8
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	4798      	blx	r3
 800a2cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a2d6:	e100      	b.n	800a4da <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	f107 0208 	add.w	r2, r7, #8
 800a2e4:	4610      	mov	r0, r2
 800a2e6:	4798      	blx	r3
 800a2e8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	701a      	strb	r2, [r3, #0]
    break;
 800a2f2:	e0f2      	b.n	800a4da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	885b      	ldrh	r3, [r3, #2]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	f200 80ac 	bhi.w	800a458 <USBD_GetDescriptor+0x258>
 800a300:	a201      	add	r2, pc, #4	; (adr r2, 800a308 <USBD_GetDescriptor+0x108>)
 800a302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a306:	bf00      	nop
 800a308:	0800a321 	.word	0x0800a321
 800a30c:	0800a355 	.word	0x0800a355
 800a310:	0800a389 	.word	0x0800a389
 800a314:	0800a3bd 	.word	0x0800a3bd
 800a318:	0800a3f1 	.word	0x0800a3f1
 800a31c:	0800a425 	.word	0x0800a425
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00b      	beq.n	800a344 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	7c12      	ldrb	r2, [r2, #16]
 800a338:	f107 0108 	add.w	r1, r7, #8
 800a33c:	4610      	mov	r0, r2
 800a33e:	4798      	blx	r3
 800a340:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a342:	e091      	b.n	800a468 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 faad 	bl	800a8a6 <USBD_CtlError>
        err++;
 800a34c:	7afb      	ldrb	r3, [r7, #11]
 800a34e:	3301      	adds	r3, #1
 800a350:	72fb      	strb	r3, [r7, #11]
      break;
 800a352:	e089      	b.n	800a468 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	7c12      	ldrb	r2, [r2, #16]
 800a36c:	f107 0108 	add.w	r1, r7, #8
 800a370:	4610      	mov	r0, r2
 800a372:	4798      	blx	r3
 800a374:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a376:	e077      	b.n	800a468 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa93 	bl	800a8a6 <USBD_CtlError>
        err++;
 800a380:	7afb      	ldrb	r3, [r7, #11]
 800a382:	3301      	adds	r3, #1
 800a384:	72fb      	strb	r3, [r7, #11]
      break;
 800a386:	e06f      	b.n	800a468 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00b      	beq.n	800a3ac <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	7c12      	ldrb	r2, [r2, #16]
 800a3a0:	f107 0108 	add.w	r1, r7, #8
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4798      	blx	r3
 800a3a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3aa:	e05d      	b.n	800a468 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fa79 	bl	800a8a6 <USBD_CtlError>
        err++;
 800a3b4:	7afb      	ldrb	r3, [r7, #11]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	72fb      	strb	r3, [r7, #11]
      break;
 800a3ba:	e055      	b.n	800a468 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00b      	beq.n	800a3e0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	7c12      	ldrb	r2, [r2, #16]
 800a3d4:	f107 0108 	add.w	r1, r7, #8
 800a3d8:	4610      	mov	r0, r2
 800a3da:	4798      	blx	r3
 800a3dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3de:	e043      	b.n	800a468 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fa5f 	bl	800a8a6 <USBD_CtlError>
        err++;
 800a3e8:	7afb      	ldrb	r3, [r7, #11]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	72fb      	strb	r3, [r7, #11]
      break;
 800a3ee:	e03b      	b.n	800a468 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00b      	beq.n	800a414 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	7c12      	ldrb	r2, [r2, #16]
 800a408:	f107 0108 	add.w	r1, r7, #8
 800a40c:	4610      	mov	r0, r2
 800a40e:	4798      	blx	r3
 800a410:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a412:	e029      	b.n	800a468 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fa45 	bl	800a8a6 <USBD_CtlError>
        err++;
 800a41c:	7afb      	ldrb	r3, [r7, #11]
 800a41e:	3301      	adds	r3, #1
 800a420:	72fb      	strb	r3, [r7, #11]
      break;
 800a422:	e021      	b.n	800a468 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00b      	beq.n	800a448 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	7c12      	ldrb	r2, [r2, #16]
 800a43c:	f107 0108 	add.w	r1, r7, #8
 800a440:	4610      	mov	r0, r2
 800a442:	4798      	blx	r3
 800a444:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a446:	e00f      	b.n	800a468 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fa2b 	bl	800a8a6 <USBD_CtlError>
        err++;
 800a450:	7afb      	ldrb	r3, [r7, #11]
 800a452:	3301      	adds	r3, #1
 800a454:	72fb      	strb	r3, [r7, #11]
      break;
 800a456:	e007      	b.n	800a468 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a458:	6839      	ldr	r1, [r7, #0]
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa23 	bl	800a8a6 <USBD_CtlError>
      err++;
 800a460:	7afb      	ldrb	r3, [r7, #11]
 800a462:	3301      	adds	r3, #1
 800a464:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a466:	bf00      	nop
    }
    break;
 800a468:	e037      	b.n	800a4da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	7c1b      	ldrb	r3, [r3, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d109      	bne.n	800a486 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a47a:	f107 0208 	add.w	r2, r7, #8
 800a47e:	4610      	mov	r0, r2
 800a480:	4798      	blx	r3
 800a482:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a484:	e029      	b.n	800a4da <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fa0c 	bl	800a8a6 <USBD_CtlError>
      err++;
 800a48e:	7afb      	ldrb	r3, [r7, #11]
 800a490:	3301      	adds	r3, #1
 800a492:	72fb      	strb	r3, [r7, #11]
    break;
 800a494:	e021      	b.n	800a4da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	7c1b      	ldrb	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10d      	bne.n	800a4ba <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a6:	f107 0208 	add.w	r2, r7, #8
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	4798      	blx	r3
 800a4ae:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	2207      	movs	r2, #7
 800a4b6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a4b8:	e00f      	b.n	800a4da <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f9f2 	bl	800a8a6 <USBD_CtlError>
      err++;
 800a4c2:	7afb      	ldrb	r3, [r7, #11]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	72fb      	strb	r3, [r7, #11]
    break;
 800a4c8:	e007      	b.n	800a4da <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f9ea 	bl	800a8a6 <USBD_CtlError>
    err++;
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	72fb      	strb	r3, [r7, #11]
    break;
 800a4d8:	bf00      	nop
  }

  if (err != 0U)
 800a4da:	7afb      	ldrb	r3, [r7, #11]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d11e      	bne.n	800a51e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	88db      	ldrh	r3, [r3, #6]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d016      	beq.n	800a516 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800a4e8:	893b      	ldrh	r3, [r7, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00e      	beq.n	800a50c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	88da      	ldrh	r2, [r3, #6]
 800a4f2:	893b      	ldrh	r3, [r7, #8]
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	bf28      	it	cs
 800a4f8:	4613      	movcs	r3, r2
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a4fe:	893b      	ldrh	r3, [r7, #8]
 800a500:	461a      	mov	r2, r3
 800a502:	68f9      	ldr	r1, [r7, #12]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fa3f 	bl	800a988 <USBD_CtlSendData>
 800a50a:	e009      	b.n	800a520 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f9c9 	bl	800a8a6 <USBD_CtlError>
 800a514:	e004      	b.n	800a520 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fa90 	bl	800aa3c <USBD_CtlSendStatus>
 800a51c:	e000      	b.n	800a520 <USBD_GetDescriptor+0x320>
    return;
 800a51e:	bf00      	nop
    }
  }
}
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop

0800a528 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	889b      	ldrh	r3, [r3, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d130      	bne.n	800a59c <USBD_SetAddress+0x74>
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	88db      	ldrh	r3, [r3, #6]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d12c      	bne.n	800a59c <USBD_SetAddress+0x74>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	885b      	ldrh	r3, [r3, #2]
 800a546:	2b7f      	cmp	r3, #127	; 0x7f
 800a548:	d828      	bhi.n	800a59c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	885b      	ldrh	r3, [r3, #2]
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a554:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a55c:	2b03      	cmp	r3, #3
 800a55e:	d104      	bne.n	800a56a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f99f 	bl	800a8a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a568:	e01d      	b.n	800a5a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	7bfa      	ldrb	r2, [r7, #15]
 800a56e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 ff1e 	bl	800b3b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fa5d 	bl	800aa3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d004      	beq.n	800a592 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2202      	movs	r2, #2
 800a58c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a590:	e009      	b.n	800a5a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a59a:	e004      	b.n	800a5a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a59c:	6839      	ldr	r1, [r7, #0]
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f981 	bl	800a8a6 <USBD_CtlError>
  }
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
	...

0800a5b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	885b      	ldrh	r3, [r3, #2]
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	4b4b      	ldr	r3, [pc, #300]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a5c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a5c8:	4b4a      	ldr	r3, [pc, #296]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d905      	bls.n	800a5dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f967 	bl	800a8a6 <USBD_CtlError>
    return USBD_FAIL;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e087      	b.n	800a6ec <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d002      	beq.n	800a5ec <USBD_SetConfig+0x3c>
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d025      	beq.n	800a636 <USBD_SetConfig+0x86>
 800a5ea:	e071      	b.n	800a6d0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a5ec:	4b41      	ldr	r3, [pc, #260]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d01c      	beq.n	800a62e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a5f4:	4b3f      	ldr	r3, [pc, #252]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5fe:	4b3d      	ldr	r3, [pc, #244]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff f96f 	bl	80098e8 <USBD_SetClassConfig>
 800a60a:	4603      	mov	r3, r0
 800a60c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f945 	bl	800a8a6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a61c:	e065      	b.n	800a6ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fa0c 	bl	800aa3c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2203      	movs	r2, #3
 800a628:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a62c:	e05d      	b.n	800a6ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fa04 	bl	800aa3c <USBD_CtlSendStatus>
    break;
 800a634:	e059      	b.n	800a6ea <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a636:	4b2f      	ldr	r3, [pc, #188]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d112      	bne.n	800a664 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2202      	movs	r2, #2
 800a642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a646:	4b2b      	ldr	r3, [pc, #172]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a650:	4b28      	ldr	r3, [pc, #160]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	4619      	mov	r1, r3
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7ff f962 	bl	8009920 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f9ed 	bl	800aa3c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a662:	e042      	b.n	800a6ea <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a664:	4b23      	ldr	r3, [pc, #140]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	461a      	mov	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d02a      	beq.n	800a6c8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	b2db      	uxtb	r3, r3
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff f950 	bl	8009920 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a680:	4b1c      	ldr	r3, [pc, #112]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	461a      	mov	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a68a:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7ff f929 	bl	80098e8 <USBD_SetClassConfig>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00f      	beq.n	800a6c0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f8ff 	bl	800a8a6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f7ff f935 	bl	8009920 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a6be:	e014      	b.n	800a6ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f9bb 	bl	800aa3c <USBD_CtlSendStatus>
    break;
 800a6c6:	e010      	b.n	800a6ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f9b7 	bl	800aa3c <USBD_CtlSendStatus>
    break;
 800a6ce:	e00c      	b.n	800a6ea <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f8e7 	bl	800a8a6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a6d8:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <USBD_SetConfig+0x144>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff f91e 	bl	8009920 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6e8:	bf00      	nop
  }

  return ret;
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	20000670 	.word	0x20000670

0800a6f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	88db      	ldrh	r3, [r3, #6]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d004      	beq.n	800a714 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f8ca 	bl	800a8a6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a712:	e022      	b.n	800a75a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	dc02      	bgt.n	800a724 <USBD_GetConfig+0x2c>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	dc03      	bgt.n	800a72a <USBD_GetConfig+0x32>
 800a722:	e015      	b.n	800a750 <USBD_GetConfig+0x58>
 800a724:	2b03      	cmp	r3, #3
 800a726:	d00b      	beq.n	800a740 <USBD_GetConfig+0x48>
 800a728:	e012      	b.n	800a750 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3308      	adds	r3, #8
 800a734:	2201      	movs	r2, #1
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f925 	bl	800a988 <USBD_CtlSendData>
      break;
 800a73e:	e00c      	b.n	800a75a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	3304      	adds	r3, #4
 800a744:	2201      	movs	r2, #1
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f91d 	bl	800a988 <USBD_CtlSendData>
      break;
 800a74e:	e004      	b.n	800a75a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f8a7 	bl	800a8a6 <USBD_CtlError>
      break;
 800a758:	bf00      	nop
}
 800a75a:	bf00      	nop
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b082      	sub	sp, #8
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a772:	3b01      	subs	r3, #1
 800a774:	2b02      	cmp	r3, #2
 800a776:	d81e      	bhi.n	800a7b6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	88db      	ldrh	r3, [r3, #6]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d004      	beq.n	800a78a <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f88f 	bl	800a8a6 <USBD_CtlError>
      break;
 800a788:	e01a      	b.n	800a7c0 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a796:	2b00      	cmp	r3, #0
 800a798:	d005      	beq.n	800a7a6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f043 0202 	orr.w	r2, r3, #2
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	330c      	adds	r3, #12
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f8ea 	bl	800a988 <USBD_CtlSendData>
    break;
 800a7b4:	e004      	b.n	800a7c0 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f874 	bl	800a8a6 <USBD_CtlError>
    break;
 800a7be:	bf00      	nop
  }
}
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	885b      	ldrh	r3, [r3, #2]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d106      	bne.n	800a7e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 f92a 	bl	800aa3c <USBD_CtlSendStatus>
  }
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a800:	3b01      	subs	r3, #1
 800a802:	2b02      	cmp	r3, #2
 800a804:	d80b      	bhi.n	800a81e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	885b      	ldrh	r3, [r3, #2]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d10c      	bne.n	800a828 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f910 	bl	800aa3c <USBD_CtlSendStatus>
      }
      break;
 800a81c:	e004      	b.n	800a828 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f840 	bl	800a8a6 <USBD_CtlError>
      break;
 800a826:	e000      	b.n	800a82a <USBD_ClrFeature+0x3a>
      break;
 800a828:	bf00      	nop
  }
}
 800a82a:	bf00      	nop
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b084      	sub	sp, #16
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	781a      	ldrb	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	3301      	adds	r3, #1
 800a84c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	781a      	ldrb	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3301      	adds	r3, #1
 800a85a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f7ff fa9c 	bl	8009d9a <SWAPBYTE>
 800a862:	4603      	mov	r3, r0
 800a864:	461a      	mov	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3301      	adds	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fa8f 	bl	8009d9a <SWAPBYTE>
 800a87c:	4603      	mov	r3, r0
 800a87e:	461a      	mov	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3301      	adds	r3, #1
 800a888:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f7ff fa82 	bl	8009d9a <SWAPBYTE>
 800a896:	4603      	mov	r3, r0
 800a898:	461a      	mov	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	80da      	strh	r2, [r3, #6]
}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8b0:	2180      	movs	r1, #128	; 0x80
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fd16 	bl	800b2e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fd12 	bl	800b2e4 <USBD_LL_StallEP>
}
 800a8c0:	bf00      	nop
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d036      	beq.n	800a94c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a8e2:	6938      	ldr	r0, [r7, #16]
 800a8e4:	f000 f836 	bl	800a954 <USBD_GetLen>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	7812      	ldrb	r2, [r2, #0]
 800a900:	701a      	strb	r2, [r3, #0]
  idx++;
 800a902:	7dfb      	ldrb	r3, [r7, #23]
 800a904:	3301      	adds	r3, #1
 800a906:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a908:	7dfb      	ldrb	r3, [r7, #23]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	4413      	add	r3, r2
 800a90e:	2203      	movs	r2, #3
 800a910:	701a      	strb	r2, [r3, #0]
  idx++;
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	3301      	adds	r3, #1
 800a916:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a918:	e013      	b.n	800a942 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	4413      	add	r3, r2
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	7812      	ldrb	r2, [r2, #0]
 800a924:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	3301      	adds	r3, #1
 800a92a:	613b      	str	r3, [r7, #16]
    idx++;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	3301      	adds	r3, #1
 800a930:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	4413      	add	r3, r2
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a93c:	7dfb      	ldrb	r3, [r7, #23]
 800a93e:	3301      	adds	r3, #1
 800a940:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e7      	bne.n	800a91a <USBD_GetString+0x52>
 800a94a:	e000      	b.n	800a94e <USBD_GetString+0x86>
    return;
 800a94c:	bf00      	nop
  }
}
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a964:	e005      	b.n	800a972 <USBD_GetLen+0x1e>
  {
    len++;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	3301      	adds	r3, #1
 800a96a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	3301      	adds	r3, #1
 800a970:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1f5      	bne.n	800a966 <USBD_GetLen+0x12>
  }

  return len;
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2202      	movs	r2, #2
 800a998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f000 fd21 	bl	800b3f6 <USBD_LL_Transmit>

  return USBD_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fd10 	bl	800b3f6 <USBD_LL_Transmit>

  return USBD_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2203      	movs	r2, #3
 800a9f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	2100      	movs	r1, #0
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 fd14 	bl	800b438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	60b9      	str	r1, [r7, #8]
 800aa24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f000 fd03 	bl	800b438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2204      	movs	r2, #4
 800aa48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2100      	movs	r1, #0
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fccf 	bl	800b3f6 <USBD_LL_Transmit>

  return USBD_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2205      	movs	r2, #5
 800aa6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa72:	2300      	movs	r3, #0
 800aa74:	2200      	movs	r2, #0
 800aa76:	2100      	movs	r1, #0
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fcdd 	bl	800b438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	4912      	ldr	r1, [pc, #72]	; (800aad8 <MX_USB_DEVICE_Init+0x50>)
 800aa90:	4812      	ldr	r0, [pc, #72]	; (800aadc <MX_USB_DEVICE_Init+0x54>)
 800aa92:	f7fe febb 	bl	800980c <USBD_Init>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa9c:	f7f9 f841 	bl	8003b22 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aaa0:	490f      	ldr	r1, [pc, #60]	; (800aae0 <MX_USB_DEVICE_Init+0x58>)
 800aaa2:	480e      	ldr	r0, [pc, #56]	; (800aadc <MX_USB_DEVICE_Init+0x54>)
 800aaa4:	f7fe fee8 	bl	8009878 <USBD_RegisterClass>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aaae:	f7f9 f838 	bl	8003b22 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aab2:	490c      	ldr	r1, [pc, #48]	; (800aae4 <MX_USB_DEVICE_Init+0x5c>)
 800aab4:	4809      	ldr	r0, [pc, #36]	; (800aadc <MX_USB_DEVICE_Init+0x54>)
 800aab6:	f7fe fe0d 	bl	80096d4 <USBD_CDC_RegisterInterface>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aac0:	f7f9 f82f 	bl	8003b22 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aac4:	4805      	ldr	r0, [pc, #20]	; (800aadc <MX_USB_DEVICE_Init+0x54>)
 800aac6:	f7fe fef8 	bl	80098ba <USBD_Start>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aad0:	f7f9 f827 	bl	8003b22 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aad4:	bf00      	nop
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	200003c4 	.word	0x200003c4
 800aadc:	200010e4 	.word	0x200010e4
 800aae0:	200002a4 	.word	0x200002a4
 800aae4:	200003a8 	.word	0x200003a8

0800aae8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aaec:	2200      	movs	r2, #0
 800aaee:	4905      	ldr	r1, [pc, #20]	; (800ab04 <CDC_Init_FS+0x1c>)
 800aaf0:	4805      	ldr	r0, [pc, #20]	; (800ab08 <CDC_Init_FS+0x20>)
 800aaf2:	f7fe fe04 	bl	80096fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aaf6:	4905      	ldr	r1, [pc, #20]	; (800ab0c <CDC_Init_FS+0x24>)
 800aaf8:	4803      	ldr	r0, [pc, #12]	; (800ab08 <CDC_Init_FS+0x20>)
 800aafa:	f7fe fe19 	bl	8009730 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aafe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20001bb4 	.word	0x20001bb4
 800ab08:	200010e4 	.word	0x200010e4
 800ab0c:	200013b4 	.word	0x200013b4

0800ab10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab10:	b480      	push	{r7}
 800ab12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	6039      	str	r1, [r7, #0]
 800ab2a:	71fb      	strb	r3, [r7, #7]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	2b23      	cmp	r3, #35	; 0x23
 800ab34:	d85c      	bhi.n	800abf0 <CDC_Control_FS+0xd0>
 800ab36:	a201      	add	r2, pc, #4	; (adr r2, 800ab3c <CDC_Control_FS+0x1c>)
 800ab38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3c:	0800abf1 	.word	0x0800abf1
 800ab40:	0800abf1 	.word	0x0800abf1
 800ab44:	0800abf1 	.word	0x0800abf1
 800ab48:	0800abf1 	.word	0x0800abf1
 800ab4c:	0800abf1 	.word	0x0800abf1
 800ab50:	0800abf1 	.word	0x0800abf1
 800ab54:	0800abf1 	.word	0x0800abf1
 800ab58:	0800abf1 	.word	0x0800abf1
 800ab5c:	0800abf1 	.word	0x0800abf1
 800ab60:	0800abf1 	.word	0x0800abf1
 800ab64:	0800abf1 	.word	0x0800abf1
 800ab68:	0800abf1 	.word	0x0800abf1
 800ab6c:	0800abf1 	.word	0x0800abf1
 800ab70:	0800abf1 	.word	0x0800abf1
 800ab74:	0800abf1 	.word	0x0800abf1
 800ab78:	0800abf1 	.word	0x0800abf1
 800ab7c:	0800abf1 	.word	0x0800abf1
 800ab80:	0800abf1 	.word	0x0800abf1
 800ab84:	0800abf1 	.word	0x0800abf1
 800ab88:	0800abf1 	.word	0x0800abf1
 800ab8c:	0800abf1 	.word	0x0800abf1
 800ab90:	0800abf1 	.word	0x0800abf1
 800ab94:	0800abf1 	.word	0x0800abf1
 800ab98:	0800abf1 	.word	0x0800abf1
 800ab9c:	0800abf1 	.word	0x0800abf1
 800aba0:	0800abf1 	.word	0x0800abf1
 800aba4:	0800abf1 	.word	0x0800abf1
 800aba8:	0800abf1 	.word	0x0800abf1
 800abac:	0800abf1 	.word	0x0800abf1
 800abb0:	0800abf1 	.word	0x0800abf1
 800abb4:	0800abf1 	.word	0x0800abf1
 800abb8:	0800abf1 	.word	0x0800abf1
 800abbc:	0800abcd 	.word	0x0800abcd
 800abc0:	0800abdf 	.word	0x0800abdf
 800abc4:	0800abf1 	.word	0x0800abf1
 800abc8:	0800abf1 	.word	0x0800abf1
   // case CDC_GET_LINE_CODING:

   // break;

    case CDC_SET_LINE_CODING:
      memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800abcc:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <CDC_Control_FS+0xe0>)
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	6810      	ldr	r0, [r2, #0]
 800abd2:	6018      	str	r0, [r3, #0]
 800abd4:	8891      	ldrh	r1, [r2, #4]
 800abd6:	7992      	ldrb	r2, [r2, #6]
 800abd8:	8099      	strh	r1, [r3, #4]
 800abda:	719a      	strb	r2, [r3, #6]
    break;
 800abdc:	e009      	b.n	800abf2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
      memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	4a07      	ldr	r2, [pc, #28]	; (800ac00 <CDC_Control_FS+0xe0>)
 800abe2:	6810      	ldr	r0, [r2, #0]
 800abe4:	6018      	str	r0, [r3, #0]
 800abe6:	8891      	ldrh	r1, [r2, #4]
 800abe8:	7992      	ldrb	r2, [r2, #6]
 800abea:	8099      	strh	r1, [r3, #4]
 800abec:	719a      	strb	r2, [r3, #6]
    break;
 800abee:	e000      	b.n	800abf2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800abf0:	bf00      	nop
  }

  return (USBD_OK);
 800abf2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	200003bc 	.word	0x200003bc

0800ac04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	4805      	ldr	r0, [pc, #20]	; (800ac28 <CDC_Receive_FS+0x24>)
 800ac12:	f7fe fd8d 	bl	8009730 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac16:	4804      	ldr	r0, [pc, #16]	; (800ac28 <CDC_Receive_FS+0x24>)
 800ac18:	f7fe fdce 	bl	80097b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	200010e4 	.word	0x200010e4

0800ac2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ac3c:	4b0d      	ldr	r3, [pc, #52]	; (800ac74 <CDC_Transmit_FS+0x48>)
 800ac3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e00b      	b.n	800ac6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ac52:	887b      	ldrh	r3, [r7, #2]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6879      	ldr	r1, [r7, #4]
 800ac58:	4806      	ldr	r0, [pc, #24]	; (800ac74 <CDC_Transmit_FS+0x48>)
 800ac5a:	f7fe fd50 	bl	80096fe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ac5e:	4805      	ldr	r0, [pc, #20]	; (800ac74 <CDC_Transmit_FS+0x48>)
 800ac60:	f7fe fd7a 	bl	8009758 <USBD_CDC_TransmitPacket>
 800ac64:	4603      	mov	r3, r0
 800ac66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	200010e4 	.word	0x200010e4

0800ac78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	4613      	mov	r3, r2
 800ac84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ac8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	371c      	adds	r7, #28
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
	...

0800ac9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	4603      	mov	r3, r0
 800aca4:	6039      	str	r1, [r7, #0]
 800aca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2212      	movs	r2, #18
 800acac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800acae:	4b03      	ldr	r3, [pc, #12]	; (800acbc <USBD_FS_DeviceDescriptor+0x20>)
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	200003e4 	.word	0x200003e4

0800acc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	4603      	mov	r3, r0
 800acc8:	6039      	str	r1, [r7, #0]
 800acca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	2204      	movs	r2, #4
 800acd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800acd2:	4b03      	ldr	r3, [pc, #12]	; (800ace0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr
 800ace0:	20000404 	.word	0x20000404

0800ace4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4603      	mov	r3, r0
 800acec:	6039      	str	r1, [r7, #0]
 800acee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d105      	bne.n	800ad02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acf6:	683a      	ldr	r2, [r7, #0]
 800acf8:	4907      	ldr	r1, [pc, #28]	; (800ad18 <USBD_FS_ProductStrDescriptor+0x34>)
 800acfa:	4808      	ldr	r0, [pc, #32]	; (800ad1c <USBD_FS_ProductStrDescriptor+0x38>)
 800acfc:	f7ff fde4 	bl	800a8c8 <USBD_GetString>
 800ad00:	e004      	b.n	800ad0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	4904      	ldr	r1, [pc, #16]	; (800ad18 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad06:	4805      	ldr	r0, [pc, #20]	; (800ad1c <USBD_FS_ProductStrDescriptor+0x38>)
 800ad08:	f7ff fdde 	bl	800a8c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad0c:	4b02      	ldr	r3, [pc, #8]	; (800ad18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	200023b4 	.word	0x200023b4
 800ad1c:	08010a20 	.word	0x08010a20

0800ad20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	6039      	str	r1, [r7, #0]
 800ad2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	4904      	ldr	r1, [pc, #16]	; (800ad40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad30:	4804      	ldr	r0, [pc, #16]	; (800ad44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad32:	f7ff fdc9 	bl	800a8c8 <USBD_GetString>
  return USBD_StrDesc;
 800ad36:	4b02      	ldr	r3, [pc, #8]	; (800ad40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	200023b4 	.word	0x200023b4
 800ad44:	08010a38 	.word	0x08010a38

0800ad48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	6039      	str	r1, [r7, #0]
 800ad52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	221a      	movs	r2, #26
 800ad58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad5a:	f000 f855 	bl	800ae08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad5e:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20000408 	.word	0x20000408

0800ad6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	4603      	mov	r3, r0
 800ad74:	6039      	str	r1, [r7, #0]
 800ad76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad78:	79fb      	ldrb	r3, [r7, #7]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d105      	bne.n	800ad8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	4907      	ldr	r1, [pc, #28]	; (800ada0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad82:	4808      	ldr	r0, [pc, #32]	; (800ada4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad84:	f7ff fda0 	bl	800a8c8 <USBD_GetString>
 800ad88:	e004      	b.n	800ad94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	4904      	ldr	r1, [pc, #16]	; (800ada0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad8e:	4805      	ldr	r0, [pc, #20]	; (800ada4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad90:	f7ff fd9a 	bl	800a8c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad94:	4b02      	ldr	r3, [pc, #8]	; (800ada0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	200023b4 	.word	0x200023b4
 800ada4:	08010a4c 	.word	0x08010a4c

0800ada8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	4603      	mov	r3, r0
 800adb0:	6039      	str	r1, [r7, #0]
 800adb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800adb4:	79fb      	ldrb	r3, [r7, #7]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	4907      	ldr	r1, [pc, #28]	; (800addc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800adbe:	4808      	ldr	r0, [pc, #32]	; (800ade0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800adc0:	f7ff fd82 	bl	800a8c8 <USBD_GetString>
 800adc4:	e004      	b.n	800add0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	4904      	ldr	r1, [pc, #16]	; (800addc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800adca:	4805      	ldr	r0, [pc, #20]	; (800ade0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800adcc:	f7ff fd7c 	bl	800a8c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800add0:	4b02      	ldr	r3, [pc, #8]	; (800addc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	200023b4 	.word	0x200023b4
 800ade0:	08010a58 	.word	0x08010a58

0800ade4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	220c      	movs	r2, #12
 800adf4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800adf6:	4b03      	ldr	r3, [pc, #12]	; (800ae04 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	200003f8 	.word	0x200003f8

0800ae08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <Get_SerialNum+0x44>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae14:	4b0e      	ldr	r3, [pc, #56]	; (800ae50 <Get_SerialNum+0x48>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae1a:	4b0e      	ldr	r3, [pc, #56]	; (800ae54 <Get_SerialNum+0x4c>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4413      	add	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d009      	beq.n	800ae42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae2e:	2208      	movs	r2, #8
 800ae30:	4909      	ldr	r1, [pc, #36]	; (800ae58 <Get_SerialNum+0x50>)
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 f814 	bl	800ae60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae38:	2204      	movs	r2, #4
 800ae3a:	4908      	ldr	r1, [pc, #32]	; (800ae5c <Get_SerialNum+0x54>)
 800ae3c:	68b8      	ldr	r0, [r7, #8]
 800ae3e:	f000 f80f 	bl	800ae60 <IntToUnicode>
  }
}
 800ae42:	bf00      	nop
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	1ff0f420 	.word	0x1ff0f420
 800ae50:	1ff0f424 	.word	0x1ff0f424
 800ae54:	1ff0f428 	.word	0x1ff0f428
 800ae58:	2000040a 	.word	0x2000040a
 800ae5c:	2000041a 	.word	0x2000041a

0800ae60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae72:	2300      	movs	r3, #0
 800ae74:	75fb      	strb	r3, [r7, #23]
 800ae76:	e027      	b.n	800aec8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	0f1b      	lsrs	r3, r3, #28
 800ae7c:	2b09      	cmp	r3, #9
 800ae7e:	d80b      	bhi.n	800ae98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	0f1b      	lsrs	r3, r3, #28
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	005b      	lsls	r3, r3, #1
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	440b      	add	r3, r1
 800ae90:	3230      	adds	r2, #48	; 0x30
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	e00a      	b.n	800aeae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	0f1b      	lsrs	r3, r3, #28
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
 800aea0:	005b      	lsls	r3, r3, #1
 800aea2:	4619      	mov	r1, r3
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	440b      	add	r3, r1
 800aea8:	3237      	adds	r2, #55	; 0x37
 800aeaa:	b2d2      	uxtb	r2, r2
 800aeac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	011b      	lsls	r3, r3, #4
 800aeb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
 800aeb6:	005b      	lsls	r3, r3, #1
 800aeb8:	3301      	adds	r3, #1
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	4413      	add	r3, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
 800aec4:	3301      	adds	r3, #1
 800aec6:	75fb      	strb	r3, [r7, #23]
 800aec8:	7dfa      	ldrb	r2, [r7, #23]
 800aeca:	79fb      	ldrb	r3, [r7, #7]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d3d3      	bcc.n	800ae78 <IntToUnicode+0x18>
  }
}
 800aed0:	bf00      	nop
 800aed2:	bf00      	nop
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
	...

0800aee0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b08a      	sub	sp, #40	; 0x28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aee8:	f107 0314 	add.w	r3, r7, #20
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	605a      	str	r2, [r3, #4]
 800aef2:	609a      	str	r2, [r3, #8]
 800aef4:	60da      	str	r2, [r3, #12]
 800aef6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af00:	d149      	bne.n	800af96 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af02:	4b27      	ldr	r3, [pc, #156]	; (800afa0 <HAL_PCD_MspInit+0xc0>)
 800af04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af06:	4a26      	ldr	r2, [pc, #152]	; (800afa0 <HAL_PCD_MspInit+0xc0>)
 800af08:	f043 0301 	orr.w	r3, r3, #1
 800af0c:	6313      	str	r3, [r2, #48]	; 0x30
 800af0e:	4b24      	ldr	r3, [pc, #144]	; (800afa0 <HAL_PCD_MspInit+0xc0>)
 800af10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800af1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af20:	2300      	movs	r3, #0
 800af22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af24:	2300      	movs	r3, #0
 800af26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af28:	f107 0314 	add.w	r3, r7, #20
 800af2c:	4619      	mov	r1, r3
 800af2e:	481d      	ldr	r0, [pc, #116]	; (800afa4 <HAL_PCD_MspInit+0xc4>)
 800af30:	f7f9 f950 	bl	80041d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800af34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800af38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af3a:	2302      	movs	r3, #2
 800af3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af3e:	2300      	movs	r3, #0
 800af40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af42:	2303      	movs	r3, #3
 800af44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af46:	230a      	movs	r3, #10
 800af48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af4a:	f107 0314 	add.w	r3, r7, #20
 800af4e:	4619      	mov	r1, r3
 800af50:	4814      	ldr	r0, [pc, #80]	; (800afa4 <HAL_PCD_MspInit+0xc4>)
 800af52:	f7f9 f93f 	bl	80041d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af56:	4b12      	ldr	r3, [pc, #72]	; (800afa0 <HAL_PCD_MspInit+0xc0>)
 800af58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5a:	4a11      	ldr	r2, [pc, #68]	; (800afa0 <HAL_PCD_MspInit+0xc0>)
 800af5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af60:	6353      	str	r3, [r2, #52]	; 0x34
 800af62:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <HAL_PCD_MspInit+0xc0>)
 800af64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <HAL_PCD_MspInit+0xc0>)
 800af70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af72:	4a0b      	ldr	r2, [pc, #44]	; (800afa0 <HAL_PCD_MspInit+0xc0>)
 800af74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af78:	6453      	str	r3, [r2, #68]	; 0x44
 800af7a:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <HAL_PCD_MspInit+0xc0>)
 800af7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af82:	60bb      	str	r3, [r7, #8]
 800af84:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800af86:	2200      	movs	r2, #0
 800af88:	2100      	movs	r1, #0
 800af8a:	2043      	movs	r0, #67	; 0x43
 800af8c:	f7f9 f8eb 	bl	8004166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af90:	2043      	movs	r0, #67	; 0x43
 800af92:	f7f9 f904 	bl	800419e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800af96:	bf00      	nop
 800af98:	3728      	adds	r7, #40	; 0x28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	40023800 	.word	0x40023800
 800afa4:	40020000 	.word	0x40020000

0800afa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afbc:	4619      	mov	r1, r3
 800afbe:	4610      	mov	r0, r2
 800afc0:	f7fe fcc6 	bl	8009950 <USBD_LL_SetupStage>
}
 800afc4:	bf00      	nop
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	460b      	mov	r3, r1
 800afd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800afde:	78fa      	ldrb	r2, [r7, #3]
 800afe0:	6879      	ldr	r1, [r7, #4]
 800afe2:	4613      	mov	r3, r2
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	1a9b      	subs	r3, r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	440b      	add	r3, r1
 800afec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	78fb      	ldrb	r3, [r7, #3]
 800aff4:	4619      	mov	r1, r3
 800aff6:	f7fe fd00 	bl	80099fa <USBD_LL_DataOutStage>
}
 800affa:	bf00      	nop
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b082      	sub	sp, #8
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	460b      	mov	r3, r1
 800b00c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800b014:	78fa      	ldrb	r2, [r7, #3]
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	4613      	mov	r3, r2
 800b01a:	00db      	lsls	r3, r3, #3
 800b01c:	1a9b      	subs	r3, r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	440b      	add	r3, r1
 800b022:	3348      	adds	r3, #72	; 0x48
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	78fb      	ldrb	r3, [r7, #3]
 800b028:	4619      	mov	r1, r3
 800b02a:	f7fe fd49 	bl	8009ac0 <USBD_LL_DataInStage>
}
 800b02e:	bf00      	nop
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b044:	4618      	mov	r0, r3
 800b046:	f7fe fe4d 	bl	8009ce4 <USBD_LL_SOF>
}
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b05a:	2301      	movs	r3, #1
 800b05c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d102      	bne.n	800b06c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]
 800b06a:	e008      	b.n	800b07e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b02      	cmp	r3, #2
 800b072:	d102      	bne.n	800b07a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b074:	2301      	movs	r3, #1
 800b076:	73fb      	strb	r3, [r7, #15]
 800b078:	e001      	b.n	800b07e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b07a:	f7f8 fd52 	bl	8003b22 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b084:	7bfa      	ldrb	r2, [r7, #15]
 800b086:	4611      	mov	r1, r2
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fdf0 	bl	8009c6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b094:	4618      	mov	r0, r3
 800b096:	f7fe fda9 	bl	8009bec <USBD_LL_Reset>
}
 800b09a:	bf00      	nop
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
	...

0800b0a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fe fdeb 	bl	8009c8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	6812      	ldr	r2, [r2, #0]
 800b0c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0ca:	f043 0301 	orr.w	r3, r3, #1
 800b0ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d005      	beq.n	800b0e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <HAL_PCD_SuspendCallback+0x48>)
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	4a03      	ldr	r2, [pc, #12]	; (800b0ec <HAL_PCD_SuspendCallback+0x48>)
 800b0de:	f043 0306 	orr.w	r3, r3, #6
 800b0e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b0e4:	bf00      	nop
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	e000ed00 	.word	0xe000ed00

0800b0f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fe fdda 	bl	8009cb8 <USBD_LL_Resume>
}
 800b104:	bf00      	nop
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b11e:	78fa      	ldrb	r2, [r7, #3]
 800b120:	4611      	mov	r1, r2
 800b122:	4618      	mov	r0, r3
 800b124:	f7fe fe05 	bl	8009d32 <USBD_LL_IsoOUTIncomplete>
}
 800b128:	bf00      	nop
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	460b      	mov	r3, r1
 800b13a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b142:	78fa      	ldrb	r2, [r7, #3]
 800b144:	4611      	mov	r1, r2
 800b146:	4618      	mov	r0, r3
 800b148:	f7fe fde6 	bl	8009d18 <USBD_LL_IsoINIncomplete>
}
 800b14c:	bf00      	nop
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b162:	4618      	mov	r0, r3
 800b164:	f7fe fdf2 	bl	8009d4c <USBD_LL_DevConnected>
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fe fdef 	bl	8009d62 <USBD_LL_DevDisconnected>
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d13c      	bne.n	800b216 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b19c:	4a20      	ldr	r2, [pc, #128]	; (800b220 <USBD_LL_Init+0x94>)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a1e      	ldr	r2, [pc, #120]	; (800b220 <USBD_LL_Init+0x94>)
 800b1a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1ac:	4b1c      	ldr	r3, [pc, #112]	; (800b220 <USBD_LL_Init+0x94>)
 800b1ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b1b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b1b4:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <USBD_LL_Init+0x94>)
 800b1b6:	2206      	movs	r2, #6
 800b1b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b1ba:	4b19      	ldr	r3, [pc, #100]	; (800b220 <USBD_LL_Init+0x94>)
 800b1bc:	2202      	movs	r2, #2
 800b1be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b1c0:	4b17      	ldr	r3, [pc, #92]	; (800b220 <USBD_LL_Init+0x94>)
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b1c6:	4b16      	ldr	r3, [pc, #88]	; (800b220 <USBD_LL_Init+0x94>)
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1cc:	4b14      	ldr	r3, [pc, #80]	; (800b220 <USBD_LL_Init+0x94>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b1d2:	4b13      	ldr	r3, [pc, #76]	; (800b220 <USBD_LL_Init+0x94>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b1d8:	4b11      	ldr	r3, [pc, #68]	; (800b220 <USBD_LL_Init+0x94>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b1de:	4b10      	ldr	r3, [pc, #64]	; (800b220 <USBD_LL_Init+0x94>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b1e4:	4b0e      	ldr	r3, [pc, #56]	; (800b220 <USBD_LL_Init+0x94>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b1ea:	480d      	ldr	r0, [pc, #52]	; (800b220 <USBD_LL_Init+0x94>)
 800b1ec:	f7f9 ff43 	bl	8005076 <HAL_PCD_Init>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b1f6:	f7f8 fc94 	bl	8003b22 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b1fa:	2180      	movs	r1, #128	; 0x80
 800b1fc:	4808      	ldr	r0, [pc, #32]	; (800b220 <USBD_LL_Init+0x94>)
 800b1fe:	f7fb f8c4 	bl	800638a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b202:	2240      	movs	r2, #64	; 0x40
 800b204:	2100      	movs	r1, #0
 800b206:	4806      	ldr	r0, [pc, #24]	; (800b220 <USBD_LL_Init+0x94>)
 800b208:	f7fb f878 	bl	80062fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b20c:	2280      	movs	r2, #128	; 0x80
 800b20e:	2101      	movs	r1, #1
 800b210:	4803      	ldr	r0, [pc, #12]	; (800b220 <USBD_LL_Init+0x94>)
 800b212:	f7fb f873 	bl	80062fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	200025b4 	.word	0x200025b4

0800b224 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fa f83f 	bl	80052be <HAL_PCD_Start>
 800b240:	4603      	mov	r3, r0
 800b242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	4618      	mov	r0, r3
 800b248:	f000 f97e 	bl	800b548 <USBD_Get_USB_Status>
 800b24c:	4603      	mov	r3, r0
 800b24e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b250:	7bbb      	ldrb	r3, [r7, #14]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b084      	sub	sp, #16
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	4608      	mov	r0, r1
 800b264:	4611      	mov	r1, r2
 800b266:	461a      	mov	r2, r3
 800b268:	4603      	mov	r3, r0
 800b26a:	70fb      	strb	r3, [r7, #3]
 800b26c:	460b      	mov	r3, r1
 800b26e:	70bb      	strb	r3, [r7, #2]
 800b270:	4613      	mov	r3, r2
 800b272:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b278:	2300      	movs	r3, #0
 800b27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b282:	78bb      	ldrb	r3, [r7, #2]
 800b284:	883a      	ldrh	r2, [r7, #0]
 800b286:	78f9      	ldrb	r1, [r7, #3]
 800b288:	f7fa fc3f 	bl	8005b0a <HAL_PCD_EP_Open>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	4618      	mov	r0, r3
 800b294:	f000 f958 	bl	800b548 <USBD_Get_USB_Status>
 800b298:	4603      	mov	r3, r0
 800b29a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2c0:	78fa      	ldrb	r2, [r7, #3]
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fa fc88 	bl	8005bda <HAL_PCD_EP_Close>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 f939 	bl	800b548 <USBD_Get_USB_Status>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b2fe:	78fa      	ldrb	r2, [r7, #3]
 800b300:	4611      	mov	r1, r2
 800b302:	4618      	mov	r0, r3
 800b304:	f7fa fd60 	bl	8005dc8 <HAL_PCD_EP_SetStall>
 800b308:	4603      	mov	r3, r0
 800b30a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 f91a 	bl	800b548 <USBD_Get_USB_Status>
 800b314:	4603      	mov	r3, r0
 800b316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b318:	7bbb      	ldrb	r3, [r7, #14]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b084      	sub	sp, #16
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	460b      	mov	r3, r1
 800b32c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b33c:	78fa      	ldrb	r2, [r7, #3]
 800b33e:	4611      	mov	r1, r2
 800b340:	4618      	mov	r0, r3
 800b342:	f7fa fda5 	bl	8005e90 <HAL_PCD_EP_ClrStall>
 800b346:	4603      	mov	r3, r0
 800b348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 f8fb 	bl	800b548 <USBD_Get_USB_Status>
 800b352:	4603      	mov	r3, r0
 800b354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b356:	7bbb      	ldrb	r3, [r7, #14]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b372:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	da0b      	bge.n	800b394 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b37c:	78fb      	ldrb	r3, [r7, #3]
 800b37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b382:	68f9      	ldr	r1, [r7, #12]
 800b384:	4613      	mov	r3, r2
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	1a9b      	subs	r3, r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	440b      	add	r3, r1
 800b38e:	333e      	adds	r3, #62	; 0x3e
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	e00b      	b.n	800b3ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b394:	78fb      	ldrb	r3, [r7, #3]
 800b396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b39a:	68f9      	ldr	r1, [r7, #12]
 800b39c:	4613      	mov	r3, r2
 800b39e:	00db      	lsls	r3, r3, #3
 800b3a0:	1a9b      	subs	r3, r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	440b      	add	r3, r1
 800b3a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3d2:	78fa      	ldrb	r2, [r7, #3]
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7fa fb72 	bl	8005ac0 <HAL_PCD_SetAddress>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f000 f8b0 	bl	800b548 <USBD_Get_USB_Status>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b086      	sub	sp, #24
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	607a      	str	r2, [r7, #4]
 800b400:	603b      	str	r3, [r7, #0]
 800b402:	460b      	mov	r3, r1
 800b404:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b414:	7af9      	ldrb	r1, [r7, #11]
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	f7fa fc8b 	bl	8005d34 <HAL_PCD_EP_Transmit>
 800b41e:	4603      	mov	r3, r0
 800b420:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	4618      	mov	r0, r3
 800b426:	f000 f88f 	bl	800b548 <USBD_Get_USB_Status>
 800b42a:	4603      	mov	r3, r0
 800b42c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b42e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b430:	4618      	mov	r0, r3
 800b432:	3718      	adds	r7, #24
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	607a      	str	r2, [r7, #4]
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	460b      	mov	r3, r1
 800b446:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b448:	2300      	movs	r3, #0
 800b44a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b456:	7af9      	ldrb	r1, [r7, #11]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	f7fa fc07 	bl	8005c6e <HAL_PCD_EP_Receive>
 800b460:	4603      	mov	r3, r0
 800b462:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	4618      	mov	r0, r3
 800b468:	f000 f86e 	bl	800b548 <USBD_Get_USB_Status>
 800b46c:	4603      	mov	r3, r0
 800b46e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b470:	7dbb      	ldrb	r3, [r7, #22]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b082      	sub	sp, #8
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	460b      	mov	r3, r1
 800b484:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b48c:	78fa      	ldrb	r2, [r7, #3]
 800b48e:	4611      	mov	r1, r2
 800b490:	4618      	mov	r0, r3
 800b492:	f7fa fc37 	bl	8005d04 <HAL_PCD_EP_GetRxCount>
 800b496:	4603      	mov	r3, r0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b4ac:	78fb      	ldrb	r3, [r7, #3]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <HAL_PCDEx_LPM_Callback+0x18>
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d01f      	beq.n	800b4f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b4b6:	e03b      	b.n	800b530 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d007      	beq.n	800b4d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b4c0:	f000 f83c 	bl	800b53c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4c4:	4b1c      	ldr	r3, [pc, #112]	; (800b538 <HAL_PCDEx_LPM_Callback+0x98>)
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	4a1b      	ldr	r2, [pc, #108]	; (800b538 <HAL_PCDEx_LPM_Callback+0x98>)
 800b4ca:	f023 0306 	bic.w	r3, r3, #6
 800b4ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	6812      	ldr	r2, [r2, #0]
 800b4de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b4e2:	f023 0301 	bic.w	r3, r3, #1
 800b4e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fe fbe2 	bl	8009cb8 <USBD_LL_Resume>
    break;
 800b4f4:	e01c      	b.n	800b530 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	6812      	ldr	r2, [r2, #0]
 800b504:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b508:	f043 0301 	orr.w	r3, r3, #1
 800b50c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b514:	4618      	mov	r0, r3
 800b516:	f7fe fbba 	bl	8009c8e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d005      	beq.n	800b52e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b522:	4b05      	ldr	r3, [pc, #20]	; (800b538 <HAL_PCDEx_LPM_Callback+0x98>)
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	4a04      	ldr	r2, [pc, #16]	; (800b538 <HAL_PCDEx_LPM_Callback+0x98>)
 800b528:	f043 0306 	orr.w	r3, r3, #6
 800b52c:	6113      	str	r3, [r2, #16]
    break;
 800b52e:	bf00      	nop
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	e000ed00 	.word	0xe000ed00

0800b53c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b540:	f7f6 ff0e 	bl	8002360 <SystemClock_Config>
}
 800b544:	bf00      	nop
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d817      	bhi.n	800b58c <USBD_Get_USB_Status+0x44>
 800b55c:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <USBD_Get_USB_Status+0x1c>)
 800b55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b562:	bf00      	nop
 800b564:	0800b575 	.word	0x0800b575
 800b568:	0800b57b 	.word	0x0800b57b
 800b56c:	0800b581 	.word	0x0800b581
 800b570:	0800b587 	.word	0x0800b587
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]
    break;
 800b578:	e00b      	b.n	800b592 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b57a:	2303      	movs	r3, #3
 800b57c:	73fb      	strb	r3, [r7, #15]
    break;
 800b57e:	e008      	b.n	800b592 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b580:	2301      	movs	r3, #1
 800b582:	73fb      	strb	r3, [r7, #15]
    break;
 800b584:	e005      	b.n	800b592 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b586:	2303      	movs	r3, #3
 800b588:	73fb      	strb	r3, [r7, #15]
    break;
 800b58a:	e002      	b.n	800b592 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b58c:	2303      	movs	r3, #3
 800b58e:	73fb      	strb	r3, [r7, #15]
    break;
 800b590:	bf00      	nop
  }
  return usb_status;
 800b592:	7bfb      	ldrb	r3, [r7, #15]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <__errno>:
 800b5a0:	4b01      	ldr	r3, [pc, #4]	; (800b5a8 <__errno+0x8>)
 800b5a2:	6818      	ldr	r0, [r3, #0]
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	20000424 	.word	0x20000424

0800b5ac <__libc_init_array>:
 800b5ac:	b570      	push	{r4, r5, r6, lr}
 800b5ae:	4d0d      	ldr	r5, [pc, #52]	; (800b5e4 <__libc_init_array+0x38>)
 800b5b0:	4c0d      	ldr	r4, [pc, #52]	; (800b5e8 <__libc_init_array+0x3c>)
 800b5b2:	1b64      	subs	r4, r4, r5
 800b5b4:	10a4      	asrs	r4, r4, #2
 800b5b6:	2600      	movs	r6, #0
 800b5b8:	42a6      	cmp	r6, r4
 800b5ba:	d109      	bne.n	800b5d0 <__libc_init_array+0x24>
 800b5bc:	4d0b      	ldr	r5, [pc, #44]	; (800b5ec <__libc_init_array+0x40>)
 800b5be:	4c0c      	ldr	r4, [pc, #48]	; (800b5f0 <__libc_init_array+0x44>)
 800b5c0:	f005 f9fc 	bl	80109bc <_init>
 800b5c4:	1b64      	subs	r4, r4, r5
 800b5c6:	10a4      	asrs	r4, r4, #2
 800b5c8:	2600      	movs	r6, #0
 800b5ca:	42a6      	cmp	r6, r4
 800b5cc:	d105      	bne.n	800b5da <__libc_init_array+0x2e>
 800b5ce:	bd70      	pop	{r4, r5, r6, pc}
 800b5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d4:	4798      	blx	r3
 800b5d6:	3601      	adds	r6, #1
 800b5d8:	e7ee      	b.n	800b5b8 <__libc_init_array+0xc>
 800b5da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5de:	4798      	blx	r3
 800b5e0:	3601      	adds	r6, #1
 800b5e2:	e7f2      	b.n	800b5ca <__libc_init_array+0x1e>
 800b5e4:	08010fa8 	.word	0x08010fa8
 800b5e8:	08010fa8 	.word	0x08010fa8
 800b5ec:	08010fa8 	.word	0x08010fa8
 800b5f0:	08010fac 	.word	0x08010fac

0800b5f4 <malloc>:
 800b5f4:	4b02      	ldr	r3, [pc, #8]	; (800b600 <malloc+0xc>)
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	f000 b863 	b.w	800b6c4 <_malloc_r>
 800b5fe:	bf00      	nop
 800b600:	20000424 	.word	0x20000424

0800b604 <free>:
 800b604:	4b02      	ldr	r3, [pc, #8]	; (800b610 <free+0xc>)
 800b606:	4601      	mov	r1, r0
 800b608:	6818      	ldr	r0, [r3, #0]
 800b60a:	f000 b80b 	b.w	800b624 <_free_r>
 800b60e:	bf00      	nop
 800b610:	20000424 	.word	0x20000424

0800b614 <memset>:
 800b614:	4402      	add	r2, r0
 800b616:	4603      	mov	r3, r0
 800b618:	4293      	cmp	r3, r2
 800b61a:	d100      	bne.n	800b61e <memset+0xa>
 800b61c:	4770      	bx	lr
 800b61e:	f803 1b01 	strb.w	r1, [r3], #1
 800b622:	e7f9      	b.n	800b618 <memset+0x4>

0800b624 <_free_r>:
 800b624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b626:	2900      	cmp	r1, #0
 800b628:	d048      	beq.n	800b6bc <_free_r+0x98>
 800b62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62e:	9001      	str	r0, [sp, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	f1a1 0404 	sub.w	r4, r1, #4
 800b636:	bfb8      	it	lt
 800b638:	18e4      	addlt	r4, r4, r3
 800b63a:	f003 f80d 	bl	800e658 <__malloc_lock>
 800b63e:	4a20      	ldr	r2, [pc, #128]	; (800b6c0 <_free_r+0x9c>)
 800b640:	9801      	ldr	r0, [sp, #4]
 800b642:	6813      	ldr	r3, [r2, #0]
 800b644:	4615      	mov	r5, r2
 800b646:	b933      	cbnz	r3, 800b656 <_free_r+0x32>
 800b648:	6063      	str	r3, [r4, #4]
 800b64a:	6014      	str	r4, [r2, #0]
 800b64c:	b003      	add	sp, #12
 800b64e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b652:	f003 b807 	b.w	800e664 <__malloc_unlock>
 800b656:	42a3      	cmp	r3, r4
 800b658:	d90b      	bls.n	800b672 <_free_r+0x4e>
 800b65a:	6821      	ldr	r1, [r4, #0]
 800b65c:	1862      	adds	r2, r4, r1
 800b65e:	4293      	cmp	r3, r2
 800b660:	bf04      	itt	eq
 800b662:	681a      	ldreq	r2, [r3, #0]
 800b664:	685b      	ldreq	r3, [r3, #4]
 800b666:	6063      	str	r3, [r4, #4]
 800b668:	bf04      	itt	eq
 800b66a:	1852      	addeq	r2, r2, r1
 800b66c:	6022      	streq	r2, [r4, #0]
 800b66e:	602c      	str	r4, [r5, #0]
 800b670:	e7ec      	b.n	800b64c <_free_r+0x28>
 800b672:	461a      	mov	r2, r3
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	b10b      	cbz	r3, 800b67c <_free_r+0x58>
 800b678:	42a3      	cmp	r3, r4
 800b67a:	d9fa      	bls.n	800b672 <_free_r+0x4e>
 800b67c:	6811      	ldr	r1, [r2, #0]
 800b67e:	1855      	adds	r5, r2, r1
 800b680:	42a5      	cmp	r5, r4
 800b682:	d10b      	bne.n	800b69c <_free_r+0x78>
 800b684:	6824      	ldr	r4, [r4, #0]
 800b686:	4421      	add	r1, r4
 800b688:	1854      	adds	r4, r2, r1
 800b68a:	42a3      	cmp	r3, r4
 800b68c:	6011      	str	r1, [r2, #0]
 800b68e:	d1dd      	bne.n	800b64c <_free_r+0x28>
 800b690:	681c      	ldr	r4, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	6053      	str	r3, [r2, #4]
 800b696:	4421      	add	r1, r4
 800b698:	6011      	str	r1, [r2, #0]
 800b69a:	e7d7      	b.n	800b64c <_free_r+0x28>
 800b69c:	d902      	bls.n	800b6a4 <_free_r+0x80>
 800b69e:	230c      	movs	r3, #12
 800b6a0:	6003      	str	r3, [r0, #0]
 800b6a2:	e7d3      	b.n	800b64c <_free_r+0x28>
 800b6a4:	6825      	ldr	r5, [r4, #0]
 800b6a6:	1961      	adds	r1, r4, r5
 800b6a8:	428b      	cmp	r3, r1
 800b6aa:	bf04      	itt	eq
 800b6ac:	6819      	ldreq	r1, [r3, #0]
 800b6ae:	685b      	ldreq	r3, [r3, #4]
 800b6b0:	6063      	str	r3, [r4, #4]
 800b6b2:	bf04      	itt	eq
 800b6b4:	1949      	addeq	r1, r1, r5
 800b6b6:	6021      	streq	r1, [r4, #0]
 800b6b8:	6054      	str	r4, [r2, #4]
 800b6ba:	e7c7      	b.n	800b64c <_free_r+0x28>
 800b6bc:	b003      	add	sp, #12
 800b6be:	bd30      	pop	{r4, r5, pc}
 800b6c0:	20000674 	.word	0x20000674

0800b6c4 <_malloc_r>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	1ccd      	adds	r5, r1, #3
 800b6c8:	f025 0503 	bic.w	r5, r5, #3
 800b6cc:	3508      	adds	r5, #8
 800b6ce:	2d0c      	cmp	r5, #12
 800b6d0:	bf38      	it	cc
 800b6d2:	250c      	movcc	r5, #12
 800b6d4:	2d00      	cmp	r5, #0
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	db01      	blt.n	800b6de <_malloc_r+0x1a>
 800b6da:	42a9      	cmp	r1, r5
 800b6dc:	d903      	bls.n	800b6e6 <_malloc_r+0x22>
 800b6de:	230c      	movs	r3, #12
 800b6e0:	6033      	str	r3, [r6, #0]
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6e6:	f002 ffb7 	bl	800e658 <__malloc_lock>
 800b6ea:	4921      	ldr	r1, [pc, #132]	; (800b770 <_malloc_r+0xac>)
 800b6ec:	680a      	ldr	r2, [r1, #0]
 800b6ee:	4614      	mov	r4, r2
 800b6f0:	b99c      	cbnz	r4, 800b71a <_malloc_r+0x56>
 800b6f2:	4f20      	ldr	r7, [pc, #128]	; (800b774 <_malloc_r+0xb0>)
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	b923      	cbnz	r3, 800b702 <_malloc_r+0x3e>
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f000 feb6 	bl	800c46c <_sbrk_r>
 800b700:	6038      	str	r0, [r7, #0]
 800b702:	4629      	mov	r1, r5
 800b704:	4630      	mov	r0, r6
 800b706:	f000 feb1 	bl	800c46c <_sbrk_r>
 800b70a:	1c43      	adds	r3, r0, #1
 800b70c:	d123      	bne.n	800b756 <_malloc_r+0x92>
 800b70e:	230c      	movs	r3, #12
 800b710:	6033      	str	r3, [r6, #0]
 800b712:	4630      	mov	r0, r6
 800b714:	f002 ffa6 	bl	800e664 <__malloc_unlock>
 800b718:	e7e3      	b.n	800b6e2 <_malloc_r+0x1e>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	1b5b      	subs	r3, r3, r5
 800b71e:	d417      	bmi.n	800b750 <_malloc_r+0x8c>
 800b720:	2b0b      	cmp	r3, #11
 800b722:	d903      	bls.n	800b72c <_malloc_r+0x68>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	441c      	add	r4, r3
 800b728:	6025      	str	r5, [r4, #0]
 800b72a:	e004      	b.n	800b736 <_malloc_r+0x72>
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	42a2      	cmp	r2, r4
 800b730:	bf0c      	ite	eq
 800b732:	600b      	streq	r3, [r1, #0]
 800b734:	6053      	strne	r3, [r2, #4]
 800b736:	4630      	mov	r0, r6
 800b738:	f002 ff94 	bl	800e664 <__malloc_unlock>
 800b73c:	f104 000b 	add.w	r0, r4, #11
 800b740:	1d23      	adds	r3, r4, #4
 800b742:	f020 0007 	bic.w	r0, r0, #7
 800b746:	1ac2      	subs	r2, r0, r3
 800b748:	d0cc      	beq.n	800b6e4 <_malloc_r+0x20>
 800b74a:	1a1b      	subs	r3, r3, r0
 800b74c:	50a3      	str	r3, [r4, r2]
 800b74e:	e7c9      	b.n	800b6e4 <_malloc_r+0x20>
 800b750:	4622      	mov	r2, r4
 800b752:	6864      	ldr	r4, [r4, #4]
 800b754:	e7cc      	b.n	800b6f0 <_malloc_r+0x2c>
 800b756:	1cc4      	adds	r4, r0, #3
 800b758:	f024 0403 	bic.w	r4, r4, #3
 800b75c:	42a0      	cmp	r0, r4
 800b75e:	d0e3      	beq.n	800b728 <_malloc_r+0x64>
 800b760:	1a21      	subs	r1, r4, r0
 800b762:	4630      	mov	r0, r6
 800b764:	f000 fe82 	bl	800c46c <_sbrk_r>
 800b768:	3001      	adds	r0, #1
 800b76a:	d1dd      	bne.n	800b728 <_malloc_r+0x64>
 800b76c:	e7cf      	b.n	800b70e <_malloc_r+0x4a>
 800b76e:	bf00      	nop
 800b770:	20000674 	.word	0x20000674
 800b774:	20000678 	.word	0x20000678

0800b778 <__cvt>:
 800b778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b77c:	ec55 4b10 	vmov	r4, r5, d0
 800b780:	2d00      	cmp	r5, #0
 800b782:	460e      	mov	r6, r1
 800b784:	4619      	mov	r1, r3
 800b786:	462b      	mov	r3, r5
 800b788:	bfbb      	ittet	lt
 800b78a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b78e:	461d      	movlt	r5, r3
 800b790:	2300      	movge	r3, #0
 800b792:	232d      	movlt	r3, #45	; 0x2d
 800b794:	700b      	strb	r3, [r1, #0]
 800b796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b798:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b79c:	4691      	mov	r9, r2
 800b79e:	f023 0820 	bic.w	r8, r3, #32
 800b7a2:	bfbc      	itt	lt
 800b7a4:	4622      	movlt	r2, r4
 800b7a6:	4614      	movlt	r4, r2
 800b7a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7ac:	d005      	beq.n	800b7ba <__cvt+0x42>
 800b7ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b7b2:	d100      	bne.n	800b7b6 <__cvt+0x3e>
 800b7b4:	3601      	adds	r6, #1
 800b7b6:	2102      	movs	r1, #2
 800b7b8:	e000      	b.n	800b7bc <__cvt+0x44>
 800b7ba:	2103      	movs	r1, #3
 800b7bc:	ab03      	add	r3, sp, #12
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	ab02      	add	r3, sp, #8
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	ec45 4b10 	vmov	d0, r4, r5
 800b7c8:	4653      	mov	r3, sl
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	f001 fdc4 	bl	800d358 <_dtoa_r>
 800b7d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	d102      	bne.n	800b7de <__cvt+0x66>
 800b7d8:	f019 0f01 	tst.w	r9, #1
 800b7dc:	d022      	beq.n	800b824 <__cvt+0xac>
 800b7de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7e2:	eb07 0906 	add.w	r9, r7, r6
 800b7e6:	d110      	bne.n	800b80a <__cvt+0x92>
 800b7e8:	783b      	ldrb	r3, [r7, #0]
 800b7ea:	2b30      	cmp	r3, #48	; 0x30
 800b7ec:	d10a      	bne.n	800b804 <__cvt+0x8c>
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	f7f5 f987 	bl	8000b08 <__aeabi_dcmpeq>
 800b7fa:	b918      	cbnz	r0, 800b804 <__cvt+0x8c>
 800b7fc:	f1c6 0601 	rsb	r6, r6, #1
 800b800:	f8ca 6000 	str.w	r6, [sl]
 800b804:	f8da 3000 	ldr.w	r3, [sl]
 800b808:	4499      	add	r9, r3
 800b80a:	2200      	movs	r2, #0
 800b80c:	2300      	movs	r3, #0
 800b80e:	4620      	mov	r0, r4
 800b810:	4629      	mov	r1, r5
 800b812:	f7f5 f979 	bl	8000b08 <__aeabi_dcmpeq>
 800b816:	b108      	cbz	r0, 800b81c <__cvt+0xa4>
 800b818:	f8cd 900c 	str.w	r9, [sp, #12]
 800b81c:	2230      	movs	r2, #48	; 0x30
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	454b      	cmp	r3, r9
 800b822:	d307      	bcc.n	800b834 <__cvt+0xbc>
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b828:	1bdb      	subs	r3, r3, r7
 800b82a:	4638      	mov	r0, r7
 800b82c:	6013      	str	r3, [r2, #0]
 800b82e:	b004      	add	sp, #16
 800b830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b834:	1c59      	adds	r1, r3, #1
 800b836:	9103      	str	r1, [sp, #12]
 800b838:	701a      	strb	r2, [r3, #0]
 800b83a:	e7f0      	b.n	800b81e <__cvt+0xa6>

0800b83c <__exponent>:
 800b83c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b83e:	4603      	mov	r3, r0
 800b840:	2900      	cmp	r1, #0
 800b842:	bfb8      	it	lt
 800b844:	4249      	neglt	r1, r1
 800b846:	f803 2b02 	strb.w	r2, [r3], #2
 800b84a:	bfb4      	ite	lt
 800b84c:	222d      	movlt	r2, #45	; 0x2d
 800b84e:	222b      	movge	r2, #43	; 0x2b
 800b850:	2909      	cmp	r1, #9
 800b852:	7042      	strb	r2, [r0, #1]
 800b854:	dd2a      	ble.n	800b8ac <__exponent+0x70>
 800b856:	f10d 0407 	add.w	r4, sp, #7
 800b85a:	46a4      	mov	ip, r4
 800b85c:	270a      	movs	r7, #10
 800b85e:	46a6      	mov	lr, r4
 800b860:	460a      	mov	r2, r1
 800b862:	fb91 f6f7 	sdiv	r6, r1, r7
 800b866:	fb07 1516 	mls	r5, r7, r6, r1
 800b86a:	3530      	adds	r5, #48	; 0x30
 800b86c:	2a63      	cmp	r2, #99	; 0x63
 800b86e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b872:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b876:	4631      	mov	r1, r6
 800b878:	dcf1      	bgt.n	800b85e <__exponent+0x22>
 800b87a:	3130      	adds	r1, #48	; 0x30
 800b87c:	f1ae 0502 	sub.w	r5, lr, #2
 800b880:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b884:	1c44      	adds	r4, r0, #1
 800b886:	4629      	mov	r1, r5
 800b888:	4561      	cmp	r1, ip
 800b88a:	d30a      	bcc.n	800b8a2 <__exponent+0x66>
 800b88c:	f10d 0209 	add.w	r2, sp, #9
 800b890:	eba2 020e 	sub.w	r2, r2, lr
 800b894:	4565      	cmp	r5, ip
 800b896:	bf88      	it	hi
 800b898:	2200      	movhi	r2, #0
 800b89a:	4413      	add	r3, r2
 800b89c:	1a18      	subs	r0, r3, r0
 800b89e:	b003      	add	sp, #12
 800b8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b8aa:	e7ed      	b.n	800b888 <__exponent+0x4c>
 800b8ac:	2330      	movs	r3, #48	; 0x30
 800b8ae:	3130      	adds	r1, #48	; 0x30
 800b8b0:	7083      	strb	r3, [r0, #2]
 800b8b2:	70c1      	strb	r1, [r0, #3]
 800b8b4:	1d03      	adds	r3, r0, #4
 800b8b6:	e7f1      	b.n	800b89c <__exponent+0x60>

0800b8b8 <_printf_float>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	ed2d 8b02 	vpush	{d8}
 800b8c0:	b08d      	sub	sp, #52	; 0x34
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8c8:	4616      	mov	r6, r2
 800b8ca:	461f      	mov	r7, r3
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	f002 fe9f 	bl	800e610 <_localeconv_r>
 800b8d2:	f8d0 a000 	ldr.w	sl, [r0]
 800b8d6:	4650      	mov	r0, sl
 800b8d8:	f7f4 fc9a 	bl	8000210 <strlen>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	930a      	str	r3, [sp, #40]	; 0x28
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	9305      	str	r3, [sp, #20]
 800b8e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b8e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b8ec:	3307      	adds	r3, #7
 800b8ee:	f023 0307 	bic.w	r3, r3, #7
 800b8f2:	f103 0208 	add.w	r2, r3, #8
 800b8f6:	f8c8 2000 	str.w	r2, [r8]
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b902:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b906:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b90a:	9307      	str	r3, [sp, #28]
 800b90c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b910:	ee08 0a10 	vmov	s16, r0
 800b914:	4b9f      	ldr	r3, [pc, #636]	; (800bb94 <_printf_float+0x2dc>)
 800b916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b91a:	f04f 32ff 	mov.w	r2, #4294967295
 800b91e:	f7f5 f925 	bl	8000b6c <__aeabi_dcmpun>
 800b922:	bb88      	cbnz	r0, 800b988 <_printf_float+0xd0>
 800b924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b928:	4b9a      	ldr	r3, [pc, #616]	; (800bb94 <_printf_float+0x2dc>)
 800b92a:	f04f 32ff 	mov.w	r2, #4294967295
 800b92e:	f7f5 f8ff 	bl	8000b30 <__aeabi_dcmple>
 800b932:	bb48      	cbnz	r0, 800b988 <_printf_float+0xd0>
 800b934:	2200      	movs	r2, #0
 800b936:	2300      	movs	r3, #0
 800b938:	4640      	mov	r0, r8
 800b93a:	4649      	mov	r1, r9
 800b93c:	f7f5 f8ee 	bl	8000b1c <__aeabi_dcmplt>
 800b940:	b110      	cbz	r0, 800b948 <_printf_float+0x90>
 800b942:	232d      	movs	r3, #45	; 0x2d
 800b944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b948:	4b93      	ldr	r3, [pc, #588]	; (800bb98 <_printf_float+0x2e0>)
 800b94a:	4894      	ldr	r0, [pc, #592]	; (800bb9c <_printf_float+0x2e4>)
 800b94c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b950:	bf94      	ite	ls
 800b952:	4698      	movls	r8, r3
 800b954:	4680      	movhi	r8, r0
 800b956:	2303      	movs	r3, #3
 800b958:	6123      	str	r3, [r4, #16]
 800b95a:	9b05      	ldr	r3, [sp, #20]
 800b95c:	f023 0204 	bic.w	r2, r3, #4
 800b960:	6022      	str	r2, [r4, #0]
 800b962:	f04f 0900 	mov.w	r9, #0
 800b966:	9700      	str	r7, [sp, #0]
 800b968:	4633      	mov	r3, r6
 800b96a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b96c:	4621      	mov	r1, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 f9d8 	bl	800bd24 <_printf_common>
 800b974:	3001      	adds	r0, #1
 800b976:	f040 8090 	bne.w	800ba9a <_printf_float+0x1e2>
 800b97a:	f04f 30ff 	mov.w	r0, #4294967295
 800b97e:	b00d      	add	sp, #52	; 0x34
 800b980:	ecbd 8b02 	vpop	{d8}
 800b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b988:	4642      	mov	r2, r8
 800b98a:	464b      	mov	r3, r9
 800b98c:	4640      	mov	r0, r8
 800b98e:	4649      	mov	r1, r9
 800b990:	f7f5 f8ec 	bl	8000b6c <__aeabi_dcmpun>
 800b994:	b140      	cbz	r0, 800b9a8 <_printf_float+0xf0>
 800b996:	464b      	mov	r3, r9
 800b998:	2b00      	cmp	r3, #0
 800b99a:	bfbc      	itt	lt
 800b99c:	232d      	movlt	r3, #45	; 0x2d
 800b99e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9a2:	487f      	ldr	r0, [pc, #508]	; (800bba0 <_printf_float+0x2e8>)
 800b9a4:	4b7f      	ldr	r3, [pc, #508]	; (800bba4 <_printf_float+0x2ec>)
 800b9a6:	e7d1      	b.n	800b94c <_printf_float+0x94>
 800b9a8:	6863      	ldr	r3, [r4, #4]
 800b9aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b9ae:	9206      	str	r2, [sp, #24]
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	d13f      	bne.n	800ba34 <_printf_float+0x17c>
 800b9b4:	2306      	movs	r3, #6
 800b9b6:	6063      	str	r3, [r4, #4]
 800b9b8:	9b05      	ldr	r3, [sp, #20]
 800b9ba:	6861      	ldr	r1, [r4, #4]
 800b9bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9303      	str	r3, [sp, #12]
 800b9c4:	ab0a      	add	r3, sp, #40	; 0x28
 800b9c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9ca:	ab09      	add	r3, sp, #36	; 0x24
 800b9cc:	ec49 8b10 	vmov	d0, r8, r9
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	6022      	str	r2, [r4, #0]
 800b9d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f7ff fecd 	bl	800b778 <__cvt>
 800b9de:	9b06      	ldr	r3, [sp, #24]
 800b9e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9e2:	2b47      	cmp	r3, #71	; 0x47
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	d108      	bne.n	800b9fa <_printf_float+0x142>
 800b9e8:	1cc8      	adds	r0, r1, #3
 800b9ea:	db02      	blt.n	800b9f2 <_printf_float+0x13a>
 800b9ec:	6863      	ldr	r3, [r4, #4]
 800b9ee:	4299      	cmp	r1, r3
 800b9f0:	dd41      	ble.n	800ba76 <_printf_float+0x1be>
 800b9f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b9f6:	fa5f fb8b 	uxtb.w	fp, fp
 800b9fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9fe:	d820      	bhi.n	800ba42 <_printf_float+0x18a>
 800ba00:	3901      	subs	r1, #1
 800ba02:	465a      	mov	r2, fp
 800ba04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba08:	9109      	str	r1, [sp, #36]	; 0x24
 800ba0a:	f7ff ff17 	bl	800b83c <__exponent>
 800ba0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba10:	1813      	adds	r3, r2, r0
 800ba12:	2a01      	cmp	r2, #1
 800ba14:	4681      	mov	r9, r0
 800ba16:	6123      	str	r3, [r4, #16]
 800ba18:	dc02      	bgt.n	800ba20 <_printf_float+0x168>
 800ba1a:	6822      	ldr	r2, [r4, #0]
 800ba1c:	07d2      	lsls	r2, r2, #31
 800ba1e:	d501      	bpl.n	800ba24 <_printf_float+0x16c>
 800ba20:	3301      	adds	r3, #1
 800ba22:	6123      	str	r3, [r4, #16]
 800ba24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d09c      	beq.n	800b966 <_printf_float+0xae>
 800ba2c:	232d      	movs	r3, #45	; 0x2d
 800ba2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba32:	e798      	b.n	800b966 <_printf_float+0xae>
 800ba34:	9a06      	ldr	r2, [sp, #24]
 800ba36:	2a47      	cmp	r2, #71	; 0x47
 800ba38:	d1be      	bne.n	800b9b8 <_printf_float+0x100>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1bc      	bne.n	800b9b8 <_printf_float+0x100>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e7b9      	b.n	800b9b6 <_printf_float+0xfe>
 800ba42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba46:	d118      	bne.n	800ba7a <_printf_float+0x1c2>
 800ba48:	2900      	cmp	r1, #0
 800ba4a:	6863      	ldr	r3, [r4, #4]
 800ba4c:	dd0b      	ble.n	800ba66 <_printf_float+0x1ae>
 800ba4e:	6121      	str	r1, [r4, #16]
 800ba50:	b913      	cbnz	r3, 800ba58 <_printf_float+0x1a0>
 800ba52:	6822      	ldr	r2, [r4, #0]
 800ba54:	07d0      	lsls	r0, r2, #31
 800ba56:	d502      	bpl.n	800ba5e <_printf_float+0x1a6>
 800ba58:	3301      	adds	r3, #1
 800ba5a:	440b      	add	r3, r1
 800ba5c:	6123      	str	r3, [r4, #16]
 800ba5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba60:	f04f 0900 	mov.w	r9, #0
 800ba64:	e7de      	b.n	800ba24 <_printf_float+0x16c>
 800ba66:	b913      	cbnz	r3, 800ba6e <_printf_float+0x1b6>
 800ba68:	6822      	ldr	r2, [r4, #0]
 800ba6a:	07d2      	lsls	r2, r2, #31
 800ba6c:	d501      	bpl.n	800ba72 <_printf_float+0x1ba>
 800ba6e:	3302      	adds	r3, #2
 800ba70:	e7f4      	b.n	800ba5c <_printf_float+0x1a4>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e7f2      	b.n	800ba5c <_printf_float+0x1a4>
 800ba76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba7c:	4299      	cmp	r1, r3
 800ba7e:	db05      	blt.n	800ba8c <_printf_float+0x1d4>
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	6121      	str	r1, [r4, #16]
 800ba84:	07d8      	lsls	r0, r3, #31
 800ba86:	d5ea      	bpl.n	800ba5e <_printf_float+0x1a6>
 800ba88:	1c4b      	adds	r3, r1, #1
 800ba8a:	e7e7      	b.n	800ba5c <_printf_float+0x1a4>
 800ba8c:	2900      	cmp	r1, #0
 800ba8e:	bfd4      	ite	le
 800ba90:	f1c1 0202 	rsble	r2, r1, #2
 800ba94:	2201      	movgt	r2, #1
 800ba96:	4413      	add	r3, r2
 800ba98:	e7e0      	b.n	800ba5c <_printf_float+0x1a4>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	055a      	lsls	r2, r3, #21
 800ba9e:	d407      	bmi.n	800bab0 <_printf_float+0x1f8>
 800baa0:	6923      	ldr	r3, [r4, #16]
 800baa2:	4642      	mov	r2, r8
 800baa4:	4631      	mov	r1, r6
 800baa6:	4628      	mov	r0, r5
 800baa8:	47b8      	blx	r7
 800baaa:	3001      	adds	r0, #1
 800baac:	d12c      	bne.n	800bb08 <_printf_float+0x250>
 800baae:	e764      	b.n	800b97a <_printf_float+0xc2>
 800bab0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bab4:	f240 80e0 	bls.w	800bc78 <_printf_float+0x3c0>
 800bab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800babc:	2200      	movs	r2, #0
 800babe:	2300      	movs	r3, #0
 800bac0:	f7f5 f822 	bl	8000b08 <__aeabi_dcmpeq>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	d034      	beq.n	800bb32 <_printf_float+0x27a>
 800bac8:	4a37      	ldr	r2, [pc, #220]	; (800bba8 <_printf_float+0x2f0>)
 800baca:	2301      	movs	r3, #1
 800bacc:	4631      	mov	r1, r6
 800bace:	4628      	mov	r0, r5
 800bad0:	47b8      	blx	r7
 800bad2:	3001      	adds	r0, #1
 800bad4:	f43f af51 	beq.w	800b97a <_printf_float+0xc2>
 800bad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800badc:	429a      	cmp	r2, r3
 800bade:	db02      	blt.n	800bae6 <_printf_float+0x22e>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	07d8      	lsls	r0, r3, #31
 800bae4:	d510      	bpl.n	800bb08 <_printf_float+0x250>
 800bae6:	ee18 3a10 	vmov	r3, s16
 800baea:	4652      	mov	r2, sl
 800baec:	4631      	mov	r1, r6
 800baee:	4628      	mov	r0, r5
 800baf0:	47b8      	blx	r7
 800baf2:	3001      	adds	r0, #1
 800baf4:	f43f af41 	beq.w	800b97a <_printf_float+0xc2>
 800baf8:	f04f 0800 	mov.w	r8, #0
 800bafc:	f104 091a 	add.w	r9, r4, #26
 800bb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb02:	3b01      	subs	r3, #1
 800bb04:	4543      	cmp	r3, r8
 800bb06:	dc09      	bgt.n	800bb1c <_printf_float+0x264>
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	079b      	lsls	r3, r3, #30
 800bb0c:	f100 8105 	bmi.w	800bd1a <_printf_float+0x462>
 800bb10:	68e0      	ldr	r0, [r4, #12]
 800bb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb14:	4298      	cmp	r0, r3
 800bb16:	bfb8      	it	lt
 800bb18:	4618      	movlt	r0, r3
 800bb1a:	e730      	b.n	800b97e <_printf_float+0xc6>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	464a      	mov	r2, r9
 800bb20:	4631      	mov	r1, r6
 800bb22:	4628      	mov	r0, r5
 800bb24:	47b8      	blx	r7
 800bb26:	3001      	adds	r0, #1
 800bb28:	f43f af27 	beq.w	800b97a <_printf_float+0xc2>
 800bb2c:	f108 0801 	add.w	r8, r8, #1
 800bb30:	e7e6      	b.n	800bb00 <_printf_float+0x248>
 800bb32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dc39      	bgt.n	800bbac <_printf_float+0x2f4>
 800bb38:	4a1b      	ldr	r2, [pc, #108]	; (800bba8 <_printf_float+0x2f0>)
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	4631      	mov	r1, r6
 800bb3e:	4628      	mov	r0, r5
 800bb40:	47b8      	blx	r7
 800bb42:	3001      	adds	r0, #1
 800bb44:	f43f af19 	beq.w	800b97a <_printf_float+0xc2>
 800bb48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	d102      	bne.n	800bb56 <_printf_float+0x29e>
 800bb50:	6823      	ldr	r3, [r4, #0]
 800bb52:	07d9      	lsls	r1, r3, #31
 800bb54:	d5d8      	bpl.n	800bb08 <_printf_float+0x250>
 800bb56:	ee18 3a10 	vmov	r3, s16
 800bb5a:	4652      	mov	r2, sl
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4628      	mov	r0, r5
 800bb60:	47b8      	blx	r7
 800bb62:	3001      	adds	r0, #1
 800bb64:	f43f af09 	beq.w	800b97a <_printf_float+0xc2>
 800bb68:	f04f 0900 	mov.w	r9, #0
 800bb6c:	f104 0a1a 	add.w	sl, r4, #26
 800bb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb72:	425b      	negs	r3, r3
 800bb74:	454b      	cmp	r3, r9
 800bb76:	dc01      	bgt.n	800bb7c <_printf_float+0x2c4>
 800bb78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb7a:	e792      	b.n	800baa2 <_printf_float+0x1ea>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	4652      	mov	r2, sl
 800bb80:	4631      	mov	r1, r6
 800bb82:	4628      	mov	r0, r5
 800bb84:	47b8      	blx	r7
 800bb86:	3001      	adds	r0, #1
 800bb88:	f43f aef7 	beq.w	800b97a <_printf_float+0xc2>
 800bb8c:	f109 0901 	add.w	r9, r9, #1
 800bb90:	e7ee      	b.n	800bb70 <_printf_float+0x2b8>
 800bb92:	bf00      	nop
 800bb94:	7fefffff 	.word	0x7fefffff
 800bb98:	08010a7c 	.word	0x08010a7c
 800bb9c:	08010a80 	.word	0x08010a80
 800bba0:	08010a88 	.word	0x08010a88
 800bba4:	08010a84 	.word	0x08010a84
 800bba8:	08010a8c 	.word	0x08010a8c
 800bbac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	bfa8      	it	ge
 800bbb4:	461a      	movge	r2, r3
 800bbb6:	2a00      	cmp	r2, #0
 800bbb8:	4691      	mov	r9, r2
 800bbba:	dc37      	bgt.n	800bc2c <_printf_float+0x374>
 800bbbc:	f04f 0b00 	mov.w	fp, #0
 800bbc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbc4:	f104 021a 	add.w	r2, r4, #26
 800bbc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbca:	9305      	str	r3, [sp, #20]
 800bbcc:	eba3 0309 	sub.w	r3, r3, r9
 800bbd0:	455b      	cmp	r3, fp
 800bbd2:	dc33      	bgt.n	800bc3c <_printf_float+0x384>
 800bbd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	db3b      	blt.n	800bc54 <_printf_float+0x39c>
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	07da      	lsls	r2, r3, #31
 800bbe0:	d438      	bmi.n	800bc54 <_printf_float+0x39c>
 800bbe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbe4:	9b05      	ldr	r3, [sp, #20]
 800bbe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	eba2 0901 	sub.w	r9, r2, r1
 800bbee:	4599      	cmp	r9, r3
 800bbf0:	bfa8      	it	ge
 800bbf2:	4699      	movge	r9, r3
 800bbf4:	f1b9 0f00 	cmp.w	r9, #0
 800bbf8:	dc35      	bgt.n	800bc66 <_printf_float+0x3ae>
 800bbfa:	f04f 0800 	mov.w	r8, #0
 800bbfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc02:	f104 0a1a 	add.w	sl, r4, #26
 800bc06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc0a:	1a9b      	subs	r3, r3, r2
 800bc0c:	eba3 0309 	sub.w	r3, r3, r9
 800bc10:	4543      	cmp	r3, r8
 800bc12:	f77f af79 	ble.w	800bb08 <_printf_float+0x250>
 800bc16:	2301      	movs	r3, #1
 800bc18:	4652      	mov	r2, sl
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	47b8      	blx	r7
 800bc20:	3001      	adds	r0, #1
 800bc22:	f43f aeaa 	beq.w	800b97a <_printf_float+0xc2>
 800bc26:	f108 0801 	add.w	r8, r8, #1
 800bc2a:	e7ec      	b.n	800bc06 <_printf_float+0x34e>
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4642      	mov	r2, r8
 800bc32:	4628      	mov	r0, r5
 800bc34:	47b8      	blx	r7
 800bc36:	3001      	adds	r0, #1
 800bc38:	d1c0      	bne.n	800bbbc <_printf_float+0x304>
 800bc3a:	e69e      	b.n	800b97a <_printf_float+0xc2>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4628      	mov	r0, r5
 800bc42:	9205      	str	r2, [sp, #20]
 800bc44:	47b8      	blx	r7
 800bc46:	3001      	adds	r0, #1
 800bc48:	f43f ae97 	beq.w	800b97a <_printf_float+0xc2>
 800bc4c:	9a05      	ldr	r2, [sp, #20]
 800bc4e:	f10b 0b01 	add.w	fp, fp, #1
 800bc52:	e7b9      	b.n	800bbc8 <_printf_float+0x310>
 800bc54:	ee18 3a10 	vmov	r3, s16
 800bc58:	4652      	mov	r2, sl
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	47b8      	blx	r7
 800bc60:	3001      	adds	r0, #1
 800bc62:	d1be      	bne.n	800bbe2 <_printf_float+0x32a>
 800bc64:	e689      	b.n	800b97a <_printf_float+0xc2>
 800bc66:	9a05      	ldr	r2, [sp, #20]
 800bc68:	464b      	mov	r3, r9
 800bc6a:	4442      	add	r2, r8
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	d1c1      	bne.n	800bbfa <_printf_float+0x342>
 800bc76:	e680      	b.n	800b97a <_printf_float+0xc2>
 800bc78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc7a:	2a01      	cmp	r2, #1
 800bc7c:	dc01      	bgt.n	800bc82 <_printf_float+0x3ca>
 800bc7e:	07db      	lsls	r3, r3, #31
 800bc80:	d538      	bpl.n	800bcf4 <_printf_float+0x43c>
 800bc82:	2301      	movs	r3, #1
 800bc84:	4642      	mov	r2, r8
 800bc86:	4631      	mov	r1, r6
 800bc88:	4628      	mov	r0, r5
 800bc8a:	47b8      	blx	r7
 800bc8c:	3001      	adds	r0, #1
 800bc8e:	f43f ae74 	beq.w	800b97a <_printf_float+0xc2>
 800bc92:	ee18 3a10 	vmov	r3, s16
 800bc96:	4652      	mov	r2, sl
 800bc98:	4631      	mov	r1, r6
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	47b8      	blx	r7
 800bc9e:	3001      	adds	r0, #1
 800bca0:	f43f ae6b 	beq.w	800b97a <_printf_float+0xc2>
 800bca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f7f4 ff2c 	bl	8000b08 <__aeabi_dcmpeq>
 800bcb0:	b9d8      	cbnz	r0, 800bcea <_printf_float+0x432>
 800bcb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb4:	f108 0201 	add.w	r2, r8, #1
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	47b8      	blx	r7
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d10e      	bne.n	800bce2 <_printf_float+0x42a>
 800bcc4:	e659      	b.n	800b97a <_printf_float+0xc2>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4652      	mov	r2, sl
 800bcca:	4631      	mov	r1, r6
 800bccc:	4628      	mov	r0, r5
 800bcce:	47b8      	blx	r7
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	f43f ae52 	beq.w	800b97a <_printf_float+0xc2>
 800bcd6:	f108 0801 	add.w	r8, r8, #1
 800bcda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	4543      	cmp	r3, r8
 800bce0:	dcf1      	bgt.n	800bcc6 <_printf_float+0x40e>
 800bce2:	464b      	mov	r3, r9
 800bce4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bce8:	e6dc      	b.n	800baa4 <_printf_float+0x1ec>
 800bcea:	f04f 0800 	mov.w	r8, #0
 800bcee:	f104 0a1a 	add.w	sl, r4, #26
 800bcf2:	e7f2      	b.n	800bcda <_printf_float+0x422>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	4642      	mov	r2, r8
 800bcf8:	e7df      	b.n	800bcba <_printf_float+0x402>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	464a      	mov	r2, r9
 800bcfe:	4631      	mov	r1, r6
 800bd00:	4628      	mov	r0, r5
 800bd02:	47b8      	blx	r7
 800bd04:	3001      	adds	r0, #1
 800bd06:	f43f ae38 	beq.w	800b97a <_printf_float+0xc2>
 800bd0a:	f108 0801 	add.w	r8, r8, #1
 800bd0e:	68e3      	ldr	r3, [r4, #12]
 800bd10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd12:	1a5b      	subs	r3, r3, r1
 800bd14:	4543      	cmp	r3, r8
 800bd16:	dcf0      	bgt.n	800bcfa <_printf_float+0x442>
 800bd18:	e6fa      	b.n	800bb10 <_printf_float+0x258>
 800bd1a:	f04f 0800 	mov.w	r8, #0
 800bd1e:	f104 0919 	add.w	r9, r4, #25
 800bd22:	e7f4      	b.n	800bd0e <_printf_float+0x456>

0800bd24 <_printf_common>:
 800bd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	4616      	mov	r6, r2
 800bd2a:	4699      	mov	r9, r3
 800bd2c:	688a      	ldr	r2, [r1, #8]
 800bd2e:	690b      	ldr	r3, [r1, #16]
 800bd30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd34:	4293      	cmp	r3, r2
 800bd36:	bfb8      	it	lt
 800bd38:	4613      	movlt	r3, r2
 800bd3a:	6033      	str	r3, [r6, #0]
 800bd3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd40:	4607      	mov	r7, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	b10a      	cbz	r2, 800bd4a <_printf_common+0x26>
 800bd46:	3301      	adds	r3, #1
 800bd48:	6033      	str	r3, [r6, #0]
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	0699      	lsls	r1, r3, #26
 800bd4e:	bf42      	ittt	mi
 800bd50:	6833      	ldrmi	r3, [r6, #0]
 800bd52:	3302      	addmi	r3, #2
 800bd54:	6033      	strmi	r3, [r6, #0]
 800bd56:	6825      	ldr	r5, [r4, #0]
 800bd58:	f015 0506 	ands.w	r5, r5, #6
 800bd5c:	d106      	bne.n	800bd6c <_printf_common+0x48>
 800bd5e:	f104 0a19 	add.w	sl, r4, #25
 800bd62:	68e3      	ldr	r3, [r4, #12]
 800bd64:	6832      	ldr	r2, [r6, #0]
 800bd66:	1a9b      	subs	r3, r3, r2
 800bd68:	42ab      	cmp	r3, r5
 800bd6a:	dc26      	bgt.n	800bdba <_printf_common+0x96>
 800bd6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd70:	1e13      	subs	r3, r2, #0
 800bd72:	6822      	ldr	r2, [r4, #0]
 800bd74:	bf18      	it	ne
 800bd76:	2301      	movne	r3, #1
 800bd78:	0692      	lsls	r2, r2, #26
 800bd7a:	d42b      	bmi.n	800bdd4 <_printf_common+0xb0>
 800bd7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd80:	4649      	mov	r1, r9
 800bd82:	4638      	mov	r0, r7
 800bd84:	47c0      	blx	r8
 800bd86:	3001      	adds	r0, #1
 800bd88:	d01e      	beq.n	800bdc8 <_printf_common+0xa4>
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	68e5      	ldr	r5, [r4, #12]
 800bd8e:	6832      	ldr	r2, [r6, #0]
 800bd90:	f003 0306 	and.w	r3, r3, #6
 800bd94:	2b04      	cmp	r3, #4
 800bd96:	bf08      	it	eq
 800bd98:	1aad      	subeq	r5, r5, r2
 800bd9a:	68a3      	ldr	r3, [r4, #8]
 800bd9c:	6922      	ldr	r2, [r4, #16]
 800bd9e:	bf0c      	ite	eq
 800bda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bda4:	2500      	movne	r5, #0
 800bda6:	4293      	cmp	r3, r2
 800bda8:	bfc4      	itt	gt
 800bdaa:	1a9b      	subgt	r3, r3, r2
 800bdac:	18ed      	addgt	r5, r5, r3
 800bdae:	2600      	movs	r6, #0
 800bdb0:	341a      	adds	r4, #26
 800bdb2:	42b5      	cmp	r5, r6
 800bdb4:	d11a      	bne.n	800bdec <_printf_common+0xc8>
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	e008      	b.n	800bdcc <_printf_common+0xa8>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	4652      	mov	r2, sl
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	47c0      	blx	r8
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	d103      	bne.n	800bdd0 <_printf_common+0xac>
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	e7c6      	b.n	800bd62 <_printf_common+0x3e>
 800bdd4:	18e1      	adds	r1, r4, r3
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	2030      	movs	r0, #48	; 0x30
 800bdda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdde:	4422      	add	r2, r4
 800bde0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bde4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bde8:	3302      	adds	r3, #2
 800bdea:	e7c7      	b.n	800bd7c <_printf_common+0x58>
 800bdec:	2301      	movs	r3, #1
 800bdee:	4622      	mov	r2, r4
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	47c0      	blx	r8
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	d0e6      	beq.n	800bdc8 <_printf_common+0xa4>
 800bdfa:	3601      	adds	r6, #1
 800bdfc:	e7d9      	b.n	800bdb2 <_printf_common+0x8e>
	...

0800be00 <_printf_i>:
 800be00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be04:	460c      	mov	r4, r1
 800be06:	4691      	mov	r9, r2
 800be08:	7e27      	ldrb	r7, [r4, #24]
 800be0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800be0c:	2f78      	cmp	r7, #120	; 0x78
 800be0e:	4680      	mov	r8, r0
 800be10:	469a      	mov	sl, r3
 800be12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be16:	d807      	bhi.n	800be28 <_printf_i+0x28>
 800be18:	2f62      	cmp	r7, #98	; 0x62
 800be1a:	d80a      	bhi.n	800be32 <_printf_i+0x32>
 800be1c:	2f00      	cmp	r7, #0
 800be1e:	f000 80d8 	beq.w	800bfd2 <_printf_i+0x1d2>
 800be22:	2f58      	cmp	r7, #88	; 0x58
 800be24:	f000 80a3 	beq.w	800bf6e <_printf_i+0x16e>
 800be28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be30:	e03a      	b.n	800bea8 <_printf_i+0xa8>
 800be32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be36:	2b15      	cmp	r3, #21
 800be38:	d8f6      	bhi.n	800be28 <_printf_i+0x28>
 800be3a:	a001      	add	r0, pc, #4	; (adr r0, 800be40 <_printf_i+0x40>)
 800be3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800be40:	0800be99 	.word	0x0800be99
 800be44:	0800bead 	.word	0x0800bead
 800be48:	0800be29 	.word	0x0800be29
 800be4c:	0800be29 	.word	0x0800be29
 800be50:	0800be29 	.word	0x0800be29
 800be54:	0800be29 	.word	0x0800be29
 800be58:	0800bead 	.word	0x0800bead
 800be5c:	0800be29 	.word	0x0800be29
 800be60:	0800be29 	.word	0x0800be29
 800be64:	0800be29 	.word	0x0800be29
 800be68:	0800be29 	.word	0x0800be29
 800be6c:	0800bfb9 	.word	0x0800bfb9
 800be70:	0800bedd 	.word	0x0800bedd
 800be74:	0800bf9b 	.word	0x0800bf9b
 800be78:	0800be29 	.word	0x0800be29
 800be7c:	0800be29 	.word	0x0800be29
 800be80:	0800bfdb 	.word	0x0800bfdb
 800be84:	0800be29 	.word	0x0800be29
 800be88:	0800bedd 	.word	0x0800bedd
 800be8c:	0800be29 	.word	0x0800be29
 800be90:	0800be29 	.word	0x0800be29
 800be94:	0800bfa3 	.word	0x0800bfa3
 800be98:	680b      	ldr	r3, [r1, #0]
 800be9a:	1d1a      	adds	r2, r3, #4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	600a      	str	r2, [r1, #0]
 800bea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bea8:	2301      	movs	r3, #1
 800beaa:	e0a3      	b.n	800bff4 <_printf_i+0x1f4>
 800beac:	6825      	ldr	r5, [r4, #0]
 800beae:	6808      	ldr	r0, [r1, #0]
 800beb0:	062e      	lsls	r6, r5, #24
 800beb2:	f100 0304 	add.w	r3, r0, #4
 800beb6:	d50a      	bpl.n	800bece <_printf_i+0xce>
 800beb8:	6805      	ldr	r5, [r0, #0]
 800beba:	600b      	str	r3, [r1, #0]
 800bebc:	2d00      	cmp	r5, #0
 800bebe:	da03      	bge.n	800bec8 <_printf_i+0xc8>
 800bec0:	232d      	movs	r3, #45	; 0x2d
 800bec2:	426d      	negs	r5, r5
 800bec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec8:	485e      	ldr	r0, [pc, #376]	; (800c044 <_printf_i+0x244>)
 800beca:	230a      	movs	r3, #10
 800becc:	e019      	b.n	800bf02 <_printf_i+0x102>
 800bece:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bed2:	6805      	ldr	r5, [r0, #0]
 800bed4:	600b      	str	r3, [r1, #0]
 800bed6:	bf18      	it	ne
 800bed8:	b22d      	sxthne	r5, r5
 800beda:	e7ef      	b.n	800bebc <_printf_i+0xbc>
 800bedc:	680b      	ldr	r3, [r1, #0]
 800bede:	6825      	ldr	r5, [r4, #0]
 800bee0:	1d18      	adds	r0, r3, #4
 800bee2:	6008      	str	r0, [r1, #0]
 800bee4:	0628      	lsls	r0, r5, #24
 800bee6:	d501      	bpl.n	800beec <_printf_i+0xec>
 800bee8:	681d      	ldr	r5, [r3, #0]
 800beea:	e002      	b.n	800bef2 <_printf_i+0xf2>
 800beec:	0669      	lsls	r1, r5, #25
 800beee:	d5fb      	bpl.n	800bee8 <_printf_i+0xe8>
 800bef0:	881d      	ldrh	r5, [r3, #0]
 800bef2:	4854      	ldr	r0, [pc, #336]	; (800c044 <_printf_i+0x244>)
 800bef4:	2f6f      	cmp	r7, #111	; 0x6f
 800bef6:	bf0c      	ite	eq
 800bef8:	2308      	moveq	r3, #8
 800befa:	230a      	movne	r3, #10
 800befc:	2100      	movs	r1, #0
 800befe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf02:	6866      	ldr	r6, [r4, #4]
 800bf04:	60a6      	str	r6, [r4, #8]
 800bf06:	2e00      	cmp	r6, #0
 800bf08:	bfa2      	ittt	ge
 800bf0a:	6821      	ldrge	r1, [r4, #0]
 800bf0c:	f021 0104 	bicge.w	r1, r1, #4
 800bf10:	6021      	strge	r1, [r4, #0]
 800bf12:	b90d      	cbnz	r5, 800bf18 <_printf_i+0x118>
 800bf14:	2e00      	cmp	r6, #0
 800bf16:	d04d      	beq.n	800bfb4 <_printf_i+0x1b4>
 800bf18:	4616      	mov	r6, r2
 800bf1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf1e:	fb03 5711 	mls	r7, r3, r1, r5
 800bf22:	5dc7      	ldrb	r7, [r0, r7]
 800bf24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf28:	462f      	mov	r7, r5
 800bf2a:	42bb      	cmp	r3, r7
 800bf2c:	460d      	mov	r5, r1
 800bf2e:	d9f4      	bls.n	800bf1a <_printf_i+0x11a>
 800bf30:	2b08      	cmp	r3, #8
 800bf32:	d10b      	bne.n	800bf4c <_printf_i+0x14c>
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	07df      	lsls	r7, r3, #31
 800bf38:	d508      	bpl.n	800bf4c <_printf_i+0x14c>
 800bf3a:	6923      	ldr	r3, [r4, #16]
 800bf3c:	6861      	ldr	r1, [r4, #4]
 800bf3e:	4299      	cmp	r1, r3
 800bf40:	bfde      	ittt	le
 800bf42:	2330      	movle	r3, #48	; 0x30
 800bf44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf48:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf4c:	1b92      	subs	r2, r2, r6
 800bf4e:	6122      	str	r2, [r4, #16]
 800bf50:	f8cd a000 	str.w	sl, [sp]
 800bf54:	464b      	mov	r3, r9
 800bf56:	aa03      	add	r2, sp, #12
 800bf58:	4621      	mov	r1, r4
 800bf5a:	4640      	mov	r0, r8
 800bf5c:	f7ff fee2 	bl	800bd24 <_printf_common>
 800bf60:	3001      	adds	r0, #1
 800bf62:	d14c      	bne.n	800bffe <_printf_i+0x1fe>
 800bf64:	f04f 30ff 	mov.w	r0, #4294967295
 800bf68:	b004      	add	sp, #16
 800bf6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6e:	4835      	ldr	r0, [pc, #212]	; (800c044 <_printf_i+0x244>)
 800bf70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	680e      	ldr	r6, [r1, #0]
 800bf78:	061f      	lsls	r7, r3, #24
 800bf7a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf7e:	600e      	str	r6, [r1, #0]
 800bf80:	d514      	bpl.n	800bfac <_printf_i+0x1ac>
 800bf82:	07d9      	lsls	r1, r3, #31
 800bf84:	bf44      	itt	mi
 800bf86:	f043 0320 	orrmi.w	r3, r3, #32
 800bf8a:	6023      	strmi	r3, [r4, #0]
 800bf8c:	b91d      	cbnz	r5, 800bf96 <_printf_i+0x196>
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	f023 0320 	bic.w	r3, r3, #32
 800bf94:	6023      	str	r3, [r4, #0]
 800bf96:	2310      	movs	r3, #16
 800bf98:	e7b0      	b.n	800befc <_printf_i+0xfc>
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	f043 0320 	orr.w	r3, r3, #32
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	2378      	movs	r3, #120	; 0x78
 800bfa4:	4828      	ldr	r0, [pc, #160]	; (800c048 <_printf_i+0x248>)
 800bfa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfaa:	e7e3      	b.n	800bf74 <_printf_i+0x174>
 800bfac:	065e      	lsls	r6, r3, #25
 800bfae:	bf48      	it	mi
 800bfb0:	b2ad      	uxthmi	r5, r5
 800bfb2:	e7e6      	b.n	800bf82 <_printf_i+0x182>
 800bfb4:	4616      	mov	r6, r2
 800bfb6:	e7bb      	b.n	800bf30 <_printf_i+0x130>
 800bfb8:	680b      	ldr	r3, [r1, #0]
 800bfba:	6826      	ldr	r6, [r4, #0]
 800bfbc:	6960      	ldr	r0, [r4, #20]
 800bfbe:	1d1d      	adds	r5, r3, #4
 800bfc0:	600d      	str	r5, [r1, #0]
 800bfc2:	0635      	lsls	r5, r6, #24
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	d501      	bpl.n	800bfcc <_printf_i+0x1cc>
 800bfc8:	6018      	str	r0, [r3, #0]
 800bfca:	e002      	b.n	800bfd2 <_printf_i+0x1d2>
 800bfcc:	0671      	lsls	r1, r6, #25
 800bfce:	d5fb      	bpl.n	800bfc8 <_printf_i+0x1c8>
 800bfd0:	8018      	strh	r0, [r3, #0]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	6123      	str	r3, [r4, #16]
 800bfd6:	4616      	mov	r6, r2
 800bfd8:	e7ba      	b.n	800bf50 <_printf_i+0x150>
 800bfda:	680b      	ldr	r3, [r1, #0]
 800bfdc:	1d1a      	adds	r2, r3, #4
 800bfde:	600a      	str	r2, [r1, #0]
 800bfe0:	681e      	ldr	r6, [r3, #0]
 800bfe2:	6862      	ldr	r2, [r4, #4]
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f7f4 f91a 	bl	8000220 <memchr>
 800bfec:	b108      	cbz	r0, 800bff2 <_printf_i+0x1f2>
 800bfee:	1b80      	subs	r0, r0, r6
 800bff0:	6060      	str	r0, [r4, #4]
 800bff2:	6863      	ldr	r3, [r4, #4]
 800bff4:	6123      	str	r3, [r4, #16]
 800bff6:	2300      	movs	r3, #0
 800bff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bffc:	e7a8      	b.n	800bf50 <_printf_i+0x150>
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	4632      	mov	r2, r6
 800c002:	4649      	mov	r1, r9
 800c004:	4640      	mov	r0, r8
 800c006:	47d0      	blx	sl
 800c008:	3001      	adds	r0, #1
 800c00a:	d0ab      	beq.n	800bf64 <_printf_i+0x164>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	079b      	lsls	r3, r3, #30
 800c010:	d413      	bmi.n	800c03a <_printf_i+0x23a>
 800c012:	68e0      	ldr	r0, [r4, #12]
 800c014:	9b03      	ldr	r3, [sp, #12]
 800c016:	4298      	cmp	r0, r3
 800c018:	bfb8      	it	lt
 800c01a:	4618      	movlt	r0, r3
 800c01c:	e7a4      	b.n	800bf68 <_printf_i+0x168>
 800c01e:	2301      	movs	r3, #1
 800c020:	4632      	mov	r2, r6
 800c022:	4649      	mov	r1, r9
 800c024:	4640      	mov	r0, r8
 800c026:	47d0      	blx	sl
 800c028:	3001      	adds	r0, #1
 800c02a:	d09b      	beq.n	800bf64 <_printf_i+0x164>
 800c02c:	3501      	adds	r5, #1
 800c02e:	68e3      	ldr	r3, [r4, #12]
 800c030:	9903      	ldr	r1, [sp, #12]
 800c032:	1a5b      	subs	r3, r3, r1
 800c034:	42ab      	cmp	r3, r5
 800c036:	dcf2      	bgt.n	800c01e <_printf_i+0x21e>
 800c038:	e7eb      	b.n	800c012 <_printf_i+0x212>
 800c03a:	2500      	movs	r5, #0
 800c03c:	f104 0619 	add.w	r6, r4, #25
 800c040:	e7f5      	b.n	800c02e <_printf_i+0x22e>
 800c042:	bf00      	nop
 800c044:	08010a8e 	.word	0x08010a8e
 800c048:	08010a9f 	.word	0x08010a9f

0800c04c <_scanf_float>:
 800c04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c050:	b087      	sub	sp, #28
 800c052:	4617      	mov	r7, r2
 800c054:	9303      	str	r3, [sp, #12]
 800c056:	688b      	ldr	r3, [r1, #8]
 800c058:	1e5a      	subs	r2, r3, #1
 800c05a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c05e:	bf83      	ittte	hi
 800c060:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c064:	195b      	addhi	r3, r3, r5
 800c066:	9302      	strhi	r3, [sp, #8]
 800c068:	2300      	movls	r3, #0
 800c06a:	bf86      	itte	hi
 800c06c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c070:	608b      	strhi	r3, [r1, #8]
 800c072:	9302      	strls	r3, [sp, #8]
 800c074:	680b      	ldr	r3, [r1, #0]
 800c076:	468b      	mov	fp, r1
 800c078:	2500      	movs	r5, #0
 800c07a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c07e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c082:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c086:	4680      	mov	r8, r0
 800c088:	460c      	mov	r4, r1
 800c08a:	465e      	mov	r6, fp
 800c08c:	46aa      	mov	sl, r5
 800c08e:	46a9      	mov	r9, r5
 800c090:	9501      	str	r5, [sp, #4]
 800c092:	68a2      	ldr	r2, [r4, #8]
 800c094:	b152      	cbz	r2, 800c0ac <_scanf_float+0x60>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	2b4e      	cmp	r3, #78	; 0x4e
 800c09c:	d864      	bhi.n	800c168 <_scanf_float+0x11c>
 800c09e:	2b40      	cmp	r3, #64	; 0x40
 800c0a0:	d83c      	bhi.n	800c11c <_scanf_float+0xd0>
 800c0a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c0a6:	b2c8      	uxtb	r0, r1
 800c0a8:	280e      	cmp	r0, #14
 800c0aa:	d93a      	bls.n	800c122 <_scanf_float+0xd6>
 800c0ac:	f1b9 0f00 	cmp.w	r9, #0
 800c0b0:	d003      	beq.n	800c0ba <_scanf_float+0x6e>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0be:	f1ba 0f01 	cmp.w	sl, #1
 800c0c2:	f200 8113 	bhi.w	800c2ec <_scanf_float+0x2a0>
 800c0c6:	455e      	cmp	r6, fp
 800c0c8:	f200 8105 	bhi.w	800c2d6 <_scanf_float+0x28a>
 800c0cc:	2501      	movs	r5, #1
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	b007      	add	sp, #28
 800c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c0da:	2a0d      	cmp	r2, #13
 800c0dc:	d8e6      	bhi.n	800c0ac <_scanf_float+0x60>
 800c0de:	a101      	add	r1, pc, #4	; (adr r1, 800c0e4 <_scanf_float+0x98>)
 800c0e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0e4:	0800c223 	.word	0x0800c223
 800c0e8:	0800c0ad 	.word	0x0800c0ad
 800c0ec:	0800c0ad 	.word	0x0800c0ad
 800c0f0:	0800c0ad 	.word	0x0800c0ad
 800c0f4:	0800c283 	.word	0x0800c283
 800c0f8:	0800c25b 	.word	0x0800c25b
 800c0fc:	0800c0ad 	.word	0x0800c0ad
 800c100:	0800c0ad 	.word	0x0800c0ad
 800c104:	0800c231 	.word	0x0800c231
 800c108:	0800c0ad 	.word	0x0800c0ad
 800c10c:	0800c0ad 	.word	0x0800c0ad
 800c110:	0800c0ad 	.word	0x0800c0ad
 800c114:	0800c0ad 	.word	0x0800c0ad
 800c118:	0800c1e9 	.word	0x0800c1e9
 800c11c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c120:	e7db      	b.n	800c0da <_scanf_float+0x8e>
 800c122:	290e      	cmp	r1, #14
 800c124:	d8c2      	bhi.n	800c0ac <_scanf_float+0x60>
 800c126:	a001      	add	r0, pc, #4	; (adr r0, 800c12c <_scanf_float+0xe0>)
 800c128:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c12c:	0800c1db 	.word	0x0800c1db
 800c130:	0800c0ad 	.word	0x0800c0ad
 800c134:	0800c1db 	.word	0x0800c1db
 800c138:	0800c26f 	.word	0x0800c26f
 800c13c:	0800c0ad 	.word	0x0800c0ad
 800c140:	0800c189 	.word	0x0800c189
 800c144:	0800c1c5 	.word	0x0800c1c5
 800c148:	0800c1c5 	.word	0x0800c1c5
 800c14c:	0800c1c5 	.word	0x0800c1c5
 800c150:	0800c1c5 	.word	0x0800c1c5
 800c154:	0800c1c5 	.word	0x0800c1c5
 800c158:	0800c1c5 	.word	0x0800c1c5
 800c15c:	0800c1c5 	.word	0x0800c1c5
 800c160:	0800c1c5 	.word	0x0800c1c5
 800c164:	0800c1c5 	.word	0x0800c1c5
 800c168:	2b6e      	cmp	r3, #110	; 0x6e
 800c16a:	d809      	bhi.n	800c180 <_scanf_float+0x134>
 800c16c:	2b60      	cmp	r3, #96	; 0x60
 800c16e:	d8b2      	bhi.n	800c0d6 <_scanf_float+0x8a>
 800c170:	2b54      	cmp	r3, #84	; 0x54
 800c172:	d077      	beq.n	800c264 <_scanf_float+0x218>
 800c174:	2b59      	cmp	r3, #89	; 0x59
 800c176:	d199      	bne.n	800c0ac <_scanf_float+0x60>
 800c178:	2d07      	cmp	r5, #7
 800c17a:	d197      	bne.n	800c0ac <_scanf_float+0x60>
 800c17c:	2508      	movs	r5, #8
 800c17e:	e029      	b.n	800c1d4 <_scanf_float+0x188>
 800c180:	2b74      	cmp	r3, #116	; 0x74
 800c182:	d06f      	beq.n	800c264 <_scanf_float+0x218>
 800c184:	2b79      	cmp	r3, #121	; 0x79
 800c186:	e7f6      	b.n	800c176 <_scanf_float+0x12a>
 800c188:	6821      	ldr	r1, [r4, #0]
 800c18a:	05c8      	lsls	r0, r1, #23
 800c18c:	d51a      	bpl.n	800c1c4 <_scanf_float+0x178>
 800c18e:	9b02      	ldr	r3, [sp, #8]
 800c190:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c194:	6021      	str	r1, [r4, #0]
 800c196:	f109 0901 	add.w	r9, r9, #1
 800c19a:	b11b      	cbz	r3, 800c1a4 <_scanf_float+0x158>
 800c19c:	3b01      	subs	r3, #1
 800c19e:	3201      	adds	r2, #1
 800c1a0:	9302      	str	r3, [sp, #8]
 800c1a2:	60a2      	str	r2, [r4, #8]
 800c1a4:	68a3      	ldr	r3, [r4, #8]
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	60a3      	str	r3, [r4, #8]
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	6123      	str	r3, [r4, #16]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	607b      	str	r3, [r7, #4]
 800c1b8:	f340 8084 	ble.w	800c2c4 <_scanf_float+0x278>
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	603b      	str	r3, [r7, #0]
 800c1c2:	e766      	b.n	800c092 <_scanf_float+0x46>
 800c1c4:	eb1a 0f05 	cmn.w	sl, r5
 800c1c8:	f47f af70 	bne.w	800c0ac <_scanf_float+0x60>
 800c1cc:	6822      	ldr	r2, [r4, #0]
 800c1ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c1d2:	6022      	str	r2, [r4, #0]
 800c1d4:	f806 3b01 	strb.w	r3, [r6], #1
 800c1d8:	e7e4      	b.n	800c1a4 <_scanf_float+0x158>
 800c1da:	6822      	ldr	r2, [r4, #0]
 800c1dc:	0610      	lsls	r0, r2, #24
 800c1de:	f57f af65 	bpl.w	800c0ac <_scanf_float+0x60>
 800c1e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c1e6:	e7f4      	b.n	800c1d2 <_scanf_float+0x186>
 800c1e8:	f1ba 0f00 	cmp.w	sl, #0
 800c1ec:	d10e      	bne.n	800c20c <_scanf_float+0x1c0>
 800c1ee:	f1b9 0f00 	cmp.w	r9, #0
 800c1f2:	d10e      	bne.n	800c212 <_scanf_float+0x1c6>
 800c1f4:	6822      	ldr	r2, [r4, #0]
 800c1f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c1fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c1fe:	d108      	bne.n	800c212 <_scanf_float+0x1c6>
 800c200:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c204:	6022      	str	r2, [r4, #0]
 800c206:	f04f 0a01 	mov.w	sl, #1
 800c20a:	e7e3      	b.n	800c1d4 <_scanf_float+0x188>
 800c20c:	f1ba 0f02 	cmp.w	sl, #2
 800c210:	d055      	beq.n	800c2be <_scanf_float+0x272>
 800c212:	2d01      	cmp	r5, #1
 800c214:	d002      	beq.n	800c21c <_scanf_float+0x1d0>
 800c216:	2d04      	cmp	r5, #4
 800c218:	f47f af48 	bne.w	800c0ac <_scanf_float+0x60>
 800c21c:	3501      	adds	r5, #1
 800c21e:	b2ed      	uxtb	r5, r5
 800c220:	e7d8      	b.n	800c1d4 <_scanf_float+0x188>
 800c222:	f1ba 0f01 	cmp.w	sl, #1
 800c226:	f47f af41 	bne.w	800c0ac <_scanf_float+0x60>
 800c22a:	f04f 0a02 	mov.w	sl, #2
 800c22e:	e7d1      	b.n	800c1d4 <_scanf_float+0x188>
 800c230:	b97d      	cbnz	r5, 800c252 <_scanf_float+0x206>
 800c232:	f1b9 0f00 	cmp.w	r9, #0
 800c236:	f47f af3c 	bne.w	800c0b2 <_scanf_float+0x66>
 800c23a:	6822      	ldr	r2, [r4, #0]
 800c23c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c240:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c244:	f47f af39 	bne.w	800c0ba <_scanf_float+0x6e>
 800c248:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c24c:	6022      	str	r2, [r4, #0]
 800c24e:	2501      	movs	r5, #1
 800c250:	e7c0      	b.n	800c1d4 <_scanf_float+0x188>
 800c252:	2d03      	cmp	r5, #3
 800c254:	d0e2      	beq.n	800c21c <_scanf_float+0x1d0>
 800c256:	2d05      	cmp	r5, #5
 800c258:	e7de      	b.n	800c218 <_scanf_float+0x1cc>
 800c25a:	2d02      	cmp	r5, #2
 800c25c:	f47f af26 	bne.w	800c0ac <_scanf_float+0x60>
 800c260:	2503      	movs	r5, #3
 800c262:	e7b7      	b.n	800c1d4 <_scanf_float+0x188>
 800c264:	2d06      	cmp	r5, #6
 800c266:	f47f af21 	bne.w	800c0ac <_scanf_float+0x60>
 800c26a:	2507      	movs	r5, #7
 800c26c:	e7b2      	b.n	800c1d4 <_scanf_float+0x188>
 800c26e:	6822      	ldr	r2, [r4, #0]
 800c270:	0591      	lsls	r1, r2, #22
 800c272:	f57f af1b 	bpl.w	800c0ac <_scanf_float+0x60>
 800c276:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c27a:	6022      	str	r2, [r4, #0]
 800c27c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c280:	e7a8      	b.n	800c1d4 <_scanf_float+0x188>
 800c282:	6822      	ldr	r2, [r4, #0]
 800c284:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c288:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c28c:	d006      	beq.n	800c29c <_scanf_float+0x250>
 800c28e:	0550      	lsls	r0, r2, #21
 800c290:	f57f af0c 	bpl.w	800c0ac <_scanf_float+0x60>
 800c294:	f1b9 0f00 	cmp.w	r9, #0
 800c298:	f43f af0f 	beq.w	800c0ba <_scanf_float+0x6e>
 800c29c:	0591      	lsls	r1, r2, #22
 800c29e:	bf58      	it	pl
 800c2a0:	9901      	ldrpl	r1, [sp, #4]
 800c2a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2a6:	bf58      	it	pl
 800c2a8:	eba9 0101 	subpl.w	r1, r9, r1
 800c2ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c2b0:	bf58      	it	pl
 800c2b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c2b6:	6022      	str	r2, [r4, #0]
 800c2b8:	f04f 0900 	mov.w	r9, #0
 800c2bc:	e78a      	b.n	800c1d4 <_scanf_float+0x188>
 800c2be:	f04f 0a03 	mov.w	sl, #3
 800c2c2:	e787      	b.n	800c1d4 <_scanf_float+0x188>
 800c2c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	4798      	blx	r3
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f43f aedf 	beq.w	800c092 <_scanf_float+0x46>
 800c2d4:	e6ea      	b.n	800c0ac <_scanf_float+0x60>
 800c2d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c2de:	463a      	mov	r2, r7
 800c2e0:	4640      	mov	r0, r8
 800c2e2:	4798      	blx	r3
 800c2e4:	6923      	ldr	r3, [r4, #16]
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	6123      	str	r3, [r4, #16]
 800c2ea:	e6ec      	b.n	800c0c6 <_scanf_float+0x7a>
 800c2ec:	1e6b      	subs	r3, r5, #1
 800c2ee:	2b06      	cmp	r3, #6
 800c2f0:	d825      	bhi.n	800c33e <_scanf_float+0x2f2>
 800c2f2:	2d02      	cmp	r5, #2
 800c2f4:	d836      	bhi.n	800c364 <_scanf_float+0x318>
 800c2f6:	455e      	cmp	r6, fp
 800c2f8:	f67f aee8 	bls.w	800c0cc <_scanf_float+0x80>
 800c2fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c300:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c304:	463a      	mov	r2, r7
 800c306:	4640      	mov	r0, r8
 800c308:	4798      	blx	r3
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	6123      	str	r3, [r4, #16]
 800c310:	e7f1      	b.n	800c2f6 <_scanf_float+0x2aa>
 800c312:	9802      	ldr	r0, [sp, #8]
 800c314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c318:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c31c:	9002      	str	r0, [sp, #8]
 800c31e:	463a      	mov	r2, r7
 800c320:	4640      	mov	r0, r8
 800c322:	4798      	blx	r3
 800c324:	6923      	ldr	r3, [r4, #16]
 800c326:	3b01      	subs	r3, #1
 800c328:	6123      	str	r3, [r4, #16]
 800c32a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c32e:	fa5f fa8a 	uxtb.w	sl, sl
 800c332:	f1ba 0f02 	cmp.w	sl, #2
 800c336:	d1ec      	bne.n	800c312 <_scanf_float+0x2c6>
 800c338:	3d03      	subs	r5, #3
 800c33a:	b2ed      	uxtb	r5, r5
 800c33c:	1b76      	subs	r6, r6, r5
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	05da      	lsls	r2, r3, #23
 800c342:	d52f      	bpl.n	800c3a4 <_scanf_float+0x358>
 800c344:	055b      	lsls	r3, r3, #21
 800c346:	d510      	bpl.n	800c36a <_scanf_float+0x31e>
 800c348:	455e      	cmp	r6, fp
 800c34a:	f67f aebf 	bls.w	800c0cc <_scanf_float+0x80>
 800c34e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c356:	463a      	mov	r2, r7
 800c358:	4640      	mov	r0, r8
 800c35a:	4798      	blx	r3
 800c35c:	6923      	ldr	r3, [r4, #16]
 800c35e:	3b01      	subs	r3, #1
 800c360:	6123      	str	r3, [r4, #16]
 800c362:	e7f1      	b.n	800c348 <_scanf_float+0x2fc>
 800c364:	46aa      	mov	sl, r5
 800c366:	9602      	str	r6, [sp, #8]
 800c368:	e7df      	b.n	800c32a <_scanf_float+0x2de>
 800c36a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c36e:	6923      	ldr	r3, [r4, #16]
 800c370:	2965      	cmp	r1, #101	; 0x65
 800c372:	f103 33ff 	add.w	r3, r3, #4294967295
 800c376:	f106 35ff 	add.w	r5, r6, #4294967295
 800c37a:	6123      	str	r3, [r4, #16]
 800c37c:	d00c      	beq.n	800c398 <_scanf_float+0x34c>
 800c37e:	2945      	cmp	r1, #69	; 0x45
 800c380:	d00a      	beq.n	800c398 <_scanf_float+0x34c>
 800c382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c386:	463a      	mov	r2, r7
 800c388:	4640      	mov	r0, r8
 800c38a:	4798      	blx	r3
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c392:	3b01      	subs	r3, #1
 800c394:	1eb5      	subs	r5, r6, #2
 800c396:	6123      	str	r3, [r4, #16]
 800c398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c39c:	463a      	mov	r2, r7
 800c39e:	4640      	mov	r0, r8
 800c3a0:	4798      	blx	r3
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	6825      	ldr	r5, [r4, #0]
 800c3a6:	f015 0510 	ands.w	r5, r5, #16
 800c3aa:	d158      	bne.n	800c45e <_scanf_float+0x412>
 800c3ac:	7035      	strb	r5, [r6, #0]
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c3b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3b8:	d11c      	bne.n	800c3f4 <_scanf_float+0x3a8>
 800c3ba:	9b01      	ldr	r3, [sp, #4]
 800c3bc:	454b      	cmp	r3, r9
 800c3be:	eba3 0209 	sub.w	r2, r3, r9
 800c3c2:	d124      	bne.n	800c40e <_scanf_float+0x3c2>
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	4659      	mov	r1, fp
 800c3c8:	4640      	mov	r0, r8
 800c3ca:	f000 feab 	bl	800d124 <_strtod_r>
 800c3ce:	9b03      	ldr	r3, [sp, #12]
 800c3d0:	6821      	ldr	r1, [r4, #0]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f011 0f02 	tst.w	r1, #2
 800c3d8:	ec57 6b10 	vmov	r6, r7, d0
 800c3dc:	f103 0204 	add.w	r2, r3, #4
 800c3e0:	d020      	beq.n	800c424 <_scanf_float+0x3d8>
 800c3e2:	9903      	ldr	r1, [sp, #12]
 800c3e4:	600a      	str	r2, [r1, #0]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	e9c3 6700 	strd	r6, r7, [r3]
 800c3ec:	68e3      	ldr	r3, [r4, #12]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	60e3      	str	r3, [r4, #12]
 800c3f2:	e66c      	b.n	800c0ce <_scanf_float+0x82>
 800c3f4:	9b04      	ldr	r3, [sp, #16]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d0e4      	beq.n	800c3c4 <_scanf_float+0x378>
 800c3fa:	9905      	ldr	r1, [sp, #20]
 800c3fc:	230a      	movs	r3, #10
 800c3fe:	462a      	mov	r2, r5
 800c400:	3101      	adds	r1, #1
 800c402:	4640      	mov	r0, r8
 800c404:	f000 ff18 	bl	800d238 <_strtol_r>
 800c408:	9b04      	ldr	r3, [sp, #16]
 800c40a:	9e05      	ldr	r6, [sp, #20]
 800c40c:	1ac2      	subs	r2, r0, r3
 800c40e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c412:	429e      	cmp	r6, r3
 800c414:	bf28      	it	cs
 800c416:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c41a:	4912      	ldr	r1, [pc, #72]	; (800c464 <_scanf_float+0x418>)
 800c41c:	4630      	mov	r0, r6
 800c41e:	f000 f83b 	bl	800c498 <siprintf>
 800c422:	e7cf      	b.n	800c3c4 <_scanf_float+0x378>
 800c424:	f011 0f04 	tst.w	r1, #4
 800c428:	9903      	ldr	r1, [sp, #12]
 800c42a:	600a      	str	r2, [r1, #0]
 800c42c:	d1db      	bne.n	800c3e6 <_scanf_float+0x39a>
 800c42e:	f8d3 8000 	ldr.w	r8, [r3]
 800c432:	ee10 2a10 	vmov	r2, s0
 800c436:	ee10 0a10 	vmov	r0, s0
 800c43a:	463b      	mov	r3, r7
 800c43c:	4639      	mov	r1, r7
 800c43e:	f7f4 fb95 	bl	8000b6c <__aeabi_dcmpun>
 800c442:	b128      	cbz	r0, 800c450 <_scanf_float+0x404>
 800c444:	4808      	ldr	r0, [pc, #32]	; (800c468 <_scanf_float+0x41c>)
 800c446:	f000 f821 	bl	800c48c <nanf>
 800c44a:	ed88 0a00 	vstr	s0, [r8]
 800c44e:	e7cd      	b.n	800c3ec <_scanf_float+0x3a0>
 800c450:	4630      	mov	r0, r6
 800c452:	4639      	mov	r1, r7
 800c454:	f7f4 fbe8 	bl	8000c28 <__aeabi_d2f>
 800c458:	f8c8 0000 	str.w	r0, [r8]
 800c45c:	e7c6      	b.n	800c3ec <_scanf_float+0x3a0>
 800c45e:	2500      	movs	r5, #0
 800c460:	e635      	b.n	800c0ce <_scanf_float+0x82>
 800c462:	bf00      	nop
 800c464:	08010ab0 	.word	0x08010ab0
 800c468:	08010ec8 	.word	0x08010ec8

0800c46c <_sbrk_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4d06      	ldr	r5, [pc, #24]	; (800c488 <_sbrk_r+0x1c>)
 800c470:	2300      	movs	r3, #0
 800c472:	4604      	mov	r4, r0
 800c474:	4608      	mov	r0, r1
 800c476:	602b      	str	r3, [r5, #0]
 800c478:	f7f7 fc4a 	bl	8003d10 <_sbrk>
 800c47c:	1c43      	adds	r3, r0, #1
 800c47e:	d102      	bne.n	800c486 <_sbrk_r+0x1a>
 800c480:	682b      	ldr	r3, [r5, #0]
 800c482:	b103      	cbz	r3, 800c486 <_sbrk_r+0x1a>
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	bd38      	pop	{r3, r4, r5, pc}
 800c488:	200029b8 	.word	0x200029b8

0800c48c <nanf>:
 800c48c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c494 <nanf+0x8>
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	7fc00000 	.word	0x7fc00000

0800c498 <siprintf>:
 800c498:	b40e      	push	{r1, r2, r3}
 800c49a:	b500      	push	{lr}
 800c49c:	b09c      	sub	sp, #112	; 0x70
 800c49e:	ab1d      	add	r3, sp, #116	; 0x74
 800c4a0:	9002      	str	r0, [sp, #8]
 800c4a2:	9006      	str	r0, [sp, #24]
 800c4a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4a8:	4809      	ldr	r0, [pc, #36]	; (800c4d0 <siprintf+0x38>)
 800c4aa:	9107      	str	r1, [sp, #28]
 800c4ac:	9104      	str	r1, [sp, #16]
 800c4ae:	4909      	ldr	r1, [pc, #36]	; (800c4d4 <siprintf+0x3c>)
 800c4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b4:	9105      	str	r1, [sp, #20]
 800c4b6:	6800      	ldr	r0, [r0, #0]
 800c4b8:	9301      	str	r3, [sp, #4]
 800c4ba:	a902      	add	r1, sp, #8
 800c4bc:	f002 fdfe 	bl	800f0bc <_svfiprintf_r>
 800c4c0:	9b02      	ldr	r3, [sp, #8]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	701a      	strb	r2, [r3, #0]
 800c4c6:	b01c      	add	sp, #112	; 0x70
 800c4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4cc:	b003      	add	sp, #12
 800c4ce:	4770      	bx	lr
 800c4d0:	20000424 	.word	0x20000424
 800c4d4:	ffff0208 	.word	0xffff0208

0800c4d8 <sulp>:
 800c4d8:	b570      	push	{r4, r5, r6, lr}
 800c4da:	4604      	mov	r4, r0
 800c4dc:	460d      	mov	r5, r1
 800c4de:	ec45 4b10 	vmov	d0, r4, r5
 800c4e2:	4616      	mov	r6, r2
 800c4e4:	f002 fc30 	bl	800ed48 <__ulp>
 800c4e8:	ec51 0b10 	vmov	r0, r1, d0
 800c4ec:	b17e      	cbz	r6, 800c50e <sulp+0x36>
 800c4ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c4f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	dd09      	ble.n	800c50e <sulp+0x36>
 800c4fa:	051b      	lsls	r3, r3, #20
 800c4fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c500:	2400      	movs	r4, #0
 800c502:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c506:	4622      	mov	r2, r4
 800c508:	462b      	mov	r3, r5
 800c50a:	f7f4 f895 	bl	8000638 <__aeabi_dmul>
 800c50e:	bd70      	pop	{r4, r5, r6, pc}

0800c510 <_strtod_l>:
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	b0a3      	sub	sp, #140	; 0x8c
 800c516:	461f      	mov	r7, r3
 800c518:	2300      	movs	r3, #0
 800c51a:	931e      	str	r3, [sp, #120]	; 0x78
 800c51c:	4ba4      	ldr	r3, [pc, #656]	; (800c7b0 <_strtod_l+0x2a0>)
 800c51e:	9219      	str	r2, [sp, #100]	; 0x64
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	9307      	str	r3, [sp, #28]
 800c524:	4604      	mov	r4, r0
 800c526:	4618      	mov	r0, r3
 800c528:	4688      	mov	r8, r1
 800c52a:	f7f3 fe71 	bl	8000210 <strlen>
 800c52e:	f04f 0a00 	mov.w	sl, #0
 800c532:	4605      	mov	r5, r0
 800c534:	f04f 0b00 	mov.w	fp, #0
 800c538:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c53c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c53e:	781a      	ldrb	r2, [r3, #0]
 800c540:	2a2b      	cmp	r2, #43	; 0x2b
 800c542:	d04c      	beq.n	800c5de <_strtod_l+0xce>
 800c544:	d839      	bhi.n	800c5ba <_strtod_l+0xaa>
 800c546:	2a0d      	cmp	r2, #13
 800c548:	d832      	bhi.n	800c5b0 <_strtod_l+0xa0>
 800c54a:	2a08      	cmp	r2, #8
 800c54c:	d832      	bhi.n	800c5b4 <_strtod_l+0xa4>
 800c54e:	2a00      	cmp	r2, #0
 800c550:	d03c      	beq.n	800c5cc <_strtod_l+0xbc>
 800c552:	2300      	movs	r3, #0
 800c554:	930e      	str	r3, [sp, #56]	; 0x38
 800c556:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c558:	7833      	ldrb	r3, [r6, #0]
 800c55a:	2b30      	cmp	r3, #48	; 0x30
 800c55c:	f040 80b4 	bne.w	800c6c8 <_strtod_l+0x1b8>
 800c560:	7873      	ldrb	r3, [r6, #1]
 800c562:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c566:	2b58      	cmp	r3, #88	; 0x58
 800c568:	d16c      	bne.n	800c644 <_strtod_l+0x134>
 800c56a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c56c:	9301      	str	r3, [sp, #4]
 800c56e:	ab1e      	add	r3, sp, #120	; 0x78
 800c570:	9702      	str	r7, [sp, #8]
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	4a8f      	ldr	r2, [pc, #572]	; (800c7b4 <_strtod_l+0x2a4>)
 800c576:	ab1f      	add	r3, sp, #124	; 0x7c
 800c578:	a91d      	add	r1, sp, #116	; 0x74
 800c57a:	4620      	mov	r0, r4
 800c57c:	f001 fd40 	bl	800e000 <__gethex>
 800c580:	f010 0707 	ands.w	r7, r0, #7
 800c584:	4605      	mov	r5, r0
 800c586:	d005      	beq.n	800c594 <_strtod_l+0x84>
 800c588:	2f06      	cmp	r7, #6
 800c58a:	d12a      	bne.n	800c5e2 <_strtod_l+0xd2>
 800c58c:	3601      	adds	r6, #1
 800c58e:	2300      	movs	r3, #0
 800c590:	961d      	str	r6, [sp, #116]	; 0x74
 800c592:	930e      	str	r3, [sp, #56]	; 0x38
 800c594:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c596:	2b00      	cmp	r3, #0
 800c598:	f040 8596 	bne.w	800d0c8 <_strtod_l+0xbb8>
 800c59c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c59e:	b1db      	cbz	r3, 800c5d8 <_strtod_l+0xc8>
 800c5a0:	4652      	mov	r2, sl
 800c5a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c5a6:	ec43 2b10 	vmov	d0, r2, r3
 800c5aa:	b023      	add	sp, #140	; 0x8c
 800c5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b0:	2a20      	cmp	r2, #32
 800c5b2:	d1ce      	bne.n	800c552 <_strtod_l+0x42>
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	931d      	str	r3, [sp, #116]	; 0x74
 800c5b8:	e7c0      	b.n	800c53c <_strtod_l+0x2c>
 800c5ba:	2a2d      	cmp	r2, #45	; 0x2d
 800c5bc:	d1c9      	bne.n	800c552 <_strtod_l+0x42>
 800c5be:	2201      	movs	r2, #1
 800c5c0:	920e      	str	r2, [sp, #56]	; 0x38
 800c5c2:	1c5a      	adds	r2, r3, #1
 800c5c4:	921d      	str	r2, [sp, #116]	; 0x74
 800c5c6:	785b      	ldrb	r3, [r3, #1]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1c4      	bne.n	800c556 <_strtod_l+0x46>
 800c5cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5ce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f040 8576 	bne.w	800d0c4 <_strtod_l+0xbb4>
 800c5d8:	4652      	mov	r2, sl
 800c5da:	465b      	mov	r3, fp
 800c5dc:	e7e3      	b.n	800c5a6 <_strtod_l+0x96>
 800c5de:	2200      	movs	r2, #0
 800c5e0:	e7ee      	b.n	800c5c0 <_strtod_l+0xb0>
 800c5e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c5e4:	b13a      	cbz	r2, 800c5f6 <_strtod_l+0xe6>
 800c5e6:	2135      	movs	r1, #53	; 0x35
 800c5e8:	a820      	add	r0, sp, #128	; 0x80
 800c5ea:	f002 fcb8 	bl	800ef5e <__copybits>
 800c5ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f002 f87d 	bl	800e6f0 <_Bfree>
 800c5f6:	3f01      	subs	r7, #1
 800c5f8:	2f05      	cmp	r7, #5
 800c5fa:	d807      	bhi.n	800c60c <_strtod_l+0xfc>
 800c5fc:	e8df f007 	tbb	[pc, r7]
 800c600:	1d180b0e 	.word	0x1d180b0e
 800c604:	030e      	.short	0x030e
 800c606:	f04f 0b00 	mov.w	fp, #0
 800c60a:	46da      	mov	sl, fp
 800c60c:	0728      	lsls	r0, r5, #28
 800c60e:	d5c1      	bpl.n	800c594 <_strtod_l+0x84>
 800c610:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c614:	e7be      	b.n	800c594 <_strtod_l+0x84>
 800c616:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c61a:	e7f7      	b.n	800c60c <_strtod_l+0xfc>
 800c61c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800c620:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c622:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c626:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c62a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c62e:	e7ed      	b.n	800c60c <_strtod_l+0xfc>
 800c630:	f8df b184 	ldr.w	fp, [pc, #388]	; 800c7b8 <_strtod_l+0x2a8>
 800c634:	f04f 0a00 	mov.w	sl, #0
 800c638:	e7e8      	b.n	800c60c <_strtod_l+0xfc>
 800c63a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c63e:	f04f 3aff 	mov.w	sl, #4294967295
 800c642:	e7e3      	b.n	800c60c <_strtod_l+0xfc>
 800c644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c646:	1c5a      	adds	r2, r3, #1
 800c648:	921d      	str	r2, [sp, #116]	; 0x74
 800c64a:	785b      	ldrb	r3, [r3, #1]
 800c64c:	2b30      	cmp	r3, #48	; 0x30
 800c64e:	d0f9      	beq.n	800c644 <_strtod_l+0x134>
 800c650:	2b00      	cmp	r3, #0
 800c652:	d09f      	beq.n	800c594 <_strtod_l+0x84>
 800c654:	2301      	movs	r3, #1
 800c656:	f04f 0900 	mov.w	r9, #0
 800c65a:	9304      	str	r3, [sp, #16]
 800c65c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c65e:	930a      	str	r3, [sp, #40]	; 0x28
 800c660:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c664:	464f      	mov	r7, r9
 800c666:	220a      	movs	r2, #10
 800c668:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c66a:	7806      	ldrb	r6, [r0, #0]
 800c66c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c670:	b2d9      	uxtb	r1, r3
 800c672:	2909      	cmp	r1, #9
 800c674:	d92a      	bls.n	800c6cc <_strtod_l+0x1bc>
 800c676:	9907      	ldr	r1, [sp, #28]
 800c678:	462a      	mov	r2, r5
 800c67a:	f002 fe29 	bl	800f2d0 <strncmp>
 800c67e:	b398      	cbz	r0, 800c6e8 <_strtod_l+0x1d8>
 800c680:	2000      	movs	r0, #0
 800c682:	4633      	mov	r3, r6
 800c684:	463d      	mov	r5, r7
 800c686:	9007      	str	r0, [sp, #28]
 800c688:	4602      	mov	r2, r0
 800c68a:	2b65      	cmp	r3, #101	; 0x65
 800c68c:	d001      	beq.n	800c692 <_strtod_l+0x182>
 800c68e:	2b45      	cmp	r3, #69	; 0x45
 800c690:	d118      	bne.n	800c6c4 <_strtod_l+0x1b4>
 800c692:	b91d      	cbnz	r5, 800c69c <_strtod_l+0x18c>
 800c694:	9b04      	ldr	r3, [sp, #16]
 800c696:	4303      	orrs	r3, r0
 800c698:	d098      	beq.n	800c5cc <_strtod_l+0xbc>
 800c69a:	2500      	movs	r5, #0
 800c69c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c6a0:	f108 0301 	add.w	r3, r8, #1
 800c6a4:	931d      	str	r3, [sp, #116]	; 0x74
 800c6a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c6aa:	2b2b      	cmp	r3, #43	; 0x2b
 800c6ac:	d075      	beq.n	800c79a <_strtod_l+0x28a>
 800c6ae:	2b2d      	cmp	r3, #45	; 0x2d
 800c6b0:	d07b      	beq.n	800c7aa <_strtod_l+0x29a>
 800c6b2:	f04f 0c00 	mov.w	ip, #0
 800c6b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c6ba:	2909      	cmp	r1, #9
 800c6bc:	f240 8082 	bls.w	800c7c4 <_strtod_l+0x2b4>
 800c6c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c6c4:	2600      	movs	r6, #0
 800c6c6:	e09d      	b.n	800c804 <_strtod_l+0x2f4>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	e7c4      	b.n	800c656 <_strtod_l+0x146>
 800c6cc:	2f08      	cmp	r7, #8
 800c6ce:	bfd8      	it	le
 800c6d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c6d2:	f100 0001 	add.w	r0, r0, #1
 800c6d6:	bfda      	itte	le
 800c6d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c6dc:	9309      	strle	r3, [sp, #36]	; 0x24
 800c6de:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c6e2:	3701      	adds	r7, #1
 800c6e4:	901d      	str	r0, [sp, #116]	; 0x74
 800c6e6:	e7bf      	b.n	800c668 <_strtod_l+0x158>
 800c6e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c6ea:	195a      	adds	r2, r3, r5
 800c6ec:	921d      	str	r2, [sp, #116]	; 0x74
 800c6ee:	5d5b      	ldrb	r3, [r3, r5]
 800c6f0:	2f00      	cmp	r7, #0
 800c6f2:	d037      	beq.n	800c764 <_strtod_l+0x254>
 800c6f4:	9007      	str	r0, [sp, #28]
 800c6f6:	463d      	mov	r5, r7
 800c6f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c6fc:	2a09      	cmp	r2, #9
 800c6fe:	d912      	bls.n	800c726 <_strtod_l+0x216>
 800c700:	2201      	movs	r2, #1
 800c702:	e7c2      	b.n	800c68a <_strtod_l+0x17a>
 800c704:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c706:	1c5a      	adds	r2, r3, #1
 800c708:	921d      	str	r2, [sp, #116]	; 0x74
 800c70a:	785b      	ldrb	r3, [r3, #1]
 800c70c:	3001      	adds	r0, #1
 800c70e:	2b30      	cmp	r3, #48	; 0x30
 800c710:	d0f8      	beq.n	800c704 <_strtod_l+0x1f4>
 800c712:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c716:	2a08      	cmp	r2, #8
 800c718:	f200 84db 	bhi.w	800d0d2 <_strtod_l+0xbc2>
 800c71c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c71e:	9007      	str	r0, [sp, #28]
 800c720:	2000      	movs	r0, #0
 800c722:	920a      	str	r2, [sp, #40]	; 0x28
 800c724:	4605      	mov	r5, r0
 800c726:	3b30      	subs	r3, #48	; 0x30
 800c728:	f100 0201 	add.w	r2, r0, #1
 800c72c:	d014      	beq.n	800c758 <_strtod_l+0x248>
 800c72e:	9907      	ldr	r1, [sp, #28]
 800c730:	4411      	add	r1, r2
 800c732:	9107      	str	r1, [sp, #28]
 800c734:	462a      	mov	r2, r5
 800c736:	eb00 0e05 	add.w	lr, r0, r5
 800c73a:	210a      	movs	r1, #10
 800c73c:	4572      	cmp	r2, lr
 800c73e:	d113      	bne.n	800c768 <_strtod_l+0x258>
 800c740:	182a      	adds	r2, r5, r0
 800c742:	2a08      	cmp	r2, #8
 800c744:	f105 0501 	add.w	r5, r5, #1
 800c748:	4405      	add	r5, r0
 800c74a:	dc1c      	bgt.n	800c786 <_strtod_l+0x276>
 800c74c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c74e:	220a      	movs	r2, #10
 800c750:	fb02 3301 	mla	r3, r2, r1, r3
 800c754:	9309      	str	r3, [sp, #36]	; 0x24
 800c756:	2200      	movs	r2, #0
 800c758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c75a:	1c59      	adds	r1, r3, #1
 800c75c:	911d      	str	r1, [sp, #116]	; 0x74
 800c75e:	785b      	ldrb	r3, [r3, #1]
 800c760:	4610      	mov	r0, r2
 800c762:	e7c9      	b.n	800c6f8 <_strtod_l+0x1e8>
 800c764:	4638      	mov	r0, r7
 800c766:	e7d2      	b.n	800c70e <_strtod_l+0x1fe>
 800c768:	2a08      	cmp	r2, #8
 800c76a:	dc04      	bgt.n	800c776 <_strtod_l+0x266>
 800c76c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c76e:	434e      	muls	r6, r1
 800c770:	9609      	str	r6, [sp, #36]	; 0x24
 800c772:	3201      	adds	r2, #1
 800c774:	e7e2      	b.n	800c73c <_strtod_l+0x22c>
 800c776:	f102 0c01 	add.w	ip, r2, #1
 800c77a:	f1bc 0f10 	cmp.w	ip, #16
 800c77e:	bfd8      	it	le
 800c780:	fb01 f909 	mulle.w	r9, r1, r9
 800c784:	e7f5      	b.n	800c772 <_strtod_l+0x262>
 800c786:	2d10      	cmp	r5, #16
 800c788:	bfdc      	itt	le
 800c78a:	220a      	movle	r2, #10
 800c78c:	fb02 3909 	mlale	r9, r2, r9, r3
 800c790:	e7e1      	b.n	800c756 <_strtod_l+0x246>
 800c792:	2300      	movs	r3, #0
 800c794:	9307      	str	r3, [sp, #28]
 800c796:	2201      	movs	r2, #1
 800c798:	e77c      	b.n	800c694 <_strtod_l+0x184>
 800c79a:	f04f 0c00 	mov.w	ip, #0
 800c79e:	f108 0302 	add.w	r3, r8, #2
 800c7a2:	931d      	str	r3, [sp, #116]	; 0x74
 800c7a4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c7a8:	e785      	b.n	800c6b6 <_strtod_l+0x1a6>
 800c7aa:	f04f 0c01 	mov.w	ip, #1
 800c7ae:	e7f6      	b.n	800c79e <_strtod_l+0x28e>
 800c7b0:	08010d08 	.word	0x08010d08
 800c7b4:	08010ab8 	.word	0x08010ab8
 800c7b8:	7ff00000 	.word	0x7ff00000
 800c7bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c7be:	1c59      	adds	r1, r3, #1
 800c7c0:	911d      	str	r1, [sp, #116]	; 0x74
 800c7c2:	785b      	ldrb	r3, [r3, #1]
 800c7c4:	2b30      	cmp	r3, #48	; 0x30
 800c7c6:	d0f9      	beq.n	800c7bc <_strtod_l+0x2ac>
 800c7c8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c7cc:	2908      	cmp	r1, #8
 800c7ce:	f63f af79 	bhi.w	800c6c4 <_strtod_l+0x1b4>
 800c7d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c7d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c7d8:	9308      	str	r3, [sp, #32]
 800c7da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c7dc:	1c59      	adds	r1, r3, #1
 800c7de:	911d      	str	r1, [sp, #116]	; 0x74
 800c7e0:	785b      	ldrb	r3, [r3, #1]
 800c7e2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800c7e6:	2e09      	cmp	r6, #9
 800c7e8:	d937      	bls.n	800c85a <_strtod_l+0x34a>
 800c7ea:	9e08      	ldr	r6, [sp, #32]
 800c7ec:	1b89      	subs	r1, r1, r6
 800c7ee:	2908      	cmp	r1, #8
 800c7f0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c7f4:	dc02      	bgt.n	800c7fc <_strtod_l+0x2ec>
 800c7f6:	4576      	cmp	r6, lr
 800c7f8:	bfa8      	it	ge
 800c7fa:	4676      	movge	r6, lr
 800c7fc:	f1bc 0f00 	cmp.w	ip, #0
 800c800:	d000      	beq.n	800c804 <_strtod_l+0x2f4>
 800c802:	4276      	negs	r6, r6
 800c804:	2d00      	cmp	r5, #0
 800c806:	d14f      	bne.n	800c8a8 <_strtod_l+0x398>
 800c808:	9904      	ldr	r1, [sp, #16]
 800c80a:	4301      	orrs	r1, r0
 800c80c:	f47f aec2 	bne.w	800c594 <_strtod_l+0x84>
 800c810:	2a00      	cmp	r2, #0
 800c812:	f47f aedb 	bne.w	800c5cc <_strtod_l+0xbc>
 800c816:	2b69      	cmp	r3, #105	; 0x69
 800c818:	d027      	beq.n	800c86a <_strtod_l+0x35a>
 800c81a:	dc24      	bgt.n	800c866 <_strtod_l+0x356>
 800c81c:	2b49      	cmp	r3, #73	; 0x49
 800c81e:	d024      	beq.n	800c86a <_strtod_l+0x35a>
 800c820:	2b4e      	cmp	r3, #78	; 0x4e
 800c822:	f47f aed3 	bne.w	800c5cc <_strtod_l+0xbc>
 800c826:	499e      	ldr	r1, [pc, #632]	; (800caa0 <_strtod_l+0x590>)
 800c828:	a81d      	add	r0, sp, #116	; 0x74
 800c82a:	f001 fe41 	bl	800e4b0 <__match>
 800c82e:	2800      	cmp	r0, #0
 800c830:	f43f aecc 	beq.w	800c5cc <_strtod_l+0xbc>
 800c834:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b28      	cmp	r3, #40	; 0x28
 800c83a:	d12d      	bne.n	800c898 <_strtod_l+0x388>
 800c83c:	4999      	ldr	r1, [pc, #612]	; (800caa4 <_strtod_l+0x594>)
 800c83e:	aa20      	add	r2, sp, #128	; 0x80
 800c840:	a81d      	add	r0, sp, #116	; 0x74
 800c842:	f001 fe49 	bl	800e4d8 <__hexnan>
 800c846:	2805      	cmp	r0, #5
 800c848:	d126      	bne.n	800c898 <_strtod_l+0x388>
 800c84a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c84c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800c850:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c854:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c858:	e69c      	b.n	800c594 <_strtod_l+0x84>
 800c85a:	210a      	movs	r1, #10
 800c85c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c860:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c864:	e7b9      	b.n	800c7da <_strtod_l+0x2ca>
 800c866:	2b6e      	cmp	r3, #110	; 0x6e
 800c868:	e7db      	b.n	800c822 <_strtod_l+0x312>
 800c86a:	498f      	ldr	r1, [pc, #572]	; (800caa8 <_strtod_l+0x598>)
 800c86c:	a81d      	add	r0, sp, #116	; 0x74
 800c86e:	f001 fe1f 	bl	800e4b0 <__match>
 800c872:	2800      	cmp	r0, #0
 800c874:	f43f aeaa 	beq.w	800c5cc <_strtod_l+0xbc>
 800c878:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c87a:	498c      	ldr	r1, [pc, #560]	; (800caac <_strtod_l+0x59c>)
 800c87c:	3b01      	subs	r3, #1
 800c87e:	a81d      	add	r0, sp, #116	; 0x74
 800c880:	931d      	str	r3, [sp, #116]	; 0x74
 800c882:	f001 fe15 	bl	800e4b0 <__match>
 800c886:	b910      	cbnz	r0, 800c88e <_strtod_l+0x37e>
 800c888:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c88a:	3301      	adds	r3, #1
 800c88c:	931d      	str	r3, [sp, #116]	; 0x74
 800c88e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800cabc <_strtod_l+0x5ac>
 800c892:	f04f 0a00 	mov.w	sl, #0
 800c896:	e67d      	b.n	800c594 <_strtod_l+0x84>
 800c898:	4885      	ldr	r0, [pc, #532]	; (800cab0 <_strtod_l+0x5a0>)
 800c89a:	f002 fd11 	bl	800f2c0 <nan>
 800c89e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c8a2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c8a6:	e675      	b.n	800c594 <_strtod_l+0x84>
 800c8a8:	9b07      	ldr	r3, [sp, #28]
 800c8aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8ac:	1af3      	subs	r3, r6, r3
 800c8ae:	2f00      	cmp	r7, #0
 800c8b0:	bf08      	it	eq
 800c8b2:	462f      	moveq	r7, r5
 800c8b4:	2d10      	cmp	r5, #16
 800c8b6:	9308      	str	r3, [sp, #32]
 800c8b8:	46a8      	mov	r8, r5
 800c8ba:	bfa8      	it	ge
 800c8bc:	f04f 0810 	movge.w	r8, #16
 800c8c0:	f7f3 fe40 	bl	8000544 <__aeabi_ui2d>
 800c8c4:	2d09      	cmp	r5, #9
 800c8c6:	4682      	mov	sl, r0
 800c8c8:	468b      	mov	fp, r1
 800c8ca:	dd13      	ble.n	800c8f4 <_strtod_l+0x3e4>
 800c8cc:	4b79      	ldr	r3, [pc, #484]	; (800cab4 <_strtod_l+0x5a4>)
 800c8ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c8d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c8d6:	f7f3 feaf 	bl	8000638 <__aeabi_dmul>
 800c8da:	4682      	mov	sl, r0
 800c8dc:	4648      	mov	r0, r9
 800c8de:	468b      	mov	fp, r1
 800c8e0:	f7f3 fe30 	bl	8000544 <__aeabi_ui2d>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	4650      	mov	r0, sl
 800c8ea:	4659      	mov	r1, fp
 800c8ec:	f7f3 fcee 	bl	80002cc <__adddf3>
 800c8f0:	4682      	mov	sl, r0
 800c8f2:	468b      	mov	fp, r1
 800c8f4:	2d0f      	cmp	r5, #15
 800c8f6:	dc38      	bgt.n	800c96a <_strtod_l+0x45a>
 800c8f8:	9b08      	ldr	r3, [sp, #32]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f43f ae4a 	beq.w	800c594 <_strtod_l+0x84>
 800c900:	dd24      	ble.n	800c94c <_strtod_l+0x43c>
 800c902:	2b16      	cmp	r3, #22
 800c904:	dc0b      	bgt.n	800c91e <_strtod_l+0x40e>
 800c906:	4d6b      	ldr	r5, [pc, #428]	; (800cab4 <_strtod_l+0x5a4>)
 800c908:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800c90c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c910:	4652      	mov	r2, sl
 800c912:	465b      	mov	r3, fp
 800c914:	f7f3 fe90 	bl	8000638 <__aeabi_dmul>
 800c918:	4682      	mov	sl, r0
 800c91a:	468b      	mov	fp, r1
 800c91c:	e63a      	b.n	800c594 <_strtod_l+0x84>
 800c91e:	9a08      	ldr	r2, [sp, #32]
 800c920:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c924:	4293      	cmp	r3, r2
 800c926:	db20      	blt.n	800c96a <_strtod_l+0x45a>
 800c928:	4c62      	ldr	r4, [pc, #392]	; (800cab4 <_strtod_l+0x5a4>)
 800c92a:	f1c5 050f 	rsb	r5, r5, #15
 800c92e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c932:	4652      	mov	r2, sl
 800c934:	465b      	mov	r3, fp
 800c936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c93a:	f7f3 fe7d 	bl	8000638 <__aeabi_dmul>
 800c93e:	9b08      	ldr	r3, [sp, #32]
 800c940:	1b5d      	subs	r5, r3, r5
 800c942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c946:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c94a:	e7e3      	b.n	800c914 <_strtod_l+0x404>
 800c94c:	9b08      	ldr	r3, [sp, #32]
 800c94e:	3316      	adds	r3, #22
 800c950:	db0b      	blt.n	800c96a <_strtod_l+0x45a>
 800c952:	9b07      	ldr	r3, [sp, #28]
 800c954:	4a57      	ldr	r2, [pc, #348]	; (800cab4 <_strtod_l+0x5a4>)
 800c956:	1b9e      	subs	r6, r3, r6
 800c958:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c95c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c960:	4650      	mov	r0, sl
 800c962:	4659      	mov	r1, fp
 800c964:	f7f3 ff92 	bl	800088c <__aeabi_ddiv>
 800c968:	e7d6      	b.n	800c918 <_strtod_l+0x408>
 800c96a:	9b08      	ldr	r3, [sp, #32]
 800c96c:	eba5 0808 	sub.w	r8, r5, r8
 800c970:	4498      	add	r8, r3
 800c972:	f1b8 0f00 	cmp.w	r8, #0
 800c976:	dd71      	ble.n	800ca5c <_strtod_l+0x54c>
 800c978:	f018 030f 	ands.w	r3, r8, #15
 800c97c:	d00a      	beq.n	800c994 <_strtod_l+0x484>
 800c97e:	494d      	ldr	r1, [pc, #308]	; (800cab4 <_strtod_l+0x5a4>)
 800c980:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c984:	4652      	mov	r2, sl
 800c986:	465b      	mov	r3, fp
 800c988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c98c:	f7f3 fe54 	bl	8000638 <__aeabi_dmul>
 800c990:	4682      	mov	sl, r0
 800c992:	468b      	mov	fp, r1
 800c994:	f038 080f 	bics.w	r8, r8, #15
 800c998:	d04d      	beq.n	800ca36 <_strtod_l+0x526>
 800c99a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c99e:	dd22      	ble.n	800c9e6 <_strtod_l+0x4d6>
 800c9a0:	2500      	movs	r5, #0
 800c9a2:	462e      	mov	r6, r5
 800c9a4:	9509      	str	r5, [sp, #36]	; 0x24
 800c9a6:	9507      	str	r5, [sp, #28]
 800c9a8:	2322      	movs	r3, #34	; 0x22
 800c9aa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800cabc <_strtod_l+0x5ac>
 800c9ae:	6023      	str	r3, [r4, #0]
 800c9b0:	f04f 0a00 	mov.w	sl, #0
 800c9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f43f adec 	beq.w	800c594 <_strtod_l+0x84>
 800c9bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f001 fe96 	bl	800e6f0 <_Bfree>
 800c9c4:	9907      	ldr	r1, [sp, #28]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f001 fe92 	bl	800e6f0 <_Bfree>
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f001 fe8e 	bl	800e6f0 <_Bfree>
 800c9d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f001 fe8a 	bl	800e6f0 <_Bfree>
 800c9dc:	4629      	mov	r1, r5
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f001 fe86 	bl	800e6f0 <_Bfree>
 800c9e4:	e5d6      	b.n	800c594 <_strtod_l+0x84>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c9ec:	4650      	mov	r0, sl
 800c9ee:	4659      	mov	r1, fp
 800c9f0:	4699      	mov	r9, r3
 800c9f2:	f1b8 0f01 	cmp.w	r8, #1
 800c9f6:	dc21      	bgt.n	800ca3c <_strtod_l+0x52c>
 800c9f8:	b10b      	cbz	r3, 800c9fe <_strtod_l+0x4ee>
 800c9fa:	4682      	mov	sl, r0
 800c9fc:	468b      	mov	fp, r1
 800c9fe:	4b2e      	ldr	r3, [pc, #184]	; (800cab8 <_strtod_l+0x5a8>)
 800ca00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ca04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ca08:	4652      	mov	r2, sl
 800ca0a:	465b      	mov	r3, fp
 800ca0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ca10:	f7f3 fe12 	bl	8000638 <__aeabi_dmul>
 800ca14:	4b29      	ldr	r3, [pc, #164]	; (800cabc <_strtod_l+0x5ac>)
 800ca16:	460a      	mov	r2, r1
 800ca18:	400b      	ands	r3, r1
 800ca1a:	4929      	ldr	r1, [pc, #164]	; (800cac0 <_strtod_l+0x5b0>)
 800ca1c:	428b      	cmp	r3, r1
 800ca1e:	4682      	mov	sl, r0
 800ca20:	d8be      	bhi.n	800c9a0 <_strtod_l+0x490>
 800ca22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ca26:	428b      	cmp	r3, r1
 800ca28:	bf86      	itte	hi
 800ca2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800cac4 <_strtod_l+0x5b4>
 800ca2e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ca32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ca36:	2300      	movs	r3, #0
 800ca38:	9304      	str	r3, [sp, #16]
 800ca3a:	e081      	b.n	800cb40 <_strtod_l+0x630>
 800ca3c:	f018 0f01 	tst.w	r8, #1
 800ca40:	d007      	beq.n	800ca52 <_strtod_l+0x542>
 800ca42:	4b1d      	ldr	r3, [pc, #116]	; (800cab8 <_strtod_l+0x5a8>)
 800ca44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4c:	f7f3 fdf4 	bl	8000638 <__aeabi_dmul>
 800ca50:	2301      	movs	r3, #1
 800ca52:	f109 0901 	add.w	r9, r9, #1
 800ca56:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ca5a:	e7ca      	b.n	800c9f2 <_strtod_l+0x4e2>
 800ca5c:	d0eb      	beq.n	800ca36 <_strtod_l+0x526>
 800ca5e:	f1c8 0800 	rsb	r8, r8, #0
 800ca62:	f018 020f 	ands.w	r2, r8, #15
 800ca66:	d00a      	beq.n	800ca7e <_strtod_l+0x56e>
 800ca68:	4b12      	ldr	r3, [pc, #72]	; (800cab4 <_strtod_l+0x5a4>)
 800ca6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca6e:	4650      	mov	r0, sl
 800ca70:	4659      	mov	r1, fp
 800ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca76:	f7f3 ff09 	bl	800088c <__aeabi_ddiv>
 800ca7a:	4682      	mov	sl, r0
 800ca7c:	468b      	mov	fp, r1
 800ca7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ca82:	d0d8      	beq.n	800ca36 <_strtod_l+0x526>
 800ca84:	f1b8 0f1f 	cmp.w	r8, #31
 800ca88:	dd1e      	ble.n	800cac8 <_strtod_l+0x5b8>
 800ca8a:	2500      	movs	r5, #0
 800ca8c:	462e      	mov	r6, r5
 800ca8e:	9509      	str	r5, [sp, #36]	; 0x24
 800ca90:	9507      	str	r5, [sp, #28]
 800ca92:	2322      	movs	r3, #34	; 0x22
 800ca94:	f04f 0a00 	mov.w	sl, #0
 800ca98:	f04f 0b00 	mov.w	fp, #0
 800ca9c:	6023      	str	r3, [r4, #0]
 800ca9e:	e789      	b.n	800c9b4 <_strtod_l+0x4a4>
 800caa0:	08010a89 	.word	0x08010a89
 800caa4:	08010acc 	.word	0x08010acc
 800caa8:	08010a81 	.word	0x08010a81
 800caac:	08010c0c 	.word	0x08010c0c
 800cab0:	08010ec8 	.word	0x08010ec8
 800cab4:	08010da8 	.word	0x08010da8
 800cab8:	08010d80 	.word	0x08010d80
 800cabc:	7ff00000 	.word	0x7ff00000
 800cac0:	7ca00000 	.word	0x7ca00000
 800cac4:	7fefffff 	.word	0x7fefffff
 800cac8:	f018 0310 	ands.w	r3, r8, #16
 800cacc:	bf18      	it	ne
 800cace:	236a      	movne	r3, #106	; 0x6a
 800cad0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ce88 <_strtod_l+0x978>
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	4650      	mov	r0, sl
 800cad8:	4659      	mov	r1, fp
 800cada:	2300      	movs	r3, #0
 800cadc:	f018 0f01 	tst.w	r8, #1
 800cae0:	d004      	beq.n	800caec <_strtod_l+0x5dc>
 800cae2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cae6:	f7f3 fda7 	bl	8000638 <__aeabi_dmul>
 800caea:	2301      	movs	r3, #1
 800caec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800caf0:	f109 0908 	add.w	r9, r9, #8
 800caf4:	d1f2      	bne.n	800cadc <_strtod_l+0x5cc>
 800caf6:	b10b      	cbz	r3, 800cafc <_strtod_l+0x5ec>
 800caf8:	4682      	mov	sl, r0
 800cafa:	468b      	mov	fp, r1
 800cafc:	9b04      	ldr	r3, [sp, #16]
 800cafe:	b1bb      	cbz	r3, 800cb30 <_strtod_l+0x620>
 800cb00:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800cb04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	4659      	mov	r1, fp
 800cb0c:	dd10      	ble.n	800cb30 <_strtod_l+0x620>
 800cb0e:	2b1f      	cmp	r3, #31
 800cb10:	f340 8128 	ble.w	800cd64 <_strtod_l+0x854>
 800cb14:	2b34      	cmp	r3, #52	; 0x34
 800cb16:	bfde      	ittt	le
 800cb18:	3b20      	suble	r3, #32
 800cb1a:	f04f 32ff 	movle.w	r2, #4294967295
 800cb1e:	fa02 f303 	lslle.w	r3, r2, r3
 800cb22:	f04f 0a00 	mov.w	sl, #0
 800cb26:	bfcc      	ite	gt
 800cb28:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cb2c:	ea03 0b01 	andle.w	fp, r3, r1
 800cb30:	2200      	movs	r2, #0
 800cb32:	2300      	movs	r3, #0
 800cb34:	4650      	mov	r0, sl
 800cb36:	4659      	mov	r1, fp
 800cb38:	f7f3 ffe6 	bl	8000b08 <__aeabi_dcmpeq>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d1a4      	bne.n	800ca8a <_strtod_l+0x57a>
 800cb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb46:	462b      	mov	r3, r5
 800cb48:	463a      	mov	r2, r7
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f001 fe3c 	bl	800e7c8 <__s2b>
 800cb50:	9009      	str	r0, [sp, #36]	; 0x24
 800cb52:	2800      	cmp	r0, #0
 800cb54:	f43f af24 	beq.w	800c9a0 <_strtod_l+0x490>
 800cb58:	9b07      	ldr	r3, [sp, #28]
 800cb5a:	1b9e      	subs	r6, r3, r6
 800cb5c:	9b08      	ldr	r3, [sp, #32]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	bfb4      	ite	lt
 800cb62:	4633      	movlt	r3, r6
 800cb64:	2300      	movge	r3, #0
 800cb66:	9310      	str	r3, [sp, #64]	; 0x40
 800cb68:	9b08      	ldr	r3, [sp, #32]
 800cb6a:	2500      	movs	r5, #0
 800cb6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cb70:	9318      	str	r3, [sp, #96]	; 0x60
 800cb72:	462e      	mov	r6, r5
 800cb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb76:	4620      	mov	r0, r4
 800cb78:	6859      	ldr	r1, [r3, #4]
 800cb7a:	f001 fd79 	bl	800e670 <_Balloc>
 800cb7e:	9007      	str	r0, [sp, #28]
 800cb80:	2800      	cmp	r0, #0
 800cb82:	f43f af11 	beq.w	800c9a8 <_strtod_l+0x498>
 800cb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb88:	691a      	ldr	r2, [r3, #16]
 800cb8a:	3202      	adds	r2, #2
 800cb8c:	f103 010c 	add.w	r1, r3, #12
 800cb90:	0092      	lsls	r2, r2, #2
 800cb92:	300c      	adds	r0, #12
 800cb94:	f001 fd52 	bl	800e63c <memcpy>
 800cb98:	ec4b ab10 	vmov	d0, sl, fp
 800cb9c:	aa20      	add	r2, sp, #128	; 0x80
 800cb9e:	a91f      	add	r1, sp, #124	; 0x7c
 800cba0:	4620      	mov	r0, r4
 800cba2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800cba6:	f002 f94b 	bl	800ee40 <__d2b>
 800cbaa:	901e      	str	r0, [sp, #120]	; 0x78
 800cbac:	2800      	cmp	r0, #0
 800cbae:	f43f aefb 	beq.w	800c9a8 <_strtod_l+0x498>
 800cbb2:	2101      	movs	r1, #1
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f001 fea1 	bl	800e8fc <__i2b>
 800cbba:	4606      	mov	r6, r0
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	f43f aef3 	beq.w	800c9a8 <_strtod_l+0x498>
 800cbc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cbc4:	9904      	ldr	r1, [sp, #16]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	bfab      	itete	ge
 800cbca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800cbcc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800cbce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800cbd0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800cbd4:	bfac      	ite	ge
 800cbd6:	eb03 0902 	addge.w	r9, r3, r2
 800cbda:	1ad7      	sublt	r7, r2, r3
 800cbdc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cbde:	eba3 0801 	sub.w	r8, r3, r1
 800cbe2:	4490      	add	r8, r2
 800cbe4:	4ba3      	ldr	r3, [pc, #652]	; (800ce74 <_strtod_l+0x964>)
 800cbe6:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbea:	4598      	cmp	r8, r3
 800cbec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cbf0:	f280 80cc 	bge.w	800cd8c <_strtod_l+0x87c>
 800cbf4:	eba3 0308 	sub.w	r3, r3, r8
 800cbf8:	2b1f      	cmp	r3, #31
 800cbfa:	eba2 0203 	sub.w	r2, r2, r3
 800cbfe:	f04f 0101 	mov.w	r1, #1
 800cc02:	f300 80b6 	bgt.w	800cd72 <_strtod_l+0x862>
 800cc06:	fa01 f303 	lsl.w	r3, r1, r3
 800cc0a:	9311      	str	r3, [sp, #68]	; 0x44
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc10:	eb09 0802 	add.w	r8, r9, r2
 800cc14:	9b04      	ldr	r3, [sp, #16]
 800cc16:	45c1      	cmp	r9, r8
 800cc18:	4417      	add	r7, r2
 800cc1a:	441f      	add	r7, r3
 800cc1c:	464b      	mov	r3, r9
 800cc1e:	bfa8      	it	ge
 800cc20:	4643      	movge	r3, r8
 800cc22:	42bb      	cmp	r3, r7
 800cc24:	bfa8      	it	ge
 800cc26:	463b      	movge	r3, r7
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	bfc2      	ittt	gt
 800cc2c:	eba8 0803 	subgt.w	r8, r8, r3
 800cc30:	1aff      	subgt	r7, r7, r3
 800cc32:	eba9 0903 	subgt.w	r9, r9, r3
 800cc36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	dd17      	ble.n	800cc6c <_strtod_l+0x75c>
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	461a      	mov	r2, r3
 800cc40:	4620      	mov	r0, r4
 800cc42:	f001 ff17 	bl	800ea74 <__pow5mult>
 800cc46:	4606      	mov	r6, r0
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	f43f aead 	beq.w	800c9a8 <_strtod_l+0x498>
 800cc4e:	4601      	mov	r1, r0
 800cc50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cc52:	4620      	mov	r0, r4
 800cc54:	f001 fe68 	bl	800e928 <__multiply>
 800cc58:	900f      	str	r0, [sp, #60]	; 0x3c
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	f43f aea4 	beq.w	800c9a8 <_strtod_l+0x498>
 800cc60:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cc62:	4620      	mov	r0, r4
 800cc64:	f001 fd44 	bl	800e6f0 <_Bfree>
 800cc68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc6a:	931e      	str	r3, [sp, #120]	; 0x78
 800cc6c:	f1b8 0f00 	cmp.w	r8, #0
 800cc70:	f300 8091 	bgt.w	800cd96 <_strtod_l+0x886>
 800cc74:	9b08      	ldr	r3, [sp, #32]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	dd08      	ble.n	800cc8c <_strtod_l+0x77c>
 800cc7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc7c:	9907      	ldr	r1, [sp, #28]
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f001 fef8 	bl	800ea74 <__pow5mult>
 800cc84:	9007      	str	r0, [sp, #28]
 800cc86:	2800      	cmp	r0, #0
 800cc88:	f43f ae8e 	beq.w	800c9a8 <_strtod_l+0x498>
 800cc8c:	2f00      	cmp	r7, #0
 800cc8e:	dd08      	ble.n	800cca2 <_strtod_l+0x792>
 800cc90:	9907      	ldr	r1, [sp, #28]
 800cc92:	463a      	mov	r2, r7
 800cc94:	4620      	mov	r0, r4
 800cc96:	f001 ff47 	bl	800eb28 <__lshift>
 800cc9a:	9007      	str	r0, [sp, #28]
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	f43f ae83 	beq.w	800c9a8 <_strtod_l+0x498>
 800cca2:	f1b9 0f00 	cmp.w	r9, #0
 800cca6:	dd08      	ble.n	800ccba <_strtod_l+0x7aa>
 800cca8:	4631      	mov	r1, r6
 800ccaa:	464a      	mov	r2, r9
 800ccac:	4620      	mov	r0, r4
 800ccae:	f001 ff3b 	bl	800eb28 <__lshift>
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	f43f ae77 	beq.w	800c9a8 <_strtod_l+0x498>
 800ccba:	9a07      	ldr	r2, [sp, #28]
 800ccbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f001 ffba 	bl	800ec38 <__mdiff>
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	f43f ae6e 	beq.w	800c9a8 <_strtod_l+0x498>
 800cccc:	68c3      	ldr	r3, [r0, #12]
 800ccce:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	60c3      	str	r3, [r0, #12]
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	f001 ff93 	bl	800ec00 <__mcmp>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	da65      	bge.n	800cdaa <_strtod_l+0x89a>
 800ccde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cce0:	ea53 030a 	orrs.w	r3, r3, sl
 800cce4:	f040 8087 	bne.w	800cdf6 <_strtod_l+0x8e6>
 800cce8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f040 8082 	bne.w	800cdf6 <_strtod_l+0x8e6>
 800ccf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ccf6:	0d1b      	lsrs	r3, r3, #20
 800ccf8:	051b      	lsls	r3, r3, #20
 800ccfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ccfe:	d97a      	bls.n	800cdf6 <_strtod_l+0x8e6>
 800cd00:	696b      	ldr	r3, [r5, #20]
 800cd02:	b913      	cbnz	r3, 800cd0a <_strtod_l+0x7fa>
 800cd04:	692b      	ldr	r3, [r5, #16]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	dd75      	ble.n	800cdf6 <_strtod_l+0x8e6>
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f001 ff0a 	bl	800eb28 <__lshift>
 800cd14:	4631      	mov	r1, r6
 800cd16:	4605      	mov	r5, r0
 800cd18:	f001 ff72 	bl	800ec00 <__mcmp>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	dd6a      	ble.n	800cdf6 <_strtod_l+0x8e6>
 800cd20:	9904      	ldr	r1, [sp, #16]
 800cd22:	4a55      	ldr	r2, [pc, #340]	; (800ce78 <_strtod_l+0x968>)
 800cd24:	465b      	mov	r3, fp
 800cd26:	2900      	cmp	r1, #0
 800cd28:	f000 8085 	beq.w	800ce36 <_strtod_l+0x926>
 800cd2c:	ea02 010b 	and.w	r1, r2, fp
 800cd30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cd34:	dc7f      	bgt.n	800ce36 <_strtod_l+0x926>
 800cd36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cd3a:	f77f aeaa 	ble.w	800ca92 <_strtod_l+0x582>
 800cd3e:	4a4f      	ldr	r2, [pc, #316]	; (800ce7c <_strtod_l+0x96c>)
 800cd40:	2300      	movs	r3, #0
 800cd42:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800cd46:	4650      	mov	r0, sl
 800cd48:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cd4c:	4659      	mov	r1, fp
 800cd4e:	f7f3 fc73 	bl	8000638 <__aeabi_dmul>
 800cd52:	460b      	mov	r3, r1
 800cd54:	4303      	orrs	r3, r0
 800cd56:	bf08      	it	eq
 800cd58:	2322      	moveq	r3, #34	; 0x22
 800cd5a:	4682      	mov	sl, r0
 800cd5c:	468b      	mov	fp, r1
 800cd5e:	bf08      	it	eq
 800cd60:	6023      	streq	r3, [r4, #0]
 800cd62:	e62b      	b.n	800c9bc <_strtod_l+0x4ac>
 800cd64:	f04f 32ff 	mov.w	r2, #4294967295
 800cd68:	fa02 f303 	lsl.w	r3, r2, r3
 800cd6c:	ea03 0a0a 	and.w	sl, r3, sl
 800cd70:	e6de      	b.n	800cb30 <_strtod_l+0x620>
 800cd72:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cd76:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cd7a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cd7e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cd82:	fa01 f308 	lsl.w	r3, r1, r8
 800cd86:	930c      	str	r3, [sp, #48]	; 0x30
 800cd88:	9111      	str	r1, [sp, #68]	; 0x44
 800cd8a:	e741      	b.n	800cc10 <_strtod_l+0x700>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	930c      	str	r3, [sp, #48]	; 0x30
 800cd90:	2301      	movs	r3, #1
 800cd92:	9311      	str	r3, [sp, #68]	; 0x44
 800cd94:	e73c      	b.n	800cc10 <_strtod_l+0x700>
 800cd96:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cd98:	4642      	mov	r2, r8
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f001 fec4 	bl	800eb28 <__lshift>
 800cda0:	901e      	str	r0, [sp, #120]	; 0x78
 800cda2:	2800      	cmp	r0, #0
 800cda4:	f47f af66 	bne.w	800cc74 <_strtod_l+0x764>
 800cda8:	e5fe      	b.n	800c9a8 <_strtod_l+0x498>
 800cdaa:	465f      	mov	r7, fp
 800cdac:	d16e      	bne.n	800ce8c <_strtod_l+0x97c>
 800cdae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cdb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdb4:	b342      	cbz	r2, 800ce08 <_strtod_l+0x8f8>
 800cdb6:	4a32      	ldr	r2, [pc, #200]	; (800ce80 <_strtod_l+0x970>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d128      	bne.n	800ce0e <_strtod_l+0x8fe>
 800cdbc:	9b04      	ldr	r3, [sp, #16]
 800cdbe:	4650      	mov	r0, sl
 800cdc0:	b1eb      	cbz	r3, 800cdfe <_strtod_l+0x8ee>
 800cdc2:	4a2d      	ldr	r2, [pc, #180]	; (800ce78 <_strtod_l+0x968>)
 800cdc4:	403a      	ands	r2, r7
 800cdc6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cdca:	f04f 31ff 	mov.w	r1, #4294967295
 800cdce:	d819      	bhi.n	800ce04 <_strtod_l+0x8f4>
 800cdd0:	0d12      	lsrs	r2, r2, #20
 800cdd2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cdd6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdda:	4298      	cmp	r0, r3
 800cddc:	d117      	bne.n	800ce0e <_strtod_l+0x8fe>
 800cdde:	4b29      	ldr	r3, [pc, #164]	; (800ce84 <_strtod_l+0x974>)
 800cde0:	429f      	cmp	r7, r3
 800cde2:	d102      	bne.n	800cdea <_strtod_l+0x8da>
 800cde4:	3001      	adds	r0, #1
 800cde6:	f43f addf 	beq.w	800c9a8 <_strtod_l+0x498>
 800cdea:	4b23      	ldr	r3, [pc, #140]	; (800ce78 <_strtod_l+0x968>)
 800cdec:	403b      	ands	r3, r7
 800cdee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cdf2:	f04f 0a00 	mov.w	sl, #0
 800cdf6:	9b04      	ldr	r3, [sp, #16]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1a0      	bne.n	800cd3e <_strtod_l+0x82e>
 800cdfc:	e5de      	b.n	800c9bc <_strtod_l+0x4ac>
 800cdfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ce02:	e7ea      	b.n	800cdda <_strtod_l+0x8ca>
 800ce04:	460b      	mov	r3, r1
 800ce06:	e7e8      	b.n	800cdda <_strtod_l+0x8ca>
 800ce08:	ea53 030a 	orrs.w	r3, r3, sl
 800ce0c:	d088      	beq.n	800cd20 <_strtod_l+0x810>
 800ce0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce10:	b1db      	cbz	r3, 800ce4a <_strtod_l+0x93a>
 800ce12:	423b      	tst	r3, r7
 800ce14:	d0ef      	beq.n	800cdf6 <_strtod_l+0x8e6>
 800ce16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce18:	9a04      	ldr	r2, [sp, #16]
 800ce1a:	4650      	mov	r0, sl
 800ce1c:	4659      	mov	r1, fp
 800ce1e:	b1c3      	cbz	r3, 800ce52 <_strtod_l+0x942>
 800ce20:	f7ff fb5a 	bl	800c4d8 <sulp>
 800ce24:	4602      	mov	r2, r0
 800ce26:	460b      	mov	r3, r1
 800ce28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce2c:	f7f3 fa4e 	bl	80002cc <__adddf3>
 800ce30:	4682      	mov	sl, r0
 800ce32:	468b      	mov	fp, r1
 800ce34:	e7df      	b.n	800cdf6 <_strtod_l+0x8e6>
 800ce36:	4013      	ands	r3, r2
 800ce38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ce3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ce40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ce44:	f04f 3aff 	mov.w	sl, #4294967295
 800ce48:	e7d5      	b.n	800cdf6 <_strtod_l+0x8e6>
 800ce4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce4c:	ea13 0f0a 	tst.w	r3, sl
 800ce50:	e7e0      	b.n	800ce14 <_strtod_l+0x904>
 800ce52:	f7ff fb41 	bl	800c4d8 <sulp>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce5e:	f7f3 fa33 	bl	80002c8 <__aeabi_dsub>
 800ce62:	2200      	movs	r2, #0
 800ce64:	2300      	movs	r3, #0
 800ce66:	4682      	mov	sl, r0
 800ce68:	468b      	mov	fp, r1
 800ce6a:	f7f3 fe4d 	bl	8000b08 <__aeabi_dcmpeq>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d0c1      	beq.n	800cdf6 <_strtod_l+0x8e6>
 800ce72:	e60e      	b.n	800ca92 <_strtod_l+0x582>
 800ce74:	fffffc02 	.word	0xfffffc02
 800ce78:	7ff00000 	.word	0x7ff00000
 800ce7c:	39500000 	.word	0x39500000
 800ce80:	000fffff 	.word	0x000fffff
 800ce84:	7fefffff 	.word	0x7fefffff
 800ce88:	08010ae0 	.word	0x08010ae0
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	4628      	mov	r0, r5
 800ce90:	f002 f832 	bl	800eef8 <__ratio>
 800ce94:	ec59 8b10 	vmov	r8, r9, d0
 800ce98:	ee10 0a10 	vmov	r0, s0
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cea2:	4649      	mov	r1, r9
 800cea4:	f7f3 fe44 	bl	8000b30 <__aeabi_dcmple>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d07c      	beq.n	800cfa6 <_strtod_l+0xa96>
 800ceac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d04c      	beq.n	800cf4c <_strtod_l+0xa3c>
 800ceb2:	4b95      	ldr	r3, [pc, #596]	; (800d108 <_strtod_l+0xbf8>)
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ceba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d108 <_strtod_l+0xbf8>
 800cebe:	f04f 0800 	mov.w	r8, #0
 800cec2:	4b92      	ldr	r3, [pc, #584]	; (800d10c <_strtod_l+0xbfc>)
 800cec4:	403b      	ands	r3, r7
 800cec6:	9311      	str	r3, [sp, #68]	; 0x44
 800cec8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ceca:	4b91      	ldr	r3, [pc, #580]	; (800d110 <_strtod_l+0xc00>)
 800cecc:	429a      	cmp	r2, r3
 800cece:	f040 80b2 	bne.w	800d036 <_strtod_l+0xb26>
 800ced2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ced6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ceda:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cede:	ec4b ab10 	vmov	d0, sl, fp
 800cee2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800cee6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ceea:	f001 ff2d 	bl	800ed48 <__ulp>
 800ceee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cef2:	ec53 2b10 	vmov	r2, r3, d0
 800cef6:	f7f3 fb9f 	bl	8000638 <__aeabi_dmul>
 800cefa:	4652      	mov	r2, sl
 800cefc:	465b      	mov	r3, fp
 800cefe:	f7f3 f9e5 	bl	80002cc <__adddf3>
 800cf02:	460b      	mov	r3, r1
 800cf04:	4981      	ldr	r1, [pc, #516]	; (800d10c <_strtod_l+0xbfc>)
 800cf06:	4a83      	ldr	r2, [pc, #524]	; (800d114 <_strtod_l+0xc04>)
 800cf08:	4019      	ands	r1, r3
 800cf0a:	4291      	cmp	r1, r2
 800cf0c:	4682      	mov	sl, r0
 800cf0e:	d95e      	bls.n	800cfce <_strtod_l+0xabe>
 800cf10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf12:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d103      	bne.n	800cf22 <_strtod_l+0xa12>
 800cf1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	f43f ad43 	beq.w	800c9a8 <_strtod_l+0x498>
 800cf22:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d120 <_strtod_l+0xc10>
 800cf26:	f04f 3aff 	mov.w	sl, #4294967295
 800cf2a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f001 fbdf 	bl	800e6f0 <_Bfree>
 800cf32:	9907      	ldr	r1, [sp, #28]
 800cf34:	4620      	mov	r0, r4
 800cf36:	f001 fbdb 	bl	800e6f0 <_Bfree>
 800cf3a:	4631      	mov	r1, r6
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f001 fbd7 	bl	800e6f0 <_Bfree>
 800cf42:	4629      	mov	r1, r5
 800cf44:	4620      	mov	r0, r4
 800cf46:	f001 fbd3 	bl	800e6f0 <_Bfree>
 800cf4a:	e613      	b.n	800cb74 <_strtod_l+0x664>
 800cf4c:	f1ba 0f00 	cmp.w	sl, #0
 800cf50:	d11b      	bne.n	800cf8a <_strtod_l+0xa7a>
 800cf52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf56:	b9f3      	cbnz	r3, 800cf96 <_strtod_l+0xa86>
 800cf58:	4b6b      	ldr	r3, [pc, #428]	; (800d108 <_strtod_l+0xbf8>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	4649      	mov	r1, r9
 800cf60:	f7f3 fddc 	bl	8000b1c <__aeabi_dcmplt>
 800cf64:	b9d0      	cbnz	r0, 800cf9c <_strtod_l+0xa8c>
 800cf66:	4640      	mov	r0, r8
 800cf68:	4649      	mov	r1, r9
 800cf6a:	4b6b      	ldr	r3, [pc, #428]	; (800d118 <_strtod_l+0xc08>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f7f3 fb63 	bl	8000638 <__aeabi_dmul>
 800cf72:	4680      	mov	r8, r0
 800cf74:	4689      	mov	r9, r1
 800cf76:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cf7a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800cf7e:	931b      	str	r3, [sp, #108]	; 0x6c
 800cf80:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800cf84:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800cf88:	e79b      	b.n	800cec2 <_strtod_l+0x9b2>
 800cf8a:	f1ba 0f01 	cmp.w	sl, #1
 800cf8e:	d102      	bne.n	800cf96 <_strtod_l+0xa86>
 800cf90:	2f00      	cmp	r7, #0
 800cf92:	f43f ad7e 	beq.w	800ca92 <_strtod_l+0x582>
 800cf96:	4b61      	ldr	r3, [pc, #388]	; (800d11c <_strtod_l+0xc0c>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	e78c      	b.n	800ceb6 <_strtod_l+0x9a6>
 800cf9c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d118 <_strtod_l+0xc08>
 800cfa0:	f04f 0800 	mov.w	r8, #0
 800cfa4:	e7e7      	b.n	800cf76 <_strtod_l+0xa66>
 800cfa6:	4b5c      	ldr	r3, [pc, #368]	; (800d118 <_strtod_l+0xc08>)
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	4649      	mov	r1, r9
 800cfac:	2200      	movs	r2, #0
 800cfae:	f7f3 fb43 	bl	8000638 <__aeabi_dmul>
 800cfb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfb4:	4680      	mov	r8, r0
 800cfb6:	4689      	mov	r9, r1
 800cfb8:	b933      	cbnz	r3, 800cfc8 <_strtod_l+0xab8>
 800cfba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfbe:	9012      	str	r0, [sp, #72]	; 0x48
 800cfc0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cfc2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cfc6:	e7dd      	b.n	800cf84 <_strtod_l+0xa74>
 800cfc8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800cfcc:	e7f9      	b.n	800cfc2 <_strtod_l+0xab2>
 800cfce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cfd2:	9b04      	ldr	r3, [sp, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d1a8      	bne.n	800cf2a <_strtod_l+0xa1a>
 800cfd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cfdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cfde:	0d1b      	lsrs	r3, r3, #20
 800cfe0:	051b      	lsls	r3, r3, #20
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d1a1      	bne.n	800cf2a <_strtod_l+0xa1a>
 800cfe6:	4640      	mov	r0, r8
 800cfe8:	4649      	mov	r1, r9
 800cfea:	f7f3 fe85 	bl	8000cf8 <__aeabi_d2lz>
 800cfee:	f7f3 faf5 	bl	80005dc <__aeabi_l2d>
 800cff2:	4602      	mov	r2, r0
 800cff4:	460b      	mov	r3, r1
 800cff6:	4640      	mov	r0, r8
 800cff8:	4649      	mov	r1, r9
 800cffa:	f7f3 f965 	bl	80002c8 <__aeabi_dsub>
 800cffe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d000:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d004:	ea43 030a 	orr.w	r3, r3, sl
 800d008:	4313      	orrs	r3, r2
 800d00a:	4680      	mov	r8, r0
 800d00c:	4689      	mov	r9, r1
 800d00e:	d053      	beq.n	800d0b8 <_strtod_l+0xba8>
 800d010:	a335      	add	r3, pc, #212	; (adr r3, 800d0e8 <_strtod_l+0xbd8>)
 800d012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d016:	f7f3 fd81 	bl	8000b1c <__aeabi_dcmplt>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	f47f acce 	bne.w	800c9bc <_strtod_l+0x4ac>
 800d020:	a333      	add	r3, pc, #204	; (adr r3, 800d0f0 <_strtod_l+0xbe0>)
 800d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d026:	4640      	mov	r0, r8
 800d028:	4649      	mov	r1, r9
 800d02a:	f7f3 fd95 	bl	8000b58 <__aeabi_dcmpgt>
 800d02e:	2800      	cmp	r0, #0
 800d030:	f43f af7b 	beq.w	800cf2a <_strtod_l+0xa1a>
 800d034:	e4c2      	b.n	800c9bc <_strtod_l+0x4ac>
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	b333      	cbz	r3, 800d088 <_strtod_l+0xb78>
 800d03a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d03c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d040:	d822      	bhi.n	800d088 <_strtod_l+0xb78>
 800d042:	a32d      	add	r3, pc, #180	; (adr r3, 800d0f8 <_strtod_l+0xbe8>)
 800d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d048:	4640      	mov	r0, r8
 800d04a:	4649      	mov	r1, r9
 800d04c:	f7f3 fd70 	bl	8000b30 <__aeabi_dcmple>
 800d050:	b1a0      	cbz	r0, 800d07c <_strtod_l+0xb6c>
 800d052:	4649      	mov	r1, r9
 800d054:	4640      	mov	r0, r8
 800d056:	f7f3 fdc7 	bl	8000be8 <__aeabi_d2uiz>
 800d05a:	2801      	cmp	r0, #1
 800d05c:	bf38      	it	cc
 800d05e:	2001      	movcc	r0, #1
 800d060:	f7f3 fa70 	bl	8000544 <__aeabi_ui2d>
 800d064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d066:	4680      	mov	r8, r0
 800d068:	4689      	mov	r9, r1
 800d06a:	bb13      	cbnz	r3, 800d0b2 <_strtod_l+0xba2>
 800d06c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d070:	9014      	str	r0, [sp, #80]	; 0x50
 800d072:	9315      	str	r3, [sp, #84]	; 0x54
 800d074:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d078:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d07e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d080:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d084:	1a9b      	subs	r3, r3, r2
 800d086:	930d      	str	r3, [sp, #52]	; 0x34
 800d088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d08c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d090:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d094:	f001 fe58 	bl	800ed48 <__ulp>
 800d098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d09c:	ec53 2b10 	vmov	r2, r3, d0
 800d0a0:	f7f3 faca 	bl	8000638 <__aeabi_dmul>
 800d0a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d0a8:	f7f3 f910 	bl	80002cc <__adddf3>
 800d0ac:	4682      	mov	sl, r0
 800d0ae:	468b      	mov	fp, r1
 800d0b0:	e78f      	b.n	800cfd2 <_strtod_l+0xac2>
 800d0b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d0b6:	e7dd      	b.n	800d074 <_strtod_l+0xb64>
 800d0b8:	a311      	add	r3, pc, #68	; (adr r3, 800d100 <_strtod_l+0xbf0>)
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	f7f3 fd2d 	bl	8000b1c <__aeabi_dcmplt>
 800d0c2:	e7b4      	b.n	800d02e <_strtod_l+0xb1e>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	930e      	str	r3, [sp, #56]	; 0x38
 800d0c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d0ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0cc:	6013      	str	r3, [r2, #0]
 800d0ce:	f7ff ba65 	b.w	800c59c <_strtod_l+0x8c>
 800d0d2:	2b65      	cmp	r3, #101	; 0x65
 800d0d4:	f43f ab5d 	beq.w	800c792 <_strtod_l+0x282>
 800d0d8:	2b45      	cmp	r3, #69	; 0x45
 800d0da:	f43f ab5a 	beq.w	800c792 <_strtod_l+0x282>
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f7ff bb92 	b.w	800c808 <_strtod_l+0x2f8>
 800d0e4:	f3af 8000 	nop.w
 800d0e8:	94a03595 	.word	0x94a03595
 800d0ec:	3fdfffff 	.word	0x3fdfffff
 800d0f0:	35afe535 	.word	0x35afe535
 800d0f4:	3fe00000 	.word	0x3fe00000
 800d0f8:	ffc00000 	.word	0xffc00000
 800d0fc:	41dfffff 	.word	0x41dfffff
 800d100:	94a03595 	.word	0x94a03595
 800d104:	3fcfffff 	.word	0x3fcfffff
 800d108:	3ff00000 	.word	0x3ff00000
 800d10c:	7ff00000 	.word	0x7ff00000
 800d110:	7fe00000 	.word	0x7fe00000
 800d114:	7c9fffff 	.word	0x7c9fffff
 800d118:	3fe00000 	.word	0x3fe00000
 800d11c:	bff00000 	.word	0xbff00000
 800d120:	7fefffff 	.word	0x7fefffff

0800d124 <_strtod_r>:
 800d124:	4b01      	ldr	r3, [pc, #4]	; (800d12c <_strtod_r+0x8>)
 800d126:	f7ff b9f3 	b.w	800c510 <_strtod_l>
 800d12a:	bf00      	nop
 800d12c:	2000048c 	.word	0x2000048c

0800d130 <_strtol_l.isra.0>:
 800d130:	2b01      	cmp	r3, #1
 800d132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d136:	d001      	beq.n	800d13c <_strtol_l.isra.0+0xc>
 800d138:	2b24      	cmp	r3, #36	; 0x24
 800d13a:	d906      	bls.n	800d14a <_strtol_l.isra.0+0x1a>
 800d13c:	f7fe fa30 	bl	800b5a0 <__errno>
 800d140:	2316      	movs	r3, #22
 800d142:	6003      	str	r3, [r0, #0]
 800d144:	2000      	movs	r0, #0
 800d146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14a:	4f3a      	ldr	r7, [pc, #232]	; (800d234 <_strtol_l.isra.0+0x104>)
 800d14c:	468e      	mov	lr, r1
 800d14e:	4676      	mov	r6, lr
 800d150:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d154:	5de5      	ldrb	r5, [r4, r7]
 800d156:	f015 0508 	ands.w	r5, r5, #8
 800d15a:	d1f8      	bne.n	800d14e <_strtol_l.isra.0+0x1e>
 800d15c:	2c2d      	cmp	r4, #45	; 0x2d
 800d15e:	d134      	bne.n	800d1ca <_strtol_l.isra.0+0x9a>
 800d160:	f89e 4000 	ldrb.w	r4, [lr]
 800d164:	f04f 0801 	mov.w	r8, #1
 800d168:	f106 0e02 	add.w	lr, r6, #2
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d05c      	beq.n	800d22a <_strtol_l.isra.0+0xfa>
 800d170:	2b10      	cmp	r3, #16
 800d172:	d10c      	bne.n	800d18e <_strtol_l.isra.0+0x5e>
 800d174:	2c30      	cmp	r4, #48	; 0x30
 800d176:	d10a      	bne.n	800d18e <_strtol_l.isra.0+0x5e>
 800d178:	f89e 4000 	ldrb.w	r4, [lr]
 800d17c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d180:	2c58      	cmp	r4, #88	; 0x58
 800d182:	d14d      	bne.n	800d220 <_strtol_l.isra.0+0xf0>
 800d184:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d188:	2310      	movs	r3, #16
 800d18a:	f10e 0e02 	add.w	lr, lr, #2
 800d18e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d192:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d196:	2600      	movs	r6, #0
 800d198:	fbbc f9f3 	udiv	r9, ip, r3
 800d19c:	4635      	mov	r5, r6
 800d19e:	fb03 ca19 	mls	sl, r3, r9, ip
 800d1a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d1a6:	2f09      	cmp	r7, #9
 800d1a8:	d818      	bhi.n	800d1dc <_strtol_l.isra.0+0xac>
 800d1aa:	463c      	mov	r4, r7
 800d1ac:	42a3      	cmp	r3, r4
 800d1ae:	dd24      	ble.n	800d1fa <_strtol_l.isra.0+0xca>
 800d1b0:	2e00      	cmp	r6, #0
 800d1b2:	db1f      	blt.n	800d1f4 <_strtol_l.isra.0+0xc4>
 800d1b4:	45a9      	cmp	r9, r5
 800d1b6:	d31d      	bcc.n	800d1f4 <_strtol_l.isra.0+0xc4>
 800d1b8:	d101      	bne.n	800d1be <_strtol_l.isra.0+0x8e>
 800d1ba:	45a2      	cmp	sl, r4
 800d1bc:	db1a      	blt.n	800d1f4 <_strtol_l.isra.0+0xc4>
 800d1be:	fb05 4503 	mla	r5, r5, r3, r4
 800d1c2:	2601      	movs	r6, #1
 800d1c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d1c8:	e7eb      	b.n	800d1a2 <_strtol_l.isra.0+0x72>
 800d1ca:	2c2b      	cmp	r4, #43	; 0x2b
 800d1cc:	bf08      	it	eq
 800d1ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d1d2:	46a8      	mov	r8, r5
 800d1d4:	bf08      	it	eq
 800d1d6:	f106 0e02 	addeq.w	lr, r6, #2
 800d1da:	e7c7      	b.n	800d16c <_strtol_l.isra.0+0x3c>
 800d1dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d1e0:	2f19      	cmp	r7, #25
 800d1e2:	d801      	bhi.n	800d1e8 <_strtol_l.isra.0+0xb8>
 800d1e4:	3c37      	subs	r4, #55	; 0x37
 800d1e6:	e7e1      	b.n	800d1ac <_strtol_l.isra.0+0x7c>
 800d1e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d1ec:	2f19      	cmp	r7, #25
 800d1ee:	d804      	bhi.n	800d1fa <_strtol_l.isra.0+0xca>
 800d1f0:	3c57      	subs	r4, #87	; 0x57
 800d1f2:	e7db      	b.n	800d1ac <_strtol_l.isra.0+0x7c>
 800d1f4:	f04f 36ff 	mov.w	r6, #4294967295
 800d1f8:	e7e4      	b.n	800d1c4 <_strtol_l.isra.0+0x94>
 800d1fa:	2e00      	cmp	r6, #0
 800d1fc:	da05      	bge.n	800d20a <_strtol_l.isra.0+0xda>
 800d1fe:	2322      	movs	r3, #34	; 0x22
 800d200:	6003      	str	r3, [r0, #0]
 800d202:	4665      	mov	r5, ip
 800d204:	b942      	cbnz	r2, 800d218 <_strtol_l.isra.0+0xe8>
 800d206:	4628      	mov	r0, r5
 800d208:	e79d      	b.n	800d146 <_strtol_l.isra.0+0x16>
 800d20a:	f1b8 0f00 	cmp.w	r8, #0
 800d20e:	d000      	beq.n	800d212 <_strtol_l.isra.0+0xe2>
 800d210:	426d      	negs	r5, r5
 800d212:	2a00      	cmp	r2, #0
 800d214:	d0f7      	beq.n	800d206 <_strtol_l.isra.0+0xd6>
 800d216:	b10e      	cbz	r6, 800d21c <_strtol_l.isra.0+0xec>
 800d218:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d21c:	6011      	str	r1, [r2, #0]
 800d21e:	e7f2      	b.n	800d206 <_strtol_l.isra.0+0xd6>
 800d220:	2430      	movs	r4, #48	; 0x30
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1b3      	bne.n	800d18e <_strtol_l.isra.0+0x5e>
 800d226:	2308      	movs	r3, #8
 800d228:	e7b1      	b.n	800d18e <_strtol_l.isra.0+0x5e>
 800d22a:	2c30      	cmp	r4, #48	; 0x30
 800d22c:	d0a4      	beq.n	800d178 <_strtol_l.isra.0+0x48>
 800d22e:	230a      	movs	r3, #10
 800d230:	e7ad      	b.n	800d18e <_strtol_l.isra.0+0x5e>
 800d232:	bf00      	nop
 800d234:	08010b09 	.word	0x08010b09

0800d238 <_strtol_r>:
 800d238:	f7ff bf7a 	b.w	800d130 <_strtol_l.isra.0>

0800d23c <quorem>:
 800d23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d240:	6903      	ldr	r3, [r0, #16]
 800d242:	690c      	ldr	r4, [r1, #16]
 800d244:	42a3      	cmp	r3, r4
 800d246:	4607      	mov	r7, r0
 800d248:	f2c0 8081 	blt.w	800d34e <quorem+0x112>
 800d24c:	3c01      	subs	r4, #1
 800d24e:	f101 0814 	add.w	r8, r1, #20
 800d252:	f100 0514 	add.w	r5, r0, #20
 800d256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d25a:	9301      	str	r3, [sp, #4]
 800d25c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d264:	3301      	adds	r3, #1
 800d266:	429a      	cmp	r2, r3
 800d268:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d26c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d270:	fbb2 f6f3 	udiv	r6, r2, r3
 800d274:	d331      	bcc.n	800d2da <quorem+0x9e>
 800d276:	f04f 0e00 	mov.w	lr, #0
 800d27a:	4640      	mov	r0, r8
 800d27c:	46ac      	mov	ip, r5
 800d27e:	46f2      	mov	sl, lr
 800d280:	f850 2b04 	ldr.w	r2, [r0], #4
 800d284:	b293      	uxth	r3, r2
 800d286:	fb06 e303 	mla	r3, r6, r3, lr
 800d28a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d28e:	b29b      	uxth	r3, r3
 800d290:	ebaa 0303 	sub.w	r3, sl, r3
 800d294:	0c12      	lsrs	r2, r2, #16
 800d296:	f8dc a000 	ldr.w	sl, [ip]
 800d29a:	fb06 e202 	mla	r2, r6, r2, lr
 800d29e:	fa13 f38a 	uxtah	r3, r3, sl
 800d2a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2a6:	fa1f fa82 	uxth.w	sl, r2
 800d2aa:	f8dc 2000 	ldr.w	r2, [ip]
 800d2ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d2b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2bc:	4581      	cmp	r9, r0
 800d2be:	f84c 3b04 	str.w	r3, [ip], #4
 800d2c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d2c6:	d2db      	bcs.n	800d280 <quorem+0x44>
 800d2c8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d2cc:	b92b      	cbnz	r3, 800d2da <quorem+0x9e>
 800d2ce:	9b01      	ldr	r3, [sp, #4]
 800d2d0:	3b04      	subs	r3, #4
 800d2d2:	429d      	cmp	r5, r3
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	d32e      	bcc.n	800d336 <quorem+0xfa>
 800d2d8:	613c      	str	r4, [r7, #16]
 800d2da:	4638      	mov	r0, r7
 800d2dc:	f001 fc90 	bl	800ec00 <__mcmp>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	db24      	blt.n	800d32e <quorem+0xf2>
 800d2e4:	3601      	adds	r6, #1
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f04f 0c00 	mov.w	ip, #0
 800d2ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800d2f0:	f8d0 e000 	ldr.w	lr, [r0]
 800d2f4:	b293      	uxth	r3, r2
 800d2f6:	ebac 0303 	sub.w	r3, ip, r3
 800d2fa:	0c12      	lsrs	r2, r2, #16
 800d2fc:	fa13 f38e 	uxtah	r3, r3, lr
 800d300:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d308:	b29b      	uxth	r3, r3
 800d30a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d30e:	45c1      	cmp	r9, r8
 800d310:	f840 3b04 	str.w	r3, [r0], #4
 800d314:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d318:	d2e8      	bcs.n	800d2ec <quorem+0xb0>
 800d31a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d31e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d322:	b922      	cbnz	r2, 800d32e <quorem+0xf2>
 800d324:	3b04      	subs	r3, #4
 800d326:	429d      	cmp	r5, r3
 800d328:	461a      	mov	r2, r3
 800d32a:	d30a      	bcc.n	800d342 <quorem+0x106>
 800d32c:	613c      	str	r4, [r7, #16]
 800d32e:	4630      	mov	r0, r6
 800d330:	b003      	add	sp, #12
 800d332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d336:	6812      	ldr	r2, [r2, #0]
 800d338:	3b04      	subs	r3, #4
 800d33a:	2a00      	cmp	r2, #0
 800d33c:	d1cc      	bne.n	800d2d8 <quorem+0x9c>
 800d33e:	3c01      	subs	r4, #1
 800d340:	e7c7      	b.n	800d2d2 <quorem+0x96>
 800d342:	6812      	ldr	r2, [r2, #0]
 800d344:	3b04      	subs	r3, #4
 800d346:	2a00      	cmp	r2, #0
 800d348:	d1f0      	bne.n	800d32c <quorem+0xf0>
 800d34a:	3c01      	subs	r4, #1
 800d34c:	e7eb      	b.n	800d326 <quorem+0xea>
 800d34e:	2000      	movs	r0, #0
 800d350:	e7ee      	b.n	800d330 <quorem+0xf4>
 800d352:	0000      	movs	r0, r0
 800d354:	0000      	movs	r0, r0
	...

0800d358 <_dtoa_r>:
 800d358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35c:	ed2d 8b02 	vpush	{d8}
 800d360:	ec57 6b10 	vmov	r6, r7, d0
 800d364:	b095      	sub	sp, #84	; 0x54
 800d366:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d368:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d36c:	9105      	str	r1, [sp, #20]
 800d36e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d372:	4604      	mov	r4, r0
 800d374:	9209      	str	r2, [sp, #36]	; 0x24
 800d376:	930f      	str	r3, [sp, #60]	; 0x3c
 800d378:	b975      	cbnz	r5, 800d398 <_dtoa_r+0x40>
 800d37a:	2010      	movs	r0, #16
 800d37c:	f7fe f93a 	bl	800b5f4 <malloc>
 800d380:	4602      	mov	r2, r0
 800d382:	6260      	str	r0, [r4, #36]	; 0x24
 800d384:	b920      	cbnz	r0, 800d390 <_dtoa_r+0x38>
 800d386:	4bb2      	ldr	r3, [pc, #712]	; (800d650 <_dtoa_r+0x2f8>)
 800d388:	21ea      	movs	r1, #234	; 0xea
 800d38a:	48b2      	ldr	r0, [pc, #712]	; (800d654 <_dtoa_r+0x2fc>)
 800d38c:	f001 ffc0 	bl	800f310 <__assert_func>
 800d390:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d394:	6005      	str	r5, [r0, #0]
 800d396:	60c5      	str	r5, [r0, #12]
 800d398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d39a:	6819      	ldr	r1, [r3, #0]
 800d39c:	b151      	cbz	r1, 800d3b4 <_dtoa_r+0x5c>
 800d39e:	685a      	ldr	r2, [r3, #4]
 800d3a0:	604a      	str	r2, [r1, #4]
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4093      	lsls	r3, r2
 800d3a6:	608b      	str	r3, [r1, #8]
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f001 f9a1 	bl	800e6f0 <_Bfree>
 800d3ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	1e3b      	subs	r3, r7, #0
 800d3b6:	bfb9      	ittee	lt
 800d3b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d3bc:	9303      	strlt	r3, [sp, #12]
 800d3be:	2300      	movge	r3, #0
 800d3c0:	f8c8 3000 	strge.w	r3, [r8]
 800d3c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d3c8:	4ba3      	ldr	r3, [pc, #652]	; (800d658 <_dtoa_r+0x300>)
 800d3ca:	bfbc      	itt	lt
 800d3cc:	2201      	movlt	r2, #1
 800d3ce:	f8c8 2000 	strlt.w	r2, [r8]
 800d3d2:	ea33 0309 	bics.w	r3, r3, r9
 800d3d6:	d11b      	bne.n	800d410 <_dtoa_r+0xb8>
 800d3d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d3da:	f242 730f 	movw	r3, #9999	; 0x270f
 800d3de:	6013      	str	r3, [r2, #0]
 800d3e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3e4:	4333      	orrs	r3, r6
 800d3e6:	f000 857a 	beq.w	800dede <_dtoa_r+0xb86>
 800d3ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3ec:	b963      	cbnz	r3, 800d408 <_dtoa_r+0xb0>
 800d3ee:	4b9b      	ldr	r3, [pc, #620]	; (800d65c <_dtoa_r+0x304>)
 800d3f0:	e024      	b.n	800d43c <_dtoa_r+0xe4>
 800d3f2:	4b9b      	ldr	r3, [pc, #620]	; (800d660 <_dtoa_r+0x308>)
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d3fa:	6013      	str	r3, [r2, #0]
 800d3fc:	9800      	ldr	r0, [sp, #0]
 800d3fe:	b015      	add	sp, #84	; 0x54
 800d400:	ecbd 8b02 	vpop	{d8}
 800d404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d408:	4b94      	ldr	r3, [pc, #592]	; (800d65c <_dtoa_r+0x304>)
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	3303      	adds	r3, #3
 800d40e:	e7f3      	b.n	800d3f8 <_dtoa_r+0xa0>
 800d410:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d414:	2200      	movs	r2, #0
 800d416:	ec51 0b17 	vmov	r0, r1, d7
 800d41a:	2300      	movs	r3, #0
 800d41c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d420:	f7f3 fb72 	bl	8000b08 <__aeabi_dcmpeq>
 800d424:	4680      	mov	r8, r0
 800d426:	b158      	cbz	r0, 800d440 <_dtoa_r+0xe8>
 800d428:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d42a:	2301      	movs	r3, #1
 800d42c:	6013      	str	r3, [r2, #0]
 800d42e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d430:	2b00      	cmp	r3, #0
 800d432:	f000 8551 	beq.w	800ded8 <_dtoa_r+0xb80>
 800d436:	488b      	ldr	r0, [pc, #556]	; (800d664 <_dtoa_r+0x30c>)
 800d438:	6018      	str	r0, [r3, #0]
 800d43a:	1e43      	subs	r3, r0, #1
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	e7dd      	b.n	800d3fc <_dtoa_r+0xa4>
 800d440:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d444:	aa12      	add	r2, sp, #72	; 0x48
 800d446:	a913      	add	r1, sp, #76	; 0x4c
 800d448:	4620      	mov	r0, r4
 800d44a:	f001 fcf9 	bl	800ee40 <__d2b>
 800d44e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d452:	4683      	mov	fp, r0
 800d454:	2d00      	cmp	r5, #0
 800d456:	d07c      	beq.n	800d552 <_dtoa_r+0x1fa>
 800d458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d45a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d45e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d462:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d466:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d46a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d46e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d472:	4b7d      	ldr	r3, [pc, #500]	; (800d668 <_dtoa_r+0x310>)
 800d474:	2200      	movs	r2, #0
 800d476:	4630      	mov	r0, r6
 800d478:	4639      	mov	r1, r7
 800d47a:	f7f2 ff25 	bl	80002c8 <__aeabi_dsub>
 800d47e:	a36e      	add	r3, pc, #440	; (adr r3, 800d638 <_dtoa_r+0x2e0>)
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	f7f3 f8d8 	bl	8000638 <__aeabi_dmul>
 800d488:	a36d      	add	r3, pc, #436	; (adr r3, 800d640 <_dtoa_r+0x2e8>)
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	f7f2 ff1d 	bl	80002cc <__adddf3>
 800d492:	4606      	mov	r6, r0
 800d494:	4628      	mov	r0, r5
 800d496:	460f      	mov	r7, r1
 800d498:	f7f3 f864 	bl	8000564 <__aeabi_i2d>
 800d49c:	a36a      	add	r3, pc, #424	; (adr r3, 800d648 <_dtoa_r+0x2f0>)
 800d49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a2:	f7f3 f8c9 	bl	8000638 <__aeabi_dmul>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	4639      	mov	r1, r7
 800d4ae:	f7f2 ff0d 	bl	80002cc <__adddf3>
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	460f      	mov	r7, r1
 800d4b6:	f7f3 fb6f 	bl	8000b98 <__aeabi_d2iz>
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	4682      	mov	sl, r0
 800d4be:	2300      	movs	r3, #0
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	4639      	mov	r1, r7
 800d4c4:	f7f3 fb2a 	bl	8000b1c <__aeabi_dcmplt>
 800d4c8:	b148      	cbz	r0, 800d4de <_dtoa_r+0x186>
 800d4ca:	4650      	mov	r0, sl
 800d4cc:	f7f3 f84a 	bl	8000564 <__aeabi_i2d>
 800d4d0:	4632      	mov	r2, r6
 800d4d2:	463b      	mov	r3, r7
 800d4d4:	f7f3 fb18 	bl	8000b08 <__aeabi_dcmpeq>
 800d4d8:	b908      	cbnz	r0, 800d4de <_dtoa_r+0x186>
 800d4da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4de:	f1ba 0f16 	cmp.w	sl, #22
 800d4e2:	d854      	bhi.n	800d58e <_dtoa_r+0x236>
 800d4e4:	4b61      	ldr	r3, [pc, #388]	; (800d66c <_dtoa_r+0x314>)
 800d4e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d4f2:	f7f3 fb13 	bl	8000b1c <__aeabi_dcmplt>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d04b      	beq.n	800d592 <_dtoa_r+0x23a>
 800d4fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4fe:	2300      	movs	r3, #0
 800d500:	930e      	str	r3, [sp, #56]	; 0x38
 800d502:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d504:	1b5d      	subs	r5, r3, r5
 800d506:	1e6b      	subs	r3, r5, #1
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	bf43      	ittte	mi
 800d50c:	2300      	movmi	r3, #0
 800d50e:	f1c5 0801 	rsbmi	r8, r5, #1
 800d512:	9304      	strmi	r3, [sp, #16]
 800d514:	f04f 0800 	movpl.w	r8, #0
 800d518:	f1ba 0f00 	cmp.w	sl, #0
 800d51c:	db3b      	blt.n	800d596 <_dtoa_r+0x23e>
 800d51e:	9b04      	ldr	r3, [sp, #16]
 800d520:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d524:	4453      	add	r3, sl
 800d526:	9304      	str	r3, [sp, #16]
 800d528:	2300      	movs	r3, #0
 800d52a:	9306      	str	r3, [sp, #24]
 800d52c:	9b05      	ldr	r3, [sp, #20]
 800d52e:	2b09      	cmp	r3, #9
 800d530:	d869      	bhi.n	800d606 <_dtoa_r+0x2ae>
 800d532:	2b05      	cmp	r3, #5
 800d534:	bfc4      	itt	gt
 800d536:	3b04      	subgt	r3, #4
 800d538:	9305      	strgt	r3, [sp, #20]
 800d53a:	9b05      	ldr	r3, [sp, #20]
 800d53c:	f1a3 0302 	sub.w	r3, r3, #2
 800d540:	bfcc      	ite	gt
 800d542:	2500      	movgt	r5, #0
 800d544:	2501      	movle	r5, #1
 800d546:	2b03      	cmp	r3, #3
 800d548:	d869      	bhi.n	800d61e <_dtoa_r+0x2c6>
 800d54a:	e8df f003 	tbb	[pc, r3]
 800d54e:	4e2c      	.short	0x4e2c
 800d550:	5a4c      	.short	0x5a4c
 800d552:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d556:	441d      	add	r5, r3
 800d558:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d55c:	2b20      	cmp	r3, #32
 800d55e:	bfc1      	itttt	gt
 800d560:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d564:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d568:	fa09 f303 	lslgt.w	r3, r9, r3
 800d56c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d570:	bfda      	itte	le
 800d572:	f1c3 0320 	rsble	r3, r3, #32
 800d576:	fa06 f003 	lslle.w	r0, r6, r3
 800d57a:	4318      	orrgt	r0, r3
 800d57c:	f7f2 ffe2 	bl	8000544 <__aeabi_ui2d>
 800d580:	2301      	movs	r3, #1
 800d582:	4606      	mov	r6, r0
 800d584:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d588:	3d01      	subs	r5, #1
 800d58a:	9310      	str	r3, [sp, #64]	; 0x40
 800d58c:	e771      	b.n	800d472 <_dtoa_r+0x11a>
 800d58e:	2301      	movs	r3, #1
 800d590:	e7b6      	b.n	800d500 <_dtoa_r+0x1a8>
 800d592:	900e      	str	r0, [sp, #56]	; 0x38
 800d594:	e7b5      	b.n	800d502 <_dtoa_r+0x1aa>
 800d596:	f1ca 0300 	rsb	r3, sl, #0
 800d59a:	9306      	str	r3, [sp, #24]
 800d59c:	2300      	movs	r3, #0
 800d59e:	eba8 080a 	sub.w	r8, r8, sl
 800d5a2:	930d      	str	r3, [sp, #52]	; 0x34
 800d5a4:	e7c2      	b.n	800d52c <_dtoa_r+0x1d4>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	9308      	str	r3, [sp, #32]
 800d5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	dc39      	bgt.n	800d624 <_dtoa_r+0x2cc>
 800d5b0:	f04f 0901 	mov.w	r9, #1
 800d5b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800d5b8:	464b      	mov	r3, r9
 800d5ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d5be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	6042      	str	r2, [r0, #4]
 800d5c4:	2204      	movs	r2, #4
 800d5c6:	f102 0614 	add.w	r6, r2, #20
 800d5ca:	429e      	cmp	r6, r3
 800d5cc:	6841      	ldr	r1, [r0, #4]
 800d5ce:	d92f      	bls.n	800d630 <_dtoa_r+0x2d8>
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f001 f84d 	bl	800e670 <_Balloc>
 800d5d6:	9000      	str	r0, [sp, #0]
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d14b      	bne.n	800d674 <_dtoa_r+0x31c>
 800d5dc:	4b24      	ldr	r3, [pc, #144]	; (800d670 <_dtoa_r+0x318>)
 800d5de:	4602      	mov	r2, r0
 800d5e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d5e4:	e6d1      	b.n	800d38a <_dtoa_r+0x32>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e7de      	b.n	800d5a8 <_dtoa_r+0x250>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	9308      	str	r3, [sp, #32]
 800d5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5f0:	eb0a 0903 	add.w	r9, sl, r3
 800d5f4:	f109 0301 	add.w	r3, r9, #1
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	9301      	str	r3, [sp, #4]
 800d5fc:	bfb8      	it	lt
 800d5fe:	2301      	movlt	r3, #1
 800d600:	e7dd      	b.n	800d5be <_dtoa_r+0x266>
 800d602:	2301      	movs	r3, #1
 800d604:	e7f2      	b.n	800d5ec <_dtoa_r+0x294>
 800d606:	2501      	movs	r5, #1
 800d608:	2300      	movs	r3, #0
 800d60a:	9305      	str	r3, [sp, #20]
 800d60c:	9508      	str	r5, [sp, #32]
 800d60e:	f04f 39ff 	mov.w	r9, #4294967295
 800d612:	2200      	movs	r2, #0
 800d614:	f8cd 9004 	str.w	r9, [sp, #4]
 800d618:	2312      	movs	r3, #18
 800d61a:	9209      	str	r2, [sp, #36]	; 0x24
 800d61c:	e7cf      	b.n	800d5be <_dtoa_r+0x266>
 800d61e:	2301      	movs	r3, #1
 800d620:	9308      	str	r3, [sp, #32]
 800d622:	e7f4      	b.n	800d60e <_dtoa_r+0x2b6>
 800d624:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d628:	f8cd 9004 	str.w	r9, [sp, #4]
 800d62c:	464b      	mov	r3, r9
 800d62e:	e7c6      	b.n	800d5be <_dtoa_r+0x266>
 800d630:	3101      	adds	r1, #1
 800d632:	6041      	str	r1, [r0, #4]
 800d634:	0052      	lsls	r2, r2, #1
 800d636:	e7c6      	b.n	800d5c6 <_dtoa_r+0x26e>
 800d638:	636f4361 	.word	0x636f4361
 800d63c:	3fd287a7 	.word	0x3fd287a7
 800d640:	8b60c8b3 	.word	0x8b60c8b3
 800d644:	3fc68a28 	.word	0x3fc68a28
 800d648:	509f79fb 	.word	0x509f79fb
 800d64c:	3fd34413 	.word	0x3fd34413
 800d650:	08010c16 	.word	0x08010c16
 800d654:	08010c2d 	.word	0x08010c2d
 800d658:	7ff00000 	.word	0x7ff00000
 800d65c:	08010c12 	.word	0x08010c12
 800d660:	08010c09 	.word	0x08010c09
 800d664:	08010a8d 	.word	0x08010a8d
 800d668:	3ff80000 	.word	0x3ff80000
 800d66c:	08010da8 	.word	0x08010da8
 800d670:	08010c8c 	.word	0x08010c8c
 800d674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d676:	9a00      	ldr	r2, [sp, #0]
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	9b01      	ldr	r3, [sp, #4]
 800d67c:	2b0e      	cmp	r3, #14
 800d67e:	f200 80ad 	bhi.w	800d7dc <_dtoa_r+0x484>
 800d682:	2d00      	cmp	r5, #0
 800d684:	f000 80aa 	beq.w	800d7dc <_dtoa_r+0x484>
 800d688:	f1ba 0f00 	cmp.w	sl, #0
 800d68c:	dd36      	ble.n	800d6fc <_dtoa_r+0x3a4>
 800d68e:	4ac3      	ldr	r2, [pc, #780]	; (800d99c <_dtoa_r+0x644>)
 800d690:	f00a 030f 	and.w	r3, sl, #15
 800d694:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d698:	ed93 7b00 	vldr	d7, [r3]
 800d69c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d6a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d6a4:	eeb0 8a47 	vmov.f32	s16, s14
 800d6a8:	eef0 8a67 	vmov.f32	s17, s15
 800d6ac:	d016      	beq.n	800d6dc <_dtoa_r+0x384>
 800d6ae:	4bbc      	ldr	r3, [pc, #752]	; (800d9a0 <_dtoa_r+0x648>)
 800d6b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d6b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6b8:	f7f3 f8e8 	bl	800088c <__aeabi_ddiv>
 800d6bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6c0:	f007 070f 	and.w	r7, r7, #15
 800d6c4:	2503      	movs	r5, #3
 800d6c6:	4eb6      	ldr	r6, [pc, #728]	; (800d9a0 <_dtoa_r+0x648>)
 800d6c8:	b957      	cbnz	r7, 800d6e0 <_dtoa_r+0x388>
 800d6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ce:	ec53 2b18 	vmov	r2, r3, d8
 800d6d2:	f7f3 f8db 	bl	800088c <__aeabi_ddiv>
 800d6d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6da:	e029      	b.n	800d730 <_dtoa_r+0x3d8>
 800d6dc:	2502      	movs	r5, #2
 800d6de:	e7f2      	b.n	800d6c6 <_dtoa_r+0x36e>
 800d6e0:	07f9      	lsls	r1, r7, #31
 800d6e2:	d508      	bpl.n	800d6f6 <_dtoa_r+0x39e>
 800d6e4:	ec51 0b18 	vmov	r0, r1, d8
 800d6e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d6ec:	f7f2 ffa4 	bl	8000638 <__aeabi_dmul>
 800d6f0:	ec41 0b18 	vmov	d8, r0, r1
 800d6f4:	3501      	adds	r5, #1
 800d6f6:	107f      	asrs	r7, r7, #1
 800d6f8:	3608      	adds	r6, #8
 800d6fa:	e7e5      	b.n	800d6c8 <_dtoa_r+0x370>
 800d6fc:	f000 80a6 	beq.w	800d84c <_dtoa_r+0x4f4>
 800d700:	f1ca 0600 	rsb	r6, sl, #0
 800d704:	4ba5      	ldr	r3, [pc, #660]	; (800d99c <_dtoa_r+0x644>)
 800d706:	4fa6      	ldr	r7, [pc, #664]	; (800d9a0 <_dtoa_r+0x648>)
 800d708:	f006 020f 	and.w	r2, r6, #15
 800d70c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d714:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d718:	f7f2 ff8e 	bl	8000638 <__aeabi_dmul>
 800d71c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d720:	1136      	asrs	r6, r6, #4
 800d722:	2300      	movs	r3, #0
 800d724:	2502      	movs	r5, #2
 800d726:	2e00      	cmp	r6, #0
 800d728:	f040 8085 	bne.w	800d836 <_dtoa_r+0x4de>
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1d2      	bne.n	800d6d6 <_dtoa_r+0x37e>
 800d730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 808c 	beq.w	800d850 <_dtoa_r+0x4f8>
 800d738:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d73c:	4b99      	ldr	r3, [pc, #612]	; (800d9a4 <_dtoa_r+0x64c>)
 800d73e:	2200      	movs	r2, #0
 800d740:	4630      	mov	r0, r6
 800d742:	4639      	mov	r1, r7
 800d744:	f7f3 f9ea 	bl	8000b1c <__aeabi_dcmplt>
 800d748:	2800      	cmp	r0, #0
 800d74a:	f000 8081 	beq.w	800d850 <_dtoa_r+0x4f8>
 800d74e:	9b01      	ldr	r3, [sp, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d07d      	beq.n	800d850 <_dtoa_r+0x4f8>
 800d754:	f1b9 0f00 	cmp.w	r9, #0
 800d758:	dd3c      	ble.n	800d7d4 <_dtoa_r+0x47c>
 800d75a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d75e:	9307      	str	r3, [sp, #28]
 800d760:	2200      	movs	r2, #0
 800d762:	4b91      	ldr	r3, [pc, #580]	; (800d9a8 <_dtoa_r+0x650>)
 800d764:	4630      	mov	r0, r6
 800d766:	4639      	mov	r1, r7
 800d768:	f7f2 ff66 	bl	8000638 <__aeabi_dmul>
 800d76c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d770:	3501      	adds	r5, #1
 800d772:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d776:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d77a:	4628      	mov	r0, r5
 800d77c:	f7f2 fef2 	bl	8000564 <__aeabi_i2d>
 800d780:	4632      	mov	r2, r6
 800d782:	463b      	mov	r3, r7
 800d784:	f7f2 ff58 	bl	8000638 <__aeabi_dmul>
 800d788:	4b88      	ldr	r3, [pc, #544]	; (800d9ac <_dtoa_r+0x654>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	f7f2 fd9e 	bl	80002cc <__adddf3>
 800d790:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d798:	9303      	str	r3, [sp, #12]
 800d79a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d15c      	bne.n	800d85a <_dtoa_r+0x502>
 800d7a0:	4b83      	ldr	r3, [pc, #524]	; (800d9b0 <_dtoa_r+0x658>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	f7f2 fd8e 	bl	80002c8 <__aeabi_dsub>
 800d7ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	460f      	mov	r7, r1
 800d7b4:	f7f3 f9d0 	bl	8000b58 <__aeabi_dcmpgt>
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	f040 8296 	bne.w	800dcea <_dtoa_r+0x992>
 800d7be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	f7f3 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	f040 8288 	bne.w	800dce4 <_dtoa_r+0x98c>
 800d7d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d7d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f2c0 8158 	blt.w	800da94 <_dtoa_r+0x73c>
 800d7e4:	f1ba 0f0e 	cmp.w	sl, #14
 800d7e8:	f300 8154 	bgt.w	800da94 <_dtoa_r+0x73c>
 800d7ec:	4b6b      	ldr	r3, [pc, #428]	; (800d99c <_dtoa_r+0x644>)
 800d7ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d7f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f280 80e3 	bge.w	800d9c4 <_dtoa_r+0x66c>
 800d7fe:	9b01      	ldr	r3, [sp, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	f300 80df 	bgt.w	800d9c4 <_dtoa_r+0x66c>
 800d806:	f040 826d 	bne.w	800dce4 <_dtoa_r+0x98c>
 800d80a:	4b69      	ldr	r3, [pc, #420]	; (800d9b0 <_dtoa_r+0x658>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	4640      	mov	r0, r8
 800d810:	4649      	mov	r1, r9
 800d812:	f7f2 ff11 	bl	8000638 <__aeabi_dmul>
 800d816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d81a:	f7f3 f993 	bl	8000b44 <__aeabi_dcmpge>
 800d81e:	9e01      	ldr	r6, [sp, #4]
 800d820:	4637      	mov	r7, r6
 800d822:	2800      	cmp	r0, #0
 800d824:	f040 8243 	bne.w	800dcae <_dtoa_r+0x956>
 800d828:	9d00      	ldr	r5, [sp, #0]
 800d82a:	2331      	movs	r3, #49	; 0x31
 800d82c:	f805 3b01 	strb.w	r3, [r5], #1
 800d830:	f10a 0a01 	add.w	sl, sl, #1
 800d834:	e23f      	b.n	800dcb6 <_dtoa_r+0x95e>
 800d836:	07f2      	lsls	r2, r6, #31
 800d838:	d505      	bpl.n	800d846 <_dtoa_r+0x4ee>
 800d83a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d83e:	f7f2 fefb 	bl	8000638 <__aeabi_dmul>
 800d842:	3501      	adds	r5, #1
 800d844:	2301      	movs	r3, #1
 800d846:	1076      	asrs	r6, r6, #1
 800d848:	3708      	adds	r7, #8
 800d84a:	e76c      	b.n	800d726 <_dtoa_r+0x3ce>
 800d84c:	2502      	movs	r5, #2
 800d84e:	e76f      	b.n	800d730 <_dtoa_r+0x3d8>
 800d850:	9b01      	ldr	r3, [sp, #4]
 800d852:	f8cd a01c 	str.w	sl, [sp, #28]
 800d856:	930c      	str	r3, [sp, #48]	; 0x30
 800d858:	e78d      	b.n	800d776 <_dtoa_r+0x41e>
 800d85a:	9900      	ldr	r1, [sp, #0]
 800d85c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d85e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d860:	4b4e      	ldr	r3, [pc, #312]	; (800d99c <_dtoa_r+0x644>)
 800d862:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d866:	4401      	add	r1, r0
 800d868:	9102      	str	r1, [sp, #8]
 800d86a:	9908      	ldr	r1, [sp, #32]
 800d86c:	eeb0 8a47 	vmov.f32	s16, s14
 800d870:	eef0 8a67 	vmov.f32	s17, s15
 800d874:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d878:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d87c:	2900      	cmp	r1, #0
 800d87e:	d045      	beq.n	800d90c <_dtoa_r+0x5b4>
 800d880:	494c      	ldr	r1, [pc, #304]	; (800d9b4 <_dtoa_r+0x65c>)
 800d882:	2000      	movs	r0, #0
 800d884:	f7f3 f802 	bl	800088c <__aeabi_ddiv>
 800d888:	ec53 2b18 	vmov	r2, r3, d8
 800d88c:	f7f2 fd1c 	bl	80002c8 <__aeabi_dsub>
 800d890:	9d00      	ldr	r5, [sp, #0]
 800d892:	ec41 0b18 	vmov	d8, r0, r1
 800d896:	4639      	mov	r1, r7
 800d898:	4630      	mov	r0, r6
 800d89a:	f7f3 f97d 	bl	8000b98 <__aeabi_d2iz>
 800d89e:	900c      	str	r0, [sp, #48]	; 0x30
 800d8a0:	f7f2 fe60 	bl	8000564 <__aeabi_i2d>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	4639      	mov	r1, r7
 800d8ac:	f7f2 fd0c 	bl	80002c8 <__aeabi_dsub>
 800d8b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8b2:	3330      	adds	r3, #48	; 0x30
 800d8b4:	f805 3b01 	strb.w	r3, [r5], #1
 800d8b8:	ec53 2b18 	vmov	r2, r3, d8
 800d8bc:	4606      	mov	r6, r0
 800d8be:	460f      	mov	r7, r1
 800d8c0:	f7f3 f92c 	bl	8000b1c <__aeabi_dcmplt>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d165      	bne.n	800d994 <_dtoa_r+0x63c>
 800d8c8:	4632      	mov	r2, r6
 800d8ca:	463b      	mov	r3, r7
 800d8cc:	4935      	ldr	r1, [pc, #212]	; (800d9a4 <_dtoa_r+0x64c>)
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	f7f2 fcfa 	bl	80002c8 <__aeabi_dsub>
 800d8d4:	ec53 2b18 	vmov	r2, r3, d8
 800d8d8:	f7f3 f920 	bl	8000b1c <__aeabi_dcmplt>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	f040 80b9 	bne.w	800da54 <_dtoa_r+0x6fc>
 800d8e2:	9b02      	ldr	r3, [sp, #8]
 800d8e4:	429d      	cmp	r5, r3
 800d8e6:	f43f af75 	beq.w	800d7d4 <_dtoa_r+0x47c>
 800d8ea:	4b2f      	ldr	r3, [pc, #188]	; (800d9a8 <_dtoa_r+0x650>)
 800d8ec:	ec51 0b18 	vmov	r0, r1, d8
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f7f2 fea1 	bl	8000638 <__aeabi_dmul>
 800d8f6:	4b2c      	ldr	r3, [pc, #176]	; (800d9a8 <_dtoa_r+0x650>)
 800d8f8:	ec41 0b18 	vmov	d8, r0, r1
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	4630      	mov	r0, r6
 800d900:	4639      	mov	r1, r7
 800d902:	f7f2 fe99 	bl	8000638 <__aeabi_dmul>
 800d906:	4606      	mov	r6, r0
 800d908:	460f      	mov	r7, r1
 800d90a:	e7c4      	b.n	800d896 <_dtoa_r+0x53e>
 800d90c:	ec51 0b17 	vmov	r0, r1, d7
 800d910:	f7f2 fe92 	bl	8000638 <__aeabi_dmul>
 800d914:	9b02      	ldr	r3, [sp, #8]
 800d916:	9d00      	ldr	r5, [sp, #0]
 800d918:	930c      	str	r3, [sp, #48]	; 0x30
 800d91a:	ec41 0b18 	vmov	d8, r0, r1
 800d91e:	4639      	mov	r1, r7
 800d920:	4630      	mov	r0, r6
 800d922:	f7f3 f939 	bl	8000b98 <__aeabi_d2iz>
 800d926:	9011      	str	r0, [sp, #68]	; 0x44
 800d928:	f7f2 fe1c 	bl	8000564 <__aeabi_i2d>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	4630      	mov	r0, r6
 800d932:	4639      	mov	r1, r7
 800d934:	f7f2 fcc8 	bl	80002c8 <__aeabi_dsub>
 800d938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d93a:	3330      	adds	r3, #48	; 0x30
 800d93c:	f805 3b01 	strb.w	r3, [r5], #1
 800d940:	9b02      	ldr	r3, [sp, #8]
 800d942:	429d      	cmp	r5, r3
 800d944:	4606      	mov	r6, r0
 800d946:	460f      	mov	r7, r1
 800d948:	f04f 0200 	mov.w	r2, #0
 800d94c:	d134      	bne.n	800d9b8 <_dtoa_r+0x660>
 800d94e:	4b19      	ldr	r3, [pc, #100]	; (800d9b4 <_dtoa_r+0x65c>)
 800d950:	ec51 0b18 	vmov	r0, r1, d8
 800d954:	f7f2 fcba 	bl	80002cc <__adddf3>
 800d958:	4602      	mov	r2, r0
 800d95a:	460b      	mov	r3, r1
 800d95c:	4630      	mov	r0, r6
 800d95e:	4639      	mov	r1, r7
 800d960:	f7f3 f8fa 	bl	8000b58 <__aeabi_dcmpgt>
 800d964:	2800      	cmp	r0, #0
 800d966:	d175      	bne.n	800da54 <_dtoa_r+0x6fc>
 800d968:	ec53 2b18 	vmov	r2, r3, d8
 800d96c:	4911      	ldr	r1, [pc, #68]	; (800d9b4 <_dtoa_r+0x65c>)
 800d96e:	2000      	movs	r0, #0
 800d970:	f7f2 fcaa 	bl	80002c8 <__aeabi_dsub>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4630      	mov	r0, r6
 800d97a:	4639      	mov	r1, r7
 800d97c:	f7f3 f8ce 	bl	8000b1c <__aeabi_dcmplt>
 800d980:	2800      	cmp	r0, #0
 800d982:	f43f af27 	beq.w	800d7d4 <_dtoa_r+0x47c>
 800d986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d988:	1e6b      	subs	r3, r5, #1
 800d98a:	930c      	str	r3, [sp, #48]	; 0x30
 800d98c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d990:	2b30      	cmp	r3, #48	; 0x30
 800d992:	d0f8      	beq.n	800d986 <_dtoa_r+0x62e>
 800d994:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d998:	e04a      	b.n	800da30 <_dtoa_r+0x6d8>
 800d99a:	bf00      	nop
 800d99c:	08010da8 	.word	0x08010da8
 800d9a0:	08010d80 	.word	0x08010d80
 800d9a4:	3ff00000 	.word	0x3ff00000
 800d9a8:	40240000 	.word	0x40240000
 800d9ac:	401c0000 	.word	0x401c0000
 800d9b0:	40140000 	.word	0x40140000
 800d9b4:	3fe00000 	.word	0x3fe00000
 800d9b8:	4baf      	ldr	r3, [pc, #700]	; (800dc78 <_dtoa_r+0x920>)
 800d9ba:	f7f2 fe3d 	bl	8000638 <__aeabi_dmul>
 800d9be:	4606      	mov	r6, r0
 800d9c0:	460f      	mov	r7, r1
 800d9c2:	e7ac      	b.n	800d91e <_dtoa_r+0x5c6>
 800d9c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d9c8:	9d00      	ldr	r5, [sp, #0]
 800d9ca:	4642      	mov	r2, r8
 800d9cc:	464b      	mov	r3, r9
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	4639      	mov	r1, r7
 800d9d2:	f7f2 ff5b 	bl	800088c <__aeabi_ddiv>
 800d9d6:	f7f3 f8df 	bl	8000b98 <__aeabi_d2iz>
 800d9da:	9002      	str	r0, [sp, #8]
 800d9dc:	f7f2 fdc2 	bl	8000564 <__aeabi_i2d>
 800d9e0:	4642      	mov	r2, r8
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	f7f2 fe28 	bl	8000638 <__aeabi_dmul>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4630      	mov	r0, r6
 800d9ee:	4639      	mov	r1, r7
 800d9f0:	f7f2 fc6a 	bl	80002c8 <__aeabi_dsub>
 800d9f4:	9e02      	ldr	r6, [sp, #8]
 800d9f6:	9f01      	ldr	r7, [sp, #4]
 800d9f8:	3630      	adds	r6, #48	; 0x30
 800d9fa:	f805 6b01 	strb.w	r6, [r5], #1
 800d9fe:	9e00      	ldr	r6, [sp, #0]
 800da00:	1bae      	subs	r6, r5, r6
 800da02:	42b7      	cmp	r7, r6
 800da04:	4602      	mov	r2, r0
 800da06:	460b      	mov	r3, r1
 800da08:	d137      	bne.n	800da7a <_dtoa_r+0x722>
 800da0a:	f7f2 fc5f 	bl	80002cc <__adddf3>
 800da0e:	4642      	mov	r2, r8
 800da10:	464b      	mov	r3, r9
 800da12:	4606      	mov	r6, r0
 800da14:	460f      	mov	r7, r1
 800da16:	f7f3 f89f 	bl	8000b58 <__aeabi_dcmpgt>
 800da1a:	b9c8      	cbnz	r0, 800da50 <_dtoa_r+0x6f8>
 800da1c:	4642      	mov	r2, r8
 800da1e:	464b      	mov	r3, r9
 800da20:	4630      	mov	r0, r6
 800da22:	4639      	mov	r1, r7
 800da24:	f7f3 f870 	bl	8000b08 <__aeabi_dcmpeq>
 800da28:	b110      	cbz	r0, 800da30 <_dtoa_r+0x6d8>
 800da2a:	9b02      	ldr	r3, [sp, #8]
 800da2c:	07d9      	lsls	r1, r3, #31
 800da2e:	d40f      	bmi.n	800da50 <_dtoa_r+0x6f8>
 800da30:	4620      	mov	r0, r4
 800da32:	4659      	mov	r1, fp
 800da34:	f000 fe5c 	bl	800e6f0 <_Bfree>
 800da38:	2300      	movs	r3, #0
 800da3a:	702b      	strb	r3, [r5, #0]
 800da3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da3e:	f10a 0001 	add.w	r0, sl, #1
 800da42:	6018      	str	r0, [r3, #0]
 800da44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da46:	2b00      	cmp	r3, #0
 800da48:	f43f acd8 	beq.w	800d3fc <_dtoa_r+0xa4>
 800da4c:	601d      	str	r5, [r3, #0]
 800da4e:	e4d5      	b.n	800d3fc <_dtoa_r+0xa4>
 800da50:	f8cd a01c 	str.w	sl, [sp, #28]
 800da54:	462b      	mov	r3, r5
 800da56:	461d      	mov	r5, r3
 800da58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da5c:	2a39      	cmp	r2, #57	; 0x39
 800da5e:	d108      	bne.n	800da72 <_dtoa_r+0x71a>
 800da60:	9a00      	ldr	r2, [sp, #0]
 800da62:	429a      	cmp	r2, r3
 800da64:	d1f7      	bne.n	800da56 <_dtoa_r+0x6fe>
 800da66:	9a07      	ldr	r2, [sp, #28]
 800da68:	9900      	ldr	r1, [sp, #0]
 800da6a:	3201      	adds	r2, #1
 800da6c:	9207      	str	r2, [sp, #28]
 800da6e:	2230      	movs	r2, #48	; 0x30
 800da70:	700a      	strb	r2, [r1, #0]
 800da72:	781a      	ldrb	r2, [r3, #0]
 800da74:	3201      	adds	r2, #1
 800da76:	701a      	strb	r2, [r3, #0]
 800da78:	e78c      	b.n	800d994 <_dtoa_r+0x63c>
 800da7a:	4b7f      	ldr	r3, [pc, #508]	; (800dc78 <_dtoa_r+0x920>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	f7f2 fddb 	bl	8000638 <__aeabi_dmul>
 800da82:	2200      	movs	r2, #0
 800da84:	2300      	movs	r3, #0
 800da86:	4606      	mov	r6, r0
 800da88:	460f      	mov	r7, r1
 800da8a:	f7f3 f83d 	bl	8000b08 <__aeabi_dcmpeq>
 800da8e:	2800      	cmp	r0, #0
 800da90:	d09b      	beq.n	800d9ca <_dtoa_r+0x672>
 800da92:	e7cd      	b.n	800da30 <_dtoa_r+0x6d8>
 800da94:	9a08      	ldr	r2, [sp, #32]
 800da96:	2a00      	cmp	r2, #0
 800da98:	f000 80c4 	beq.w	800dc24 <_dtoa_r+0x8cc>
 800da9c:	9a05      	ldr	r2, [sp, #20]
 800da9e:	2a01      	cmp	r2, #1
 800daa0:	f300 80a8 	bgt.w	800dbf4 <_dtoa_r+0x89c>
 800daa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800daa6:	2a00      	cmp	r2, #0
 800daa8:	f000 80a0 	beq.w	800dbec <_dtoa_r+0x894>
 800daac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dab0:	9e06      	ldr	r6, [sp, #24]
 800dab2:	4645      	mov	r5, r8
 800dab4:	9a04      	ldr	r2, [sp, #16]
 800dab6:	2101      	movs	r1, #1
 800dab8:	441a      	add	r2, r3
 800daba:	4620      	mov	r0, r4
 800dabc:	4498      	add	r8, r3
 800dabe:	9204      	str	r2, [sp, #16]
 800dac0:	f000 ff1c 	bl	800e8fc <__i2b>
 800dac4:	4607      	mov	r7, r0
 800dac6:	2d00      	cmp	r5, #0
 800dac8:	dd0b      	ble.n	800dae2 <_dtoa_r+0x78a>
 800daca:	9b04      	ldr	r3, [sp, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	dd08      	ble.n	800dae2 <_dtoa_r+0x78a>
 800dad0:	42ab      	cmp	r3, r5
 800dad2:	9a04      	ldr	r2, [sp, #16]
 800dad4:	bfa8      	it	ge
 800dad6:	462b      	movge	r3, r5
 800dad8:	eba8 0803 	sub.w	r8, r8, r3
 800dadc:	1aed      	subs	r5, r5, r3
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	9304      	str	r3, [sp, #16]
 800dae2:	9b06      	ldr	r3, [sp, #24]
 800dae4:	b1fb      	cbz	r3, 800db26 <_dtoa_r+0x7ce>
 800dae6:	9b08      	ldr	r3, [sp, #32]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f000 809f 	beq.w	800dc2c <_dtoa_r+0x8d4>
 800daee:	2e00      	cmp	r6, #0
 800daf0:	dd11      	ble.n	800db16 <_dtoa_r+0x7be>
 800daf2:	4639      	mov	r1, r7
 800daf4:	4632      	mov	r2, r6
 800daf6:	4620      	mov	r0, r4
 800daf8:	f000 ffbc 	bl	800ea74 <__pow5mult>
 800dafc:	465a      	mov	r2, fp
 800dafe:	4601      	mov	r1, r0
 800db00:	4607      	mov	r7, r0
 800db02:	4620      	mov	r0, r4
 800db04:	f000 ff10 	bl	800e928 <__multiply>
 800db08:	4659      	mov	r1, fp
 800db0a:	9007      	str	r0, [sp, #28]
 800db0c:	4620      	mov	r0, r4
 800db0e:	f000 fdef 	bl	800e6f0 <_Bfree>
 800db12:	9b07      	ldr	r3, [sp, #28]
 800db14:	469b      	mov	fp, r3
 800db16:	9b06      	ldr	r3, [sp, #24]
 800db18:	1b9a      	subs	r2, r3, r6
 800db1a:	d004      	beq.n	800db26 <_dtoa_r+0x7ce>
 800db1c:	4659      	mov	r1, fp
 800db1e:	4620      	mov	r0, r4
 800db20:	f000 ffa8 	bl	800ea74 <__pow5mult>
 800db24:	4683      	mov	fp, r0
 800db26:	2101      	movs	r1, #1
 800db28:	4620      	mov	r0, r4
 800db2a:	f000 fee7 	bl	800e8fc <__i2b>
 800db2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db30:	2b00      	cmp	r3, #0
 800db32:	4606      	mov	r6, r0
 800db34:	dd7c      	ble.n	800dc30 <_dtoa_r+0x8d8>
 800db36:	461a      	mov	r2, r3
 800db38:	4601      	mov	r1, r0
 800db3a:	4620      	mov	r0, r4
 800db3c:	f000 ff9a 	bl	800ea74 <__pow5mult>
 800db40:	9b05      	ldr	r3, [sp, #20]
 800db42:	2b01      	cmp	r3, #1
 800db44:	4606      	mov	r6, r0
 800db46:	dd76      	ble.n	800dc36 <_dtoa_r+0x8de>
 800db48:	2300      	movs	r3, #0
 800db4a:	9306      	str	r3, [sp, #24]
 800db4c:	6933      	ldr	r3, [r6, #16]
 800db4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800db52:	6918      	ldr	r0, [r3, #16]
 800db54:	f000 fe82 	bl	800e85c <__hi0bits>
 800db58:	f1c0 0020 	rsb	r0, r0, #32
 800db5c:	9b04      	ldr	r3, [sp, #16]
 800db5e:	4418      	add	r0, r3
 800db60:	f010 001f 	ands.w	r0, r0, #31
 800db64:	f000 8086 	beq.w	800dc74 <_dtoa_r+0x91c>
 800db68:	f1c0 0320 	rsb	r3, r0, #32
 800db6c:	2b04      	cmp	r3, #4
 800db6e:	dd7f      	ble.n	800dc70 <_dtoa_r+0x918>
 800db70:	f1c0 001c 	rsb	r0, r0, #28
 800db74:	9b04      	ldr	r3, [sp, #16]
 800db76:	4403      	add	r3, r0
 800db78:	4480      	add	r8, r0
 800db7a:	4405      	add	r5, r0
 800db7c:	9304      	str	r3, [sp, #16]
 800db7e:	f1b8 0f00 	cmp.w	r8, #0
 800db82:	dd05      	ble.n	800db90 <_dtoa_r+0x838>
 800db84:	4659      	mov	r1, fp
 800db86:	4642      	mov	r2, r8
 800db88:	4620      	mov	r0, r4
 800db8a:	f000 ffcd 	bl	800eb28 <__lshift>
 800db8e:	4683      	mov	fp, r0
 800db90:	9b04      	ldr	r3, [sp, #16]
 800db92:	2b00      	cmp	r3, #0
 800db94:	dd05      	ble.n	800dba2 <_dtoa_r+0x84a>
 800db96:	4631      	mov	r1, r6
 800db98:	461a      	mov	r2, r3
 800db9a:	4620      	mov	r0, r4
 800db9c:	f000 ffc4 	bl	800eb28 <__lshift>
 800dba0:	4606      	mov	r6, r0
 800dba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d069      	beq.n	800dc7c <_dtoa_r+0x924>
 800dba8:	4631      	mov	r1, r6
 800dbaa:	4658      	mov	r0, fp
 800dbac:	f001 f828 	bl	800ec00 <__mcmp>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	da63      	bge.n	800dc7c <_dtoa_r+0x924>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	4659      	mov	r1, fp
 800dbb8:	220a      	movs	r2, #10
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f000 fdba 	bl	800e734 <__multadd>
 800dbc0:	9b08      	ldr	r3, [sp, #32]
 800dbc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbc6:	4683      	mov	fp, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 818f 	beq.w	800deec <_dtoa_r+0xb94>
 800dbce:	4639      	mov	r1, r7
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	220a      	movs	r2, #10
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f000 fdad 	bl	800e734 <__multadd>
 800dbda:	f1b9 0f00 	cmp.w	r9, #0
 800dbde:	4607      	mov	r7, r0
 800dbe0:	f300 808e 	bgt.w	800dd00 <_dtoa_r+0x9a8>
 800dbe4:	9b05      	ldr	r3, [sp, #20]
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	dc50      	bgt.n	800dc8c <_dtoa_r+0x934>
 800dbea:	e089      	b.n	800dd00 <_dtoa_r+0x9a8>
 800dbec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dbee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dbf2:	e75d      	b.n	800dab0 <_dtoa_r+0x758>
 800dbf4:	9b01      	ldr	r3, [sp, #4]
 800dbf6:	1e5e      	subs	r6, r3, #1
 800dbf8:	9b06      	ldr	r3, [sp, #24]
 800dbfa:	42b3      	cmp	r3, r6
 800dbfc:	bfbf      	itttt	lt
 800dbfe:	9b06      	ldrlt	r3, [sp, #24]
 800dc00:	9606      	strlt	r6, [sp, #24]
 800dc02:	1af2      	sublt	r2, r6, r3
 800dc04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800dc06:	bfb6      	itet	lt
 800dc08:	189b      	addlt	r3, r3, r2
 800dc0a:	1b9e      	subge	r6, r3, r6
 800dc0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800dc0e:	9b01      	ldr	r3, [sp, #4]
 800dc10:	bfb8      	it	lt
 800dc12:	2600      	movlt	r6, #0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	bfb5      	itete	lt
 800dc18:	eba8 0503 	sublt.w	r5, r8, r3
 800dc1c:	9b01      	ldrge	r3, [sp, #4]
 800dc1e:	2300      	movlt	r3, #0
 800dc20:	4645      	movge	r5, r8
 800dc22:	e747      	b.n	800dab4 <_dtoa_r+0x75c>
 800dc24:	9e06      	ldr	r6, [sp, #24]
 800dc26:	9f08      	ldr	r7, [sp, #32]
 800dc28:	4645      	mov	r5, r8
 800dc2a:	e74c      	b.n	800dac6 <_dtoa_r+0x76e>
 800dc2c:	9a06      	ldr	r2, [sp, #24]
 800dc2e:	e775      	b.n	800db1c <_dtoa_r+0x7c4>
 800dc30:	9b05      	ldr	r3, [sp, #20]
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	dc18      	bgt.n	800dc68 <_dtoa_r+0x910>
 800dc36:	9b02      	ldr	r3, [sp, #8]
 800dc38:	b9b3      	cbnz	r3, 800dc68 <_dtoa_r+0x910>
 800dc3a:	9b03      	ldr	r3, [sp, #12]
 800dc3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc40:	b9a3      	cbnz	r3, 800dc6c <_dtoa_r+0x914>
 800dc42:	9b03      	ldr	r3, [sp, #12]
 800dc44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc48:	0d1b      	lsrs	r3, r3, #20
 800dc4a:	051b      	lsls	r3, r3, #20
 800dc4c:	b12b      	cbz	r3, 800dc5a <_dtoa_r+0x902>
 800dc4e:	9b04      	ldr	r3, [sp, #16]
 800dc50:	3301      	adds	r3, #1
 800dc52:	9304      	str	r3, [sp, #16]
 800dc54:	f108 0801 	add.w	r8, r8, #1
 800dc58:	2301      	movs	r3, #1
 800dc5a:	9306      	str	r3, [sp, #24]
 800dc5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f47f af74 	bne.w	800db4c <_dtoa_r+0x7f4>
 800dc64:	2001      	movs	r0, #1
 800dc66:	e779      	b.n	800db5c <_dtoa_r+0x804>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	e7f6      	b.n	800dc5a <_dtoa_r+0x902>
 800dc6c:	9b02      	ldr	r3, [sp, #8]
 800dc6e:	e7f4      	b.n	800dc5a <_dtoa_r+0x902>
 800dc70:	d085      	beq.n	800db7e <_dtoa_r+0x826>
 800dc72:	4618      	mov	r0, r3
 800dc74:	301c      	adds	r0, #28
 800dc76:	e77d      	b.n	800db74 <_dtoa_r+0x81c>
 800dc78:	40240000 	.word	0x40240000
 800dc7c:	9b01      	ldr	r3, [sp, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	dc38      	bgt.n	800dcf4 <_dtoa_r+0x99c>
 800dc82:	9b05      	ldr	r3, [sp, #20]
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	dd35      	ble.n	800dcf4 <_dtoa_r+0x99c>
 800dc88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dc8c:	f1b9 0f00 	cmp.w	r9, #0
 800dc90:	d10d      	bne.n	800dcae <_dtoa_r+0x956>
 800dc92:	4631      	mov	r1, r6
 800dc94:	464b      	mov	r3, r9
 800dc96:	2205      	movs	r2, #5
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f000 fd4b 	bl	800e734 <__multadd>
 800dc9e:	4601      	mov	r1, r0
 800dca0:	4606      	mov	r6, r0
 800dca2:	4658      	mov	r0, fp
 800dca4:	f000 ffac 	bl	800ec00 <__mcmp>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	f73f adbd 	bgt.w	800d828 <_dtoa_r+0x4d0>
 800dcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcb0:	9d00      	ldr	r5, [sp, #0]
 800dcb2:	ea6f 0a03 	mvn.w	sl, r3
 800dcb6:	f04f 0800 	mov.w	r8, #0
 800dcba:	4631      	mov	r1, r6
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f000 fd17 	bl	800e6f0 <_Bfree>
 800dcc2:	2f00      	cmp	r7, #0
 800dcc4:	f43f aeb4 	beq.w	800da30 <_dtoa_r+0x6d8>
 800dcc8:	f1b8 0f00 	cmp.w	r8, #0
 800dccc:	d005      	beq.n	800dcda <_dtoa_r+0x982>
 800dcce:	45b8      	cmp	r8, r7
 800dcd0:	d003      	beq.n	800dcda <_dtoa_r+0x982>
 800dcd2:	4641      	mov	r1, r8
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f000 fd0b 	bl	800e6f0 <_Bfree>
 800dcda:	4639      	mov	r1, r7
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f000 fd07 	bl	800e6f0 <_Bfree>
 800dce2:	e6a5      	b.n	800da30 <_dtoa_r+0x6d8>
 800dce4:	2600      	movs	r6, #0
 800dce6:	4637      	mov	r7, r6
 800dce8:	e7e1      	b.n	800dcae <_dtoa_r+0x956>
 800dcea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dcec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dcf0:	4637      	mov	r7, r6
 800dcf2:	e599      	b.n	800d828 <_dtoa_r+0x4d0>
 800dcf4:	9b08      	ldr	r3, [sp, #32]
 800dcf6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f000 80fd 	beq.w	800defa <_dtoa_r+0xba2>
 800dd00:	2d00      	cmp	r5, #0
 800dd02:	dd05      	ble.n	800dd10 <_dtoa_r+0x9b8>
 800dd04:	4639      	mov	r1, r7
 800dd06:	462a      	mov	r2, r5
 800dd08:	4620      	mov	r0, r4
 800dd0a:	f000 ff0d 	bl	800eb28 <__lshift>
 800dd0e:	4607      	mov	r7, r0
 800dd10:	9b06      	ldr	r3, [sp, #24]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d05c      	beq.n	800ddd0 <_dtoa_r+0xa78>
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 fca9 	bl	800e670 <_Balloc>
 800dd1e:	4605      	mov	r5, r0
 800dd20:	b928      	cbnz	r0, 800dd2e <_dtoa_r+0x9d6>
 800dd22:	4b80      	ldr	r3, [pc, #512]	; (800df24 <_dtoa_r+0xbcc>)
 800dd24:	4602      	mov	r2, r0
 800dd26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dd2a:	f7ff bb2e 	b.w	800d38a <_dtoa_r+0x32>
 800dd2e:	693a      	ldr	r2, [r7, #16]
 800dd30:	3202      	adds	r2, #2
 800dd32:	0092      	lsls	r2, r2, #2
 800dd34:	f107 010c 	add.w	r1, r7, #12
 800dd38:	300c      	adds	r0, #12
 800dd3a:	f000 fc7f 	bl	800e63c <memcpy>
 800dd3e:	2201      	movs	r2, #1
 800dd40:	4629      	mov	r1, r5
 800dd42:	4620      	mov	r0, r4
 800dd44:	f000 fef0 	bl	800eb28 <__lshift>
 800dd48:	9b00      	ldr	r3, [sp, #0]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	9301      	str	r3, [sp, #4]
 800dd4e:	9b00      	ldr	r3, [sp, #0]
 800dd50:	444b      	add	r3, r9
 800dd52:	9307      	str	r3, [sp, #28]
 800dd54:	9b02      	ldr	r3, [sp, #8]
 800dd56:	f003 0301 	and.w	r3, r3, #1
 800dd5a:	46b8      	mov	r8, r7
 800dd5c:	9306      	str	r3, [sp, #24]
 800dd5e:	4607      	mov	r7, r0
 800dd60:	9b01      	ldr	r3, [sp, #4]
 800dd62:	4631      	mov	r1, r6
 800dd64:	3b01      	subs	r3, #1
 800dd66:	4658      	mov	r0, fp
 800dd68:	9302      	str	r3, [sp, #8]
 800dd6a:	f7ff fa67 	bl	800d23c <quorem>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	3330      	adds	r3, #48	; 0x30
 800dd72:	9004      	str	r0, [sp, #16]
 800dd74:	4641      	mov	r1, r8
 800dd76:	4658      	mov	r0, fp
 800dd78:	9308      	str	r3, [sp, #32]
 800dd7a:	f000 ff41 	bl	800ec00 <__mcmp>
 800dd7e:	463a      	mov	r2, r7
 800dd80:	4681      	mov	r9, r0
 800dd82:	4631      	mov	r1, r6
 800dd84:	4620      	mov	r0, r4
 800dd86:	f000 ff57 	bl	800ec38 <__mdiff>
 800dd8a:	68c2      	ldr	r2, [r0, #12]
 800dd8c:	9b08      	ldr	r3, [sp, #32]
 800dd8e:	4605      	mov	r5, r0
 800dd90:	bb02      	cbnz	r2, 800ddd4 <_dtoa_r+0xa7c>
 800dd92:	4601      	mov	r1, r0
 800dd94:	4658      	mov	r0, fp
 800dd96:	f000 ff33 	bl	800ec00 <__mcmp>
 800dd9a:	9b08      	ldr	r3, [sp, #32]
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	4629      	mov	r1, r5
 800dda0:	4620      	mov	r0, r4
 800dda2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800dda6:	f000 fca3 	bl	800e6f0 <_Bfree>
 800ddaa:	9b05      	ldr	r3, [sp, #20]
 800ddac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddae:	9d01      	ldr	r5, [sp, #4]
 800ddb0:	ea43 0102 	orr.w	r1, r3, r2
 800ddb4:	9b06      	ldr	r3, [sp, #24]
 800ddb6:	430b      	orrs	r3, r1
 800ddb8:	9b08      	ldr	r3, [sp, #32]
 800ddba:	d10d      	bne.n	800ddd8 <_dtoa_r+0xa80>
 800ddbc:	2b39      	cmp	r3, #57	; 0x39
 800ddbe:	d029      	beq.n	800de14 <_dtoa_r+0xabc>
 800ddc0:	f1b9 0f00 	cmp.w	r9, #0
 800ddc4:	dd01      	ble.n	800ddca <_dtoa_r+0xa72>
 800ddc6:	9b04      	ldr	r3, [sp, #16]
 800ddc8:	3331      	adds	r3, #49	; 0x31
 800ddca:	9a02      	ldr	r2, [sp, #8]
 800ddcc:	7013      	strb	r3, [r2, #0]
 800ddce:	e774      	b.n	800dcba <_dtoa_r+0x962>
 800ddd0:	4638      	mov	r0, r7
 800ddd2:	e7b9      	b.n	800dd48 <_dtoa_r+0x9f0>
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	e7e2      	b.n	800dd9e <_dtoa_r+0xa46>
 800ddd8:	f1b9 0f00 	cmp.w	r9, #0
 800dddc:	db06      	blt.n	800ddec <_dtoa_r+0xa94>
 800ddde:	9905      	ldr	r1, [sp, #20]
 800dde0:	ea41 0909 	orr.w	r9, r1, r9
 800dde4:	9906      	ldr	r1, [sp, #24]
 800dde6:	ea59 0101 	orrs.w	r1, r9, r1
 800ddea:	d120      	bne.n	800de2e <_dtoa_r+0xad6>
 800ddec:	2a00      	cmp	r2, #0
 800ddee:	ddec      	ble.n	800ddca <_dtoa_r+0xa72>
 800ddf0:	4659      	mov	r1, fp
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	9301      	str	r3, [sp, #4]
 800ddf8:	f000 fe96 	bl	800eb28 <__lshift>
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	4683      	mov	fp, r0
 800de00:	f000 fefe 	bl	800ec00 <__mcmp>
 800de04:	2800      	cmp	r0, #0
 800de06:	9b01      	ldr	r3, [sp, #4]
 800de08:	dc02      	bgt.n	800de10 <_dtoa_r+0xab8>
 800de0a:	d1de      	bne.n	800ddca <_dtoa_r+0xa72>
 800de0c:	07da      	lsls	r2, r3, #31
 800de0e:	d5dc      	bpl.n	800ddca <_dtoa_r+0xa72>
 800de10:	2b39      	cmp	r3, #57	; 0x39
 800de12:	d1d8      	bne.n	800ddc6 <_dtoa_r+0xa6e>
 800de14:	9a02      	ldr	r2, [sp, #8]
 800de16:	2339      	movs	r3, #57	; 0x39
 800de18:	7013      	strb	r3, [r2, #0]
 800de1a:	462b      	mov	r3, r5
 800de1c:	461d      	mov	r5, r3
 800de1e:	3b01      	subs	r3, #1
 800de20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de24:	2a39      	cmp	r2, #57	; 0x39
 800de26:	d050      	beq.n	800deca <_dtoa_r+0xb72>
 800de28:	3201      	adds	r2, #1
 800de2a:	701a      	strb	r2, [r3, #0]
 800de2c:	e745      	b.n	800dcba <_dtoa_r+0x962>
 800de2e:	2a00      	cmp	r2, #0
 800de30:	dd03      	ble.n	800de3a <_dtoa_r+0xae2>
 800de32:	2b39      	cmp	r3, #57	; 0x39
 800de34:	d0ee      	beq.n	800de14 <_dtoa_r+0xabc>
 800de36:	3301      	adds	r3, #1
 800de38:	e7c7      	b.n	800ddca <_dtoa_r+0xa72>
 800de3a:	9a01      	ldr	r2, [sp, #4]
 800de3c:	9907      	ldr	r1, [sp, #28]
 800de3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800de42:	428a      	cmp	r2, r1
 800de44:	d02a      	beq.n	800de9c <_dtoa_r+0xb44>
 800de46:	4659      	mov	r1, fp
 800de48:	2300      	movs	r3, #0
 800de4a:	220a      	movs	r2, #10
 800de4c:	4620      	mov	r0, r4
 800de4e:	f000 fc71 	bl	800e734 <__multadd>
 800de52:	45b8      	cmp	r8, r7
 800de54:	4683      	mov	fp, r0
 800de56:	f04f 0300 	mov.w	r3, #0
 800de5a:	f04f 020a 	mov.w	r2, #10
 800de5e:	4641      	mov	r1, r8
 800de60:	4620      	mov	r0, r4
 800de62:	d107      	bne.n	800de74 <_dtoa_r+0xb1c>
 800de64:	f000 fc66 	bl	800e734 <__multadd>
 800de68:	4680      	mov	r8, r0
 800de6a:	4607      	mov	r7, r0
 800de6c:	9b01      	ldr	r3, [sp, #4]
 800de6e:	3301      	adds	r3, #1
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	e775      	b.n	800dd60 <_dtoa_r+0xa08>
 800de74:	f000 fc5e 	bl	800e734 <__multadd>
 800de78:	4639      	mov	r1, r7
 800de7a:	4680      	mov	r8, r0
 800de7c:	2300      	movs	r3, #0
 800de7e:	220a      	movs	r2, #10
 800de80:	4620      	mov	r0, r4
 800de82:	f000 fc57 	bl	800e734 <__multadd>
 800de86:	4607      	mov	r7, r0
 800de88:	e7f0      	b.n	800de6c <_dtoa_r+0xb14>
 800de8a:	f1b9 0f00 	cmp.w	r9, #0
 800de8e:	9a00      	ldr	r2, [sp, #0]
 800de90:	bfcc      	ite	gt
 800de92:	464d      	movgt	r5, r9
 800de94:	2501      	movle	r5, #1
 800de96:	4415      	add	r5, r2
 800de98:	f04f 0800 	mov.w	r8, #0
 800de9c:	4659      	mov	r1, fp
 800de9e:	2201      	movs	r2, #1
 800dea0:	4620      	mov	r0, r4
 800dea2:	9301      	str	r3, [sp, #4]
 800dea4:	f000 fe40 	bl	800eb28 <__lshift>
 800dea8:	4631      	mov	r1, r6
 800deaa:	4683      	mov	fp, r0
 800deac:	f000 fea8 	bl	800ec00 <__mcmp>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	dcb2      	bgt.n	800de1a <_dtoa_r+0xac2>
 800deb4:	d102      	bne.n	800debc <_dtoa_r+0xb64>
 800deb6:	9b01      	ldr	r3, [sp, #4]
 800deb8:	07db      	lsls	r3, r3, #31
 800deba:	d4ae      	bmi.n	800de1a <_dtoa_r+0xac2>
 800debc:	462b      	mov	r3, r5
 800debe:	461d      	mov	r5, r3
 800dec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dec4:	2a30      	cmp	r2, #48	; 0x30
 800dec6:	d0fa      	beq.n	800debe <_dtoa_r+0xb66>
 800dec8:	e6f7      	b.n	800dcba <_dtoa_r+0x962>
 800deca:	9a00      	ldr	r2, [sp, #0]
 800decc:	429a      	cmp	r2, r3
 800dece:	d1a5      	bne.n	800de1c <_dtoa_r+0xac4>
 800ded0:	f10a 0a01 	add.w	sl, sl, #1
 800ded4:	2331      	movs	r3, #49	; 0x31
 800ded6:	e779      	b.n	800ddcc <_dtoa_r+0xa74>
 800ded8:	4b13      	ldr	r3, [pc, #76]	; (800df28 <_dtoa_r+0xbd0>)
 800deda:	f7ff baaf 	b.w	800d43c <_dtoa_r+0xe4>
 800dede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f47f aa86 	bne.w	800d3f2 <_dtoa_r+0x9a>
 800dee6:	4b11      	ldr	r3, [pc, #68]	; (800df2c <_dtoa_r+0xbd4>)
 800dee8:	f7ff baa8 	b.w	800d43c <_dtoa_r+0xe4>
 800deec:	f1b9 0f00 	cmp.w	r9, #0
 800def0:	dc03      	bgt.n	800defa <_dtoa_r+0xba2>
 800def2:	9b05      	ldr	r3, [sp, #20]
 800def4:	2b02      	cmp	r3, #2
 800def6:	f73f aec9 	bgt.w	800dc8c <_dtoa_r+0x934>
 800defa:	9d00      	ldr	r5, [sp, #0]
 800defc:	4631      	mov	r1, r6
 800defe:	4658      	mov	r0, fp
 800df00:	f7ff f99c 	bl	800d23c <quorem>
 800df04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800df08:	f805 3b01 	strb.w	r3, [r5], #1
 800df0c:	9a00      	ldr	r2, [sp, #0]
 800df0e:	1aaa      	subs	r2, r5, r2
 800df10:	4591      	cmp	r9, r2
 800df12:	ddba      	ble.n	800de8a <_dtoa_r+0xb32>
 800df14:	4659      	mov	r1, fp
 800df16:	2300      	movs	r3, #0
 800df18:	220a      	movs	r2, #10
 800df1a:	4620      	mov	r0, r4
 800df1c:	f000 fc0a 	bl	800e734 <__multadd>
 800df20:	4683      	mov	fp, r0
 800df22:	e7eb      	b.n	800defc <_dtoa_r+0xba4>
 800df24:	08010c8c 	.word	0x08010c8c
 800df28:	08010a8c 	.word	0x08010a8c
 800df2c:	08010c09 	.word	0x08010c09

0800df30 <rshift>:
 800df30:	6903      	ldr	r3, [r0, #16]
 800df32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800df36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800df3e:	f100 0414 	add.w	r4, r0, #20
 800df42:	dd45      	ble.n	800dfd0 <rshift+0xa0>
 800df44:	f011 011f 	ands.w	r1, r1, #31
 800df48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800df4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800df50:	d10c      	bne.n	800df6c <rshift+0x3c>
 800df52:	f100 0710 	add.w	r7, r0, #16
 800df56:	4629      	mov	r1, r5
 800df58:	42b1      	cmp	r1, r6
 800df5a:	d334      	bcc.n	800dfc6 <rshift+0x96>
 800df5c:	1a9b      	subs	r3, r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	1eea      	subs	r2, r5, #3
 800df62:	4296      	cmp	r6, r2
 800df64:	bf38      	it	cc
 800df66:	2300      	movcc	r3, #0
 800df68:	4423      	add	r3, r4
 800df6a:	e015      	b.n	800df98 <rshift+0x68>
 800df6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800df70:	f1c1 0820 	rsb	r8, r1, #32
 800df74:	40cf      	lsrs	r7, r1
 800df76:	f105 0e04 	add.w	lr, r5, #4
 800df7a:	46a1      	mov	r9, r4
 800df7c:	4576      	cmp	r6, lr
 800df7e:	46f4      	mov	ip, lr
 800df80:	d815      	bhi.n	800dfae <rshift+0x7e>
 800df82:	1a9b      	subs	r3, r3, r2
 800df84:	009a      	lsls	r2, r3, #2
 800df86:	3a04      	subs	r2, #4
 800df88:	3501      	adds	r5, #1
 800df8a:	42ae      	cmp	r6, r5
 800df8c:	bf38      	it	cc
 800df8e:	2200      	movcc	r2, #0
 800df90:	18a3      	adds	r3, r4, r2
 800df92:	50a7      	str	r7, [r4, r2]
 800df94:	b107      	cbz	r7, 800df98 <rshift+0x68>
 800df96:	3304      	adds	r3, #4
 800df98:	1b1a      	subs	r2, r3, r4
 800df9a:	42a3      	cmp	r3, r4
 800df9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dfa0:	bf08      	it	eq
 800dfa2:	2300      	moveq	r3, #0
 800dfa4:	6102      	str	r2, [r0, #16]
 800dfa6:	bf08      	it	eq
 800dfa8:	6143      	streq	r3, [r0, #20]
 800dfaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfae:	f8dc c000 	ldr.w	ip, [ip]
 800dfb2:	fa0c fc08 	lsl.w	ip, ip, r8
 800dfb6:	ea4c 0707 	orr.w	r7, ip, r7
 800dfba:	f849 7b04 	str.w	r7, [r9], #4
 800dfbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dfc2:	40cf      	lsrs	r7, r1
 800dfc4:	e7da      	b.n	800df7c <rshift+0x4c>
 800dfc6:	f851 cb04 	ldr.w	ip, [r1], #4
 800dfca:	f847 cf04 	str.w	ip, [r7, #4]!
 800dfce:	e7c3      	b.n	800df58 <rshift+0x28>
 800dfd0:	4623      	mov	r3, r4
 800dfd2:	e7e1      	b.n	800df98 <rshift+0x68>

0800dfd4 <__hexdig_fun>:
 800dfd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dfd8:	2b09      	cmp	r3, #9
 800dfda:	d802      	bhi.n	800dfe2 <__hexdig_fun+0xe>
 800dfdc:	3820      	subs	r0, #32
 800dfde:	b2c0      	uxtb	r0, r0
 800dfe0:	4770      	bx	lr
 800dfe2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dfe6:	2b05      	cmp	r3, #5
 800dfe8:	d801      	bhi.n	800dfee <__hexdig_fun+0x1a>
 800dfea:	3847      	subs	r0, #71	; 0x47
 800dfec:	e7f7      	b.n	800dfde <__hexdig_fun+0xa>
 800dfee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dff2:	2b05      	cmp	r3, #5
 800dff4:	d801      	bhi.n	800dffa <__hexdig_fun+0x26>
 800dff6:	3827      	subs	r0, #39	; 0x27
 800dff8:	e7f1      	b.n	800dfde <__hexdig_fun+0xa>
 800dffa:	2000      	movs	r0, #0
 800dffc:	4770      	bx	lr
	...

0800e000 <__gethex>:
 800e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e004:	ed2d 8b02 	vpush	{d8}
 800e008:	b089      	sub	sp, #36	; 0x24
 800e00a:	ee08 0a10 	vmov	s16, r0
 800e00e:	9304      	str	r3, [sp, #16]
 800e010:	4bbc      	ldr	r3, [pc, #752]	; (800e304 <__gethex+0x304>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	9301      	str	r3, [sp, #4]
 800e016:	4618      	mov	r0, r3
 800e018:	468b      	mov	fp, r1
 800e01a:	4690      	mov	r8, r2
 800e01c:	f7f2 f8f8 	bl	8000210 <strlen>
 800e020:	9b01      	ldr	r3, [sp, #4]
 800e022:	f8db 2000 	ldr.w	r2, [fp]
 800e026:	4403      	add	r3, r0
 800e028:	4682      	mov	sl, r0
 800e02a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e02e:	9305      	str	r3, [sp, #20]
 800e030:	1c93      	adds	r3, r2, #2
 800e032:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e036:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e03a:	32fe      	adds	r2, #254	; 0xfe
 800e03c:	18d1      	adds	r1, r2, r3
 800e03e:	461f      	mov	r7, r3
 800e040:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e044:	9100      	str	r1, [sp, #0]
 800e046:	2830      	cmp	r0, #48	; 0x30
 800e048:	d0f8      	beq.n	800e03c <__gethex+0x3c>
 800e04a:	f7ff ffc3 	bl	800dfd4 <__hexdig_fun>
 800e04e:	4604      	mov	r4, r0
 800e050:	2800      	cmp	r0, #0
 800e052:	d13a      	bne.n	800e0ca <__gethex+0xca>
 800e054:	9901      	ldr	r1, [sp, #4]
 800e056:	4652      	mov	r2, sl
 800e058:	4638      	mov	r0, r7
 800e05a:	f001 f939 	bl	800f2d0 <strncmp>
 800e05e:	4605      	mov	r5, r0
 800e060:	2800      	cmp	r0, #0
 800e062:	d168      	bne.n	800e136 <__gethex+0x136>
 800e064:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e068:	eb07 060a 	add.w	r6, r7, sl
 800e06c:	f7ff ffb2 	bl	800dfd4 <__hexdig_fun>
 800e070:	2800      	cmp	r0, #0
 800e072:	d062      	beq.n	800e13a <__gethex+0x13a>
 800e074:	4633      	mov	r3, r6
 800e076:	7818      	ldrb	r0, [r3, #0]
 800e078:	2830      	cmp	r0, #48	; 0x30
 800e07a:	461f      	mov	r7, r3
 800e07c:	f103 0301 	add.w	r3, r3, #1
 800e080:	d0f9      	beq.n	800e076 <__gethex+0x76>
 800e082:	f7ff ffa7 	bl	800dfd4 <__hexdig_fun>
 800e086:	2301      	movs	r3, #1
 800e088:	fab0 f480 	clz	r4, r0
 800e08c:	0964      	lsrs	r4, r4, #5
 800e08e:	4635      	mov	r5, r6
 800e090:	9300      	str	r3, [sp, #0]
 800e092:	463a      	mov	r2, r7
 800e094:	4616      	mov	r6, r2
 800e096:	3201      	adds	r2, #1
 800e098:	7830      	ldrb	r0, [r6, #0]
 800e09a:	f7ff ff9b 	bl	800dfd4 <__hexdig_fun>
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d1f8      	bne.n	800e094 <__gethex+0x94>
 800e0a2:	9901      	ldr	r1, [sp, #4]
 800e0a4:	4652      	mov	r2, sl
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	f001 f912 	bl	800f2d0 <strncmp>
 800e0ac:	b980      	cbnz	r0, 800e0d0 <__gethex+0xd0>
 800e0ae:	b94d      	cbnz	r5, 800e0c4 <__gethex+0xc4>
 800e0b0:	eb06 050a 	add.w	r5, r6, sl
 800e0b4:	462a      	mov	r2, r5
 800e0b6:	4616      	mov	r6, r2
 800e0b8:	3201      	adds	r2, #1
 800e0ba:	7830      	ldrb	r0, [r6, #0]
 800e0bc:	f7ff ff8a 	bl	800dfd4 <__hexdig_fun>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d1f8      	bne.n	800e0b6 <__gethex+0xb6>
 800e0c4:	1bad      	subs	r5, r5, r6
 800e0c6:	00ad      	lsls	r5, r5, #2
 800e0c8:	e004      	b.n	800e0d4 <__gethex+0xd4>
 800e0ca:	2400      	movs	r4, #0
 800e0cc:	4625      	mov	r5, r4
 800e0ce:	e7e0      	b.n	800e092 <__gethex+0x92>
 800e0d0:	2d00      	cmp	r5, #0
 800e0d2:	d1f7      	bne.n	800e0c4 <__gethex+0xc4>
 800e0d4:	7833      	ldrb	r3, [r6, #0]
 800e0d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e0da:	2b50      	cmp	r3, #80	; 0x50
 800e0dc:	d13b      	bne.n	800e156 <__gethex+0x156>
 800e0de:	7873      	ldrb	r3, [r6, #1]
 800e0e0:	2b2b      	cmp	r3, #43	; 0x2b
 800e0e2:	d02c      	beq.n	800e13e <__gethex+0x13e>
 800e0e4:	2b2d      	cmp	r3, #45	; 0x2d
 800e0e6:	d02e      	beq.n	800e146 <__gethex+0x146>
 800e0e8:	1c71      	adds	r1, r6, #1
 800e0ea:	f04f 0900 	mov.w	r9, #0
 800e0ee:	7808      	ldrb	r0, [r1, #0]
 800e0f0:	f7ff ff70 	bl	800dfd4 <__hexdig_fun>
 800e0f4:	1e43      	subs	r3, r0, #1
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	2b18      	cmp	r3, #24
 800e0fa:	d82c      	bhi.n	800e156 <__gethex+0x156>
 800e0fc:	f1a0 0210 	sub.w	r2, r0, #16
 800e100:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e104:	f7ff ff66 	bl	800dfd4 <__hexdig_fun>
 800e108:	1e43      	subs	r3, r0, #1
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	2b18      	cmp	r3, #24
 800e10e:	d91d      	bls.n	800e14c <__gethex+0x14c>
 800e110:	f1b9 0f00 	cmp.w	r9, #0
 800e114:	d000      	beq.n	800e118 <__gethex+0x118>
 800e116:	4252      	negs	r2, r2
 800e118:	4415      	add	r5, r2
 800e11a:	f8cb 1000 	str.w	r1, [fp]
 800e11e:	b1e4      	cbz	r4, 800e15a <__gethex+0x15a>
 800e120:	9b00      	ldr	r3, [sp, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	bf14      	ite	ne
 800e126:	2700      	movne	r7, #0
 800e128:	2706      	moveq	r7, #6
 800e12a:	4638      	mov	r0, r7
 800e12c:	b009      	add	sp, #36	; 0x24
 800e12e:	ecbd 8b02 	vpop	{d8}
 800e132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e136:	463e      	mov	r6, r7
 800e138:	4625      	mov	r5, r4
 800e13a:	2401      	movs	r4, #1
 800e13c:	e7ca      	b.n	800e0d4 <__gethex+0xd4>
 800e13e:	f04f 0900 	mov.w	r9, #0
 800e142:	1cb1      	adds	r1, r6, #2
 800e144:	e7d3      	b.n	800e0ee <__gethex+0xee>
 800e146:	f04f 0901 	mov.w	r9, #1
 800e14a:	e7fa      	b.n	800e142 <__gethex+0x142>
 800e14c:	230a      	movs	r3, #10
 800e14e:	fb03 0202 	mla	r2, r3, r2, r0
 800e152:	3a10      	subs	r2, #16
 800e154:	e7d4      	b.n	800e100 <__gethex+0x100>
 800e156:	4631      	mov	r1, r6
 800e158:	e7df      	b.n	800e11a <__gethex+0x11a>
 800e15a:	1bf3      	subs	r3, r6, r7
 800e15c:	3b01      	subs	r3, #1
 800e15e:	4621      	mov	r1, r4
 800e160:	2b07      	cmp	r3, #7
 800e162:	dc0b      	bgt.n	800e17c <__gethex+0x17c>
 800e164:	ee18 0a10 	vmov	r0, s16
 800e168:	f000 fa82 	bl	800e670 <_Balloc>
 800e16c:	4604      	mov	r4, r0
 800e16e:	b940      	cbnz	r0, 800e182 <__gethex+0x182>
 800e170:	4b65      	ldr	r3, [pc, #404]	; (800e308 <__gethex+0x308>)
 800e172:	4602      	mov	r2, r0
 800e174:	21de      	movs	r1, #222	; 0xde
 800e176:	4865      	ldr	r0, [pc, #404]	; (800e30c <__gethex+0x30c>)
 800e178:	f001 f8ca 	bl	800f310 <__assert_func>
 800e17c:	3101      	adds	r1, #1
 800e17e:	105b      	asrs	r3, r3, #1
 800e180:	e7ee      	b.n	800e160 <__gethex+0x160>
 800e182:	f100 0914 	add.w	r9, r0, #20
 800e186:	f04f 0b00 	mov.w	fp, #0
 800e18a:	f1ca 0301 	rsb	r3, sl, #1
 800e18e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e192:	f8cd b000 	str.w	fp, [sp]
 800e196:	9306      	str	r3, [sp, #24]
 800e198:	42b7      	cmp	r7, r6
 800e19a:	d340      	bcc.n	800e21e <__gethex+0x21e>
 800e19c:	9802      	ldr	r0, [sp, #8]
 800e19e:	9b00      	ldr	r3, [sp, #0]
 800e1a0:	f840 3b04 	str.w	r3, [r0], #4
 800e1a4:	eba0 0009 	sub.w	r0, r0, r9
 800e1a8:	1080      	asrs	r0, r0, #2
 800e1aa:	0146      	lsls	r6, r0, #5
 800e1ac:	6120      	str	r0, [r4, #16]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 fb54 	bl	800e85c <__hi0bits>
 800e1b4:	1a30      	subs	r0, r6, r0
 800e1b6:	f8d8 6000 	ldr.w	r6, [r8]
 800e1ba:	42b0      	cmp	r0, r6
 800e1bc:	dd63      	ble.n	800e286 <__gethex+0x286>
 800e1be:	1b87      	subs	r7, r0, r6
 800e1c0:	4639      	mov	r1, r7
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 feee 	bl	800efa4 <__any_on>
 800e1c8:	4682      	mov	sl, r0
 800e1ca:	b1a8      	cbz	r0, 800e1f8 <__gethex+0x1f8>
 800e1cc:	1e7b      	subs	r3, r7, #1
 800e1ce:	1159      	asrs	r1, r3, #5
 800e1d0:	f003 021f 	and.w	r2, r3, #31
 800e1d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e1d8:	f04f 0a01 	mov.w	sl, #1
 800e1dc:	fa0a f202 	lsl.w	r2, sl, r2
 800e1e0:	420a      	tst	r2, r1
 800e1e2:	d009      	beq.n	800e1f8 <__gethex+0x1f8>
 800e1e4:	4553      	cmp	r3, sl
 800e1e6:	dd05      	ble.n	800e1f4 <__gethex+0x1f4>
 800e1e8:	1eb9      	subs	r1, r7, #2
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 feda 	bl	800efa4 <__any_on>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d145      	bne.n	800e280 <__gethex+0x280>
 800e1f4:	f04f 0a02 	mov.w	sl, #2
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f7ff fe98 	bl	800df30 <rshift>
 800e200:	443d      	add	r5, r7
 800e202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e206:	42ab      	cmp	r3, r5
 800e208:	da4c      	bge.n	800e2a4 <__gethex+0x2a4>
 800e20a:	ee18 0a10 	vmov	r0, s16
 800e20e:	4621      	mov	r1, r4
 800e210:	f000 fa6e 	bl	800e6f0 <_Bfree>
 800e214:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e216:	2300      	movs	r3, #0
 800e218:	6013      	str	r3, [r2, #0]
 800e21a:	27a3      	movs	r7, #163	; 0xa3
 800e21c:	e785      	b.n	800e12a <__gethex+0x12a>
 800e21e:	1e73      	subs	r3, r6, #1
 800e220:	9a05      	ldr	r2, [sp, #20]
 800e222:	9303      	str	r3, [sp, #12]
 800e224:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e228:	4293      	cmp	r3, r2
 800e22a:	d019      	beq.n	800e260 <__gethex+0x260>
 800e22c:	f1bb 0f20 	cmp.w	fp, #32
 800e230:	d107      	bne.n	800e242 <__gethex+0x242>
 800e232:	9b02      	ldr	r3, [sp, #8]
 800e234:	9a00      	ldr	r2, [sp, #0]
 800e236:	f843 2b04 	str.w	r2, [r3], #4
 800e23a:	9302      	str	r3, [sp, #8]
 800e23c:	2300      	movs	r3, #0
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	469b      	mov	fp, r3
 800e242:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e246:	f7ff fec5 	bl	800dfd4 <__hexdig_fun>
 800e24a:	9b00      	ldr	r3, [sp, #0]
 800e24c:	f000 000f 	and.w	r0, r0, #15
 800e250:	fa00 f00b 	lsl.w	r0, r0, fp
 800e254:	4303      	orrs	r3, r0
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	f10b 0b04 	add.w	fp, fp, #4
 800e25c:	9b03      	ldr	r3, [sp, #12]
 800e25e:	e00d      	b.n	800e27c <__gethex+0x27c>
 800e260:	9b03      	ldr	r3, [sp, #12]
 800e262:	9a06      	ldr	r2, [sp, #24]
 800e264:	4413      	add	r3, r2
 800e266:	42bb      	cmp	r3, r7
 800e268:	d3e0      	bcc.n	800e22c <__gethex+0x22c>
 800e26a:	4618      	mov	r0, r3
 800e26c:	9901      	ldr	r1, [sp, #4]
 800e26e:	9307      	str	r3, [sp, #28]
 800e270:	4652      	mov	r2, sl
 800e272:	f001 f82d 	bl	800f2d0 <strncmp>
 800e276:	9b07      	ldr	r3, [sp, #28]
 800e278:	2800      	cmp	r0, #0
 800e27a:	d1d7      	bne.n	800e22c <__gethex+0x22c>
 800e27c:	461e      	mov	r6, r3
 800e27e:	e78b      	b.n	800e198 <__gethex+0x198>
 800e280:	f04f 0a03 	mov.w	sl, #3
 800e284:	e7b8      	b.n	800e1f8 <__gethex+0x1f8>
 800e286:	da0a      	bge.n	800e29e <__gethex+0x29e>
 800e288:	1a37      	subs	r7, r6, r0
 800e28a:	4621      	mov	r1, r4
 800e28c:	ee18 0a10 	vmov	r0, s16
 800e290:	463a      	mov	r2, r7
 800e292:	f000 fc49 	bl	800eb28 <__lshift>
 800e296:	1bed      	subs	r5, r5, r7
 800e298:	4604      	mov	r4, r0
 800e29a:	f100 0914 	add.w	r9, r0, #20
 800e29e:	f04f 0a00 	mov.w	sl, #0
 800e2a2:	e7ae      	b.n	800e202 <__gethex+0x202>
 800e2a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e2a8:	42a8      	cmp	r0, r5
 800e2aa:	dd72      	ble.n	800e392 <__gethex+0x392>
 800e2ac:	1b45      	subs	r5, r0, r5
 800e2ae:	42ae      	cmp	r6, r5
 800e2b0:	dc36      	bgt.n	800e320 <__gethex+0x320>
 800e2b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d02a      	beq.n	800e310 <__gethex+0x310>
 800e2ba:	2b03      	cmp	r3, #3
 800e2bc:	d02c      	beq.n	800e318 <__gethex+0x318>
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d115      	bne.n	800e2ee <__gethex+0x2ee>
 800e2c2:	42ae      	cmp	r6, r5
 800e2c4:	d113      	bne.n	800e2ee <__gethex+0x2ee>
 800e2c6:	2e01      	cmp	r6, #1
 800e2c8:	d10b      	bne.n	800e2e2 <__gethex+0x2e2>
 800e2ca:	9a04      	ldr	r2, [sp, #16]
 800e2cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e2d0:	6013      	str	r3, [r2, #0]
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	6123      	str	r3, [r4, #16]
 800e2d6:	f8c9 3000 	str.w	r3, [r9]
 800e2da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e2dc:	2762      	movs	r7, #98	; 0x62
 800e2de:	601c      	str	r4, [r3, #0]
 800e2e0:	e723      	b.n	800e12a <__gethex+0x12a>
 800e2e2:	1e71      	subs	r1, r6, #1
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f000 fe5d 	bl	800efa4 <__any_on>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d1ed      	bne.n	800e2ca <__gethex+0x2ca>
 800e2ee:	ee18 0a10 	vmov	r0, s16
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	f000 f9fc 	bl	800e6f0 <_Bfree>
 800e2f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	6013      	str	r3, [r2, #0]
 800e2fe:	2750      	movs	r7, #80	; 0x50
 800e300:	e713      	b.n	800e12a <__gethex+0x12a>
 800e302:	bf00      	nop
 800e304:	08010d08 	.word	0x08010d08
 800e308:	08010c8c 	.word	0x08010c8c
 800e30c:	08010c9d 	.word	0x08010c9d
 800e310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1eb      	bne.n	800e2ee <__gethex+0x2ee>
 800e316:	e7d8      	b.n	800e2ca <__gethex+0x2ca>
 800e318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1d5      	bne.n	800e2ca <__gethex+0x2ca>
 800e31e:	e7e6      	b.n	800e2ee <__gethex+0x2ee>
 800e320:	1e6f      	subs	r7, r5, #1
 800e322:	f1ba 0f00 	cmp.w	sl, #0
 800e326:	d131      	bne.n	800e38c <__gethex+0x38c>
 800e328:	b127      	cbz	r7, 800e334 <__gethex+0x334>
 800e32a:	4639      	mov	r1, r7
 800e32c:	4620      	mov	r0, r4
 800e32e:	f000 fe39 	bl	800efa4 <__any_on>
 800e332:	4682      	mov	sl, r0
 800e334:	117b      	asrs	r3, r7, #5
 800e336:	2101      	movs	r1, #1
 800e338:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e33c:	f007 071f 	and.w	r7, r7, #31
 800e340:	fa01 f707 	lsl.w	r7, r1, r7
 800e344:	421f      	tst	r7, r3
 800e346:	4629      	mov	r1, r5
 800e348:	4620      	mov	r0, r4
 800e34a:	bf18      	it	ne
 800e34c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e350:	1b76      	subs	r6, r6, r5
 800e352:	f7ff fded 	bl	800df30 <rshift>
 800e356:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e35a:	2702      	movs	r7, #2
 800e35c:	f1ba 0f00 	cmp.w	sl, #0
 800e360:	d048      	beq.n	800e3f4 <__gethex+0x3f4>
 800e362:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e366:	2b02      	cmp	r3, #2
 800e368:	d015      	beq.n	800e396 <__gethex+0x396>
 800e36a:	2b03      	cmp	r3, #3
 800e36c:	d017      	beq.n	800e39e <__gethex+0x39e>
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d109      	bne.n	800e386 <__gethex+0x386>
 800e372:	f01a 0f02 	tst.w	sl, #2
 800e376:	d006      	beq.n	800e386 <__gethex+0x386>
 800e378:	f8d9 0000 	ldr.w	r0, [r9]
 800e37c:	ea4a 0a00 	orr.w	sl, sl, r0
 800e380:	f01a 0f01 	tst.w	sl, #1
 800e384:	d10e      	bne.n	800e3a4 <__gethex+0x3a4>
 800e386:	f047 0710 	orr.w	r7, r7, #16
 800e38a:	e033      	b.n	800e3f4 <__gethex+0x3f4>
 800e38c:	f04f 0a01 	mov.w	sl, #1
 800e390:	e7d0      	b.n	800e334 <__gethex+0x334>
 800e392:	2701      	movs	r7, #1
 800e394:	e7e2      	b.n	800e35c <__gethex+0x35c>
 800e396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e398:	f1c3 0301 	rsb	r3, r3, #1
 800e39c:	9315      	str	r3, [sp, #84]	; 0x54
 800e39e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d0f0      	beq.n	800e386 <__gethex+0x386>
 800e3a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e3a8:	f104 0314 	add.w	r3, r4, #20
 800e3ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e3b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e3b4:	f04f 0c00 	mov.w	ip, #0
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3be:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e3c2:	d01c      	beq.n	800e3fe <__gethex+0x3fe>
 800e3c4:	3201      	adds	r2, #1
 800e3c6:	6002      	str	r2, [r0, #0]
 800e3c8:	2f02      	cmp	r7, #2
 800e3ca:	f104 0314 	add.w	r3, r4, #20
 800e3ce:	d13f      	bne.n	800e450 <__gethex+0x450>
 800e3d0:	f8d8 2000 	ldr.w	r2, [r8]
 800e3d4:	3a01      	subs	r2, #1
 800e3d6:	42b2      	cmp	r2, r6
 800e3d8:	d10a      	bne.n	800e3f0 <__gethex+0x3f0>
 800e3da:	1171      	asrs	r1, r6, #5
 800e3dc:	2201      	movs	r2, #1
 800e3de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3e2:	f006 061f 	and.w	r6, r6, #31
 800e3e6:	fa02 f606 	lsl.w	r6, r2, r6
 800e3ea:	421e      	tst	r6, r3
 800e3ec:	bf18      	it	ne
 800e3ee:	4617      	movne	r7, r2
 800e3f0:	f047 0720 	orr.w	r7, r7, #32
 800e3f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e3f6:	601c      	str	r4, [r3, #0]
 800e3f8:	9b04      	ldr	r3, [sp, #16]
 800e3fa:	601d      	str	r5, [r3, #0]
 800e3fc:	e695      	b.n	800e12a <__gethex+0x12a>
 800e3fe:	4299      	cmp	r1, r3
 800e400:	f843 cc04 	str.w	ip, [r3, #-4]
 800e404:	d8d8      	bhi.n	800e3b8 <__gethex+0x3b8>
 800e406:	68a3      	ldr	r3, [r4, #8]
 800e408:	459b      	cmp	fp, r3
 800e40a:	db19      	blt.n	800e440 <__gethex+0x440>
 800e40c:	6861      	ldr	r1, [r4, #4]
 800e40e:	ee18 0a10 	vmov	r0, s16
 800e412:	3101      	adds	r1, #1
 800e414:	f000 f92c 	bl	800e670 <_Balloc>
 800e418:	4681      	mov	r9, r0
 800e41a:	b918      	cbnz	r0, 800e424 <__gethex+0x424>
 800e41c:	4b1a      	ldr	r3, [pc, #104]	; (800e488 <__gethex+0x488>)
 800e41e:	4602      	mov	r2, r0
 800e420:	2184      	movs	r1, #132	; 0x84
 800e422:	e6a8      	b.n	800e176 <__gethex+0x176>
 800e424:	6922      	ldr	r2, [r4, #16]
 800e426:	3202      	adds	r2, #2
 800e428:	f104 010c 	add.w	r1, r4, #12
 800e42c:	0092      	lsls	r2, r2, #2
 800e42e:	300c      	adds	r0, #12
 800e430:	f000 f904 	bl	800e63c <memcpy>
 800e434:	4621      	mov	r1, r4
 800e436:	ee18 0a10 	vmov	r0, s16
 800e43a:	f000 f959 	bl	800e6f0 <_Bfree>
 800e43e:	464c      	mov	r4, r9
 800e440:	6923      	ldr	r3, [r4, #16]
 800e442:	1c5a      	adds	r2, r3, #1
 800e444:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e448:	6122      	str	r2, [r4, #16]
 800e44a:	2201      	movs	r2, #1
 800e44c:	615a      	str	r2, [r3, #20]
 800e44e:	e7bb      	b.n	800e3c8 <__gethex+0x3c8>
 800e450:	6922      	ldr	r2, [r4, #16]
 800e452:	455a      	cmp	r2, fp
 800e454:	dd0b      	ble.n	800e46e <__gethex+0x46e>
 800e456:	2101      	movs	r1, #1
 800e458:	4620      	mov	r0, r4
 800e45a:	f7ff fd69 	bl	800df30 <rshift>
 800e45e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e462:	3501      	adds	r5, #1
 800e464:	42ab      	cmp	r3, r5
 800e466:	f6ff aed0 	blt.w	800e20a <__gethex+0x20a>
 800e46a:	2701      	movs	r7, #1
 800e46c:	e7c0      	b.n	800e3f0 <__gethex+0x3f0>
 800e46e:	f016 061f 	ands.w	r6, r6, #31
 800e472:	d0fa      	beq.n	800e46a <__gethex+0x46a>
 800e474:	449a      	add	sl, r3
 800e476:	f1c6 0620 	rsb	r6, r6, #32
 800e47a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e47e:	f000 f9ed 	bl	800e85c <__hi0bits>
 800e482:	42b0      	cmp	r0, r6
 800e484:	dbe7      	blt.n	800e456 <__gethex+0x456>
 800e486:	e7f0      	b.n	800e46a <__gethex+0x46a>
 800e488:	08010c8c 	.word	0x08010c8c

0800e48c <L_shift>:
 800e48c:	f1c2 0208 	rsb	r2, r2, #8
 800e490:	0092      	lsls	r2, r2, #2
 800e492:	b570      	push	{r4, r5, r6, lr}
 800e494:	f1c2 0620 	rsb	r6, r2, #32
 800e498:	6843      	ldr	r3, [r0, #4]
 800e49a:	6804      	ldr	r4, [r0, #0]
 800e49c:	fa03 f506 	lsl.w	r5, r3, r6
 800e4a0:	432c      	orrs	r4, r5
 800e4a2:	40d3      	lsrs	r3, r2
 800e4a4:	6004      	str	r4, [r0, #0]
 800e4a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e4aa:	4288      	cmp	r0, r1
 800e4ac:	d3f4      	bcc.n	800e498 <L_shift+0xc>
 800e4ae:	bd70      	pop	{r4, r5, r6, pc}

0800e4b0 <__match>:
 800e4b0:	b530      	push	{r4, r5, lr}
 800e4b2:	6803      	ldr	r3, [r0, #0]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4ba:	b914      	cbnz	r4, 800e4c2 <__match+0x12>
 800e4bc:	6003      	str	r3, [r0, #0]
 800e4be:	2001      	movs	r0, #1
 800e4c0:	bd30      	pop	{r4, r5, pc}
 800e4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e4ca:	2d19      	cmp	r5, #25
 800e4cc:	bf98      	it	ls
 800e4ce:	3220      	addls	r2, #32
 800e4d0:	42a2      	cmp	r2, r4
 800e4d2:	d0f0      	beq.n	800e4b6 <__match+0x6>
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	e7f3      	b.n	800e4c0 <__match+0x10>

0800e4d8 <__hexnan>:
 800e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4dc:	680b      	ldr	r3, [r1, #0]
 800e4de:	6801      	ldr	r1, [r0, #0]
 800e4e0:	115e      	asrs	r6, r3, #5
 800e4e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e4e6:	f013 031f 	ands.w	r3, r3, #31
 800e4ea:	b087      	sub	sp, #28
 800e4ec:	bf18      	it	ne
 800e4ee:	3604      	addne	r6, #4
 800e4f0:	2500      	movs	r5, #0
 800e4f2:	1f37      	subs	r7, r6, #4
 800e4f4:	4682      	mov	sl, r0
 800e4f6:	4690      	mov	r8, r2
 800e4f8:	9301      	str	r3, [sp, #4]
 800e4fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800e4fe:	46b9      	mov	r9, r7
 800e500:	463c      	mov	r4, r7
 800e502:	9502      	str	r5, [sp, #8]
 800e504:	46ab      	mov	fp, r5
 800e506:	784a      	ldrb	r2, [r1, #1]
 800e508:	1c4b      	adds	r3, r1, #1
 800e50a:	9303      	str	r3, [sp, #12]
 800e50c:	b342      	cbz	r2, 800e560 <__hexnan+0x88>
 800e50e:	4610      	mov	r0, r2
 800e510:	9105      	str	r1, [sp, #20]
 800e512:	9204      	str	r2, [sp, #16]
 800e514:	f7ff fd5e 	bl	800dfd4 <__hexdig_fun>
 800e518:	2800      	cmp	r0, #0
 800e51a:	d14f      	bne.n	800e5bc <__hexnan+0xe4>
 800e51c:	9a04      	ldr	r2, [sp, #16]
 800e51e:	9905      	ldr	r1, [sp, #20]
 800e520:	2a20      	cmp	r2, #32
 800e522:	d818      	bhi.n	800e556 <__hexnan+0x7e>
 800e524:	9b02      	ldr	r3, [sp, #8]
 800e526:	459b      	cmp	fp, r3
 800e528:	dd13      	ble.n	800e552 <__hexnan+0x7a>
 800e52a:	454c      	cmp	r4, r9
 800e52c:	d206      	bcs.n	800e53c <__hexnan+0x64>
 800e52e:	2d07      	cmp	r5, #7
 800e530:	dc04      	bgt.n	800e53c <__hexnan+0x64>
 800e532:	462a      	mov	r2, r5
 800e534:	4649      	mov	r1, r9
 800e536:	4620      	mov	r0, r4
 800e538:	f7ff ffa8 	bl	800e48c <L_shift>
 800e53c:	4544      	cmp	r4, r8
 800e53e:	d950      	bls.n	800e5e2 <__hexnan+0x10a>
 800e540:	2300      	movs	r3, #0
 800e542:	f1a4 0904 	sub.w	r9, r4, #4
 800e546:	f844 3c04 	str.w	r3, [r4, #-4]
 800e54a:	f8cd b008 	str.w	fp, [sp, #8]
 800e54e:	464c      	mov	r4, r9
 800e550:	461d      	mov	r5, r3
 800e552:	9903      	ldr	r1, [sp, #12]
 800e554:	e7d7      	b.n	800e506 <__hexnan+0x2e>
 800e556:	2a29      	cmp	r2, #41	; 0x29
 800e558:	d156      	bne.n	800e608 <__hexnan+0x130>
 800e55a:	3102      	adds	r1, #2
 800e55c:	f8ca 1000 	str.w	r1, [sl]
 800e560:	f1bb 0f00 	cmp.w	fp, #0
 800e564:	d050      	beq.n	800e608 <__hexnan+0x130>
 800e566:	454c      	cmp	r4, r9
 800e568:	d206      	bcs.n	800e578 <__hexnan+0xa0>
 800e56a:	2d07      	cmp	r5, #7
 800e56c:	dc04      	bgt.n	800e578 <__hexnan+0xa0>
 800e56e:	462a      	mov	r2, r5
 800e570:	4649      	mov	r1, r9
 800e572:	4620      	mov	r0, r4
 800e574:	f7ff ff8a 	bl	800e48c <L_shift>
 800e578:	4544      	cmp	r4, r8
 800e57a:	d934      	bls.n	800e5e6 <__hexnan+0x10e>
 800e57c:	f1a8 0204 	sub.w	r2, r8, #4
 800e580:	4623      	mov	r3, r4
 800e582:	f853 1b04 	ldr.w	r1, [r3], #4
 800e586:	f842 1f04 	str.w	r1, [r2, #4]!
 800e58a:	429f      	cmp	r7, r3
 800e58c:	d2f9      	bcs.n	800e582 <__hexnan+0xaa>
 800e58e:	1b3b      	subs	r3, r7, r4
 800e590:	f023 0303 	bic.w	r3, r3, #3
 800e594:	3304      	adds	r3, #4
 800e596:	3401      	adds	r4, #1
 800e598:	3e03      	subs	r6, #3
 800e59a:	42b4      	cmp	r4, r6
 800e59c:	bf88      	it	hi
 800e59e:	2304      	movhi	r3, #4
 800e5a0:	4443      	add	r3, r8
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f843 2b04 	str.w	r2, [r3], #4
 800e5a8:	429f      	cmp	r7, r3
 800e5aa:	d2fb      	bcs.n	800e5a4 <__hexnan+0xcc>
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	b91b      	cbnz	r3, 800e5b8 <__hexnan+0xe0>
 800e5b0:	4547      	cmp	r7, r8
 800e5b2:	d127      	bne.n	800e604 <__hexnan+0x12c>
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	603b      	str	r3, [r7, #0]
 800e5b8:	2005      	movs	r0, #5
 800e5ba:	e026      	b.n	800e60a <__hexnan+0x132>
 800e5bc:	3501      	adds	r5, #1
 800e5be:	2d08      	cmp	r5, #8
 800e5c0:	f10b 0b01 	add.w	fp, fp, #1
 800e5c4:	dd06      	ble.n	800e5d4 <__hexnan+0xfc>
 800e5c6:	4544      	cmp	r4, r8
 800e5c8:	d9c3      	bls.n	800e552 <__hexnan+0x7a>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5d0:	2501      	movs	r5, #1
 800e5d2:	3c04      	subs	r4, #4
 800e5d4:	6822      	ldr	r2, [r4, #0]
 800e5d6:	f000 000f 	and.w	r0, r0, #15
 800e5da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e5de:	6022      	str	r2, [r4, #0]
 800e5e0:	e7b7      	b.n	800e552 <__hexnan+0x7a>
 800e5e2:	2508      	movs	r5, #8
 800e5e4:	e7b5      	b.n	800e552 <__hexnan+0x7a>
 800e5e6:	9b01      	ldr	r3, [sp, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d0df      	beq.n	800e5ac <__hexnan+0xd4>
 800e5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f0:	f1c3 0320 	rsb	r3, r3, #32
 800e5f4:	fa22 f303 	lsr.w	r3, r2, r3
 800e5f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e5fc:	401a      	ands	r2, r3
 800e5fe:	f846 2c04 	str.w	r2, [r6, #-4]
 800e602:	e7d3      	b.n	800e5ac <__hexnan+0xd4>
 800e604:	3f04      	subs	r7, #4
 800e606:	e7d1      	b.n	800e5ac <__hexnan+0xd4>
 800e608:	2004      	movs	r0, #4
 800e60a:	b007      	add	sp, #28
 800e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e610 <_localeconv_r>:
 800e610:	4800      	ldr	r0, [pc, #0]	; (800e614 <_localeconv_r+0x4>)
 800e612:	4770      	bx	lr
 800e614:	2000057c 	.word	0x2000057c

0800e618 <__ascii_mbtowc>:
 800e618:	b082      	sub	sp, #8
 800e61a:	b901      	cbnz	r1, 800e61e <__ascii_mbtowc+0x6>
 800e61c:	a901      	add	r1, sp, #4
 800e61e:	b142      	cbz	r2, 800e632 <__ascii_mbtowc+0x1a>
 800e620:	b14b      	cbz	r3, 800e636 <__ascii_mbtowc+0x1e>
 800e622:	7813      	ldrb	r3, [r2, #0]
 800e624:	600b      	str	r3, [r1, #0]
 800e626:	7812      	ldrb	r2, [r2, #0]
 800e628:	1e10      	subs	r0, r2, #0
 800e62a:	bf18      	it	ne
 800e62c:	2001      	movne	r0, #1
 800e62e:	b002      	add	sp, #8
 800e630:	4770      	bx	lr
 800e632:	4610      	mov	r0, r2
 800e634:	e7fb      	b.n	800e62e <__ascii_mbtowc+0x16>
 800e636:	f06f 0001 	mvn.w	r0, #1
 800e63a:	e7f8      	b.n	800e62e <__ascii_mbtowc+0x16>

0800e63c <memcpy>:
 800e63c:	440a      	add	r2, r1
 800e63e:	4291      	cmp	r1, r2
 800e640:	f100 33ff 	add.w	r3, r0, #4294967295
 800e644:	d100      	bne.n	800e648 <memcpy+0xc>
 800e646:	4770      	bx	lr
 800e648:	b510      	push	{r4, lr}
 800e64a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e64e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e652:	4291      	cmp	r1, r2
 800e654:	d1f9      	bne.n	800e64a <memcpy+0xe>
 800e656:	bd10      	pop	{r4, pc}

0800e658 <__malloc_lock>:
 800e658:	4801      	ldr	r0, [pc, #4]	; (800e660 <__malloc_lock+0x8>)
 800e65a:	f000 be8a 	b.w	800f372 <__retarget_lock_acquire_recursive>
 800e65e:	bf00      	nop
 800e660:	200029c0 	.word	0x200029c0

0800e664 <__malloc_unlock>:
 800e664:	4801      	ldr	r0, [pc, #4]	; (800e66c <__malloc_unlock+0x8>)
 800e666:	f000 be85 	b.w	800f374 <__retarget_lock_release_recursive>
 800e66a:	bf00      	nop
 800e66c:	200029c0 	.word	0x200029c0

0800e670 <_Balloc>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e674:	4604      	mov	r4, r0
 800e676:	460d      	mov	r5, r1
 800e678:	b976      	cbnz	r6, 800e698 <_Balloc+0x28>
 800e67a:	2010      	movs	r0, #16
 800e67c:	f7fc ffba 	bl	800b5f4 <malloc>
 800e680:	4602      	mov	r2, r0
 800e682:	6260      	str	r0, [r4, #36]	; 0x24
 800e684:	b920      	cbnz	r0, 800e690 <_Balloc+0x20>
 800e686:	4b18      	ldr	r3, [pc, #96]	; (800e6e8 <_Balloc+0x78>)
 800e688:	4818      	ldr	r0, [pc, #96]	; (800e6ec <_Balloc+0x7c>)
 800e68a:	2166      	movs	r1, #102	; 0x66
 800e68c:	f000 fe40 	bl	800f310 <__assert_func>
 800e690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e694:	6006      	str	r6, [r0, #0]
 800e696:	60c6      	str	r6, [r0, #12]
 800e698:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e69a:	68f3      	ldr	r3, [r6, #12]
 800e69c:	b183      	cbz	r3, 800e6c0 <_Balloc+0x50>
 800e69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e6a6:	b9b8      	cbnz	r0, 800e6d8 <_Balloc+0x68>
 800e6a8:	2101      	movs	r1, #1
 800e6aa:	fa01 f605 	lsl.w	r6, r1, r5
 800e6ae:	1d72      	adds	r2, r6, #5
 800e6b0:	0092      	lsls	r2, r2, #2
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f000 fc97 	bl	800efe6 <_calloc_r>
 800e6b8:	b160      	cbz	r0, 800e6d4 <_Balloc+0x64>
 800e6ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e6be:	e00e      	b.n	800e6de <_Balloc+0x6e>
 800e6c0:	2221      	movs	r2, #33	; 0x21
 800e6c2:	2104      	movs	r1, #4
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f000 fc8e 	bl	800efe6 <_calloc_r>
 800e6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6cc:	60f0      	str	r0, [r6, #12]
 800e6ce:	68db      	ldr	r3, [r3, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1e4      	bne.n	800e69e <_Balloc+0x2e>
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}
 800e6d8:	6802      	ldr	r2, [r0, #0]
 800e6da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6de:	2300      	movs	r3, #0
 800e6e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6e4:	e7f7      	b.n	800e6d6 <_Balloc+0x66>
 800e6e6:	bf00      	nop
 800e6e8:	08010c16 	.word	0x08010c16
 800e6ec:	08010d1c 	.word	0x08010d1c

0800e6f0 <_Bfree>:
 800e6f0:	b570      	push	{r4, r5, r6, lr}
 800e6f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	b976      	cbnz	r6, 800e718 <_Bfree+0x28>
 800e6fa:	2010      	movs	r0, #16
 800e6fc:	f7fc ff7a 	bl	800b5f4 <malloc>
 800e700:	4602      	mov	r2, r0
 800e702:	6268      	str	r0, [r5, #36]	; 0x24
 800e704:	b920      	cbnz	r0, 800e710 <_Bfree+0x20>
 800e706:	4b09      	ldr	r3, [pc, #36]	; (800e72c <_Bfree+0x3c>)
 800e708:	4809      	ldr	r0, [pc, #36]	; (800e730 <_Bfree+0x40>)
 800e70a:	218a      	movs	r1, #138	; 0x8a
 800e70c:	f000 fe00 	bl	800f310 <__assert_func>
 800e710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e714:	6006      	str	r6, [r0, #0]
 800e716:	60c6      	str	r6, [r0, #12]
 800e718:	b13c      	cbz	r4, 800e72a <_Bfree+0x3a>
 800e71a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e71c:	6862      	ldr	r2, [r4, #4]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e724:	6021      	str	r1, [r4, #0]
 800e726:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e72a:	bd70      	pop	{r4, r5, r6, pc}
 800e72c:	08010c16 	.word	0x08010c16
 800e730:	08010d1c 	.word	0x08010d1c

0800e734 <__multadd>:
 800e734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e738:	690e      	ldr	r6, [r1, #16]
 800e73a:	4607      	mov	r7, r0
 800e73c:	4698      	mov	r8, r3
 800e73e:	460c      	mov	r4, r1
 800e740:	f101 0014 	add.w	r0, r1, #20
 800e744:	2300      	movs	r3, #0
 800e746:	6805      	ldr	r5, [r0, #0]
 800e748:	b2a9      	uxth	r1, r5
 800e74a:	fb02 8101 	mla	r1, r2, r1, r8
 800e74e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e752:	0c2d      	lsrs	r5, r5, #16
 800e754:	fb02 c505 	mla	r5, r2, r5, ip
 800e758:	b289      	uxth	r1, r1
 800e75a:	3301      	adds	r3, #1
 800e75c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e760:	429e      	cmp	r6, r3
 800e762:	f840 1b04 	str.w	r1, [r0], #4
 800e766:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e76a:	dcec      	bgt.n	800e746 <__multadd+0x12>
 800e76c:	f1b8 0f00 	cmp.w	r8, #0
 800e770:	d022      	beq.n	800e7b8 <__multadd+0x84>
 800e772:	68a3      	ldr	r3, [r4, #8]
 800e774:	42b3      	cmp	r3, r6
 800e776:	dc19      	bgt.n	800e7ac <__multadd+0x78>
 800e778:	6861      	ldr	r1, [r4, #4]
 800e77a:	4638      	mov	r0, r7
 800e77c:	3101      	adds	r1, #1
 800e77e:	f7ff ff77 	bl	800e670 <_Balloc>
 800e782:	4605      	mov	r5, r0
 800e784:	b928      	cbnz	r0, 800e792 <__multadd+0x5e>
 800e786:	4602      	mov	r2, r0
 800e788:	4b0d      	ldr	r3, [pc, #52]	; (800e7c0 <__multadd+0x8c>)
 800e78a:	480e      	ldr	r0, [pc, #56]	; (800e7c4 <__multadd+0x90>)
 800e78c:	21b5      	movs	r1, #181	; 0xb5
 800e78e:	f000 fdbf 	bl	800f310 <__assert_func>
 800e792:	6922      	ldr	r2, [r4, #16]
 800e794:	3202      	adds	r2, #2
 800e796:	f104 010c 	add.w	r1, r4, #12
 800e79a:	0092      	lsls	r2, r2, #2
 800e79c:	300c      	adds	r0, #12
 800e79e:	f7ff ff4d 	bl	800e63c <memcpy>
 800e7a2:	4621      	mov	r1, r4
 800e7a4:	4638      	mov	r0, r7
 800e7a6:	f7ff ffa3 	bl	800e6f0 <_Bfree>
 800e7aa:	462c      	mov	r4, r5
 800e7ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e7b0:	3601      	adds	r6, #1
 800e7b2:	f8c3 8014 	str.w	r8, [r3, #20]
 800e7b6:	6126      	str	r6, [r4, #16]
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7be:	bf00      	nop
 800e7c0:	08010c8c 	.word	0x08010c8c
 800e7c4:	08010d1c 	.word	0x08010d1c

0800e7c8 <__s2b>:
 800e7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7cc:	460c      	mov	r4, r1
 800e7ce:	4615      	mov	r5, r2
 800e7d0:	461f      	mov	r7, r3
 800e7d2:	2209      	movs	r2, #9
 800e7d4:	3308      	adds	r3, #8
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7dc:	2100      	movs	r1, #0
 800e7de:	2201      	movs	r2, #1
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	db09      	blt.n	800e7f8 <__s2b+0x30>
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f7ff ff43 	bl	800e670 <_Balloc>
 800e7ea:	b940      	cbnz	r0, 800e7fe <__s2b+0x36>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	4b19      	ldr	r3, [pc, #100]	; (800e854 <__s2b+0x8c>)
 800e7f0:	4819      	ldr	r0, [pc, #100]	; (800e858 <__s2b+0x90>)
 800e7f2:	21ce      	movs	r1, #206	; 0xce
 800e7f4:	f000 fd8c 	bl	800f310 <__assert_func>
 800e7f8:	0052      	lsls	r2, r2, #1
 800e7fa:	3101      	adds	r1, #1
 800e7fc:	e7f0      	b.n	800e7e0 <__s2b+0x18>
 800e7fe:	9b08      	ldr	r3, [sp, #32]
 800e800:	6143      	str	r3, [r0, #20]
 800e802:	2d09      	cmp	r5, #9
 800e804:	f04f 0301 	mov.w	r3, #1
 800e808:	6103      	str	r3, [r0, #16]
 800e80a:	dd16      	ble.n	800e83a <__s2b+0x72>
 800e80c:	f104 0909 	add.w	r9, r4, #9
 800e810:	46c8      	mov	r8, r9
 800e812:	442c      	add	r4, r5
 800e814:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e818:	4601      	mov	r1, r0
 800e81a:	3b30      	subs	r3, #48	; 0x30
 800e81c:	220a      	movs	r2, #10
 800e81e:	4630      	mov	r0, r6
 800e820:	f7ff ff88 	bl	800e734 <__multadd>
 800e824:	45a0      	cmp	r8, r4
 800e826:	d1f5      	bne.n	800e814 <__s2b+0x4c>
 800e828:	f1a5 0408 	sub.w	r4, r5, #8
 800e82c:	444c      	add	r4, r9
 800e82e:	1b2d      	subs	r5, r5, r4
 800e830:	1963      	adds	r3, r4, r5
 800e832:	42bb      	cmp	r3, r7
 800e834:	db04      	blt.n	800e840 <__s2b+0x78>
 800e836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e83a:	340a      	adds	r4, #10
 800e83c:	2509      	movs	r5, #9
 800e83e:	e7f6      	b.n	800e82e <__s2b+0x66>
 800e840:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e844:	4601      	mov	r1, r0
 800e846:	3b30      	subs	r3, #48	; 0x30
 800e848:	220a      	movs	r2, #10
 800e84a:	4630      	mov	r0, r6
 800e84c:	f7ff ff72 	bl	800e734 <__multadd>
 800e850:	e7ee      	b.n	800e830 <__s2b+0x68>
 800e852:	bf00      	nop
 800e854:	08010c8c 	.word	0x08010c8c
 800e858:	08010d1c 	.word	0x08010d1c

0800e85c <__hi0bits>:
 800e85c:	0c03      	lsrs	r3, r0, #16
 800e85e:	041b      	lsls	r3, r3, #16
 800e860:	b9d3      	cbnz	r3, 800e898 <__hi0bits+0x3c>
 800e862:	0400      	lsls	r0, r0, #16
 800e864:	2310      	movs	r3, #16
 800e866:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e86a:	bf04      	itt	eq
 800e86c:	0200      	lsleq	r0, r0, #8
 800e86e:	3308      	addeq	r3, #8
 800e870:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e874:	bf04      	itt	eq
 800e876:	0100      	lsleq	r0, r0, #4
 800e878:	3304      	addeq	r3, #4
 800e87a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e87e:	bf04      	itt	eq
 800e880:	0080      	lsleq	r0, r0, #2
 800e882:	3302      	addeq	r3, #2
 800e884:	2800      	cmp	r0, #0
 800e886:	db05      	blt.n	800e894 <__hi0bits+0x38>
 800e888:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e88c:	f103 0301 	add.w	r3, r3, #1
 800e890:	bf08      	it	eq
 800e892:	2320      	moveq	r3, #32
 800e894:	4618      	mov	r0, r3
 800e896:	4770      	bx	lr
 800e898:	2300      	movs	r3, #0
 800e89a:	e7e4      	b.n	800e866 <__hi0bits+0xa>

0800e89c <__lo0bits>:
 800e89c:	6803      	ldr	r3, [r0, #0]
 800e89e:	f013 0207 	ands.w	r2, r3, #7
 800e8a2:	4601      	mov	r1, r0
 800e8a4:	d00b      	beq.n	800e8be <__lo0bits+0x22>
 800e8a6:	07da      	lsls	r2, r3, #31
 800e8a8:	d424      	bmi.n	800e8f4 <__lo0bits+0x58>
 800e8aa:	0798      	lsls	r0, r3, #30
 800e8ac:	bf49      	itett	mi
 800e8ae:	085b      	lsrmi	r3, r3, #1
 800e8b0:	089b      	lsrpl	r3, r3, #2
 800e8b2:	2001      	movmi	r0, #1
 800e8b4:	600b      	strmi	r3, [r1, #0]
 800e8b6:	bf5c      	itt	pl
 800e8b8:	600b      	strpl	r3, [r1, #0]
 800e8ba:	2002      	movpl	r0, #2
 800e8bc:	4770      	bx	lr
 800e8be:	b298      	uxth	r0, r3
 800e8c0:	b9b0      	cbnz	r0, 800e8f0 <__lo0bits+0x54>
 800e8c2:	0c1b      	lsrs	r3, r3, #16
 800e8c4:	2010      	movs	r0, #16
 800e8c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e8ca:	bf04      	itt	eq
 800e8cc:	0a1b      	lsreq	r3, r3, #8
 800e8ce:	3008      	addeq	r0, #8
 800e8d0:	071a      	lsls	r2, r3, #28
 800e8d2:	bf04      	itt	eq
 800e8d4:	091b      	lsreq	r3, r3, #4
 800e8d6:	3004      	addeq	r0, #4
 800e8d8:	079a      	lsls	r2, r3, #30
 800e8da:	bf04      	itt	eq
 800e8dc:	089b      	lsreq	r3, r3, #2
 800e8de:	3002      	addeq	r0, #2
 800e8e0:	07da      	lsls	r2, r3, #31
 800e8e2:	d403      	bmi.n	800e8ec <__lo0bits+0x50>
 800e8e4:	085b      	lsrs	r3, r3, #1
 800e8e6:	f100 0001 	add.w	r0, r0, #1
 800e8ea:	d005      	beq.n	800e8f8 <__lo0bits+0x5c>
 800e8ec:	600b      	str	r3, [r1, #0]
 800e8ee:	4770      	bx	lr
 800e8f0:	4610      	mov	r0, r2
 800e8f2:	e7e8      	b.n	800e8c6 <__lo0bits+0x2a>
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	4770      	bx	lr
 800e8f8:	2020      	movs	r0, #32
 800e8fa:	4770      	bx	lr

0800e8fc <__i2b>:
 800e8fc:	b510      	push	{r4, lr}
 800e8fe:	460c      	mov	r4, r1
 800e900:	2101      	movs	r1, #1
 800e902:	f7ff feb5 	bl	800e670 <_Balloc>
 800e906:	4602      	mov	r2, r0
 800e908:	b928      	cbnz	r0, 800e916 <__i2b+0x1a>
 800e90a:	4b05      	ldr	r3, [pc, #20]	; (800e920 <__i2b+0x24>)
 800e90c:	4805      	ldr	r0, [pc, #20]	; (800e924 <__i2b+0x28>)
 800e90e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e912:	f000 fcfd 	bl	800f310 <__assert_func>
 800e916:	2301      	movs	r3, #1
 800e918:	6144      	str	r4, [r0, #20]
 800e91a:	6103      	str	r3, [r0, #16]
 800e91c:	bd10      	pop	{r4, pc}
 800e91e:	bf00      	nop
 800e920:	08010c8c 	.word	0x08010c8c
 800e924:	08010d1c 	.word	0x08010d1c

0800e928 <__multiply>:
 800e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e92c:	4614      	mov	r4, r2
 800e92e:	690a      	ldr	r2, [r1, #16]
 800e930:	6923      	ldr	r3, [r4, #16]
 800e932:	429a      	cmp	r2, r3
 800e934:	bfb8      	it	lt
 800e936:	460b      	movlt	r3, r1
 800e938:	460d      	mov	r5, r1
 800e93a:	bfbc      	itt	lt
 800e93c:	4625      	movlt	r5, r4
 800e93e:	461c      	movlt	r4, r3
 800e940:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e944:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e948:	68ab      	ldr	r3, [r5, #8]
 800e94a:	6869      	ldr	r1, [r5, #4]
 800e94c:	eb0a 0709 	add.w	r7, sl, r9
 800e950:	42bb      	cmp	r3, r7
 800e952:	b085      	sub	sp, #20
 800e954:	bfb8      	it	lt
 800e956:	3101      	addlt	r1, #1
 800e958:	f7ff fe8a 	bl	800e670 <_Balloc>
 800e95c:	b930      	cbnz	r0, 800e96c <__multiply+0x44>
 800e95e:	4602      	mov	r2, r0
 800e960:	4b42      	ldr	r3, [pc, #264]	; (800ea6c <__multiply+0x144>)
 800e962:	4843      	ldr	r0, [pc, #268]	; (800ea70 <__multiply+0x148>)
 800e964:	f240 115d 	movw	r1, #349	; 0x15d
 800e968:	f000 fcd2 	bl	800f310 <__assert_func>
 800e96c:	f100 0614 	add.w	r6, r0, #20
 800e970:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e974:	4633      	mov	r3, r6
 800e976:	2200      	movs	r2, #0
 800e978:	4543      	cmp	r3, r8
 800e97a:	d31e      	bcc.n	800e9ba <__multiply+0x92>
 800e97c:	f105 0c14 	add.w	ip, r5, #20
 800e980:	f104 0314 	add.w	r3, r4, #20
 800e984:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e988:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e98c:	9202      	str	r2, [sp, #8]
 800e98e:	ebac 0205 	sub.w	r2, ip, r5
 800e992:	3a15      	subs	r2, #21
 800e994:	f022 0203 	bic.w	r2, r2, #3
 800e998:	3204      	adds	r2, #4
 800e99a:	f105 0115 	add.w	r1, r5, #21
 800e99e:	458c      	cmp	ip, r1
 800e9a0:	bf38      	it	cc
 800e9a2:	2204      	movcc	r2, #4
 800e9a4:	9201      	str	r2, [sp, #4]
 800e9a6:	9a02      	ldr	r2, [sp, #8]
 800e9a8:	9303      	str	r3, [sp, #12]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d808      	bhi.n	800e9c0 <__multiply+0x98>
 800e9ae:	2f00      	cmp	r7, #0
 800e9b0:	dc55      	bgt.n	800ea5e <__multiply+0x136>
 800e9b2:	6107      	str	r7, [r0, #16]
 800e9b4:	b005      	add	sp, #20
 800e9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ba:	f843 2b04 	str.w	r2, [r3], #4
 800e9be:	e7db      	b.n	800e978 <__multiply+0x50>
 800e9c0:	f8b3 a000 	ldrh.w	sl, [r3]
 800e9c4:	f1ba 0f00 	cmp.w	sl, #0
 800e9c8:	d020      	beq.n	800ea0c <__multiply+0xe4>
 800e9ca:	f105 0e14 	add.w	lr, r5, #20
 800e9ce:	46b1      	mov	r9, r6
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e9d6:	f8d9 b000 	ldr.w	fp, [r9]
 800e9da:	b2a1      	uxth	r1, r4
 800e9dc:	fa1f fb8b 	uxth.w	fp, fp
 800e9e0:	fb0a b101 	mla	r1, sl, r1, fp
 800e9e4:	4411      	add	r1, r2
 800e9e6:	f8d9 2000 	ldr.w	r2, [r9]
 800e9ea:	0c24      	lsrs	r4, r4, #16
 800e9ec:	0c12      	lsrs	r2, r2, #16
 800e9ee:	fb0a 2404 	mla	r4, sl, r4, r2
 800e9f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e9f6:	b289      	uxth	r1, r1
 800e9f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e9fc:	45f4      	cmp	ip, lr
 800e9fe:	f849 1b04 	str.w	r1, [r9], #4
 800ea02:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ea06:	d8e4      	bhi.n	800e9d2 <__multiply+0xaa>
 800ea08:	9901      	ldr	r1, [sp, #4]
 800ea0a:	5072      	str	r2, [r6, r1]
 800ea0c:	9a03      	ldr	r2, [sp, #12]
 800ea0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ea12:	3304      	adds	r3, #4
 800ea14:	f1b9 0f00 	cmp.w	r9, #0
 800ea18:	d01f      	beq.n	800ea5a <__multiply+0x132>
 800ea1a:	6834      	ldr	r4, [r6, #0]
 800ea1c:	f105 0114 	add.w	r1, r5, #20
 800ea20:	46b6      	mov	lr, r6
 800ea22:	f04f 0a00 	mov.w	sl, #0
 800ea26:	880a      	ldrh	r2, [r1, #0]
 800ea28:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ea2c:	fb09 b202 	mla	r2, r9, r2, fp
 800ea30:	4492      	add	sl, r2
 800ea32:	b2a4      	uxth	r4, r4
 800ea34:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ea38:	f84e 4b04 	str.w	r4, [lr], #4
 800ea3c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ea40:	f8be 2000 	ldrh.w	r2, [lr]
 800ea44:	0c24      	lsrs	r4, r4, #16
 800ea46:	fb09 2404 	mla	r4, r9, r4, r2
 800ea4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ea4e:	458c      	cmp	ip, r1
 800ea50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ea54:	d8e7      	bhi.n	800ea26 <__multiply+0xfe>
 800ea56:	9a01      	ldr	r2, [sp, #4]
 800ea58:	50b4      	str	r4, [r6, r2]
 800ea5a:	3604      	adds	r6, #4
 800ea5c:	e7a3      	b.n	800e9a6 <__multiply+0x7e>
 800ea5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1a5      	bne.n	800e9b2 <__multiply+0x8a>
 800ea66:	3f01      	subs	r7, #1
 800ea68:	e7a1      	b.n	800e9ae <__multiply+0x86>
 800ea6a:	bf00      	nop
 800ea6c:	08010c8c 	.word	0x08010c8c
 800ea70:	08010d1c 	.word	0x08010d1c

0800ea74 <__pow5mult>:
 800ea74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea78:	4615      	mov	r5, r2
 800ea7a:	f012 0203 	ands.w	r2, r2, #3
 800ea7e:	4606      	mov	r6, r0
 800ea80:	460f      	mov	r7, r1
 800ea82:	d007      	beq.n	800ea94 <__pow5mult+0x20>
 800ea84:	4c25      	ldr	r4, [pc, #148]	; (800eb1c <__pow5mult+0xa8>)
 800ea86:	3a01      	subs	r2, #1
 800ea88:	2300      	movs	r3, #0
 800ea8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea8e:	f7ff fe51 	bl	800e734 <__multadd>
 800ea92:	4607      	mov	r7, r0
 800ea94:	10ad      	asrs	r5, r5, #2
 800ea96:	d03d      	beq.n	800eb14 <__pow5mult+0xa0>
 800ea98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ea9a:	b97c      	cbnz	r4, 800eabc <__pow5mult+0x48>
 800ea9c:	2010      	movs	r0, #16
 800ea9e:	f7fc fda9 	bl	800b5f4 <malloc>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	6270      	str	r0, [r6, #36]	; 0x24
 800eaa6:	b928      	cbnz	r0, 800eab4 <__pow5mult+0x40>
 800eaa8:	4b1d      	ldr	r3, [pc, #116]	; (800eb20 <__pow5mult+0xac>)
 800eaaa:	481e      	ldr	r0, [pc, #120]	; (800eb24 <__pow5mult+0xb0>)
 800eaac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eab0:	f000 fc2e 	bl	800f310 <__assert_func>
 800eab4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eab8:	6004      	str	r4, [r0, #0]
 800eaba:	60c4      	str	r4, [r0, #12]
 800eabc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eac0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eac4:	b94c      	cbnz	r4, 800eada <__pow5mult+0x66>
 800eac6:	f240 2171 	movw	r1, #625	; 0x271
 800eaca:	4630      	mov	r0, r6
 800eacc:	f7ff ff16 	bl	800e8fc <__i2b>
 800ead0:	2300      	movs	r3, #0
 800ead2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ead6:	4604      	mov	r4, r0
 800ead8:	6003      	str	r3, [r0, #0]
 800eada:	f04f 0900 	mov.w	r9, #0
 800eade:	07eb      	lsls	r3, r5, #31
 800eae0:	d50a      	bpl.n	800eaf8 <__pow5mult+0x84>
 800eae2:	4639      	mov	r1, r7
 800eae4:	4622      	mov	r2, r4
 800eae6:	4630      	mov	r0, r6
 800eae8:	f7ff ff1e 	bl	800e928 <__multiply>
 800eaec:	4639      	mov	r1, r7
 800eaee:	4680      	mov	r8, r0
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f7ff fdfd 	bl	800e6f0 <_Bfree>
 800eaf6:	4647      	mov	r7, r8
 800eaf8:	106d      	asrs	r5, r5, #1
 800eafa:	d00b      	beq.n	800eb14 <__pow5mult+0xa0>
 800eafc:	6820      	ldr	r0, [r4, #0]
 800eafe:	b938      	cbnz	r0, 800eb10 <__pow5mult+0x9c>
 800eb00:	4622      	mov	r2, r4
 800eb02:	4621      	mov	r1, r4
 800eb04:	4630      	mov	r0, r6
 800eb06:	f7ff ff0f 	bl	800e928 <__multiply>
 800eb0a:	6020      	str	r0, [r4, #0]
 800eb0c:	f8c0 9000 	str.w	r9, [r0]
 800eb10:	4604      	mov	r4, r0
 800eb12:	e7e4      	b.n	800eade <__pow5mult+0x6a>
 800eb14:	4638      	mov	r0, r7
 800eb16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb1a:	bf00      	nop
 800eb1c:	08010e70 	.word	0x08010e70
 800eb20:	08010c16 	.word	0x08010c16
 800eb24:	08010d1c 	.word	0x08010d1c

0800eb28 <__lshift>:
 800eb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb2c:	460c      	mov	r4, r1
 800eb2e:	6849      	ldr	r1, [r1, #4]
 800eb30:	6923      	ldr	r3, [r4, #16]
 800eb32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb36:	68a3      	ldr	r3, [r4, #8]
 800eb38:	4607      	mov	r7, r0
 800eb3a:	4691      	mov	r9, r2
 800eb3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb40:	f108 0601 	add.w	r6, r8, #1
 800eb44:	42b3      	cmp	r3, r6
 800eb46:	db0b      	blt.n	800eb60 <__lshift+0x38>
 800eb48:	4638      	mov	r0, r7
 800eb4a:	f7ff fd91 	bl	800e670 <_Balloc>
 800eb4e:	4605      	mov	r5, r0
 800eb50:	b948      	cbnz	r0, 800eb66 <__lshift+0x3e>
 800eb52:	4602      	mov	r2, r0
 800eb54:	4b28      	ldr	r3, [pc, #160]	; (800ebf8 <__lshift+0xd0>)
 800eb56:	4829      	ldr	r0, [pc, #164]	; (800ebfc <__lshift+0xd4>)
 800eb58:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eb5c:	f000 fbd8 	bl	800f310 <__assert_func>
 800eb60:	3101      	adds	r1, #1
 800eb62:	005b      	lsls	r3, r3, #1
 800eb64:	e7ee      	b.n	800eb44 <__lshift+0x1c>
 800eb66:	2300      	movs	r3, #0
 800eb68:	f100 0114 	add.w	r1, r0, #20
 800eb6c:	f100 0210 	add.w	r2, r0, #16
 800eb70:	4618      	mov	r0, r3
 800eb72:	4553      	cmp	r3, sl
 800eb74:	db33      	blt.n	800ebde <__lshift+0xb6>
 800eb76:	6920      	ldr	r0, [r4, #16]
 800eb78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb7c:	f104 0314 	add.w	r3, r4, #20
 800eb80:	f019 091f 	ands.w	r9, r9, #31
 800eb84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb8c:	d02b      	beq.n	800ebe6 <__lshift+0xbe>
 800eb8e:	f1c9 0e20 	rsb	lr, r9, #32
 800eb92:	468a      	mov	sl, r1
 800eb94:	2200      	movs	r2, #0
 800eb96:	6818      	ldr	r0, [r3, #0]
 800eb98:	fa00 f009 	lsl.w	r0, r0, r9
 800eb9c:	4302      	orrs	r2, r0
 800eb9e:	f84a 2b04 	str.w	r2, [sl], #4
 800eba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba6:	459c      	cmp	ip, r3
 800eba8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ebac:	d8f3      	bhi.n	800eb96 <__lshift+0x6e>
 800ebae:	ebac 0304 	sub.w	r3, ip, r4
 800ebb2:	3b15      	subs	r3, #21
 800ebb4:	f023 0303 	bic.w	r3, r3, #3
 800ebb8:	3304      	adds	r3, #4
 800ebba:	f104 0015 	add.w	r0, r4, #21
 800ebbe:	4584      	cmp	ip, r0
 800ebc0:	bf38      	it	cc
 800ebc2:	2304      	movcc	r3, #4
 800ebc4:	50ca      	str	r2, [r1, r3]
 800ebc6:	b10a      	cbz	r2, 800ebcc <__lshift+0xa4>
 800ebc8:	f108 0602 	add.w	r6, r8, #2
 800ebcc:	3e01      	subs	r6, #1
 800ebce:	4638      	mov	r0, r7
 800ebd0:	612e      	str	r6, [r5, #16]
 800ebd2:	4621      	mov	r1, r4
 800ebd4:	f7ff fd8c 	bl	800e6f0 <_Bfree>
 800ebd8:	4628      	mov	r0, r5
 800ebda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebde:	f842 0f04 	str.w	r0, [r2, #4]!
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	e7c5      	b.n	800eb72 <__lshift+0x4a>
 800ebe6:	3904      	subs	r1, #4
 800ebe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebec:	f841 2f04 	str.w	r2, [r1, #4]!
 800ebf0:	459c      	cmp	ip, r3
 800ebf2:	d8f9      	bhi.n	800ebe8 <__lshift+0xc0>
 800ebf4:	e7ea      	b.n	800ebcc <__lshift+0xa4>
 800ebf6:	bf00      	nop
 800ebf8:	08010c8c 	.word	0x08010c8c
 800ebfc:	08010d1c 	.word	0x08010d1c

0800ec00 <__mcmp>:
 800ec00:	b530      	push	{r4, r5, lr}
 800ec02:	6902      	ldr	r2, [r0, #16]
 800ec04:	690c      	ldr	r4, [r1, #16]
 800ec06:	1b12      	subs	r2, r2, r4
 800ec08:	d10e      	bne.n	800ec28 <__mcmp+0x28>
 800ec0a:	f100 0314 	add.w	r3, r0, #20
 800ec0e:	3114      	adds	r1, #20
 800ec10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ec14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ec18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ec1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ec20:	42a5      	cmp	r5, r4
 800ec22:	d003      	beq.n	800ec2c <__mcmp+0x2c>
 800ec24:	d305      	bcc.n	800ec32 <__mcmp+0x32>
 800ec26:	2201      	movs	r2, #1
 800ec28:	4610      	mov	r0, r2
 800ec2a:	bd30      	pop	{r4, r5, pc}
 800ec2c:	4283      	cmp	r3, r0
 800ec2e:	d3f3      	bcc.n	800ec18 <__mcmp+0x18>
 800ec30:	e7fa      	b.n	800ec28 <__mcmp+0x28>
 800ec32:	f04f 32ff 	mov.w	r2, #4294967295
 800ec36:	e7f7      	b.n	800ec28 <__mcmp+0x28>

0800ec38 <__mdiff>:
 800ec38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3c:	460c      	mov	r4, r1
 800ec3e:	4606      	mov	r6, r0
 800ec40:	4611      	mov	r1, r2
 800ec42:	4620      	mov	r0, r4
 800ec44:	4617      	mov	r7, r2
 800ec46:	f7ff ffdb 	bl	800ec00 <__mcmp>
 800ec4a:	1e05      	subs	r5, r0, #0
 800ec4c:	d110      	bne.n	800ec70 <__mdiff+0x38>
 800ec4e:	4629      	mov	r1, r5
 800ec50:	4630      	mov	r0, r6
 800ec52:	f7ff fd0d 	bl	800e670 <_Balloc>
 800ec56:	b930      	cbnz	r0, 800ec66 <__mdiff+0x2e>
 800ec58:	4b39      	ldr	r3, [pc, #228]	; (800ed40 <__mdiff+0x108>)
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	f240 2132 	movw	r1, #562	; 0x232
 800ec60:	4838      	ldr	r0, [pc, #224]	; (800ed44 <__mdiff+0x10c>)
 800ec62:	f000 fb55 	bl	800f310 <__assert_func>
 800ec66:	2301      	movs	r3, #1
 800ec68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec70:	bfa4      	itt	ge
 800ec72:	463b      	movge	r3, r7
 800ec74:	4627      	movge	r7, r4
 800ec76:	4630      	mov	r0, r6
 800ec78:	6879      	ldr	r1, [r7, #4]
 800ec7a:	bfa6      	itte	ge
 800ec7c:	461c      	movge	r4, r3
 800ec7e:	2500      	movge	r5, #0
 800ec80:	2501      	movlt	r5, #1
 800ec82:	f7ff fcf5 	bl	800e670 <_Balloc>
 800ec86:	b920      	cbnz	r0, 800ec92 <__mdiff+0x5a>
 800ec88:	4b2d      	ldr	r3, [pc, #180]	; (800ed40 <__mdiff+0x108>)
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ec90:	e7e6      	b.n	800ec60 <__mdiff+0x28>
 800ec92:	693e      	ldr	r6, [r7, #16]
 800ec94:	60c5      	str	r5, [r0, #12]
 800ec96:	6925      	ldr	r5, [r4, #16]
 800ec98:	f107 0114 	add.w	r1, r7, #20
 800ec9c:	f104 0914 	add.w	r9, r4, #20
 800eca0:	f100 0e14 	add.w	lr, r0, #20
 800eca4:	f107 0210 	add.w	r2, r7, #16
 800eca8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ecac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ecb0:	46f2      	mov	sl, lr
 800ecb2:	2700      	movs	r7, #0
 800ecb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ecb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ecbc:	fa1f f883 	uxth.w	r8, r3
 800ecc0:	fa17 f78b 	uxtah	r7, r7, fp
 800ecc4:	0c1b      	lsrs	r3, r3, #16
 800ecc6:	eba7 0808 	sub.w	r8, r7, r8
 800ecca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ecce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ecd2:	fa1f f888 	uxth.w	r8, r8
 800ecd6:	141f      	asrs	r7, r3, #16
 800ecd8:	454d      	cmp	r5, r9
 800ecda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ecde:	f84a 3b04 	str.w	r3, [sl], #4
 800ece2:	d8e7      	bhi.n	800ecb4 <__mdiff+0x7c>
 800ece4:	1b2b      	subs	r3, r5, r4
 800ece6:	3b15      	subs	r3, #21
 800ece8:	f023 0303 	bic.w	r3, r3, #3
 800ecec:	3304      	adds	r3, #4
 800ecee:	3415      	adds	r4, #21
 800ecf0:	42a5      	cmp	r5, r4
 800ecf2:	bf38      	it	cc
 800ecf4:	2304      	movcc	r3, #4
 800ecf6:	4419      	add	r1, r3
 800ecf8:	4473      	add	r3, lr
 800ecfa:	469e      	mov	lr, r3
 800ecfc:	460d      	mov	r5, r1
 800ecfe:	4565      	cmp	r5, ip
 800ed00:	d30e      	bcc.n	800ed20 <__mdiff+0xe8>
 800ed02:	f10c 0203 	add.w	r2, ip, #3
 800ed06:	1a52      	subs	r2, r2, r1
 800ed08:	f022 0203 	bic.w	r2, r2, #3
 800ed0c:	3903      	subs	r1, #3
 800ed0e:	458c      	cmp	ip, r1
 800ed10:	bf38      	it	cc
 800ed12:	2200      	movcc	r2, #0
 800ed14:	441a      	add	r2, r3
 800ed16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ed1a:	b17b      	cbz	r3, 800ed3c <__mdiff+0x104>
 800ed1c:	6106      	str	r6, [r0, #16]
 800ed1e:	e7a5      	b.n	800ec6c <__mdiff+0x34>
 800ed20:	f855 8b04 	ldr.w	r8, [r5], #4
 800ed24:	fa17 f488 	uxtah	r4, r7, r8
 800ed28:	1422      	asrs	r2, r4, #16
 800ed2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ed2e:	b2a4      	uxth	r4, r4
 800ed30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ed34:	f84e 4b04 	str.w	r4, [lr], #4
 800ed38:	1417      	asrs	r7, r2, #16
 800ed3a:	e7e0      	b.n	800ecfe <__mdiff+0xc6>
 800ed3c:	3e01      	subs	r6, #1
 800ed3e:	e7ea      	b.n	800ed16 <__mdiff+0xde>
 800ed40:	08010c8c 	.word	0x08010c8c
 800ed44:	08010d1c 	.word	0x08010d1c

0800ed48 <__ulp>:
 800ed48:	b082      	sub	sp, #8
 800ed4a:	ed8d 0b00 	vstr	d0, [sp]
 800ed4e:	9b01      	ldr	r3, [sp, #4]
 800ed50:	4912      	ldr	r1, [pc, #72]	; (800ed9c <__ulp+0x54>)
 800ed52:	4019      	ands	r1, r3
 800ed54:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ed58:	2900      	cmp	r1, #0
 800ed5a:	dd05      	ble.n	800ed68 <__ulp+0x20>
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	ec43 2b10 	vmov	d0, r2, r3
 800ed64:	b002      	add	sp, #8
 800ed66:	4770      	bx	lr
 800ed68:	4249      	negs	r1, r1
 800ed6a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ed6e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ed72:	f04f 0200 	mov.w	r2, #0
 800ed76:	f04f 0300 	mov.w	r3, #0
 800ed7a:	da04      	bge.n	800ed86 <__ulp+0x3e>
 800ed7c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ed80:	fa41 f300 	asr.w	r3, r1, r0
 800ed84:	e7ec      	b.n	800ed60 <__ulp+0x18>
 800ed86:	f1a0 0114 	sub.w	r1, r0, #20
 800ed8a:	291e      	cmp	r1, #30
 800ed8c:	bfda      	itte	le
 800ed8e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ed92:	fa20 f101 	lsrle.w	r1, r0, r1
 800ed96:	2101      	movgt	r1, #1
 800ed98:	460a      	mov	r2, r1
 800ed9a:	e7e1      	b.n	800ed60 <__ulp+0x18>
 800ed9c:	7ff00000 	.word	0x7ff00000

0800eda0 <__b2d>:
 800eda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda2:	6905      	ldr	r5, [r0, #16]
 800eda4:	f100 0714 	add.w	r7, r0, #20
 800eda8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800edac:	1f2e      	subs	r6, r5, #4
 800edae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800edb2:	4620      	mov	r0, r4
 800edb4:	f7ff fd52 	bl	800e85c <__hi0bits>
 800edb8:	f1c0 0320 	rsb	r3, r0, #32
 800edbc:	280a      	cmp	r0, #10
 800edbe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ee3c <__b2d+0x9c>
 800edc2:	600b      	str	r3, [r1, #0]
 800edc4:	dc14      	bgt.n	800edf0 <__b2d+0x50>
 800edc6:	f1c0 0e0b 	rsb	lr, r0, #11
 800edca:	fa24 f10e 	lsr.w	r1, r4, lr
 800edce:	42b7      	cmp	r7, r6
 800edd0:	ea41 030c 	orr.w	r3, r1, ip
 800edd4:	bf34      	ite	cc
 800edd6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800edda:	2100      	movcs	r1, #0
 800eddc:	3015      	adds	r0, #21
 800edde:	fa04 f000 	lsl.w	r0, r4, r0
 800ede2:	fa21 f10e 	lsr.w	r1, r1, lr
 800ede6:	ea40 0201 	orr.w	r2, r0, r1
 800edea:	ec43 2b10 	vmov	d0, r2, r3
 800edee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edf0:	42b7      	cmp	r7, r6
 800edf2:	bf3a      	itte	cc
 800edf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800edf8:	f1a5 0608 	subcc.w	r6, r5, #8
 800edfc:	2100      	movcs	r1, #0
 800edfe:	380b      	subs	r0, #11
 800ee00:	d017      	beq.n	800ee32 <__b2d+0x92>
 800ee02:	f1c0 0c20 	rsb	ip, r0, #32
 800ee06:	fa04 f500 	lsl.w	r5, r4, r0
 800ee0a:	42be      	cmp	r6, r7
 800ee0c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ee10:	ea45 0504 	orr.w	r5, r5, r4
 800ee14:	bf8c      	ite	hi
 800ee16:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ee1a:	2400      	movls	r4, #0
 800ee1c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ee20:	fa01 f000 	lsl.w	r0, r1, r0
 800ee24:	fa24 f40c 	lsr.w	r4, r4, ip
 800ee28:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ee2c:	ea40 0204 	orr.w	r2, r0, r4
 800ee30:	e7db      	b.n	800edea <__b2d+0x4a>
 800ee32:	ea44 030c 	orr.w	r3, r4, ip
 800ee36:	460a      	mov	r2, r1
 800ee38:	e7d7      	b.n	800edea <__b2d+0x4a>
 800ee3a:	bf00      	nop
 800ee3c:	3ff00000 	.word	0x3ff00000

0800ee40 <__d2b>:
 800ee40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee44:	4689      	mov	r9, r1
 800ee46:	2101      	movs	r1, #1
 800ee48:	ec57 6b10 	vmov	r6, r7, d0
 800ee4c:	4690      	mov	r8, r2
 800ee4e:	f7ff fc0f 	bl	800e670 <_Balloc>
 800ee52:	4604      	mov	r4, r0
 800ee54:	b930      	cbnz	r0, 800ee64 <__d2b+0x24>
 800ee56:	4602      	mov	r2, r0
 800ee58:	4b25      	ldr	r3, [pc, #148]	; (800eef0 <__d2b+0xb0>)
 800ee5a:	4826      	ldr	r0, [pc, #152]	; (800eef4 <__d2b+0xb4>)
 800ee5c:	f240 310a 	movw	r1, #778	; 0x30a
 800ee60:	f000 fa56 	bl	800f310 <__assert_func>
 800ee64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ee68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee6c:	bb35      	cbnz	r5, 800eebc <__d2b+0x7c>
 800ee6e:	2e00      	cmp	r6, #0
 800ee70:	9301      	str	r3, [sp, #4]
 800ee72:	d028      	beq.n	800eec6 <__d2b+0x86>
 800ee74:	4668      	mov	r0, sp
 800ee76:	9600      	str	r6, [sp, #0]
 800ee78:	f7ff fd10 	bl	800e89c <__lo0bits>
 800ee7c:	9900      	ldr	r1, [sp, #0]
 800ee7e:	b300      	cbz	r0, 800eec2 <__d2b+0x82>
 800ee80:	9a01      	ldr	r2, [sp, #4]
 800ee82:	f1c0 0320 	rsb	r3, r0, #32
 800ee86:	fa02 f303 	lsl.w	r3, r2, r3
 800ee8a:	430b      	orrs	r3, r1
 800ee8c:	40c2      	lsrs	r2, r0
 800ee8e:	6163      	str	r3, [r4, #20]
 800ee90:	9201      	str	r2, [sp, #4]
 800ee92:	9b01      	ldr	r3, [sp, #4]
 800ee94:	61a3      	str	r3, [r4, #24]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	bf14      	ite	ne
 800ee9a:	2202      	movne	r2, #2
 800ee9c:	2201      	moveq	r2, #1
 800ee9e:	6122      	str	r2, [r4, #16]
 800eea0:	b1d5      	cbz	r5, 800eed8 <__d2b+0x98>
 800eea2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eea6:	4405      	add	r5, r0
 800eea8:	f8c9 5000 	str.w	r5, [r9]
 800eeac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eeb0:	f8c8 0000 	str.w	r0, [r8]
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	b003      	add	sp, #12
 800eeb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eec0:	e7d5      	b.n	800ee6e <__d2b+0x2e>
 800eec2:	6161      	str	r1, [r4, #20]
 800eec4:	e7e5      	b.n	800ee92 <__d2b+0x52>
 800eec6:	a801      	add	r0, sp, #4
 800eec8:	f7ff fce8 	bl	800e89c <__lo0bits>
 800eecc:	9b01      	ldr	r3, [sp, #4]
 800eece:	6163      	str	r3, [r4, #20]
 800eed0:	2201      	movs	r2, #1
 800eed2:	6122      	str	r2, [r4, #16]
 800eed4:	3020      	adds	r0, #32
 800eed6:	e7e3      	b.n	800eea0 <__d2b+0x60>
 800eed8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eedc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eee0:	f8c9 0000 	str.w	r0, [r9]
 800eee4:	6918      	ldr	r0, [r3, #16]
 800eee6:	f7ff fcb9 	bl	800e85c <__hi0bits>
 800eeea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eeee:	e7df      	b.n	800eeb0 <__d2b+0x70>
 800eef0:	08010c8c 	.word	0x08010c8c
 800eef4:	08010d1c 	.word	0x08010d1c

0800eef8 <__ratio>:
 800eef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	4688      	mov	r8, r1
 800eefe:	4669      	mov	r1, sp
 800ef00:	4681      	mov	r9, r0
 800ef02:	f7ff ff4d 	bl	800eda0 <__b2d>
 800ef06:	a901      	add	r1, sp, #4
 800ef08:	4640      	mov	r0, r8
 800ef0a:	ec55 4b10 	vmov	r4, r5, d0
 800ef0e:	f7ff ff47 	bl	800eda0 <__b2d>
 800ef12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef16:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ef1a:	eba3 0c02 	sub.w	ip, r3, r2
 800ef1e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ef22:	1a9b      	subs	r3, r3, r2
 800ef24:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ef28:	ec51 0b10 	vmov	r0, r1, d0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	bfd6      	itet	le
 800ef30:	460a      	movle	r2, r1
 800ef32:	462a      	movgt	r2, r5
 800ef34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ef38:	468b      	mov	fp, r1
 800ef3a:	462f      	mov	r7, r5
 800ef3c:	bfd4      	ite	le
 800ef3e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ef42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ef46:	4620      	mov	r0, r4
 800ef48:	ee10 2a10 	vmov	r2, s0
 800ef4c:	465b      	mov	r3, fp
 800ef4e:	4639      	mov	r1, r7
 800ef50:	f7f1 fc9c 	bl	800088c <__aeabi_ddiv>
 800ef54:	ec41 0b10 	vmov	d0, r0, r1
 800ef58:	b003      	add	sp, #12
 800ef5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef5e <__copybits>:
 800ef5e:	3901      	subs	r1, #1
 800ef60:	b570      	push	{r4, r5, r6, lr}
 800ef62:	1149      	asrs	r1, r1, #5
 800ef64:	6914      	ldr	r4, [r2, #16]
 800ef66:	3101      	adds	r1, #1
 800ef68:	f102 0314 	add.w	r3, r2, #20
 800ef6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ef74:	1f05      	subs	r5, r0, #4
 800ef76:	42a3      	cmp	r3, r4
 800ef78:	d30c      	bcc.n	800ef94 <__copybits+0x36>
 800ef7a:	1aa3      	subs	r3, r4, r2
 800ef7c:	3b11      	subs	r3, #17
 800ef7e:	f023 0303 	bic.w	r3, r3, #3
 800ef82:	3211      	adds	r2, #17
 800ef84:	42a2      	cmp	r2, r4
 800ef86:	bf88      	it	hi
 800ef88:	2300      	movhi	r3, #0
 800ef8a:	4418      	add	r0, r3
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	4288      	cmp	r0, r1
 800ef90:	d305      	bcc.n	800ef9e <__copybits+0x40>
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	f853 6b04 	ldr.w	r6, [r3], #4
 800ef98:	f845 6f04 	str.w	r6, [r5, #4]!
 800ef9c:	e7eb      	b.n	800ef76 <__copybits+0x18>
 800ef9e:	f840 3b04 	str.w	r3, [r0], #4
 800efa2:	e7f4      	b.n	800ef8e <__copybits+0x30>

0800efa4 <__any_on>:
 800efa4:	f100 0214 	add.w	r2, r0, #20
 800efa8:	6900      	ldr	r0, [r0, #16]
 800efaa:	114b      	asrs	r3, r1, #5
 800efac:	4298      	cmp	r0, r3
 800efae:	b510      	push	{r4, lr}
 800efb0:	db11      	blt.n	800efd6 <__any_on+0x32>
 800efb2:	dd0a      	ble.n	800efca <__any_on+0x26>
 800efb4:	f011 011f 	ands.w	r1, r1, #31
 800efb8:	d007      	beq.n	800efca <__any_on+0x26>
 800efba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800efbe:	fa24 f001 	lsr.w	r0, r4, r1
 800efc2:	fa00 f101 	lsl.w	r1, r0, r1
 800efc6:	428c      	cmp	r4, r1
 800efc8:	d10b      	bne.n	800efe2 <__any_on+0x3e>
 800efca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800efce:	4293      	cmp	r3, r2
 800efd0:	d803      	bhi.n	800efda <__any_on+0x36>
 800efd2:	2000      	movs	r0, #0
 800efd4:	bd10      	pop	{r4, pc}
 800efd6:	4603      	mov	r3, r0
 800efd8:	e7f7      	b.n	800efca <__any_on+0x26>
 800efda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800efde:	2900      	cmp	r1, #0
 800efe0:	d0f5      	beq.n	800efce <__any_on+0x2a>
 800efe2:	2001      	movs	r0, #1
 800efe4:	e7f6      	b.n	800efd4 <__any_on+0x30>

0800efe6 <_calloc_r>:
 800efe6:	b513      	push	{r0, r1, r4, lr}
 800efe8:	434a      	muls	r2, r1
 800efea:	4611      	mov	r1, r2
 800efec:	9201      	str	r2, [sp, #4]
 800efee:	f7fc fb69 	bl	800b6c4 <_malloc_r>
 800eff2:	4604      	mov	r4, r0
 800eff4:	b118      	cbz	r0, 800effe <_calloc_r+0x18>
 800eff6:	9a01      	ldr	r2, [sp, #4]
 800eff8:	2100      	movs	r1, #0
 800effa:	f7fc fb0b 	bl	800b614 <memset>
 800effe:	4620      	mov	r0, r4
 800f000:	b002      	add	sp, #8
 800f002:	bd10      	pop	{r4, pc}

0800f004 <__ssputs_r>:
 800f004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f008:	688e      	ldr	r6, [r1, #8]
 800f00a:	429e      	cmp	r6, r3
 800f00c:	4682      	mov	sl, r0
 800f00e:	460c      	mov	r4, r1
 800f010:	4690      	mov	r8, r2
 800f012:	461f      	mov	r7, r3
 800f014:	d838      	bhi.n	800f088 <__ssputs_r+0x84>
 800f016:	898a      	ldrh	r2, [r1, #12]
 800f018:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f01c:	d032      	beq.n	800f084 <__ssputs_r+0x80>
 800f01e:	6825      	ldr	r5, [r4, #0]
 800f020:	6909      	ldr	r1, [r1, #16]
 800f022:	eba5 0901 	sub.w	r9, r5, r1
 800f026:	6965      	ldr	r5, [r4, #20]
 800f028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f02c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f030:	3301      	adds	r3, #1
 800f032:	444b      	add	r3, r9
 800f034:	106d      	asrs	r5, r5, #1
 800f036:	429d      	cmp	r5, r3
 800f038:	bf38      	it	cc
 800f03a:	461d      	movcc	r5, r3
 800f03c:	0553      	lsls	r3, r2, #21
 800f03e:	d531      	bpl.n	800f0a4 <__ssputs_r+0xa0>
 800f040:	4629      	mov	r1, r5
 800f042:	f7fc fb3f 	bl	800b6c4 <_malloc_r>
 800f046:	4606      	mov	r6, r0
 800f048:	b950      	cbnz	r0, 800f060 <__ssputs_r+0x5c>
 800f04a:	230c      	movs	r3, #12
 800f04c:	f8ca 3000 	str.w	r3, [sl]
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f056:	81a3      	strh	r3, [r4, #12]
 800f058:	f04f 30ff 	mov.w	r0, #4294967295
 800f05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f060:	6921      	ldr	r1, [r4, #16]
 800f062:	464a      	mov	r2, r9
 800f064:	f7ff faea 	bl	800e63c <memcpy>
 800f068:	89a3      	ldrh	r3, [r4, #12]
 800f06a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f06e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f072:	81a3      	strh	r3, [r4, #12]
 800f074:	6126      	str	r6, [r4, #16]
 800f076:	6165      	str	r5, [r4, #20]
 800f078:	444e      	add	r6, r9
 800f07a:	eba5 0509 	sub.w	r5, r5, r9
 800f07e:	6026      	str	r6, [r4, #0]
 800f080:	60a5      	str	r5, [r4, #8]
 800f082:	463e      	mov	r6, r7
 800f084:	42be      	cmp	r6, r7
 800f086:	d900      	bls.n	800f08a <__ssputs_r+0x86>
 800f088:	463e      	mov	r6, r7
 800f08a:	4632      	mov	r2, r6
 800f08c:	6820      	ldr	r0, [r4, #0]
 800f08e:	4641      	mov	r1, r8
 800f090:	f000 f971 	bl	800f376 <memmove>
 800f094:	68a3      	ldr	r3, [r4, #8]
 800f096:	6822      	ldr	r2, [r4, #0]
 800f098:	1b9b      	subs	r3, r3, r6
 800f09a:	4432      	add	r2, r6
 800f09c:	60a3      	str	r3, [r4, #8]
 800f09e:	6022      	str	r2, [r4, #0]
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	e7db      	b.n	800f05c <__ssputs_r+0x58>
 800f0a4:	462a      	mov	r2, r5
 800f0a6:	f000 f980 	bl	800f3aa <_realloc_r>
 800f0aa:	4606      	mov	r6, r0
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d1e1      	bne.n	800f074 <__ssputs_r+0x70>
 800f0b0:	6921      	ldr	r1, [r4, #16]
 800f0b2:	4650      	mov	r0, sl
 800f0b4:	f7fc fab6 	bl	800b624 <_free_r>
 800f0b8:	e7c7      	b.n	800f04a <__ssputs_r+0x46>
	...

0800f0bc <_svfiprintf_r>:
 800f0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c0:	4698      	mov	r8, r3
 800f0c2:	898b      	ldrh	r3, [r1, #12]
 800f0c4:	061b      	lsls	r3, r3, #24
 800f0c6:	b09d      	sub	sp, #116	; 0x74
 800f0c8:	4607      	mov	r7, r0
 800f0ca:	460d      	mov	r5, r1
 800f0cc:	4614      	mov	r4, r2
 800f0ce:	d50e      	bpl.n	800f0ee <_svfiprintf_r+0x32>
 800f0d0:	690b      	ldr	r3, [r1, #16]
 800f0d2:	b963      	cbnz	r3, 800f0ee <_svfiprintf_r+0x32>
 800f0d4:	2140      	movs	r1, #64	; 0x40
 800f0d6:	f7fc faf5 	bl	800b6c4 <_malloc_r>
 800f0da:	6028      	str	r0, [r5, #0]
 800f0dc:	6128      	str	r0, [r5, #16]
 800f0de:	b920      	cbnz	r0, 800f0ea <_svfiprintf_r+0x2e>
 800f0e0:	230c      	movs	r3, #12
 800f0e2:	603b      	str	r3, [r7, #0]
 800f0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e8:	e0d1      	b.n	800f28e <_svfiprintf_r+0x1d2>
 800f0ea:	2340      	movs	r3, #64	; 0x40
 800f0ec:	616b      	str	r3, [r5, #20]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f2:	2320      	movs	r3, #32
 800f0f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0fc:	2330      	movs	r3, #48	; 0x30
 800f0fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2a8 <_svfiprintf_r+0x1ec>
 800f102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f106:	f04f 0901 	mov.w	r9, #1
 800f10a:	4623      	mov	r3, r4
 800f10c:	469a      	mov	sl, r3
 800f10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f112:	b10a      	cbz	r2, 800f118 <_svfiprintf_r+0x5c>
 800f114:	2a25      	cmp	r2, #37	; 0x25
 800f116:	d1f9      	bne.n	800f10c <_svfiprintf_r+0x50>
 800f118:	ebba 0b04 	subs.w	fp, sl, r4
 800f11c:	d00b      	beq.n	800f136 <_svfiprintf_r+0x7a>
 800f11e:	465b      	mov	r3, fp
 800f120:	4622      	mov	r2, r4
 800f122:	4629      	mov	r1, r5
 800f124:	4638      	mov	r0, r7
 800f126:	f7ff ff6d 	bl	800f004 <__ssputs_r>
 800f12a:	3001      	adds	r0, #1
 800f12c:	f000 80aa 	beq.w	800f284 <_svfiprintf_r+0x1c8>
 800f130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f132:	445a      	add	r2, fp
 800f134:	9209      	str	r2, [sp, #36]	; 0x24
 800f136:	f89a 3000 	ldrb.w	r3, [sl]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 80a2 	beq.w	800f284 <_svfiprintf_r+0x1c8>
 800f140:	2300      	movs	r3, #0
 800f142:	f04f 32ff 	mov.w	r2, #4294967295
 800f146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f14a:	f10a 0a01 	add.w	sl, sl, #1
 800f14e:	9304      	str	r3, [sp, #16]
 800f150:	9307      	str	r3, [sp, #28]
 800f152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f156:	931a      	str	r3, [sp, #104]	; 0x68
 800f158:	4654      	mov	r4, sl
 800f15a:	2205      	movs	r2, #5
 800f15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f160:	4851      	ldr	r0, [pc, #324]	; (800f2a8 <_svfiprintf_r+0x1ec>)
 800f162:	f7f1 f85d 	bl	8000220 <memchr>
 800f166:	9a04      	ldr	r2, [sp, #16]
 800f168:	b9d8      	cbnz	r0, 800f1a2 <_svfiprintf_r+0xe6>
 800f16a:	06d0      	lsls	r0, r2, #27
 800f16c:	bf44      	itt	mi
 800f16e:	2320      	movmi	r3, #32
 800f170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f174:	0711      	lsls	r1, r2, #28
 800f176:	bf44      	itt	mi
 800f178:	232b      	movmi	r3, #43	; 0x2b
 800f17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f17e:	f89a 3000 	ldrb.w	r3, [sl]
 800f182:	2b2a      	cmp	r3, #42	; 0x2a
 800f184:	d015      	beq.n	800f1b2 <_svfiprintf_r+0xf6>
 800f186:	9a07      	ldr	r2, [sp, #28]
 800f188:	4654      	mov	r4, sl
 800f18a:	2000      	movs	r0, #0
 800f18c:	f04f 0c0a 	mov.w	ip, #10
 800f190:	4621      	mov	r1, r4
 800f192:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f196:	3b30      	subs	r3, #48	; 0x30
 800f198:	2b09      	cmp	r3, #9
 800f19a:	d94e      	bls.n	800f23a <_svfiprintf_r+0x17e>
 800f19c:	b1b0      	cbz	r0, 800f1cc <_svfiprintf_r+0x110>
 800f19e:	9207      	str	r2, [sp, #28]
 800f1a0:	e014      	b.n	800f1cc <_svfiprintf_r+0x110>
 800f1a2:	eba0 0308 	sub.w	r3, r0, r8
 800f1a6:	fa09 f303 	lsl.w	r3, r9, r3
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	9304      	str	r3, [sp, #16]
 800f1ae:	46a2      	mov	sl, r4
 800f1b0:	e7d2      	b.n	800f158 <_svfiprintf_r+0x9c>
 800f1b2:	9b03      	ldr	r3, [sp, #12]
 800f1b4:	1d19      	adds	r1, r3, #4
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	9103      	str	r1, [sp, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	bfbb      	ittet	lt
 800f1be:	425b      	neglt	r3, r3
 800f1c0:	f042 0202 	orrlt.w	r2, r2, #2
 800f1c4:	9307      	strge	r3, [sp, #28]
 800f1c6:	9307      	strlt	r3, [sp, #28]
 800f1c8:	bfb8      	it	lt
 800f1ca:	9204      	strlt	r2, [sp, #16]
 800f1cc:	7823      	ldrb	r3, [r4, #0]
 800f1ce:	2b2e      	cmp	r3, #46	; 0x2e
 800f1d0:	d10c      	bne.n	800f1ec <_svfiprintf_r+0x130>
 800f1d2:	7863      	ldrb	r3, [r4, #1]
 800f1d4:	2b2a      	cmp	r3, #42	; 0x2a
 800f1d6:	d135      	bne.n	800f244 <_svfiprintf_r+0x188>
 800f1d8:	9b03      	ldr	r3, [sp, #12]
 800f1da:	1d1a      	adds	r2, r3, #4
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	9203      	str	r2, [sp, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	bfb8      	it	lt
 800f1e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1e8:	3402      	adds	r4, #2
 800f1ea:	9305      	str	r3, [sp, #20]
 800f1ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f2b8 <_svfiprintf_r+0x1fc>
 800f1f0:	7821      	ldrb	r1, [r4, #0]
 800f1f2:	2203      	movs	r2, #3
 800f1f4:	4650      	mov	r0, sl
 800f1f6:	f7f1 f813 	bl	8000220 <memchr>
 800f1fa:	b140      	cbz	r0, 800f20e <_svfiprintf_r+0x152>
 800f1fc:	2340      	movs	r3, #64	; 0x40
 800f1fe:	eba0 000a 	sub.w	r0, r0, sl
 800f202:	fa03 f000 	lsl.w	r0, r3, r0
 800f206:	9b04      	ldr	r3, [sp, #16]
 800f208:	4303      	orrs	r3, r0
 800f20a:	3401      	adds	r4, #1
 800f20c:	9304      	str	r3, [sp, #16]
 800f20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f212:	4826      	ldr	r0, [pc, #152]	; (800f2ac <_svfiprintf_r+0x1f0>)
 800f214:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f218:	2206      	movs	r2, #6
 800f21a:	f7f1 f801 	bl	8000220 <memchr>
 800f21e:	2800      	cmp	r0, #0
 800f220:	d038      	beq.n	800f294 <_svfiprintf_r+0x1d8>
 800f222:	4b23      	ldr	r3, [pc, #140]	; (800f2b0 <_svfiprintf_r+0x1f4>)
 800f224:	bb1b      	cbnz	r3, 800f26e <_svfiprintf_r+0x1b2>
 800f226:	9b03      	ldr	r3, [sp, #12]
 800f228:	3307      	adds	r3, #7
 800f22a:	f023 0307 	bic.w	r3, r3, #7
 800f22e:	3308      	adds	r3, #8
 800f230:	9303      	str	r3, [sp, #12]
 800f232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f234:	4433      	add	r3, r6
 800f236:	9309      	str	r3, [sp, #36]	; 0x24
 800f238:	e767      	b.n	800f10a <_svfiprintf_r+0x4e>
 800f23a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f23e:	460c      	mov	r4, r1
 800f240:	2001      	movs	r0, #1
 800f242:	e7a5      	b.n	800f190 <_svfiprintf_r+0xd4>
 800f244:	2300      	movs	r3, #0
 800f246:	3401      	adds	r4, #1
 800f248:	9305      	str	r3, [sp, #20]
 800f24a:	4619      	mov	r1, r3
 800f24c:	f04f 0c0a 	mov.w	ip, #10
 800f250:	4620      	mov	r0, r4
 800f252:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f256:	3a30      	subs	r2, #48	; 0x30
 800f258:	2a09      	cmp	r2, #9
 800f25a:	d903      	bls.n	800f264 <_svfiprintf_r+0x1a8>
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d0c5      	beq.n	800f1ec <_svfiprintf_r+0x130>
 800f260:	9105      	str	r1, [sp, #20]
 800f262:	e7c3      	b.n	800f1ec <_svfiprintf_r+0x130>
 800f264:	fb0c 2101 	mla	r1, ip, r1, r2
 800f268:	4604      	mov	r4, r0
 800f26a:	2301      	movs	r3, #1
 800f26c:	e7f0      	b.n	800f250 <_svfiprintf_r+0x194>
 800f26e:	ab03      	add	r3, sp, #12
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	462a      	mov	r2, r5
 800f274:	4b0f      	ldr	r3, [pc, #60]	; (800f2b4 <_svfiprintf_r+0x1f8>)
 800f276:	a904      	add	r1, sp, #16
 800f278:	4638      	mov	r0, r7
 800f27a:	f7fc fb1d 	bl	800b8b8 <_printf_float>
 800f27e:	1c42      	adds	r2, r0, #1
 800f280:	4606      	mov	r6, r0
 800f282:	d1d6      	bne.n	800f232 <_svfiprintf_r+0x176>
 800f284:	89ab      	ldrh	r3, [r5, #12]
 800f286:	065b      	lsls	r3, r3, #25
 800f288:	f53f af2c 	bmi.w	800f0e4 <_svfiprintf_r+0x28>
 800f28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f28e:	b01d      	add	sp, #116	; 0x74
 800f290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f294:	ab03      	add	r3, sp, #12
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	462a      	mov	r2, r5
 800f29a:	4b06      	ldr	r3, [pc, #24]	; (800f2b4 <_svfiprintf_r+0x1f8>)
 800f29c:	a904      	add	r1, sp, #16
 800f29e:	4638      	mov	r0, r7
 800f2a0:	f7fc fdae 	bl	800be00 <_printf_i>
 800f2a4:	e7eb      	b.n	800f27e <_svfiprintf_r+0x1c2>
 800f2a6:	bf00      	nop
 800f2a8:	08010e7c 	.word	0x08010e7c
 800f2ac:	08010e86 	.word	0x08010e86
 800f2b0:	0800b8b9 	.word	0x0800b8b9
 800f2b4:	0800f005 	.word	0x0800f005
 800f2b8:	08010e82 	.word	0x08010e82
 800f2bc:	00000000 	.word	0x00000000

0800f2c0 <nan>:
 800f2c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f2c8 <nan+0x8>
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop
 800f2c8:	00000000 	.word	0x00000000
 800f2cc:	7ff80000 	.word	0x7ff80000

0800f2d0 <strncmp>:
 800f2d0:	b510      	push	{r4, lr}
 800f2d2:	b16a      	cbz	r2, 800f2f0 <strncmp+0x20>
 800f2d4:	3901      	subs	r1, #1
 800f2d6:	1884      	adds	r4, r0, r2
 800f2d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f2dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d103      	bne.n	800f2ec <strncmp+0x1c>
 800f2e4:	42a0      	cmp	r0, r4
 800f2e6:	d001      	beq.n	800f2ec <strncmp+0x1c>
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1f5      	bne.n	800f2d8 <strncmp+0x8>
 800f2ec:	1a98      	subs	r0, r3, r2
 800f2ee:	bd10      	pop	{r4, pc}
 800f2f0:	4610      	mov	r0, r2
 800f2f2:	e7fc      	b.n	800f2ee <strncmp+0x1e>

0800f2f4 <__ascii_wctomb>:
 800f2f4:	b149      	cbz	r1, 800f30a <__ascii_wctomb+0x16>
 800f2f6:	2aff      	cmp	r2, #255	; 0xff
 800f2f8:	bf85      	ittet	hi
 800f2fa:	238a      	movhi	r3, #138	; 0x8a
 800f2fc:	6003      	strhi	r3, [r0, #0]
 800f2fe:	700a      	strbls	r2, [r1, #0]
 800f300:	f04f 30ff 	movhi.w	r0, #4294967295
 800f304:	bf98      	it	ls
 800f306:	2001      	movls	r0, #1
 800f308:	4770      	bx	lr
 800f30a:	4608      	mov	r0, r1
 800f30c:	4770      	bx	lr
	...

0800f310 <__assert_func>:
 800f310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f312:	4614      	mov	r4, r2
 800f314:	461a      	mov	r2, r3
 800f316:	4b09      	ldr	r3, [pc, #36]	; (800f33c <__assert_func+0x2c>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4605      	mov	r5, r0
 800f31c:	68d8      	ldr	r0, [r3, #12]
 800f31e:	b14c      	cbz	r4, 800f334 <__assert_func+0x24>
 800f320:	4b07      	ldr	r3, [pc, #28]	; (800f340 <__assert_func+0x30>)
 800f322:	9100      	str	r1, [sp, #0]
 800f324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f328:	4906      	ldr	r1, [pc, #24]	; (800f344 <__assert_func+0x34>)
 800f32a:	462b      	mov	r3, r5
 800f32c:	f000 f80e 	bl	800f34c <fiprintf>
 800f330:	f000 fa7a 	bl	800f828 <abort>
 800f334:	4b04      	ldr	r3, [pc, #16]	; (800f348 <__assert_func+0x38>)
 800f336:	461c      	mov	r4, r3
 800f338:	e7f3      	b.n	800f322 <__assert_func+0x12>
 800f33a:	bf00      	nop
 800f33c:	20000424 	.word	0x20000424
 800f340:	08010e8d 	.word	0x08010e8d
 800f344:	08010e9a 	.word	0x08010e9a
 800f348:	08010ec8 	.word	0x08010ec8

0800f34c <fiprintf>:
 800f34c:	b40e      	push	{r1, r2, r3}
 800f34e:	b503      	push	{r0, r1, lr}
 800f350:	4601      	mov	r1, r0
 800f352:	ab03      	add	r3, sp, #12
 800f354:	4805      	ldr	r0, [pc, #20]	; (800f36c <fiprintf+0x20>)
 800f356:	f853 2b04 	ldr.w	r2, [r3], #4
 800f35a:	6800      	ldr	r0, [r0, #0]
 800f35c:	9301      	str	r3, [sp, #4]
 800f35e:	f000 f873 	bl	800f448 <_vfiprintf_r>
 800f362:	b002      	add	sp, #8
 800f364:	f85d eb04 	ldr.w	lr, [sp], #4
 800f368:	b003      	add	sp, #12
 800f36a:	4770      	bx	lr
 800f36c:	20000424 	.word	0x20000424

0800f370 <__retarget_lock_init_recursive>:
 800f370:	4770      	bx	lr

0800f372 <__retarget_lock_acquire_recursive>:
 800f372:	4770      	bx	lr

0800f374 <__retarget_lock_release_recursive>:
 800f374:	4770      	bx	lr

0800f376 <memmove>:
 800f376:	4288      	cmp	r0, r1
 800f378:	b510      	push	{r4, lr}
 800f37a:	eb01 0402 	add.w	r4, r1, r2
 800f37e:	d902      	bls.n	800f386 <memmove+0x10>
 800f380:	4284      	cmp	r4, r0
 800f382:	4623      	mov	r3, r4
 800f384:	d807      	bhi.n	800f396 <memmove+0x20>
 800f386:	1e43      	subs	r3, r0, #1
 800f388:	42a1      	cmp	r1, r4
 800f38a:	d008      	beq.n	800f39e <memmove+0x28>
 800f38c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f390:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f394:	e7f8      	b.n	800f388 <memmove+0x12>
 800f396:	4402      	add	r2, r0
 800f398:	4601      	mov	r1, r0
 800f39a:	428a      	cmp	r2, r1
 800f39c:	d100      	bne.n	800f3a0 <memmove+0x2a>
 800f39e:	bd10      	pop	{r4, pc}
 800f3a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3a8:	e7f7      	b.n	800f39a <memmove+0x24>

0800f3aa <_realloc_r>:
 800f3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ac:	4607      	mov	r7, r0
 800f3ae:	4614      	mov	r4, r2
 800f3b0:	460e      	mov	r6, r1
 800f3b2:	b921      	cbnz	r1, 800f3be <_realloc_r+0x14>
 800f3b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f3b8:	4611      	mov	r1, r2
 800f3ba:	f7fc b983 	b.w	800b6c4 <_malloc_r>
 800f3be:	b922      	cbnz	r2, 800f3ca <_realloc_r+0x20>
 800f3c0:	f7fc f930 	bl	800b624 <_free_r>
 800f3c4:	4625      	mov	r5, r4
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3ca:	f000 fc51 	bl	800fc70 <_malloc_usable_size_r>
 800f3ce:	42a0      	cmp	r0, r4
 800f3d0:	d20f      	bcs.n	800f3f2 <_realloc_r+0x48>
 800f3d2:	4621      	mov	r1, r4
 800f3d4:	4638      	mov	r0, r7
 800f3d6:	f7fc f975 	bl	800b6c4 <_malloc_r>
 800f3da:	4605      	mov	r5, r0
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d0f2      	beq.n	800f3c6 <_realloc_r+0x1c>
 800f3e0:	4631      	mov	r1, r6
 800f3e2:	4622      	mov	r2, r4
 800f3e4:	f7ff f92a 	bl	800e63c <memcpy>
 800f3e8:	4631      	mov	r1, r6
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	f7fc f91a 	bl	800b624 <_free_r>
 800f3f0:	e7e9      	b.n	800f3c6 <_realloc_r+0x1c>
 800f3f2:	4635      	mov	r5, r6
 800f3f4:	e7e7      	b.n	800f3c6 <_realloc_r+0x1c>

0800f3f6 <__sfputc_r>:
 800f3f6:	6893      	ldr	r3, [r2, #8]
 800f3f8:	3b01      	subs	r3, #1
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	b410      	push	{r4}
 800f3fe:	6093      	str	r3, [r2, #8]
 800f400:	da08      	bge.n	800f414 <__sfputc_r+0x1e>
 800f402:	6994      	ldr	r4, [r2, #24]
 800f404:	42a3      	cmp	r3, r4
 800f406:	db01      	blt.n	800f40c <__sfputc_r+0x16>
 800f408:	290a      	cmp	r1, #10
 800f40a:	d103      	bne.n	800f414 <__sfputc_r+0x1e>
 800f40c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f410:	f000 b94a 	b.w	800f6a8 <__swbuf_r>
 800f414:	6813      	ldr	r3, [r2, #0]
 800f416:	1c58      	adds	r0, r3, #1
 800f418:	6010      	str	r0, [r2, #0]
 800f41a:	7019      	strb	r1, [r3, #0]
 800f41c:	4608      	mov	r0, r1
 800f41e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <__sfputs_r>:
 800f424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f426:	4606      	mov	r6, r0
 800f428:	460f      	mov	r7, r1
 800f42a:	4614      	mov	r4, r2
 800f42c:	18d5      	adds	r5, r2, r3
 800f42e:	42ac      	cmp	r4, r5
 800f430:	d101      	bne.n	800f436 <__sfputs_r+0x12>
 800f432:	2000      	movs	r0, #0
 800f434:	e007      	b.n	800f446 <__sfputs_r+0x22>
 800f436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f43a:	463a      	mov	r2, r7
 800f43c:	4630      	mov	r0, r6
 800f43e:	f7ff ffda 	bl	800f3f6 <__sfputc_r>
 800f442:	1c43      	adds	r3, r0, #1
 800f444:	d1f3      	bne.n	800f42e <__sfputs_r+0xa>
 800f446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f448 <_vfiprintf_r>:
 800f448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44c:	460d      	mov	r5, r1
 800f44e:	b09d      	sub	sp, #116	; 0x74
 800f450:	4614      	mov	r4, r2
 800f452:	4698      	mov	r8, r3
 800f454:	4606      	mov	r6, r0
 800f456:	b118      	cbz	r0, 800f460 <_vfiprintf_r+0x18>
 800f458:	6983      	ldr	r3, [r0, #24]
 800f45a:	b90b      	cbnz	r3, 800f460 <_vfiprintf_r+0x18>
 800f45c:	f000 fb06 	bl	800fa6c <__sinit>
 800f460:	4b89      	ldr	r3, [pc, #548]	; (800f688 <_vfiprintf_r+0x240>)
 800f462:	429d      	cmp	r5, r3
 800f464:	d11b      	bne.n	800f49e <_vfiprintf_r+0x56>
 800f466:	6875      	ldr	r5, [r6, #4]
 800f468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f46a:	07d9      	lsls	r1, r3, #31
 800f46c:	d405      	bmi.n	800f47a <_vfiprintf_r+0x32>
 800f46e:	89ab      	ldrh	r3, [r5, #12]
 800f470:	059a      	lsls	r2, r3, #22
 800f472:	d402      	bmi.n	800f47a <_vfiprintf_r+0x32>
 800f474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f476:	f7ff ff7c 	bl	800f372 <__retarget_lock_acquire_recursive>
 800f47a:	89ab      	ldrh	r3, [r5, #12]
 800f47c:	071b      	lsls	r3, r3, #28
 800f47e:	d501      	bpl.n	800f484 <_vfiprintf_r+0x3c>
 800f480:	692b      	ldr	r3, [r5, #16]
 800f482:	b9eb      	cbnz	r3, 800f4c0 <_vfiprintf_r+0x78>
 800f484:	4629      	mov	r1, r5
 800f486:	4630      	mov	r0, r6
 800f488:	f000 f960 	bl	800f74c <__swsetup_r>
 800f48c:	b1c0      	cbz	r0, 800f4c0 <_vfiprintf_r+0x78>
 800f48e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f490:	07dc      	lsls	r4, r3, #31
 800f492:	d50e      	bpl.n	800f4b2 <_vfiprintf_r+0x6a>
 800f494:	f04f 30ff 	mov.w	r0, #4294967295
 800f498:	b01d      	add	sp, #116	; 0x74
 800f49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f49e:	4b7b      	ldr	r3, [pc, #492]	; (800f68c <_vfiprintf_r+0x244>)
 800f4a0:	429d      	cmp	r5, r3
 800f4a2:	d101      	bne.n	800f4a8 <_vfiprintf_r+0x60>
 800f4a4:	68b5      	ldr	r5, [r6, #8]
 800f4a6:	e7df      	b.n	800f468 <_vfiprintf_r+0x20>
 800f4a8:	4b79      	ldr	r3, [pc, #484]	; (800f690 <_vfiprintf_r+0x248>)
 800f4aa:	429d      	cmp	r5, r3
 800f4ac:	bf08      	it	eq
 800f4ae:	68f5      	ldreq	r5, [r6, #12]
 800f4b0:	e7da      	b.n	800f468 <_vfiprintf_r+0x20>
 800f4b2:	89ab      	ldrh	r3, [r5, #12]
 800f4b4:	0598      	lsls	r0, r3, #22
 800f4b6:	d4ed      	bmi.n	800f494 <_vfiprintf_r+0x4c>
 800f4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4ba:	f7ff ff5b 	bl	800f374 <__retarget_lock_release_recursive>
 800f4be:	e7e9      	b.n	800f494 <_vfiprintf_r+0x4c>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f4c4:	2320      	movs	r3, #32
 800f4c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4ce:	2330      	movs	r3, #48	; 0x30
 800f4d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f694 <_vfiprintf_r+0x24c>
 800f4d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4d8:	f04f 0901 	mov.w	r9, #1
 800f4dc:	4623      	mov	r3, r4
 800f4de:	469a      	mov	sl, r3
 800f4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4e4:	b10a      	cbz	r2, 800f4ea <_vfiprintf_r+0xa2>
 800f4e6:	2a25      	cmp	r2, #37	; 0x25
 800f4e8:	d1f9      	bne.n	800f4de <_vfiprintf_r+0x96>
 800f4ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f4ee:	d00b      	beq.n	800f508 <_vfiprintf_r+0xc0>
 800f4f0:	465b      	mov	r3, fp
 800f4f2:	4622      	mov	r2, r4
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	f7ff ff94 	bl	800f424 <__sfputs_r>
 800f4fc:	3001      	adds	r0, #1
 800f4fe:	f000 80aa 	beq.w	800f656 <_vfiprintf_r+0x20e>
 800f502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f504:	445a      	add	r2, fp
 800f506:	9209      	str	r2, [sp, #36]	; 0x24
 800f508:	f89a 3000 	ldrb.w	r3, [sl]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f000 80a2 	beq.w	800f656 <_vfiprintf_r+0x20e>
 800f512:	2300      	movs	r3, #0
 800f514:	f04f 32ff 	mov.w	r2, #4294967295
 800f518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f51c:	f10a 0a01 	add.w	sl, sl, #1
 800f520:	9304      	str	r3, [sp, #16]
 800f522:	9307      	str	r3, [sp, #28]
 800f524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f528:	931a      	str	r3, [sp, #104]	; 0x68
 800f52a:	4654      	mov	r4, sl
 800f52c:	2205      	movs	r2, #5
 800f52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f532:	4858      	ldr	r0, [pc, #352]	; (800f694 <_vfiprintf_r+0x24c>)
 800f534:	f7f0 fe74 	bl	8000220 <memchr>
 800f538:	9a04      	ldr	r2, [sp, #16]
 800f53a:	b9d8      	cbnz	r0, 800f574 <_vfiprintf_r+0x12c>
 800f53c:	06d1      	lsls	r1, r2, #27
 800f53e:	bf44      	itt	mi
 800f540:	2320      	movmi	r3, #32
 800f542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f546:	0713      	lsls	r3, r2, #28
 800f548:	bf44      	itt	mi
 800f54a:	232b      	movmi	r3, #43	; 0x2b
 800f54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f550:	f89a 3000 	ldrb.w	r3, [sl]
 800f554:	2b2a      	cmp	r3, #42	; 0x2a
 800f556:	d015      	beq.n	800f584 <_vfiprintf_r+0x13c>
 800f558:	9a07      	ldr	r2, [sp, #28]
 800f55a:	4654      	mov	r4, sl
 800f55c:	2000      	movs	r0, #0
 800f55e:	f04f 0c0a 	mov.w	ip, #10
 800f562:	4621      	mov	r1, r4
 800f564:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f568:	3b30      	subs	r3, #48	; 0x30
 800f56a:	2b09      	cmp	r3, #9
 800f56c:	d94e      	bls.n	800f60c <_vfiprintf_r+0x1c4>
 800f56e:	b1b0      	cbz	r0, 800f59e <_vfiprintf_r+0x156>
 800f570:	9207      	str	r2, [sp, #28]
 800f572:	e014      	b.n	800f59e <_vfiprintf_r+0x156>
 800f574:	eba0 0308 	sub.w	r3, r0, r8
 800f578:	fa09 f303 	lsl.w	r3, r9, r3
 800f57c:	4313      	orrs	r3, r2
 800f57e:	9304      	str	r3, [sp, #16]
 800f580:	46a2      	mov	sl, r4
 800f582:	e7d2      	b.n	800f52a <_vfiprintf_r+0xe2>
 800f584:	9b03      	ldr	r3, [sp, #12]
 800f586:	1d19      	adds	r1, r3, #4
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	9103      	str	r1, [sp, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	bfbb      	ittet	lt
 800f590:	425b      	neglt	r3, r3
 800f592:	f042 0202 	orrlt.w	r2, r2, #2
 800f596:	9307      	strge	r3, [sp, #28]
 800f598:	9307      	strlt	r3, [sp, #28]
 800f59a:	bfb8      	it	lt
 800f59c:	9204      	strlt	r2, [sp, #16]
 800f59e:	7823      	ldrb	r3, [r4, #0]
 800f5a0:	2b2e      	cmp	r3, #46	; 0x2e
 800f5a2:	d10c      	bne.n	800f5be <_vfiprintf_r+0x176>
 800f5a4:	7863      	ldrb	r3, [r4, #1]
 800f5a6:	2b2a      	cmp	r3, #42	; 0x2a
 800f5a8:	d135      	bne.n	800f616 <_vfiprintf_r+0x1ce>
 800f5aa:	9b03      	ldr	r3, [sp, #12]
 800f5ac:	1d1a      	adds	r2, r3, #4
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	9203      	str	r2, [sp, #12]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	bfb8      	it	lt
 800f5b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5ba:	3402      	adds	r4, #2
 800f5bc:	9305      	str	r3, [sp, #20]
 800f5be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f6a4 <_vfiprintf_r+0x25c>
 800f5c2:	7821      	ldrb	r1, [r4, #0]
 800f5c4:	2203      	movs	r2, #3
 800f5c6:	4650      	mov	r0, sl
 800f5c8:	f7f0 fe2a 	bl	8000220 <memchr>
 800f5cc:	b140      	cbz	r0, 800f5e0 <_vfiprintf_r+0x198>
 800f5ce:	2340      	movs	r3, #64	; 0x40
 800f5d0:	eba0 000a 	sub.w	r0, r0, sl
 800f5d4:	fa03 f000 	lsl.w	r0, r3, r0
 800f5d8:	9b04      	ldr	r3, [sp, #16]
 800f5da:	4303      	orrs	r3, r0
 800f5dc:	3401      	adds	r4, #1
 800f5de:	9304      	str	r3, [sp, #16]
 800f5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5e4:	482c      	ldr	r0, [pc, #176]	; (800f698 <_vfiprintf_r+0x250>)
 800f5e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5ea:	2206      	movs	r2, #6
 800f5ec:	f7f0 fe18 	bl	8000220 <memchr>
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d03f      	beq.n	800f674 <_vfiprintf_r+0x22c>
 800f5f4:	4b29      	ldr	r3, [pc, #164]	; (800f69c <_vfiprintf_r+0x254>)
 800f5f6:	bb1b      	cbnz	r3, 800f640 <_vfiprintf_r+0x1f8>
 800f5f8:	9b03      	ldr	r3, [sp, #12]
 800f5fa:	3307      	adds	r3, #7
 800f5fc:	f023 0307 	bic.w	r3, r3, #7
 800f600:	3308      	adds	r3, #8
 800f602:	9303      	str	r3, [sp, #12]
 800f604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f606:	443b      	add	r3, r7
 800f608:	9309      	str	r3, [sp, #36]	; 0x24
 800f60a:	e767      	b.n	800f4dc <_vfiprintf_r+0x94>
 800f60c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f610:	460c      	mov	r4, r1
 800f612:	2001      	movs	r0, #1
 800f614:	e7a5      	b.n	800f562 <_vfiprintf_r+0x11a>
 800f616:	2300      	movs	r3, #0
 800f618:	3401      	adds	r4, #1
 800f61a:	9305      	str	r3, [sp, #20]
 800f61c:	4619      	mov	r1, r3
 800f61e:	f04f 0c0a 	mov.w	ip, #10
 800f622:	4620      	mov	r0, r4
 800f624:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f628:	3a30      	subs	r2, #48	; 0x30
 800f62a:	2a09      	cmp	r2, #9
 800f62c:	d903      	bls.n	800f636 <_vfiprintf_r+0x1ee>
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d0c5      	beq.n	800f5be <_vfiprintf_r+0x176>
 800f632:	9105      	str	r1, [sp, #20]
 800f634:	e7c3      	b.n	800f5be <_vfiprintf_r+0x176>
 800f636:	fb0c 2101 	mla	r1, ip, r1, r2
 800f63a:	4604      	mov	r4, r0
 800f63c:	2301      	movs	r3, #1
 800f63e:	e7f0      	b.n	800f622 <_vfiprintf_r+0x1da>
 800f640:	ab03      	add	r3, sp, #12
 800f642:	9300      	str	r3, [sp, #0]
 800f644:	462a      	mov	r2, r5
 800f646:	4b16      	ldr	r3, [pc, #88]	; (800f6a0 <_vfiprintf_r+0x258>)
 800f648:	a904      	add	r1, sp, #16
 800f64a:	4630      	mov	r0, r6
 800f64c:	f7fc f934 	bl	800b8b8 <_printf_float>
 800f650:	4607      	mov	r7, r0
 800f652:	1c78      	adds	r0, r7, #1
 800f654:	d1d6      	bne.n	800f604 <_vfiprintf_r+0x1bc>
 800f656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f658:	07d9      	lsls	r1, r3, #31
 800f65a:	d405      	bmi.n	800f668 <_vfiprintf_r+0x220>
 800f65c:	89ab      	ldrh	r3, [r5, #12]
 800f65e:	059a      	lsls	r2, r3, #22
 800f660:	d402      	bmi.n	800f668 <_vfiprintf_r+0x220>
 800f662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f664:	f7ff fe86 	bl	800f374 <__retarget_lock_release_recursive>
 800f668:	89ab      	ldrh	r3, [r5, #12]
 800f66a:	065b      	lsls	r3, r3, #25
 800f66c:	f53f af12 	bmi.w	800f494 <_vfiprintf_r+0x4c>
 800f670:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f672:	e711      	b.n	800f498 <_vfiprintf_r+0x50>
 800f674:	ab03      	add	r3, sp, #12
 800f676:	9300      	str	r3, [sp, #0]
 800f678:	462a      	mov	r2, r5
 800f67a:	4b09      	ldr	r3, [pc, #36]	; (800f6a0 <_vfiprintf_r+0x258>)
 800f67c:	a904      	add	r1, sp, #16
 800f67e:	4630      	mov	r0, r6
 800f680:	f7fc fbbe 	bl	800be00 <_printf_i>
 800f684:	e7e4      	b.n	800f650 <_vfiprintf_r+0x208>
 800f686:	bf00      	nop
 800f688:	08010eec 	.word	0x08010eec
 800f68c:	08010f0c 	.word	0x08010f0c
 800f690:	08010ecc 	.word	0x08010ecc
 800f694:	08010e7c 	.word	0x08010e7c
 800f698:	08010e86 	.word	0x08010e86
 800f69c:	0800b8b9 	.word	0x0800b8b9
 800f6a0:	0800f425 	.word	0x0800f425
 800f6a4:	08010e82 	.word	0x08010e82

0800f6a8 <__swbuf_r>:
 800f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6aa:	460e      	mov	r6, r1
 800f6ac:	4614      	mov	r4, r2
 800f6ae:	4605      	mov	r5, r0
 800f6b0:	b118      	cbz	r0, 800f6ba <__swbuf_r+0x12>
 800f6b2:	6983      	ldr	r3, [r0, #24]
 800f6b4:	b90b      	cbnz	r3, 800f6ba <__swbuf_r+0x12>
 800f6b6:	f000 f9d9 	bl	800fa6c <__sinit>
 800f6ba:	4b21      	ldr	r3, [pc, #132]	; (800f740 <__swbuf_r+0x98>)
 800f6bc:	429c      	cmp	r4, r3
 800f6be:	d12b      	bne.n	800f718 <__swbuf_r+0x70>
 800f6c0:	686c      	ldr	r4, [r5, #4]
 800f6c2:	69a3      	ldr	r3, [r4, #24]
 800f6c4:	60a3      	str	r3, [r4, #8]
 800f6c6:	89a3      	ldrh	r3, [r4, #12]
 800f6c8:	071a      	lsls	r2, r3, #28
 800f6ca:	d52f      	bpl.n	800f72c <__swbuf_r+0x84>
 800f6cc:	6923      	ldr	r3, [r4, #16]
 800f6ce:	b36b      	cbz	r3, 800f72c <__swbuf_r+0x84>
 800f6d0:	6923      	ldr	r3, [r4, #16]
 800f6d2:	6820      	ldr	r0, [r4, #0]
 800f6d4:	1ac0      	subs	r0, r0, r3
 800f6d6:	6963      	ldr	r3, [r4, #20]
 800f6d8:	b2f6      	uxtb	r6, r6
 800f6da:	4283      	cmp	r3, r0
 800f6dc:	4637      	mov	r7, r6
 800f6de:	dc04      	bgt.n	800f6ea <__swbuf_r+0x42>
 800f6e0:	4621      	mov	r1, r4
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	f000 f92e 	bl	800f944 <_fflush_r>
 800f6e8:	bb30      	cbnz	r0, 800f738 <__swbuf_r+0x90>
 800f6ea:	68a3      	ldr	r3, [r4, #8]
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	60a3      	str	r3, [r4, #8]
 800f6f0:	6823      	ldr	r3, [r4, #0]
 800f6f2:	1c5a      	adds	r2, r3, #1
 800f6f4:	6022      	str	r2, [r4, #0]
 800f6f6:	701e      	strb	r6, [r3, #0]
 800f6f8:	6963      	ldr	r3, [r4, #20]
 800f6fa:	3001      	adds	r0, #1
 800f6fc:	4283      	cmp	r3, r0
 800f6fe:	d004      	beq.n	800f70a <__swbuf_r+0x62>
 800f700:	89a3      	ldrh	r3, [r4, #12]
 800f702:	07db      	lsls	r3, r3, #31
 800f704:	d506      	bpl.n	800f714 <__swbuf_r+0x6c>
 800f706:	2e0a      	cmp	r6, #10
 800f708:	d104      	bne.n	800f714 <__swbuf_r+0x6c>
 800f70a:	4621      	mov	r1, r4
 800f70c:	4628      	mov	r0, r5
 800f70e:	f000 f919 	bl	800f944 <_fflush_r>
 800f712:	b988      	cbnz	r0, 800f738 <__swbuf_r+0x90>
 800f714:	4638      	mov	r0, r7
 800f716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f718:	4b0a      	ldr	r3, [pc, #40]	; (800f744 <__swbuf_r+0x9c>)
 800f71a:	429c      	cmp	r4, r3
 800f71c:	d101      	bne.n	800f722 <__swbuf_r+0x7a>
 800f71e:	68ac      	ldr	r4, [r5, #8]
 800f720:	e7cf      	b.n	800f6c2 <__swbuf_r+0x1a>
 800f722:	4b09      	ldr	r3, [pc, #36]	; (800f748 <__swbuf_r+0xa0>)
 800f724:	429c      	cmp	r4, r3
 800f726:	bf08      	it	eq
 800f728:	68ec      	ldreq	r4, [r5, #12]
 800f72a:	e7ca      	b.n	800f6c2 <__swbuf_r+0x1a>
 800f72c:	4621      	mov	r1, r4
 800f72e:	4628      	mov	r0, r5
 800f730:	f000 f80c 	bl	800f74c <__swsetup_r>
 800f734:	2800      	cmp	r0, #0
 800f736:	d0cb      	beq.n	800f6d0 <__swbuf_r+0x28>
 800f738:	f04f 37ff 	mov.w	r7, #4294967295
 800f73c:	e7ea      	b.n	800f714 <__swbuf_r+0x6c>
 800f73e:	bf00      	nop
 800f740:	08010eec 	.word	0x08010eec
 800f744:	08010f0c 	.word	0x08010f0c
 800f748:	08010ecc 	.word	0x08010ecc

0800f74c <__swsetup_r>:
 800f74c:	4b32      	ldr	r3, [pc, #200]	; (800f818 <__swsetup_r+0xcc>)
 800f74e:	b570      	push	{r4, r5, r6, lr}
 800f750:	681d      	ldr	r5, [r3, #0]
 800f752:	4606      	mov	r6, r0
 800f754:	460c      	mov	r4, r1
 800f756:	b125      	cbz	r5, 800f762 <__swsetup_r+0x16>
 800f758:	69ab      	ldr	r3, [r5, #24]
 800f75a:	b913      	cbnz	r3, 800f762 <__swsetup_r+0x16>
 800f75c:	4628      	mov	r0, r5
 800f75e:	f000 f985 	bl	800fa6c <__sinit>
 800f762:	4b2e      	ldr	r3, [pc, #184]	; (800f81c <__swsetup_r+0xd0>)
 800f764:	429c      	cmp	r4, r3
 800f766:	d10f      	bne.n	800f788 <__swsetup_r+0x3c>
 800f768:	686c      	ldr	r4, [r5, #4]
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f770:	0719      	lsls	r1, r3, #28
 800f772:	d42c      	bmi.n	800f7ce <__swsetup_r+0x82>
 800f774:	06dd      	lsls	r5, r3, #27
 800f776:	d411      	bmi.n	800f79c <__swsetup_r+0x50>
 800f778:	2309      	movs	r3, #9
 800f77a:	6033      	str	r3, [r6, #0]
 800f77c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f780:	81a3      	strh	r3, [r4, #12]
 800f782:	f04f 30ff 	mov.w	r0, #4294967295
 800f786:	e03e      	b.n	800f806 <__swsetup_r+0xba>
 800f788:	4b25      	ldr	r3, [pc, #148]	; (800f820 <__swsetup_r+0xd4>)
 800f78a:	429c      	cmp	r4, r3
 800f78c:	d101      	bne.n	800f792 <__swsetup_r+0x46>
 800f78e:	68ac      	ldr	r4, [r5, #8]
 800f790:	e7eb      	b.n	800f76a <__swsetup_r+0x1e>
 800f792:	4b24      	ldr	r3, [pc, #144]	; (800f824 <__swsetup_r+0xd8>)
 800f794:	429c      	cmp	r4, r3
 800f796:	bf08      	it	eq
 800f798:	68ec      	ldreq	r4, [r5, #12]
 800f79a:	e7e6      	b.n	800f76a <__swsetup_r+0x1e>
 800f79c:	0758      	lsls	r0, r3, #29
 800f79e:	d512      	bpl.n	800f7c6 <__swsetup_r+0x7a>
 800f7a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7a2:	b141      	cbz	r1, 800f7b6 <__swsetup_r+0x6a>
 800f7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7a8:	4299      	cmp	r1, r3
 800f7aa:	d002      	beq.n	800f7b2 <__swsetup_r+0x66>
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f7fb ff39 	bl	800b624 <_free_r>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	6363      	str	r3, [r4, #52]	; 0x34
 800f7b6:	89a3      	ldrh	r3, [r4, #12]
 800f7b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7bc:	81a3      	strh	r3, [r4, #12]
 800f7be:	2300      	movs	r3, #0
 800f7c0:	6063      	str	r3, [r4, #4]
 800f7c2:	6923      	ldr	r3, [r4, #16]
 800f7c4:	6023      	str	r3, [r4, #0]
 800f7c6:	89a3      	ldrh	r3, [r4, #12]
 800f7c8:	f043 0308 	orr.w	r3, r3, #8
 800f7cc:	81a3      	strh	r3, [r4, #12]
 800f7ce:	6923      	ldr	r3, [r4, #16]
 800f7d0:	b94b      	cbnz	r3, 800f7e6 <__swsetup_r+0x9a>
 800f7d2:	89a3      	ldrh	r3, [r4, #12]
 800f7d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7dc:	d003      	beq.n	800f7e6 <__swsetup_r+0x9a>
 800f7de:	4621      	mov	r1, r4
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f000 fa05 	bl	800fbf0 <__smakebuf_r>
 800f7e6:	89a0      	ldrh	r0, [r4, #12]
 800f7e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7ec:	f010 0301 	ands.w	r3, r0, #1
 800f7f0:	d00a      	beq.n	800f808 <__swsetup_r+0xbc>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	60a3      	str	r3, [r4, #8]
 800f7f6:	6963      	ldr	r3, [r4, #20]
 800f7f8:	425b      	negs	r3, r3
 800f7fa:	61a3      	str	r3, [r4, #24]
 800f7fc:	6923      	ldr	r3, [r4, #16]
 800f7fe:	b943      	cbnz	r3, 800f812 <__swsetup_r+0xc6>
 800f800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f804:	d1ba      	bne.n	800f77c <__swsetup_r+0x30>
 800f806:	bd70      	pop	{r4, r5, r6, pc}
 800f808:	0781      	lsls	r1, r0, #30
 800f80a:	bf58      	it	pl
 800f80c:	6963      	ldrpl	r3, [r4, #20]
 800f80e:	60a3      	str	r3, [r4, #8]
 800f810:	e7f4      	b.n	800f7fc <__swsetup_r+0xb0>
 800f812:	2000      	movs	r0, #0
 800f814:	e7f7      	b.n	800f806 <__swsetup_r+0xba>
 800f816:	bf00      	nop
 800f818:	20000424 	.word	0x20000424
 800f81c:	08010eec 	.word	0x08010eec
 800f820:	08010f0c 	.word	0x08010f0c
 800f824:	08010ecc 	.word	0x08010ecc

0800f828 <abort>:
 800f828:	b508      	push	{r3, lr}
 800f82a:	2006      	movs	r0, #6
 800f82c:	f000 fa50 	bl	800fcd0 <raise>
 800f830:	2001      	movs	r0, #1
 800f832:	f7f4 f9f5 	bl	8003c20 <_exit>
	...

0800f838 <__sflush_r>:
 800f838:	898a      	ldrh	r2, [r1, #12]
 800f83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f83e:	4605      	mov	r5, r0
 800f840:	0710      	lsls	r0, r2, #28
 800f842:	460c      	mov	r4, r1
 800f844:	d458      	bmi.n	800f8f8 <__sflush_r+0xc0>
 800f846:	684b      	ldr	r3, [r1, #4]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	dc05      	bgt.n	800f858 <__sflush_r+0x20>
 800f84c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f84e:	2b00      	cmp	r3, #0
 800f850:	dc02      	bgt.n	800f858 <__sflush_r+0x20>
 800f852:	2000      	movs	r0, #0
 800f854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f85a:	2e00      	cmp	r6, #0
 800f85c:	d0f9      	beq.n	800f852 <__sflush_r+0x1a>
 800f85e:	2300      	movs	r3, #0
 800f860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f864:	682f      	ldr	r7, [r5, #0]
 800f866:	602b      	str	r3, [r5, #0]
 800f868:	d032      	beq.n	800f8d0 <__sflush_r+0x98>
 800f86a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f86c:	89a3      	ldrh	r3, [r4, #12]
 800f86e:	075a      	lsls	r2, r3, #29
 800f870:	d505      	bpl.n	800f87e <__sflush_r+0x46>
 800f872:	6863      	ldr	r3, [r4, #4]
 800f874:	1ac0      	subs	r0, r0, r3
 800f876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f878:	b10b      	cbz	r3, 800f87e <__sflush_r+0x46>
 800f87a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f87c:	1ac0      	subs	r0, r0, r3
 800f87e:	2300      	movs	r3, #0
 800f880:	4602      	mov	r2, r0
 800f882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f884:	6a21      	ldr	r1, [r4, #32]
 800f886:	4628      	mov	r0, r5
 800f888:	47b0      	blx	r6
 800f88a:	1c43      	adds	r3, r0, #1
 800f88c:	89a3      	ldrh	r3, [r4, #12]
 800f88e:	d106      	bne.n	800f89e <__sflush_r+0x66>
 800f890:	6829      	ldr	r1, [r5, #0]
 800f892:	291d      	cmp	r1, #29
 800f894:	d82c      	bhi.n	800f8f0 <__sflush_r+0xb8>
 800f896:	4a2a      	ldr	r2, [pc, #168]	; (800f940 <__sflush_r+0x108>)
 800f898:	40ca      	lsrs	r2, r1
 800f89a:	07d6      	lsls	r6, r2, #31
 800f89c:	d528      	bpl.n	800f8f0 <__sflush_r+0xb8>
 800f89e:	2200      	movs	r2, #0
 800f8a0:	6062      	str	r2, [r4, #4]
 800f8a2:	04d9      	lsls	r1, r3, #19
 800f8a4:	6922      	ldr	r2, [r4, #16]
 800f8a6:	6022      	str	r2, [r4, #0]
 800f8a8:	d504      	bpl.n	800f8b4 <__sflush_r+0x7c>
 800f8aa:	1c42      	adds	r2, r0, #1
 800f8ac:	d101      	bne.n	800f8b2 <__sflush_r+0x7a>
 800f8ae:	682b      	ldr	r3, [r5, #0]
 800f8b0:	b903      	cbnz	r3, 800f8b4 <__sflush_r+0x7c>
 800f8b2:	6560      	str	r0, [r4, #84]	; 0x54
 800f8b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8b6:	602f      	str	r7, [r5, #0]
 800f8b8:	2900      	cmp	r1, #0
 800f8ba:	d0ca      	beq.n	800f852 <__sflush_r+0x1a>
 800f8bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8c0:	4299      	cmp	r1, r3
 800f8c2:	d002      	beq.n	800f8ca <__sflush_r+0x92>
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f7fb fead 	bl	800b624 <_free_r>
 800f8ca:	2000      	movs	r0, #0
 800f8cc:	6360      	str	r0, [r4, #52]	; 0x34
 800f8ce:	e7c1      	b.n	800f854 <__sflush_r+0x1c>
 800f8d0:	6a21      	ldr	r1, [r4, #32]
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	47b0      	blx	r6
 800f8d8:	1c41      	adds	r1, r0, #1
 800f8da:	d1c7      	bne.n	800f86c <__sflush_r+0x34>
 800f8dc:	682b      	ldr	r3, [r5, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d0c4      	beq.n	800f86c <__sflush_r+0x34>
 800f8e2:	2b1d      	cmp	r3, #29
 800f8e4:	d001      	beq.n	800f8ea <__sflush_r+0xb2>
 800f8e6:	2b16      	cmp	r3, #22
 800f8e8:	d101      	bne.n	800f8ee <__sflush_r+0xb6>
 800f8ea:	602f      	str	r7, [r5, #0]
 800f8ec:	e7b1      	b.n	800f852 <__sflush_r+0x1a>
 800f8ee:	89a3      	ldrh	r3, [r4, #12]
 800f8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8f4:	81a3      	strh	r3, [r4, #12]
 800f8f6:	e7ad      	b.n	800f854 <__sflush_r+0x1c>
 800f8f8:	690f      	ldr	r7, [r1, #16]
 800f8fa:	2f00      	cmp	r7, #0
 800f8fc:	d0a9      	beq.n	800f852 <__sflush_r+0x1a>
 800f8fe:	0793      	lsls	r3, r2, #30
 800f900:	680e      	ldr	r6, [r1, #0]
 800f902:	bf08      	it	eq
 800f904:	694b      	ldreq	r3, [r1, #20]
 800f906:	600f      	str	r7, [r1, #0]
 800f908:	bf18      	it	ne
 800f90a:	2300      	movne	r3, #0
 800f90c:	eba6 0807 	sub.w	r8, r6, r7
 800f910:	608b      	str	r3, [r1, #8]
 800f912:	f1b8 0f00 	cmp.w	r8, #0
 800f916:	dd9c      	ble.n	800f852 <__sflush_r+0x1a>
 800f918:	6a21      	ldr	r1, [r4, #32]
 800f91a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f91c:	4643      	mov	r3, r8
 800f91e:	463a      	mov	r2, r7
 800f920:	4628      	mov	r0, r5
 800f922:	47b0      	blx	r6
 800f924:	2800      	cmp	r0, #0
 800f926:	dc06      	bgt.n	800f936 <__sflush_r+0xfe>
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f92e:	81a3      	strh	r3, [r4, #12]
 800f930:	f04f 30ff 	mov.w	r0, #4294967295
 800f934:	e78e      	b.n	800f854 <__sflush_r+0x1c>
 800f936:	4407      	add	r7, r0
 800f938:	eba8 0800 	sub.w	r8, r8, r0
 800f93c:	e7e9      	b.n	800f912 <__sflush_r+0xda>
 800f93e:	bf00      	nop
 800f940:	20400001 	.word	0x20400001

0800f944 <_fflush_r>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	690b      	ldr	r3, [r1, #16]
 800f948:	4605      	mov	r5, r0
 800f94a:	460c      	mov	r4, r1
 800f94c:	b913      	cbnz	r3, 800f954 <_fflush_r+0x10>
 800f94e:	2500      	movs	r5, #0
 800f950:	4628      	mov	r0, r5
 800f952:	bd38      	pop	{r3, r4, r5, pc}
 800f954:	b118      	cbz	r0, 800f95e <_fflush_r+0x1a>
 800f956:	6983      	ldr	r3, [r0, #24]
 800f958:	b90b      	cbnz	r3, 800f95e <_fflush_r+0x1a>
 800f95a:	f000 f887 	bl	800fa6c <__sinit>
 800f95e:	4b14      	ldr	r3, [pc, #80]	; (800f9b0 <_fflush_r+0x6c>)
 800f960:	429c      	cmp	r4, r3
 800f962:	d11b      	bne.n	800f99c <_fflush_r+0x58>
 800f964:	686c      	ldr	r4, [r5, #4]
 800f966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d0ef      	beq.n	800f94e <_fflush_r+0xa>
 800f96e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f970:	07d0      	lsls	r0, r2, #31
 800f972:	d404      	bmi.n	800f97e <_fflush_r+0x3a>
 800f974:	0599      	lsls	r1, r3, #22
 800f976:	d402      	bmi.n	800f97e <_fflush_r+0x3a>
 800f978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f97a:	f7ff fcfa 	bl	800f372 <__retarget_lock_acquire_recursive>
 800f97e:	4628      	mov	r0, r5
 800f980:	4621      	mov	r1, r4
 800f982:	f7ff ff59 	bl	800f838 <__sflush_r>
 800f986:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f988:	07da      	lsls	r2, r3, #31
 800f98a:	4605      	mov	r5, r0
 800f98c:	d4e0      	bmi.n	800f950 <_fflush_r+0xc>
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	059b      	lsls	r3, r3, #22
 800f992:	d4dd      	bmi.n	800f950 <_fflush_r+0xc>
 800f994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f996:	f7ff fced 	bl	800f374 <__retarget_lock_release_recursive>
 800f99a:	e7d9      	b.n	800f950 <_fflush_r+0xc>
 800f99c:	4b05      	ldr	r3, [pc, #20]	; (800f9b4 <_fflush_r+0x70>)
 800f99e:	429c      	cmp	r4, r3
 800f9a0:	d101      	bne.n	800f9a6 <_fflush_r+0x62>
 800f9a2:	68ac      	ldr	r4, [r5, #8]
 800f9a4:	e7df      	b.n	800f966 <_fflush_r+0x22>
 800f9a6:	4b04      	ldr	r3, [pc, #16]	; (800f9b8 <_fflush_r+0x74>)
 800f9a8:	429c      	cmp	r4, r3
 800f9aa:	bf08      	it	eq
 800f9ac:	68ec      	ldreq	r4, [r5, #12]
 800f9ae:	e7da      	b.n	800f966 <_fflush_r+0x22>
 800f9b0:	08010eec 	.word	0x08010eec
 800f9b4:	08010f0c 	.word	0x08010f0c
 800f9b8:	08010ecc 	.word	0x08010ecc

0800f9bc <std>:
 800f9bc:	2300      	movs	r3, #0
 800f9be:	b510      	push	{r4, lr}
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	e9c0 3300 	strd	r3, r3, [r0]
 800f9c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9ca:	6083      	str	r3, [r0, #8]
 800f9cc:	8181      	strh	r1, [r0, #12]
 800f9ce:	6643      	str	r3, [r0, #100]	; 0x64
 800f9d0:	81c2      	strh	r2, [r0, #14]
 800f9d2:	6183      	str	r3, [r0, #24]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	2208      	movs	r2, #8
 800f9d8:	305c      	adds	r0, #92	; 0x5c
 800f9da:	f7fb fe1b 	bl	800b614 <memset>
 800f9de:	4b05      	ldr	r3, [pc, #20]	; (800f9f4 <std+0x38>)
 800f9e0:	6263      	str	r3, [r4, #36]	; 0x24
 800f9e2:	4b05      	ldr	r3, [pc, #20]	; (800f9f8 <std+0x3c>)
 800f9e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f9e6:	4b05      	ldr	r3, [pc, #20]	; (800f9fc <std+0x40>)
 800f9e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f9ea:	4b05      	ldr	r3, [pc, #20]	; (800fa00 <std+0x44>)
 800f9ec:	6224      	str	r4, [r4, #32]
 800f9ee:	6323      	str	r3, [r4, #48]	; 0x30
 800f9f0:	bd10      	pop	{r4, pc}
 800f9f2:	bf00      	nop
 800f9f4:	0800fd09 	.word	0x0800fd09
 800f9f8:	0800fd2b 	.word	0x0800fd2b
 800f9fc:	0800fd63 	.word	0x0800fd63
 800fa00:	0800fd87 	.word	0x0800fd87

0800fa04 <_cleanup_r>:
 800fa04:	4901      	ldr	r1, [pc, #4]	; (800fa0c <_cleanup_r+0x8>)
 800fa06:	f000 b8af 	b.w	800fb68 <_fwalk_reent>
 800fa0a:	bf00      	nop
 800fa0c:	0800f945 	.word	0x0800f945

0800fa10 <__sfmoreglue>:
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	1e4a      	subs	r2, r1, #1
 800fa14:	2568      	movs	r5, #104	; 0x68
 800fa16:	4355      	muls	r5, r2
 800fa18:	460e      	mov	r6, r1
 800fa1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa1e:	f7fb fe51 	bl	800b6c4 <_malloc_r>
 800fa22:	4604      	mov	r4, r0
 800fa24:	b140      	cbz	r0, 800fa38 <__sfmoreglue+0x28>
 800fa26:	2100      	movs	r1, #0
 800fa28:	e9c0 1600 	strd	r1, r6, [r0]
 800fa2c:	300c      	adds	r0, #12
 800fa2e:	60a0      	str	r0, [r4, #8]
 800fa30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fa34:	f7fb fdee 	bl	800b614 <memset>
 800fa38:	4620      	mov	r0, r4
 800fa3a:	bd70      	pop	{r4, r5, r6, pc}

0800fa3c <__sfp_lock_acquire>:
 800fa3c:	4801      	ldr	r0, [pc, #4]	; (800fa44 <__sfp_lock_acquire+0x8>)
 800fa3e:	f7ff bc98 	b.w	800f372 <__retarget_lock_acquire_recursive>
 800fa42:	bf00      	nop
 800fa44:	200029c4 	.word	0x200029c4

0800fa48 <__sfp_lock_release>:
 800fa48:	4801      	ldr	r0, [pc, #4]	; (800fa50 <__sfp_lock_release+0x8>)
 800fa4a:	f7ff bc93 	b.w	800f374 <__retarget_lock_release_recursive>
 800fa4e:	bf00      	nop
 800fa50:	200029c4 	.word	0x200029c4

0800fa54 <__sinit_lock_acquire>:
 800fa54:	4801      	ldr	r0, [pc, #4]	; (800fa5c <__sinit_lock_acquire+0x8>)
 800fa56:	f7ff bc8c 	b.w	800f372 <__retarget_lock_acquire_recursive>
 800fa5a:	bf00      	nop
 800fa5c:	200029bf 	.word	0x200029bf

0800fa60 <__sinit_lock_release>:
 800fa60:	4801      	ldr	r0, [pc, #4]	; (800fa68 <__sinit_lock_release+0x8>)
 800fa62:	f7ff bc87 	b.w	800f374 <__retarget_lock_release_recursive>
 800fa66:	bf00      	nop
 800fa68:	200029bf 	.word	0x200029bf

0800fa6c <__sinit>:
 800fa6c:	b510      	push	{r4, lr}
 800fa6e:	4604      	mov	r4, r0
 800fa70:	f7ff fff0 	bl	800fa54 <__sinit_lock_acquire>
 800fa74:	69a3      	ldr	r3, [r4, #24]
 800fa76:	b11b      	cbz	r3, 800fa80 <__sinit+0x14>
 800fa78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa7c:	f7ff bff0 	b.w	800fa60 <__sinit_lock_release>
 800fa80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa84:	6523      	str	r3, [r4, #80]	; 0x50
 800fa86:	4b13      	ldr	r3, [pc, #76]	; (800fad4 <__sinit+0x68>)
 800fa88:	4a13      	ldr	r2, [pc, #76]	; (800fad8 <__sinit+0x6c>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800fa8e:	42a3      	cmp	r3, r4
 800fa90:	bf04      	itt	eq
 800fa92:	2301      	moveq	r3, #1
 800fa94:	61a3      	streq	r3, [r4, #24]
 800fa96:	4620      	mov	r0, r4
 800fa98:	f000 f820 	bl	800fadc <__sfp>
 800fa9c:	6060      	str	r0, [r4, #4]
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f000 f81c 	bl	800fadc <__sfp>
 800faa4:	60a0      	str	r0, [r4, #8]
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 f818 	bl	800fadc <__sfp>
 800faac:	2200      	movs	r2, #0
 800faae:	60e0      	str	r0, [r4, #12]
 800fab0:	2104      	movs	r1, #4
 800fab2:	6860      	ldr	r0, [r4, #4]
 800fab4:	f7ff ff82 	bl	800f9bc <std>
 800fab8:	68a0      	ldr	r0, [r4, #8]
 800faba:	2201      	movs	r2, #1
 800fabc:	2109      	movs	r1, #9
 800fabe:	f7ff ff7d 	bl	800f9bc <std>
 800fac2:	68e0      	ldr	r0, [r4, #12]
 800fac4:	2202      	movs	r2, #2
 800fac6:	2112      	movs	r1, #18
 800fac8:	f7ff ff78 	bl	800f9bc <std>
 800facc:	2301      	movs	r3, #1
 800face:	61a3      	str	r3, [r4, #24]
 800fad0:	e7d2      	b.n	800fa78 <__sinit+0xc>
 800fad2:	bf00      	nop
 800fad4:	08010a78 	.word	0x08010a78
 800fad8:	0800fa05 	.word	0x0800fa05

0800fadc <__sfp>:
 800fadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fade:	4607      	mov	r7, r0
 800fae0:	f7ff ffac 	bl	800fa3c <__sfp_lock_acquire>
 800fae4:	4b1e      	ldr	r3, [pc, #120]	; (800fb60 <__sfp+0x84>)
 800fae6:	681e      	ldr	r6, [r3, #0]
 800fae8:	69b3      	ldr	r3, [r6, #24]
 800faea:	b913      	cbnz	r3, 800faf2 <__sfp+0x16>
 800faec:	4630      	mov	r0, r6
 800faee:	f7ff ffbd 	bl	800fa6c <__sinit>
 800faf2:	3648      	adds	r6, #72	; 0x48
 800faf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800faf8:	3b01      	subs	r3, #1
 800fafa:	d503      	bpl.n	800fb04 <__sfp+0x28>
 800fafc:	6833      	ldr	r3, [r6, #0]
 800fafe:	b30b      	cbz	r3, 800fb44 <__sfp+0x68>
 800fb00:	6836      	ldr	r6, [r6, #0]
 800fb02:	e7f7      	b.n	800faf4 <__sfp+0x18>
 800fb04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb08:	b9d5      	cbnz	r5, 800fb40 <__sfp+0x64>
 800fb0a:	4b16      	ldr	r3, [pc, #88]	; (800fb64 <__sfp+0x88>)
 800fb0c:	60e3      	str	r3, [r4, #12]
 800fb0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb12:	6665      	str	r5, [r4, #100]	; 0x64
 800fb14:	f7ff fc2c 	bl	800f370 <__retarget_lock_init_recursive>
 800fb18:	f7ff ff96 	bl	800fa48 <__sfp_lock_release>
 800fb1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb24:	6025      	str	r5, [r4, #0]
 800fb26:	61a5      	str	r5, [r4, #24]
 800fb28:	2208      	movs	r2, #8
 800fb2a:	4629      	mov	r1, r5
 800fb2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb30:	f7fb fd70 	bl	800b614 <memset>
 800fb34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb40:	3468      	adds	r4, #104	; 0x68
 800fb42:	e7d9      	b.n	800faf8 <__sfp+0x1c>
 800fb44:	2104      	movs	r1, #4
 800fb46:	4638      	mov	r0, r7
 800fb48:	f7ff ff62 	bl	800fa10 <__sfmoreglue>
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	6030      	str	r0, [r6, #0]
 800fb50:	2800      	cmp	r0, #0
 800fb52:	d1d5      	bne.n	800fb00 <__sfp+0x24>
 800fb54:	f7ff ff78 	bl	800fa48 <__sfp_lock_release>
 800fb58:	230c      	movs	r3, #12
 800fb5a:	603b      	str	r3, [r7, #0]
 800fb5c:	e7ee      	b.n	800fb3c <__sfp+0x60>
 800fb5e:	bf00      	nop
 800fb60:	08010a78 	.word	0x08010a78
 800fb64:	ffff0001 	.word	0xffff0001

0800fb68 <_fwalk_reent>:
 800fb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb6c:	4606      	mov	r6, r0
 800fb6e:	4688      	mov	r8, r1
 800fb70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb74:	2700      	movs	r7, #0
 800fb76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb7a:	f1b9 0901 	subs.w	r9, r9, #1
 800fb7e:	d505      	bpl.n	800fb8c <_fwalk_reent+0x24>
 800fb80:	6824      	ldr	r4, [r4, #0]
 800fb82:	2c00      	cmp	r4, #0
 800fb84:	d1f7      	bne.n	800fb76 <_fwalk_reent+0xe>
 800fb86:	4638      	mov	r0, r7
 800fb88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb8c:	89ab      	ldrh	r3, [r5, #12]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d907      	bls.n	800fba2 <_fwalk_reent+0x3a>
 800fb92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb96:	3301      	adds	r3, #1
 800fb98:	d003      	beq.n	800fba2 <_fwalk_reent+0x3a>
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	4630      	mov	r0, r6
 800fb9e:	47c0      	blx	r8
 800fba0:	4307      	orrs	r7, r0
 800fba2:	3568      	adds	r5, #104	; 0x68
 800fba4:	e7e9      	b.n	800fb7a <_fwalk_reent+0x12>

0800fba6 <__swhatbuf_r>:
 800fba6:	b570      	push	{r4, r5, r6, lr}
 800fba8:	460e      	mov	r6, r1
 800fbaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbae:	2900      	cmp	r1, #0
 800fbb0:	b096      	sub	sp, #88	; 0x58
 800fbb2:	4614      	mov	r4, r2
 800fbb4:	461d      	mov	r5, r3
 800fbb6:	da07      	bge.n	800fbc8 <__swhatbuf_r+0x22>
 800fbb8:	2300      	movs	r3, #0
 800fbba:	602b      	str	r3, [r5, #0]
 800fbbc:	89b3      	ldrh	r3, [r6, #12]
 800fbbe:	061a      	lsls	r2, r3, #24
 800fbc0:	d410      	bmi.n	800fbe4 <__swhatbuf_r+0x3e>
 800fbc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbc6:	e00e      	b.n	800fbe6 <__swhatbuf_r+0x40>
 800fbc8:	466a      	mov	r2, sp
 800fbca:	f000 f903 	bl	800fdd4 <_fstat_r>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	dbf2      	blt.n	800fbb8 <__swhatbuf_r+0x12>
 800fbd2:	9a01      	ldr	r2, [sp, #4]
 800fbd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fbd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fbdc:	425a      	negs	r2, r3
 800fbde:	415a      	adcs	r2, r3
 800fbe0:	602a      	str	r2, [r5, #0]
 800fbe2:	e7ee      	b.n	800fbc2 <__swhatbuf_r+0x1c>
 800fbe4:	2340      	movs	r3, #64	; 0x40
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	b016      	add	sp, #88	; 0x58
 800fbec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fbf0 <__smakebuf_r>:
 800fbf0:	898b      	ldrh	r3, [r1, #12]
 800fbf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbf4:	079d      	lsls	r5, r3, #30
 800fbf6:	4606      	mov	r6, r0
 800fbf8:	460c      	mov	r4, r1
 800fbfa:	d507      	bpl.n	800fc0c <__smakebuf_r+0x1c>
 800fbfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc00:	6023      	str	r3, [r4, #0]
 800fc02:	6123      	str	r3, [r4, #16]
 800fc04:	2301      	movs	r3, #1
 800fc06:	6163      	str	r3, [r4, #20]
 800fc08:	b002      	add	sp, #8
 800fc0a:	bd70      	pop	{r4, r5, r6, pc}
 800fc0c:	ab01      	add	r3, sp, #4
 800fc0e:	466a      	mov	r2, sp
 800fc10:	f7ff ffc9 	bl	800fba6 <__swhatbuf_r>
 800fc14:	9900      	ldr	r1, [sp, #0]
 800fc16:	4605      	mov	r5, r0
 800fc18:	4630      	mov	r0, r6
 800fc1a:	f7fb fd53 	bl	800b6c4 <_malloc_r>
 800fc1e:	b948      	cbnz	r0, 800fc34 <__smakebuf_r+0x44>
 800fc20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc24:	059a      	lsls	r2, r3, #22
 800fc26:	d4ef      	bmi.n	800fc08 <__smakebuf_r+0x18>
 800fc28:	f023 0303 	bic.w	r3, r3, #3
 800fc2c:	f043 0302 	orr.w	r3, r3, #2
 800fc30:	81a3      	strh	r3, [r4, #12]
 800fc32:	e7e3      	b.n	800fbfc <__smakebuf_r+0xc>
 800fc34:	4b0d      	ldr	r3, [pc, #52]	; (800fc6c <__smakebuf_r+0x7c>)
 800fc36:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc38:	89a3      	ldrh	r3, [r4, #12]
 800fc3a:	6020      	str	r0, [r4, #0]
 800fc3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc40:	81a3      	strh	r3, [r4, #12]
 800fc42:	9b00      	ldr	r3, [sp, #0]
 800fc44:	6163      	str	r3, [r4, #20]
 800fc46:	9b01      	ldr	r3, [sp, #4]
 800fc48:	6120      	str	r0, [r4, #16]
 800fc4a:	b15b      	cbz	r3, 800fc64 <__smakebuf_r+0x74>
 800fc4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc50:	4630      	mov	r0, r6
 800fc52:	f000 f8d1 	bl	800fdf8 <_isatty_r>
 800fc56:	b128      	cbz	r0, 800fc64 <__smakebuf_r+0x74>
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	f023 0303 	bic.w	r3, r3, #3
 800fc5e:	f043 0301 	orr.w	r3, r3, #1
 800fc62:	81a3      	strh	r3, [r4, #12]
 800fc64:	89a0      	ldrh	r0, [r4, #12]
 800fc66:	4305      	orrs	r5, r0
 800fc68:	81a5      	strh	r5, [r4, #12]
 800fc6a:	e7cd      	b.n	800fc08 <__smakebuf_r+0x18>
 800fc6c:	0800fa05 	.word	0x0800fa05

0800fc70 <_malloc_usable_size_r>:
 800fc70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc74:	1f18      	subs	r0, r3, #4
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	bfbc      	itt	lt
 800fc7a:	580b      	ldrlt	r3, [r1, r0]
 800fc7c:	18c0      	addlt	r0, r0, r3
 800fc7e:	4770      	bx	lr

0800fc80 <_raise_r>:
 800fc80:	291f      	cmp	r1, #31
 800fc82:	b538      	push	{r3, r4, r5, lr}
 800fc84:	4604      	mov	r4, r0
 800fc86:	460d      	mov	r5, r1
 800fc88:	d904      	bls.n	800fc94 <_raise_r+0x14>
 800fc8a:	2316      	movs	r3, #22
 800fc8c:	6003      	str	r3, [r0, #0]
 800fc8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc92:	bd38      	pop	{r3, r4, r5, pc}
 800fc94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc96:	b112      	cbz	r2, 800fc9e <_raise_r+0x1e>
 800fc98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc9c:	b94b      	cbnz	r3, 800fcb2 <_raise_r+0x32>
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f000 f830 	bl	800fd04 <_getpid_r>
 800fca4:	462a      	mov	r2, r5
 800fca6:	4601      	mov	r1, r0
 800fca8:	4620      	mov	r0, r4
 800fcaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcae:	f000 b817 	b.w	800fce0 <_kill_r>
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d00a      	beq.n	800fccc <_raise_r+0x4c>
 800fcb6:	1c59      	adds	r1, r3, #1
 800fcb8:	d103      	bne.n	800fcc2 <_raise_r+0x42>
 800fcba:	2316      	movs	r3, #22
 800fcbc:	6003      	str	r3, [r0, #0]
 800fcbe:	2001      	movs	r0, #1
 800fcc0:	e7e7      	b.n	800fc92 <_raise_r+0x12>
 800fcc2:	2400      	movs	r4, #0
 800fcc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fcc8:	4628      	mov	r0, r5
 800fcca:	4798      	blx	r3
 800fccc:	2000      	movs	r0, #0
 800fcce:	e7e0      	b.n	800fc92 <_raise_r+0x12>

0800fcd0 <raise>:
 800fcd0:	4b02      	ldr	r3, [pc, #8]	; (800fcdc <raise+0xc>)
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	6818      	ldr	r0, [r3, #0]
 800fcd6:	f7ff bfd3 	b.w	800fc80 <_raise_r>
 800fcda:	bf00      	nop
 800fcdc:	20000424 	.word	0x20000424

0800fce0 <_kill_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d07      	ldr	r5, [pc, #28]	; (800fd00 <_kill_r+0x20>)
 800fce4:	2300      	movs	r3, #0
 800fce6:	4604      	mov	r4, r0
 800fce8:	4608      	mov	r0, r1
 800fcea:	4611      	mov	r1, r2
 800fcec:	602b      	str	r3, [r5, #0]
 800fcee:	f7f3 ff87 	bl	8003c00 <_kill>
 800fcf2:	1c43      	adds	r3, r0, #1
 800fcf4:	d102      	bne.n	800fcfc <_kill_r+0x1c>
 800fcf6:	682b      	ldr	r3, [r5, #0]
 800fcf8:	b103      	cbz	r3, 800fcfc <_kill_r+0x1c>
 800fcfa:	6023      	str	r3, [r4, #0]
 800fcfc:	bd38      	pop	{r3, r4, r5, pc}
 800fcfe:	bf00      	nop
 800fd00:	200029b8 	.word	0x200029b8

0800fd04 <_getpid_r>:
 800fd04:	f7f3 bf74 	b.w	8003bf0 <_getpid>

0800fd08 <__sread>:
 800fd08:	b510      	push	{r4, lr}
 800fd0a:	460c      	mov	r4, r1
 800fd0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd10:	f000 f894 	bl	800fe3c <_read_r>
 800fd14:	2800      	cmp	r0, #0
 800fd16:	bfab      	itete	ge
 800fd18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fd1a:	89a3      	ldrhlt	r3, [r4, #12]
 800fd1c:	181b      	addge	r3, r3, r0
 800fd1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fd22:	bfac      	ite	ge
 800fd24:	6563      	strge	r3, [r4, #84]	; 0x54
 800fd26:	81a3      	strhlt	r3, [r4, #12]
 800fd28:	bd10      	pop	{r4, pc}

0800fd2a <__swrite>:
 800fd2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2e:	461f      	mov	r7, r3
 800fd30:	898b      	ldrh	r3, [r1, #12]
 800fd32:	05db      	lsls	r3, r3, #23
 800fd34:	4605      	mov	r5, r0
 800fd36:	460c      	mov	r4, r1
 800fd38:	4616      	mov	r6, r2
 800fd3a:	d505      	bpl.n	800fd48 <__swrite+0x1e>
 800fd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd40:	2302      	movs	r3, #2
 800fd42:	2200      	movs	r2, #0
 800fd44:	f000 f868 	bl	800fe18 <_lseek_r>
 800fd48:	89a3      	ldrh	r3, [r4, #12]
 800fd4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd52:	81a3      	strh	r3, [r4, #12]
 800fd54:	4632      	mov	r2, r6
 800fd56:	463b      	mov	r3, r7
 800fd58:	4628      	mov	r0, r5
 800fd5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd5e:	f000 b817 	b.w	800fd90 <_write_r>

0800fd62 <__sseek>:
 800fd62:	b510      	push	{r4, lr}
 800fd64:	460c      	mov	r4, r1
 800fd66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd6a:	f000 f855 	bl	800fe18 <_lseek_r>
 800fd6e:	1c43      	adds	r3, r0, #1
 800fd70:	89a3      	ldrh	r3, [r4, #12]
 800fd72:	bf15      	itete	ne
 800fd74:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd7e:	81a3      	strheq	r3, [r4, #12]
 800fd80:	bf18      	it	ne
 800fd82:	81a3      	strhne	r3, [r4, #12]
 800fd84:	bd10      	pop	{r4, pc}

0800fd86 <__sclose>:
 800fd86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd8a:	f000 b813 	b.w	800fdb4 <_close_r>
	...

0800fd90 <_write_r>:
 800fd90:	b538      	push	{r3, r4, r5, lr}
 800fd92:	4d07      	ldr	r5, [pc, #28]	; (800fdb0 <_write_r+0x20>)
 800fd94:	4604      	mov	r4, r0
 800fd96:	4608      	mov	r0, r1
 800fd98:	4611      	mov	r1, r2
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	602a      	str	r2, [r5, #0]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	f7f3 ff65 	bl	8003c6e <_write>
 800fda4:	1c43      	adds	r3, r0, #1
 800fda6:	d102      	bne.n	800fdae <_write_r+0x1e>
 800fda8:	682b      	ldr	r3, [r5, #0]
 800fdaa:	b103      	cbz	r3, 800fdae <_write_r+0x1e>
 800fdac:	6023      	str	r3, [r4, #0]
 800fdae:	bd38      	pop	{r3, r4, r5, pc}
 800fdb0:	200029b8 	.word	0x200029b8

0800fdb4 <_close_r>:
 800fdb4:	b538      	push	{r3, r4, r5, lr}
 800fdb6:	4d06      	ldr	r5, [pc, #24]	; (800fdd0 <_close_r+0x1c>)
 800fdb8:	2300      	movs	r3, #0
 800fdba:	4604      	mov	r4, r0
 800fdbc:	4608      	mov	r0, r1
 800fdbe:	602b      	str	r3, [r5, #0]
 800fdc0:	f7f3 ff71 	bl	8003ca6 <_close>
 800fdc4:	1c43      	adds	r3, r0, #1
 800fdc6:	d102      	bne.n	800fdce <_close_r+0x1a>
 800fdc8:	682b      	ldr	r3, [r5, #0]
 800fdca:	b103      	cbz	r3, 800fdce <_close_r+0x1a>
 800fdcc:	6023      	str	r3, [r4, #0]
 800fdce:	bd38      	pop	{r3, r4, r5, pc}
 800fdd0:	200029b8 	.word	0x200029b8

0800fdd4 <_fstat_r>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	4d07      	ldr	r5, [pc, #28]	; (800fdf4 <_fstat_r+0x20>)
 800fdd8:	2300      	movs	r3, #0
 800fdda:	4604      	mov	r4, r0
 800fddc:	4608      	mov	r0, r1
 800fdde:	4611      	mov	r1, r2
 800fde0:	602b      	str	r3, [r5, #0]
 800fde2:	f7f3 ff6c 	bl	8003cbe <_fstat>
 800fde6:	1c43      	adds	r3, r0, #1
 800fde8:	d102      	bne.n	800fdf0 <_fstat_r+0x1c>
 800fdea:	682b      	ldr	r3, [r5, #0]
 800fdec:	b103      	cbz	r3, 800fdf0 <_fstat_r+0x1c>
 800fdee:	6023      	str	r3, [r4, #0]
 800fdf0:	bd38      	pop	{r3, r4, r5, pc}
 800fdf2:	bf00      	nop
 800fdf4:	200029b8 	.word	0x200029b8

0800fdf8 <_isatty_r>:
 800fdf8:	b538      	push	{r3, r4, r5, lr}
 800fdfa:	4d06      	ldr	r5, [pc, #24]	; (800fe14 <_isatty_r+0x1c>)
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4604      	mov	r4, r0
 800fe00:	4608      	mov	r0, r1
 800fe02:	602b      	str	r3, [r5, #0]
 800fe04:	f7f3 ff6b 	bl	8003cde <_isatty>
 800fe08:	1c43      	adds	r3, r0, #1
 800fe0a:	d102      	bne.n	800fe12 <_isatty_r+0x1a>
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	b103      	cbz	r3, 800fe12 <_isatty_r+0x1a>
 800fe10:	6023      	str	r3, [r4, #0]
 800fe12:	bd38      	pop	{r3, r4, r5, pc}
 800fe14:	200029b8 	.word	0x200029b8

0800fe18 <_lseek_r>:
 800fe18:	b538      	push	{r3, r4, r5, lr}
 800fe1a:	4d07      	ldr	r5, [pc, #28]	; (800fe38 <_lseek_r+0x20>)
 800fe1c:	4604      	mov	r4, r0
 800fe1e:	4608      	mov	r0, r1
 800fe20:	4611      	mov	r1, r2
 800fe22:	2200      	movs	r2, #0
 800fe24:	602a      	str	r2, [r5, #0]
 800fe26:	461a      	mov	r2, r3
 800fe28:	f7f3 ff64 	bl	8003cf4 <_lseek>
 800fe2c:	1c43      	adds	r3, r0, #1
 800fe2e:	d102      	bne.n	800fe36 <_lseek_r+0x1e>
 800fe30:	682b      	ldr	r3, [r5, #0]
 800fe32:	b103      	cbz	r3, 800fe36 <_lseek_r+0x1e>
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	bd38      	pop	{r3, r4, r5, pc}
 800fe38:	200029b8 	.word	0x200029b8

0800fe3c <_read_r>:
 800fe3c:	b538      	push	{r3, r4, r5, lr}
 800fe3e:	4d07      	ldr	r5, [pc, #28]	; (800fe5c <_read_r+0x20>)
 800fe40:	4604      	mov	r4, r0
 800fe42:	4608      	mov	r0, r1
 800fe44:	4611      	mov	r1, r2
 800fe46:	2200      	movs	r2, #0
 800fe48:	602a      	str	r2, [r5, #0]
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	f7f3 fef2 	bl	8003c34 <_read>
 800fe50:	1c43      	adds	r3, r0, #1
 800fe52:	d102      	bne.n	800fe5a <_read_r+0x1e>
 800fe54:	682b      	ldr	r3, [r5, #0]
 800fe56:	b103      	cbz	r3, 800fe5a <_read_r+0x1e>
 800fe58:	6023      	str	r3, [r4, #0]
 800fe5a:	bd38      	pop	{r3, r4, r5, pc}
 800fe5c:	200029b8 	.word	0x200029b8

0800fe60 <atan>:
 800fe60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	ec55 4b10 	vmov	r4, r5, d0
 800fe68:	4bc3      	ldr	r3, [pc, #780]	; (8010178 <atan+0x318>)
 800fe6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fe6e:	429e      	cmp	r6, r3
 800fe70:	46ab      	mov	fp, r5
 800fe72:	dd18      	ble.n	800fea6 <atan+0x46>
 800fe74:	4bc1      	ldr	r3, [pc, #772]	; (801017c <atan+0x31c>)
 800fe76:	429e      	cmp	r6, r3
 800fe78:	dc01      	bgt.n	800fe7e <atan+0x1e>
 800fe7a:	d109      	bne.n	800fe90 <atan+0x30>
 800fe7c:	b144      	cbz	r4, 800fe90 <atan+0x30>
 800fe7e:	4622      	mov	r2, r4
 800fe80:	462b      	mov	r3, r5
 800fe82:	4620      	mov	r0, r4
 800fe84:	4629      	mov	r1, r5
 800fe86:	f7f0 fa21 	bl	80002cc <__adddf3>
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	e006      	b.n	800fe9e <atan+0x3e>
 800fe90:	f1bb 0f00 	cmp.w	fp, #0
 800fe94:	f300 8131 	bgt.w	80100fa <atan+0x29a>
 800fe98:	a59b      	add	r5, pc, #620	; (adr r5, 8010108 <atan+0x2a8>)
 800fe9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe9e:	ec45 4b10 	vmov	d0, r4, r5
 800fea2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea6:	4bb6      	ldr	r3, [pc, #728]	; (8010180 <atan+0x320>)
 800fea8:	429e      	cmp	r6, r3
 800feaa:	dc14      	bgt.n	800fed6 <atan+0x76>
 800feac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800feb0:	429e      	cmp	r6, r3
 800feb2:	dc0d      	bgt.n	800fed0 <atan+0x70>
 800feb4:	a396      	add	r3, pc, #600	; (adr r3, 8010110 <atan+0x2b0>)
 800feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feba:	ee10 0a10 	vmov	r0, s0
 800febe:	4629      	mov	r1, r5
 800fec0:	f7f0 fa04 	bl	80002cc <__adddf3>
 800fec4:	4baf      	ldr	r3, [pc, #700]	; (8010184 <atan+0x324>)
 800fec6:	2200      	movs	r2, #0
 800fec8:	f7f0 fe46 	bl	8000b58 <__aeabi_dcmpgt>
 800fecc:	2800      	cmp	r0, #0
 800fece:	d1e6      	bne.n	800fe9e <atan+0x3e>
 800fed0:	f04f 3aff 	mov.w	sl, #4294967295
 800fed4:	e02b      	b.n	800ff2e <atan+0xce>
 800fed6:	f000 f963 	bl	80101a0 <fabs>
 800feda:	4bab      	ldr	r3, [pc, #684]	; (8010188 <atan+0x328>)
 800fedc:	429e      	cmp	r6, r3
 800fede:	ec55 4b10 	vmov	r4, r5, d0
 800fee2:	f300 80bf 	bgt.w	8010064 <atan+0x204>
 800fee6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800feea:	429e      	cmp	r6, r3
 800feec:	f300 80a0 	bgt.w	8010030 <atan+0x1d0>
 800fef0:	ee10 2a10 	vmov	r2, s0
 800fef4:	ee10 0a10 	vmov	r0, s0
 800fef8:	462b      	mov	r3, r5
 800fefa:	4629      	mov	r1, r5
 800fefc:	f7f0 f9e6 	bl	80002cc <__adddf3>
 800ff00:	4ba0      	ldr	r3, [pc, #640]	; (8010184 <atan+0x324>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	f7f0 f9e0 	bl	80002c8 <__aeabi_dsub>
 800ff08:	2200      	movs	r2, #0
 800ff0a:	4606      	mov	r6, r0
 800ff0c:	460f      	mov	r7, r1
 800ff0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff12:	4620      	mov	r0, r4
 800ff14:	4629      	mov	r1, r5
 800ff16:	f7f0 f9d9 	bl	80002cc <__adddf3>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	4630      	mov	r0, r6
 800ff20:	4639      	mov	r1, r7
 800ff22:	f7f0 fcb3 	bl	800088c <__aeabi_ddiv>
 800ff26:	f04f 0a00 	mov.w	sl, #0
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	460d      	mov	r5, r1
 800ff2e:	4622      	mov	r2, r4
 800ff30:	462b      	mov	r3, r5
 800ff32:	4620      	mov	r0, r4
 800ff34:	4629      	mov	r1, r5
 800ff36:	f7f0 fb7f 	bl	8000638 <__aeabi_dmul>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	4680      	mov	r8, r0
 800ff40:	4689      	mov	r9, r1
 800ff42:	f7f0 fb79 	bl	8000638 <__aeabi_dmul>
 800ff46:	a374      	add	r3, pc, #464	; (adr r3, 8010118 <atan+0x2b8>)
 800ff48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4c:	4606      	mov	r6, r0
 800ff4e:	460f      	mov	r7, r1
 800ff50:	f7f0 fb72 	bl	8000638 <__aeabi_dmul>
 800ff54:	a372      	add	r3, pc, #456	; (adr r3, 8010120 <atan+0x2c0>)
 800ff56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5a:	f7f0 f9b7 	bl	80002cc <__adddf3>
 800ff5e:	4632      	mov	r2, r6
 800ff60:	463b      	mov	r3, r7
 800ff62:	f7f0 fb69 	bl	8000638 <__aeabi_dmul>
 800ff66:	a370      	add	r3, pc, #448	; (adr r3, 8010128 <atan+0x2c8>)
 800ff68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6c:	f7f0 f9ae 	bl	80002cc <__adddf3>
 800ff70:	4632      	mov	r2, r6
 800ff72:	463b      	mov	r3, r7
 800ff74:	f7f0 fb60 	bl	8000638 <__aeabi_dmul>
 800ff78:	a36d      	add	r3, pc, #436	; (adr r3, 8010130 <atan+0x2d0>)
 800ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7e:	f7f0 f9a5 	bl	80002cc <__adddf3>
 800ff82:	4632      	mov	r2, r6
 800ff84:	463b      	mov	r3, r7
 800ff86:	f7f0 fb57 	bl	8000638 <__aeabi_dmul>
 800ff8a:	a36b      	add	r3, pc, #428	; (adr r3, 8010138 <atan+0x2d8>)
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	f7f0 f99c 	bl	80002cc <__adddf3>
 800ff94:	4632      	mov	r2, r6
 800ff96:	463b      	mov	r3, r7
 800ff98:	f7f0 fb4e 	bl	8000638 <__aeabi_dmul>
 800ff9c:	a368      	add	r3, pc, #416	; (adr r3, 8010140 <atan+0x2e0>)
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	f7f0 f993 	bl	80002cc <__adddf3>
 800ffa6:	4642      	mov	r2, r8
 800ffa8:	464b      	mov	r3, r9
 800ffaa:	f7f0 fb45 	bl	8000638 <__aeabi_dmul>
 800ffae:	a366      	add	r3, pc, #408	; (adr r3, 8010148 <atan+0x2e8>)
 800ffb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb4:	4680      	mov	r8, r0
 800ffb6:	4689      	mov	r9, r1
 800ffb8:	4630      	mov	r0, r6
 800ffba:	4639      	mov	r1, r7
 800ffbc:	f7f0 fb3c 	bl	8000638 <__aeabi_dmul>
 800ffc0:	a363      	add	r3, pc, #396	; (adr r3, 8010150 <atan+0x2f0>)
 800ffc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc6:	f7f0 f97f 	bl	80002c8 <__aeabi_dsub>
 800ffca:	4632      	mov	r2, r6
 800ffcc:	463b      	mov	r3, r7
 800ffce:	f7f0 fb33 	bl	8000638 <__aeabi_dmul>
 800ffd2:	a361      	add	r3, pc, #388	; (adr r3, 8010158 <atan+0x2f8>)
 800ffd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd8:	f7f0 f976 	bl	80002c8 <__aeabi_dsub>
 800ffdc:	4632      	mov	r2, r6
 800ffde:	463b      	mov	r3, r7
 800ffe0:	f7f0 fb2a 	bl	8000638 <__aeabi_dmul>
 800ffe4:	a35e      	add	r3, pc, #376	; (adr r3, 8010160 <atan+0x300>)
 800ffe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffea:	f7f0 f96d 	bl	80002c8 <__aeabi_dsub>
 800ffee:	4632      	mov	r2, r6
 800fff0:	463b      	mov	r3, r7
 800fff2:	f7f0 fb21 	bl	8000638 <__aeabi_dmul>
 800fff6:	a35c      	add	r3, pc, #368	; (adr r3, 8010168 <atan+0x308>)
 800fff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffc:	f7f0 f964 	bl	80002c8 <__aeabi_dsub>
 8010000:	4632      	mov	r2, r6
 8010002:	463b      	mov	r3, r7
 8010004:	f7f0 fb18 	bl	8000638 <__aeabi_dmul>
 8010008:	4602      	mov	r2, r0
 801000a:	460b      	mov	r3, r1
 801000c:	4640      	mov	r0, r8
 801000e:	4649      	mov	r1, r9
 8010010:	f7f0 f95c 	bl	80002cc <__adddf3>
 8010014:	4622      	mov	r2, r4
 8010016:	462b      	mov	r3, r5
 8010018:	f7f0 fb0e 	bl	8000638 <__aeabi_dmul>
 801001c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010020:	4602      	mov	r2, r0
 8010022:	460b      	mov	r3, r1
 8010024:	d14b      	bne.n	80100be <atan+0x25e>
 8010026:	4620      	mov	r0, r4
 8010028:	4629      	mov	r1, r5
 801002a:	f7f0 f94d 	bl	80002c8 <__aeabi_dsub>
 801002e:	e72c      	b.n	800fe8a <atan+0x2a>
 8010030:	ee10 0a10 	vmov	r0, s0
 8010034:	4b53      	ldr	r3, [pc, #332]	; (8010184 <atan+0x324>)
 8010036:	2200      	movs	r2, #0
 8010038:	4629      	mov	r1, r5
 801003a:	f7f0 f945 	bl	80002c8 <__aeabi_dsub>
 801003e:	4b51      	ldr	r3, [pc, #324]	; (8010184 <atan+0x324>)
 8010040:	4606      	mov	r6, r0
 8010042:	460f      	mov	r7, r1
 8010044:	2200      	movs	r2, #0
 8010046:	4620      	mov	r0, r4
 8010048:	4629      	mov	r1, r5
 801004a:	f7f0 f93f 	bl	80002cc <__adddf3>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	4630      	mov	r0, r6
 8010054:	4639      	mov	r1, r7
 8010056:	f7f0 fc19 	bl	800088c <__aeabi_ddiv>
 801005a:	f04f 0a01 	mov.w	sl, #1
 801005e:	4604      	mov	r4, r0
 8010060:	460d      	mov	r5, r1
 8010062:	e764      	b.n	800ff2e <atan+0xce>
 8010064:	4b49      	ldr	r3, [pc, #292]	; (801018c <atan+0x32c>)
 8010066:	429e      	cmp	r6, r3
 8010068:	da1d      	bge.n	80100a6 <atan+0x246>
 801006a:	ee10 0a10 	vmov	r0, s0
 801006e:	4b48      	ldr	r3, [pc, #288]	; (8010190 <atan+0x330>)
 8010070:	2200      	movs	r2, #0
 8010072:	4629      	mov	r1, r5
 8010074:	f7f0 f928 	bl	80002c8 <__aeabi_dsub>
 8010078:	4b45      	ldr	r3, [pc, #276]	; (8010190 <atan+0x330>)
 801007a:	4606      	mov	r6, r0
 801007c:	460f      	mov	r7, r1
 801007e:	2200      	movs	r2, #0
 8010080:	4620      	mov	r0, r4
 8010082:	4629      	mov	r1, r5
 8010084:	f7f0 fad8 	bl	8000638 <__aeabi_dmul>
 8010088:	4b3e      	ldr	r3, [pc, #248]	; (8010184 <atan+0x324>)
 801008a:	2200      	movs	r2, #0
 801008c:	f7f0 f91e 	bl	80002cc <__adddf3>
 8010090:	4602      	mov	r2, r0
 8010092:	460b      	mov	r3, r1
 8010094:	4630      	mov	r0, r6
 8010096:	4639      	mov	r1, r7
 8010098:	f7f0 fbf8 	bl	800088c <__aeabi_ddiv>
 801009c:	f04f 0a02 	mov.w	sl, #2
 80100a0:	4604      	mov	r4, r0
 80100a2:	460d      	mov	r5, r1
 80100a4:	e743      	b.n	800ff2e <atan+0xce>
 80100a6:	462b      	mov	r3, r5
 80100a8:	ee10 2a10 	vmov	r2, s0
 80100ac:	4939      	ldr	r1, [pc, #228]	; (8010194 <atan+0x334>)
 80100ae:	2000      	movs	r0, #0
 80100b0:	f7f0 fbec 	bl	800088c <__aeabi_ddiv>
 80100b4:	f04f 0a03 	mov.w	sl, #3
 80100b8:	4604      	mov	r4, r0
 80100ba:	460d      	mov	r5, r1
 80100bc:	e737      	b.n	800ff2e <atan+0xce>
 80100be:	4b36      	ldr	r3, [pc, #216]	; (8010198 <atan+0x338>)
 80100c0:	4e36      	ldr	r6, [pc, #216]	; (801019c <atan+0x33c>)
 80100c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80100c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80100ca:	e9da 2300 	ldrd	r2, r3, [sl]
 80100ce:	f7f0 f8fb 	bl	80002c8 <__aeabi_dsub>
 80100d2:	4622      	mov	r2, r4
 80100d4:	462b      	mov	r3, r5
 80100d6:	f7f0 f8f7 	bl	80002c8 <__aeabi_dsub>
 80100da:	4602      	mov	r2, r0
 80100dc:	460b      	mov	r3, r1
 80100de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80100e2:	f7f0 f8f1 	bl	80002c8 <__aeabi_dsub>
 80100e6:	f1bb 0f00 	cmp.w	fp, #0
 80100ea:	4604      	mov	r4, r0
 80100ec:	460d      	mov	r5, r1
 80100ee:	f6bf aed6 	bge.w	800fe9e <atan+0x3e>
 80100f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100f6:	461d      	mov	r5, r3
 80100f8:	e6d1      	b.n	800fe9e <atan+0x3e>
 80100fa:	a51d      	add	r5, pc, #116	; (adr r5, 8010170 <atan+0x310>)
 80100fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010100:	e6cd      	b.n	800fe9e <atan+0x3e>
 8010102:	bf00      	nop
 8010104:	f3af 8000 	nop.w
 8010108:	54442d18 	.word	0x54442d18
 801010c:	bff921fb 	.word	0xbff921fb
 8010110:	8800759c 	.word	0x8800759c
 8010114:	7e37e43c 	.word	0x7e37e43c
 8010118:	e322da11 	.word	0xe322da11
 801011c:	3f90ad3a 	.word	0x3f90ad3a
 8010120:	24760deb 	.word	0x24760deb
 8010124:	3fa97b4b 	.word	0x3fa97b4b
 8010128:	a0d03d51 	.word	0xa0d03d51
 801012c:	3fb10d66 	.word	0x3fb10d66
 8010130:	c54c206e 	.word	0xc54c206e
 8010134:	3fb745cd 	.word	0x3fb745cd
 8010138:	920083ff 	.word	0x920083ff
 801013c:	3fc24924 	.word	0x3fc24924
 8010140:	5555550d 	.word	0x5555550d
 8010144:	3fd55555 	.word	0x3fd55555
 8010148:	2c6a6c2f 	.word	0x2c6a6c2f
 801014c:	bfa2b444 	.word	0xbfa2b444
 8010150:	52defd9a 	.word	0x52defd9a
 8010154:	3fadde2d 	.word	0x3fadde2d
 8010158:	af749a6d 	.word	0xaf749a6d
 801015c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010160:	fe231671 	.word	0xfe231671
 8010164:	3fbc71c6 	.word	0x3fbc71c6
 8010168:	9998ebc4 	.word	0x9998ebc4
 801016c:	3fc99999 	.word	0x3fc99999
 8010170:	54442d18 	.word	0x54442d18
 8010174:	3ff921fb 	.word	0x3ff921fb
 8010178:	440fffff 	.word	0x440fffff
 801017c:	7ff00000 	.word	0x7ff00000
 8010180:	3fdbffff 	.word	0x3fdbffff
 8010184:	3ff00000 	.word	0x3ff00000
 8010188:	3ff2ffff 	.word	0x3ff2ffff
 801018c:	40038000 	.word	0x40038000
 8010190:	3ff80000 	.word	0x3ff80000
 8010194:	bff00000 	.word	0xbff00000
 8010198:	08010f50 	.word	0x08010f50
 801019c:	08010f30 	.word	0x08010f30

080101a0 <fabs>:
 80101a0:	ec51 0b10 	vmov	r0, r1, d0
 80101a4:	ee10 2a10 	vmov	r2, s0
 80101a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80101ac:	ec43 2b10 	vmov	d0, r2, r3
 80101b0:	4770      	bx	lr
	...

080101b4 <asin>:
 80101b4:	b538      	push	{r3, r4, r5, lr}
 80101b6:	ed2d 8b02 	vpush	{d8}
 80101ba:	ec55 4b10 	vmov	r4, r5, d0
 80101be:	f000 f86b 	bl	8010298 <__ieee754_asin>
 80101c2:	4b16      	ldr	r3, [pc, #88]	; (801021c <asin+0x68>)
 80101c4:	eeb0 8a40 	vmov.f32	s16, s0
 80101c8:	eef0 8a60 	vmov.f32	s17, s1
 80101cc:	f993 3000 	ldrsb.w	r3, [r3]
 80101d0:	3301      	adds	r3, #1
 80101d2:	d01c      	beq.n	801020e <asin+0x5a>
 80101d4:	4622      	mov	r2, r4
 80101d6:	462b      	mov	r3, r5
 80101d8:	4620      	mov	r0, r4
 80101da:	4629      	mov	r1, r5
 80101dc:	f7f0 fcc6 	bl	8000b6c <__aeabi_dcmpun>
 80101e0:	b9a8      	cbnz	r0, 801020e <asin+0x5a>
 80101e2:	ec45 4b10 	vmov	d0, r4, r5
 80101e6:	f7ff ffdb 	bl	80101a0 <fabs>
 80101ea:	4b0d      	ldr	r3, [pc, #52]	; (8010220 <asin+0x6c>)
 80101ec:	ec51 0b10 	vmov	r0, r1, d0
 80101f0:	2200      	movs	r2, #0
 80101f2:	f7f0 fcb1 	bl	8000b58 <__aeabi_dcmpgt>
 80101f6:	b150      	cbz	r0, 801020e <asin+0x5a>
 80101f8:	f7fb f9d2 	bl	800b5a0 <__errno>
 80101fc:	ecbd 8b02 	vpop	{d8}
 8010200:	2321      	movs	r3, #33	; 0x21
 8010202:	6003      	str	r3, [r0, #0]
 8010204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010208:	4806      	ldr	r0, [pc, #24]	; (8010224 <asin+0x70>)
 801020a:	f7ff b859 	b.w	800f2c0 <nan>
 801020e:	eeb0 0a48 	vmov.f32	s0, s16
 8010212:	eef0 0a68 	vmov.f32	s1, s17
 8010216:	ecbd 8b02 	vpop	{d8}
 801021a:	bd38      	pop	{r3, r4, r5, pc}
 801021c:	200005f8 	.word	0x200005f8
 8010220:	3ff00000 	.word	0x3ff00000
 8010224:	08010ec8 	.word	0x08010ec8

08010228 <atan2>:
 8010228:	f000 ba4a 	b.w	80106c0 <__ieee754_atan2>

0801022c <sqrt>:
 801022c:	b538      	push	{r3, r4, r5, lr}
 801022e:	ed2d 8b02 	vpush	{d8}
 8010232:	ec55 4b10 	vmov	r4, r5, d0
 8010236:	f000 fb0d 	bl	8010854 <__ieee754_sqrt>
 801023a:	4b15      	ldr	r3, [pc, #84]	; (8010290 <sqrt+0x64>)
 801023c:	eeb0 8a40 	vmov.f32	s16, s0
 8010240:	eef0 8a60 	vmov.f32	s17, s1
 8010244:	f993 3000 	ldrsb.w	r3, [r3]
 8010248:	3301      	adds	r3, #1
 801024a:	d019      	beq.n	8010280 <sqrt+0x54>
 801024c:	4622      	mov	r2, r4
 801024e:	462b      	mov	r3, r5
 8010250:	4620      	mov	r0, r4
 8010252:	4629      	mov	r1, r5
 8010254:	f7f0 fc8a 	bl	8000b6c <__aeabi_dcmpun>
 8010258:	b990      	cbnz	r0, 8010280 <sqrt+0x54>
 801025a:	2200      	movs	r2, #0
 801025c:	2300      	movs	r3, #0
 801025e:	4620      	mov	r0, r4
 8010260:	4629      	mov	r1, r5
 8010262:	f7f0 fc5b 	bl	8000b1c <__aeabi_dcmplt>
 8010266:	b158      	cbz	r0, 8010280 <sqrt+0x54>
 8010268:	f7fb f99a 	bl	800b5a0 <__errno>
 801026c:	2321      	movs	r3, #33	; 0x21
 801026e:	6003      	str	r3, [r0, #0]
 8010270:	2200      	movs	r2, #0
 8010272:	2300      	movs	r3, #0
 8010274:	4610      	mov	r0, r2
 8010276:	4619      	mov	r1, r3
 8010278:	f7f0 fb08 	bl	800088c <__aeabi_ddiv>
 801027c:	ec41 0b18 	vmov	d8, r0, r1
 8010280:	eeb0 0a48 	vmov.f32	s0, s16
 8010284:	eef0 0a68 	vmov.f32	s1, s17
 8010288:	ecbd 8b02 	vpop	{d8}
 801028c:	bd38      	pop	{r3, r4, r5, pc}
 801028e:	bf00      	nop
 8010290:	200005f8 	.word	0x200005f8
 8010294:	00000000 	.word	0x00000000

08010298 <__ieee754_asin>:
 8010298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801029c:	ed2d 8b04 	vpush	{d8-d9}
 80102a0:	ec55 4b10 	vmov	r4, r5, d0
 80102a4:	4bcc      	ldr	r3, [pc, #816]	; (80105d8 <__ieee754_asin+0x340>)
 80102a6:	b083      	sub	sp, #12
 80102a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80102ac:	4598      	cmp	r8, r3
 80102ae:	9501      	str	r5, [sp, #4]
 80102b0:	dd35      	ble.n	801031e <__ieee754_asin+0x86>
 80102b2:	ee10 3a10 	vmov	r3, s0
 80102b6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80102ba:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80102be:	ea58 0303 	orrs.w	r3, r8, r3
 80102c2:	d117      	bne.n	80102f4 <__ieee754_asin+0x5c>
 80102c4:	a3aa      	add	r3, pc, #680	; (adr r3, 8010570 <__ieee754_asin+0x2d8>)
 80102c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ca:	ee10 0a10 	vmov	r0, s0
 80102ce:	4629      	mov	r1, r5
 80102d0:	f7f0 f9b2 	bl	8000638 <__aeabi_dmul>
 80102d4:	a3a8      	add	r3, pc, #672	; (adr r3, 8010578 <__ieee754_asin+0x2e0>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	4606      	mov	r6, r0
 80102dc:	460f      	mov	r7, r1
 80102de:	4620      	mov	r0, r4
 80102e0:	4629      	mov	r1, r5
 80102e2:	f7f0 f9a9 	bl	8000638 <__aeabi_dmul>
 80102e6:	4602      	mov	r2, r0
 80102e8:	460b      	mov	r3, r1
 80102ea:	4630      	mov	r0, r6
 80102ec:	4639      	mov	r1, r7
 80102ee:	f7ef ffed 	bl	80002cc <__adddf3>
 80102f2:	e00b      	b.n	801030c <__ieee754_asin+0x74>
 80102f4:	ee10 2a10 	vmov	r2, s0
 80102f8:	462b      	mov	r3, r5
 80102fa:	ee10 0a10 	vmov	r0, s0
 80102fe:	4629      	mov	r1, r5
 8010300:	f7ef ffe2 	bl	80002c8 <__aeabi_dsub>
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	f7f0 fac0 	bl	800088c <__aeabi_ddiv>
 801030c:	4604      	mov	r4, r0
 801030e:	460d      	mov	r5, r1
 8010310:	ec45 4b10 	vmov	d0, r4, r5
 8010314:	b003      	add	sp, #12
 8010316:	ecbd 8b04 	vpop	{d8-d9}
 801031a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801031e:	4baf      	ldr	r3, [pc, #700]	; (80105dc <__ieee754_asin+0x344>)
 8010320:	4598      	cmp	r8, r3
 8010322:	dc11      	bgt.n	8010348 <__ieee754_asin+0xb0>
 8010324:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010328:	f280 80ae 	bge.w	8010488 <__ieee754_asin+0x1f0>
 801032c:	a394      	add	r3, pc, #592	; (adr r3, 8010580 <__ieee754_asin+0x2e8>)
 801032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010332:	ee10 0a10 	vmov	r0, s0
 8010336:	4629      	mov	r1, r5
 8010338:	f7ef ffc8 	bl	80002cc <__adddf3>
 801033c:	4ba8      	ldr	r3, [pc, #672]	; (80105e0 <__ieee754_asin+0x348>)
 801033e:	2200      	movs	r2, #0
 8010340:	f7f0 fc0a 	bl	8000b58 <__aeabi_dcmpgt>
 8010344:	2800      	cmp	r0, #0
 8010346:	d1e3      	bne.n	8010310 <__ieee754_asin+0x78>
 8010348:	ec45 4b10 	vmov	d0, r4, r5
 801034c:	f7ff ff28 	bl	80101a0 <fabs>
 8010350:	49a3      	ldr	r1, [pc, #652]	; (80105e0 <__ieee754_asin+0x348>)
 8010352:	ec53 2b10 	vmov	r2, r3, d0
 8010356:	2000      	movs	r0, #0
 8010358:	f7ef ffb6 	bl	80002c8 <__aeabi_dsub>
 801035c:	4ba1      	ldr	r3, [pc, #644]	; (80105e4 <__ieee754_asin+0x34c>)
 801035e:	2200      	movs	r2, #0
 8010360:	f7f0 f96a 	bl	8000638 <__aeabi_dmul>
 8010364:	a388      	add	r3, pc, #544	; (adr r3, 8010588 <__ieee754_asin+0x2f0>)
 8010366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036a:	4604      	mov	r4, r0
 801036c:	460d      	mov	r5, r1
 801036e:	f7f0 f963 	bl	8000638 <__aeabi_dmul>
 8010372:	a387      	add	r3, pc, #540	; (adr r3, 8010590 <__ieee754_asin+0x2f8>)
 8010374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010378:	f7ef ffa8 	bl	80002cc <__adddf3>
 801037c:	4622      	mov	r2, r4
 801037e:	462b      	mov	r3, r5
 8010380:	f7f0 f95a 	bl	8000638 <__aeabi_dmul>
 8010384:	a384      	add	r3, pc, #528	; (adr r3, 8010598 <__ieee754_asin+0x300>)
 8010386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038a:	f7ef ff9d 	bl	80002c8 <__aeabi_dsub>
 801038e:	4622      	mov	r2, r4
 8010390:	462b      	mov	r3, r5
 8010392:	f7f0 f951 	bl	8000638 <__aeabi_dmul>
 8010396:	a382      	add	r3, pc, #520	; (adr r3, 80105a0 <__ieee754_asin+0x308>)
 8010398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039c:	f7ef ff96 	bl	80002cc <__adddf3>
 80103a0:	4622      	mov	r2, r4
 80103a2:	462b      	mov	r3, r5
 80103a4:	f7f0 f948 	bl	8000638 <__aeabi_dmul>
 80103a8:	a37f      	add	r3, pc, #508	; (adr r3, 80105a8 <__ieee754_asin+0x310>)
 80103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ae:	f7ef ff8b 	bl	80002c8 <__aeabi_dsub>
 80103b2:	4622      	mov	r2, r4
 80103b4:	462b      	mov	r3, r5
 80103b6:	f7f0 f93f 	bl	8000638 <__aeabi_dmul>
 80103ba:	a37d      	add	r3, pc, #500	; (adr r3, 80105b0 <__ieee754_asin+0x318>)
 80103bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c0:	f7ef ff84 	bl	80002cc <__adddf3>
 80103c4:	4622      	mov	r2, r4
 80103c6:	462b      	mov	r3, r5
 80103c8:	f7f0 f936 	bl	8000638 <__aeabi_dmul>
 80103cc:	a37a      	add	r3, pc, #488	; (adr r3, 80105b8 <__ieee754_asin+0x320>)
 80103ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d2:	ec41 0b18 	vmov	d8, r0, r1
 80103d6:	4620      	mov	r0, r4
 80103d8:	4629      	mov	r1, r5
 80103da:	f7f0 f92d 	bl	8000638 <__aeabi_dmul>
 80103de:	a378      	add	r3, pc, #480	; (adr r3, 80105c0 <__ieee754_asin+0x328>)
 80103e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e4:	f7ef ff70 	bl	80002c8 <__aeabi_dsub>
 80103e8:	4622      	mov	r2, r4
 80103ea:	462b      	mov	r3, r5
 80103ec:	f7f0 f924 	bl	8000638 <__aeabi_dmul>
 80103f0:	a375      	add	r3, pc, #468	; (adr r3, 80105c8 <__ieee754_asin+0x330>)
 80103f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f6:	f7ef ff69 	bl	80002cc <__adddf3>
 80103fa:	4622      	mov	r2, r4
 80103fc:	462b      	mov	r3, r5
 80103fe:	f7f0 f91b 	bl	8000638 <__aeabi_dmul>
 8010402:	a373      	add	r3, pc, #460	; (adr r3, 80105d0 <__ieee754_asin+0x338>)
 8010404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010408:	f7ef ff5e 	bl	80002c8 <__aeabi_dsub>
 801040c:	4622      	mov	r2, r4
 801040e:	462b      	mov	r3, r5
 8010410:	f7f0 f912 	bl	8000638 <__aeabi_dmul>
 8010414:	4b72      	ldr	r3, [pc, #456]	; (80105e0 <__ieee754_asin+0x348>)
 8010416:	2200      	movs	r2, #0
 8010418:	f7ef ff58 	bl	80002cc <__adddf3>
 801041c:	ec45 4b10 	vmov	d0, r4, r5
 8010420:	4606      	mov	r6, r0
 8010422:	460f      	mov	r7, r1
 8010424:	f000 fa16 	bl	8010854 <__ieee754_sqrt>
 8010428:	4b6f      	ldr	r3, [pc, #444]	; (80105e8 <__ieee754_asin+0x350>)
 801042a:	4598      	cmp	r8, r3
 801042c:	ec5b ab10 	vmov	sl, fp, d0
 8010430:	f340 80dc 	ble.w	80105ec <__ieee754_asin+0x354>
 8010434:	4632      	mov	r2, r6
 8010436:	463b      	mov	r3, r7
 8010438:	ec51 0b18 	vmov	r0, r1, d8
 801043c:	f7f0 fa26 	bl	800088c <__aeabi_ddiv>
 8010440:	4652      	mov	r2, sl
 8010442:	465b      	mov	r3, fp
 8010444:	f7f0 f8f8 	bl	8000638 <__aeabi_dmul>
 8010448:	4652      	mov	r2, sl
 801044a:	465b      	mov	r3, fp
 801044c:	f7ef ff3e 	bl	80002cc <__adddf3>
 8010450:	4602      	mov	r2, r0
 8010452:	460b      	mov	r3, r1
 8010454:	f7ef ff3a 	bl	80002cc <__adddf3>
 8010458:	a347      	add	r3, pc, #284	; (adr r3, 8010578 <__ieee754_asin+0x2e0>)
 801045a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045e:	f7ef ff33 	bl	80002c8 <__aeabi_dsub>
 8010462:	4602      	mov	r2, r0
 8010464:	460b      	mov	r3, r1
 8010466:	a142      	add	r1, pc, #264	; (adr r1, 8010570 <__ieee754_asin+0x2d8>)
 8010468:	e9d1 0100 	ldrd	r0, r1, [r1]
 801046c:	f7ef ff2c 	bl	80002c8 <__aeabi_dsub>
 8010470:	9b01      	ldr	r3, [sp, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	bfdc      	itt	le
 8010476:	4602      	movle	r2, r0
 8010478:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801047c:	4604      	mov	r4, r0
 801047e:	460d      	mov	r5, r1
 8010480:	bfdc      	itt	le
 8010482:	4614      	movle	r4, r2
 8010484:	461d      	movle	r5, r3
 8010486:	e743      	b.n	8010310 <__ieee754_asin+0x78>
 8010488:	ee10 2a10 	vmov	r2, s0
 801048c:	ee10 0a10 	vmov	r0, s0
 8010490:	462b      	mov	r3, r5
 8010492:	4629      	mov	r1, r5
 8010494:	f7f0 f8d0 	bl	8000638 <__aeabi_dmul>
 8010498:	a33b      	add	r3, pc, #236	; (adr r3, 8010588 <__ieee754_asin+0x2f0>)
 801049a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801049e:	4606      	mov	r6, r0
 80104a0:	460f      	mov	r7, r1
 80104a2:	f7f0 f8c9 	bl	8000638 <__aeabi_dmul>
 80104a6:	a33a      	add	r3, pc, #232	; (adr r3, 8010590 <__ieee754_asin+0x2f8>)
 80104a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ac:	f7ef ff0e 	bl	80002cc <__adddf3>
 80104b0:	4632      	mov	r2, r6
 80104b2:	463b      	mov	r3, r7
 80104b4:	f7f0 f8c0 	bl	8000638 <__aeabi_dmul>
 80104b8:	a337      	add	r3, pc, #220	; (adr r3, 8010598 <__ieee754_asin+0x300>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	f7ef ff03 	bl	80002c8 <__aeabi_dsub>
 80104c2:	4632      	mov	r2, r6
 80104c4:	463b      	mov	r3, r7
 80104c6:	f7f0 f8b7 	bl	8000638 <__aeabi_dmul>
 80104ca:	a335      	add	r3, pc, #212	; (adr r3, 80105a0 <__ieee754_asin+0x308>)
 80104cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d0:	f7ef fefc 	bl	80002cc <__adddf3>
 80104d4:	4632      	mov	r2, r6
 80104d6:	463b      	mov	r3, r7
 80104d8:	f7f0 f8ae 	bl	8000638 <__aeabi_dmul>
 80104dc:	a332      	add	r3, pc, #200	; (adr r3, 80105a8 <__ieee754_asin+0x310>)
 80104de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e2:	f7ef fef1 	bl	80002c8 <__aeabi_dsub>
 80104e6:	4632      	mov	r2, r6
 80104e8:	463b      	mov	r3, r7
 80104ea:	f7f0 f8a5 	bl	8000638 <__aeabi_dmul>
 80104ee:	a330      	add	r3, pc, #192	; (adr r3, 80105b0 <__ieee754_asin+0x318>)
 80104f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f4:	f7ef feea 	bl	80002cc <__adddf3>
 80104f8:	4632      	mov	r2, r6
 80104fa:	463b      	mov	r3, r7
 80104fc:	f7f0 f89c 	bl	8000638 <__aeabi_dmul>
 8010500:	a32d      	add	r3, pc, #180	; (adr r3, 80105b8 <__ieee754_asin+0x320>)
 8010502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010506:	4680      	mov	r8, r0
 8010508:	4689      	mov	r9, r1
 801050a:	4630      	mov	r0, r6
 801050c:	4639      	mov	r1, r7
 801050e:	f7f0 f893 	bl	8000638 <__aeabi_dmul>
 8010512:	a32b      	add	r3, pc, #172	; (adr r3, 80105c0 <__ieee754_asin+0x328>)
 8010514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010518:	f7ef fed6 	bl	80002c8 <__aeabi_dsub>
 801051c:	4632      	mov	r2, r6
 801051e:	463b      	mov	r3, r7
 8010520:	f7f0 f88a 	bl	8000638 <__aeabi_dmul>
 8010524:	a328      	add	r3, pc, #160	; (adr r3, 80105c8 <__ieee754_asin+0x330>)
 8010526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052a:	f7ef fecf 	bl	80002cc <__adddf3>
 801052e:	4632      	mov	r2, r6
 8010530:	463b      	mov	r3, r7
 8010532:	f7f0 f881 	bl	8000638 <__aeabi_dmul>
 8010536:	a326      	add	r3, pc, #152	; (adr r3, 80105d0 <__ieee754_asin+0x338>)
 8010538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053c:	f7ef fec4 	bl	80002c8 <__aeabi_dsub>
 8010540:	4632      	mov	r2, r6
 8010542:	463b      	mov	r3, r7
 8010544:	f7f0 f878 	bl	8000638 <__aeabi_dmul>
 8010548:	4b25      	ldr	r3, [pc, #148]	; (80105e0 <__ieee754_asin+0x348>)
 801054a:	2200      	movs	r2, #0
 801054c:	f7ef febe 	bl	80002cc <__adddf3>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	4640      	mov	r0, r8
 8010556:	4649      	mov	r1, r9
 8010558:	f7f0 f998 	bl	800088c <__aeabi_ddiv>
 801055c:	4622      	mov	r2, r4
 801055e:	462b      	mov	r3, r5
 8010560:	f7f0 f86a 	bl	8000638 <__aeabi_dmul>
 8010564:	4602      	mov	r2, r0
 8010566:	460b      	mov	r3, r1
 8010568:	4620      	mov	r0, r4
 801056a:	4629      	mov	r1, r5
 801056c:	e6bf      	b.n	80102ee <__ieee754_asin+0x56>
 801056e:	bf00      	nop
 8010570:	54442d18 	.word	0x54442d18
 8010574:	3ff921fb 	.word	0x3ff921fb
 8010578:	33145c07 	.word	0x33145c07
 801057c:	3c91a626 	.word	0x3c91a626
 8010580:	8800759c 	.word	0x8800759c
 8010584:	7e37e43c 	.word	0x7e37e43c
 8010588:	0dfdf709 	.word	0x0dfdf709
 801058c:	3f023de1 	.word	0x3f023de1
 8010590:	7501b288 	.word	0x7501b288
 8010594:	3f49efe0 	.word	0x3f49efe0
 8010598:	b5688f3b 	.word	0xb5688f3b
 801059c:	3fa48228 	.word	0x3fa48228
 80105a0:	0e884455 	.word	0x0e884455
 80105a4:	3fc9c155 	.word	0x3fc9c155
 80105a8:	03eb6f7d 	.word	0x03eb6f7d
 80105ac:	3fd4d612 	.word	0x3fd4d612
 80105b0:	55555555 	.word	0x55555555
 80105b4:	3fc55555 	.word	0x3fc55555
 80105b8:	b12e9282 	.word	0xb12e9282
 80105bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80105c0:	1b8d0159 	.word	0x1b8d0159
 80105c4:	3fe6066c 	.word	0x3fe6066c
 80105c8:	9c598ac8 	.word	0x9c598ac8
 80105cc:	40002ae5 	.word	0x40002ae5
 80105d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80105d4:	40033a27 	.word	0x40033a27
 80105d8:	3fefffff 	.word	0x3fefffff
 80105dc:	3fdfffff 	.word	0x3fdfffff
 80105e0:	3ff00000 	.word	0x3ff00000
 80105e4:	3fe00000 	.word	0x3fe00000
 80105e8:	3fef3332 	.word	0x3fef3332
 80105ec:	ee10 2a10 	vmov	r2, s0
 80105f0:	ee10 0a10 	vmov	r0, s0
 80105f4:	465b      	mov	r3, fp
 80105f6:	4659      	mov	r1, fp
 80105f8:	f7ef fe68 	bl	80002cc <__adddf3>
 80105fc:	4632      	mov	r2, r6
 80105fe:	463b      	mov	r3, r7
 8010600:	ec41 0b19 	vmov	d9, r0, r1
 8010604:	ec51 0b18 	vmov	r0, r1, d8
 8010608:	f7f0 f940 	bl	800088c <__aeabi_ddiv>
 801060c:	4602      	mov	r2, r0
 801060e:	460b      	mov	r3, r1
 8010610:	ec51 0b19 	vmov	r0, r1, d9
 8010614:	f7f0 f810 	bl	8000638 <__aeabi_dmul>
 8010618:	f04f 0800 	mov.w	r8, #0
 801061c:	4606      	mov	r6, r0
 801061e:	460f      	mov	r7, r1
 8010620:	4642      	mov	r2, r8
 8010622:	465b      	mov	r3, fp
 8010624:	4640      	mov	r0, r8
 8010626:	4659      	mov	r1, fp
 8010628:	f7f0 f806 	bl	8000638 <__aeabi_dmul>
 801062c:	4602      	mov	r2, r0
 801062e:	460b      	mov	r3, r1
 8010630:	4620      	mov	r0, r4
 8010632:	4629      	mov	r1, r5
 8010634:	f7ef fe48 	bl	80002c8 <__aeabi_dsub>
 8010638:	4642      	mov	r2, r8
 801063a:	4604      	mov	r4, r0
 801063c:	460d      	mov	r5, r1
 801063e:	465b      	mov	r3, fp
 8010640:	4650      	mov	r0, sl
 8010642:	4659      	mov	r1, fp
 8010644:	f7ef fe42 	bl	80002cc <__adddf3>
 8010648:	4602      	mov	r2, r0
 801064a:	460b      	mov	r3, r1
 801064c:	4620      	mov	r0, r4
 801064e:	4629      	mov	r1, r5
 8010650:	f7f0 f91c 	bl	800088c <__aeabi_ddiv>
 8010654:	4602      	mov	r2, r0
 8010656:	460b      	mov	r3, r1
 8010658:	f7ef fe38 	bl	80002cc <__adddf3>
 801065c:	4602      	mov	r2, r0
 801065e:	460b      	mov	r3, r1
 8010660:	a113      	add	r1, pc, #76	; (adr r1, 80106b0 <__ieee754_asin+0x418>)
 8010662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010666:	f7ef fe2f 	bl	80002c8 <__aeabi_dsub>
 801066a:	4602      	mov	r2, r0
 801066c:	460b      	mov	r3, r1
 801066e:	4630      	mov	r0, r6
 8010670:	4639      	mov	r1, r7
 8010672:	f7ef fe29 	bl	80002c8 <__aeabi_dsub>
 8010676:	4642      	mov	r2, r8
 8010678:	4604      	mov	r4, r0
 801067a:	460d      	mov	r5, r1
 801067c:	465b      	mov	r3, fp
 801067e:	4640      	mov	r0, r8
 8010680:	4659      	mov	r1, fp
 8010682:	f7ef fe23 	bl	80002cc <__adddf3>
 8010686:	4602      	mov	r2, r0
 8010688:	460b      	mov	r3, r1
 801068a:	a10b      	add	r1, pc, #44	; (adr r1, 80106b8 <__ieee754_asin+0x420>)
 801068c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010690:	f7ef fe1a 	bl	80002c8 <__aeabi_dsub>
 8010694:	4602      	mov	r2, r0
 8010696:	460b      	mov	r3, r1
 8010698:	4620      	mov	r0, r4
 801069a:	4629      	mov	r1, r5
 801069c:	f7ef fe14 	bl	80002c8 <__aeabi_dsub>
 80106a0:	4602      	mov	r2, r0
 80106a2:	460b      	mov	r3, r1
 80106a4:	a104      	add	r1, pc, #16	; (adr r1, 80106b8 <__ieee754_asin+0x420>)
 80106a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106aa:	e6df      	b.n	801046c <__ieee754_asin+0x1d4>
 80106ac:	f3af 8000 	nop.w
 80106b0:	33145c07 	.word	0x33145c07
 80106b4:	3c91a626 	.word	0x3c91a626
 80106b8:	54442d18 	.word	0x54442d18
 80106bc:	3fe921fb 	.word	0x3fe921fb

080106c0 <__ieee754_atan2>:
 80106c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106c4:	ec57 6b11 	vmov	r6, r7, d1
 80106c8:	4273      	negs	r3, r6
 80106ca:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010850 <__ieee754_atan2+0x190>
 80106ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80106d2:	4333      	orrs	r3, r6
 80106d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80106d8:	4573      	cmp	r3, lr
 80106da:	ec51 0b10 	vmov	r0, r1, d0
 80106de:	ee11 8a10 	vmov	r8, s2
 80106e2:	d80a      	bhi.n	80106fa <__ieee754_atan2+0x3a>
 80106e4:	4244      	negs	r4, r0
 80106e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80106ea:	4304      	orrs	r4, r0
 80106ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80106f0:	4574      	cmp	r4, lr
 80106f2:	ee10 9a10 	vmov	r9, s0
 80106f6:	468c      	mov	ip, r1
 80106f8:	d907      	bls.n	801070a <__ieee754_atan2+0x4a>
 80106fa:	4632      	mov	r2, r6
 80106fc:	463b      	mov	r3, r7
 80106fe:	f7ef fde5 	bl	80002cc <__adddf3>
 8010702:	ec41 0b10 	vmov	d0, r0, r1
 8010706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801070a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801070e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010712:	4334      	orrs	r4, r6
 8010714:	d103      	bne.n	801071e <__ieee754_atan2+0x5e>
 8010716:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801071a:	f7ff bba1 	b.w	800fe60 <atan>
 801071e:	17bc      	asrs	r4, r7, #30
 8010720:	f004 0402 	and.w	r4, r4, #2
 8010724:	ea53 0909 	orrs.w	r9, r3, r9
 8010728:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801072c:	d107      	bne.n	801073e <__ieee754_atan2+0x7e>
 801072e:	2c02      	cmp	r4, #2
 8010730:	d060      	beq.n	80107f4 <__ieee754_atan2+0x134>
 8010732:	2c03      	cmp	r4, #3
 8010734:	d1e5      	bne.n	8010702 <__ieee754_atan2+0x42>
 8010736:	a142      	add	r1, pc, #264	; (adr r1, 8010840 <__ieee754_atan2+0x180>)
 8010738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801073c:	e7e1      	b.n	8010702 <__ieee754_atan2+0x42>
 801073e:	ea52 0808 	orrs.w	r8, r2, r8
 8010742:	d106      	bne.n	8010752 <__ieee754_atan2+0x92>
 8010744:	f1bc 0f00 	cmp.w	ip, #0
 8010748:	da5f      	bge.n	801080a <__ieee754_atan2+0x14a>
 801074a:	a13f      	add	r1, pc, #252	; (adr r1, 8010848 <__ieee754_atan2+0x188>)
 801074c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010750:	e7d7      	b.n	8010702 <__ieee754_atan2+0x42>
 8010752:	4572      	cmp	r2, lr
 8010754:	d10f      	bne.n	8010776 <__ieee754_atan2+0xb6>
 8010756:	4293      	cmp	r3, r2
 8010758:	f104 34ff 	add.w	r4, r4, #4294967295
 801075c:	d107      	bne.n	801076e <__ieee754_atan2+0xae>
 801075e:	2c02      	cmp	r4, #2
 8010760:	d84c      	bhi.n	80107fc <__ieee754_atan2+0x13c>
 8010762:	4b35      	ldr	r3, [pc, #212]	; (8010838 <__ieee754_atan2+0x178>)
 8010764:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010768:	e9d4 0100 	ldrd	r0, r1, [r4]
 801076c:	e7c9      	b.n	8010702 <__ieee754_atan2+0x42>
 801076e:	2c02      	cmp	r4, #2
 8010770:	d848      	bhi.n	8010804 <__ieee754_atan2+0x144>
 8010772:	4b32      	ldr	r3, [pc, #200]	; (801083c <__ieee754_atan2+0x17c>)
 8010774:	e7f6      	b.n	8010764 <__ieee754_atan2+0xa4>
 8010776:	4573      	cmp	r3, lr
 8010778:	d0e4      	beq.n	8010744 <__ieee754_atan2+0x84>
 801077a:	1a9b      	subs	r3, r3, r2
 801077c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010780:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010784:	da1e      	bge.n	80107c4 <__ieee754_atan2+0x104>
 8010786:	2f00      	cmp	r7, #0
 8010788:	da01      	bge.n	801078e <__ieee754_atan2+0xce>
 801078a:	323c      	adds	r2, #60	; 0x3c
 801078c:	db1e      	blt.n	80107cc <__ieee754_atan2+0x10c>
 801078e:	4632      	mov	r2, r6
 8010790:	463b      	mov	r3, r7
 8010792:	f7f0 f87b 	bl	800088c <__aeabi_ddiv>
 8010796:	ec41 0b10 	vmov	d0, r0, r1
 801079a:	f7ff fd01 	bl	80101a0 <fabs>
 801079e:	f7ff fb5f 	bl	800fe60 <atan>
 80107a2:	ec51 0b10 	vmov	r0, r1, d0
 80107a6:	2c01      	cmp	r4, #1
 80107a8:	d013      	beq.n	80107d2 <__ieee754_atan2+0x112>
 80107aa:	2c02      	cmp	r4, #2
 80107ac:	d015      	beq.n	80107da <__ieee754_atan2+0x11a>
 80107ae:	2c00      	cmp	r4, #0
 80107b0:	d0a7      	beq.n	8010702 <__ieee754_atan2+0x42>
 80107b2:	a319      	add	r3, pc, #100	; (adr r3, 8010818 <__ieee754_atan2+0x158>)
 80107b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b8:	f7ef fd86 	bl	80002c8 <__aeabi_dsub>
 80107bc:	a318      	add	r3, pc, #96	; (adr r3, 8010820 <__ieee754_atan2+0x160>)
 80107be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c2:	e014      	b.n	80107ee <__ieee754_atan2+0x12e>
 80107c4:	a118      	add	r1, pc, #96	; (adr r1, 8010828 <__ieee754_atan2+0x168>)
 80107c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107ca:	e7ec      	b.n	80107a6 <__ieee754_atan2+0xe6>
 80107cc:	2000      	movs	r0, #0
 80107ce:	2100      	movs	r1, #0
 80107d0:	e7e9      	b.n	80107a6 <__ieee754_atan2+0xe6>
 80107d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107d6:	4619      	mov	r1, r3
 80107d8:	e793      	b.n	8010702 <__ieee754_atan2+0x42>
 80107da:	a30f      	add	r3, pc, #60	; (adr r3, 8010818 <__ieee754_atan2+0x158>)
 80107dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e0:	f7ef fd72 	bl	80002c8 <__aeabi_dsub>
 80107e4:	4602      	mov	r2, r0
 80107e6:	460b      	mov	r3, r1
 80107e8:	a10d      	add	r1, pc, #52	; (adr r1, 8010820 <__ieee754_atan2+0x160>)
 80107ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107ee:	f7ef fd6b 	bl	80002c8 <__aeabi_dsub>
 80107f2:	e786      	b.n	8010702 <__ieee754_atan2+0x42>
 80107f4:	a10a      	add	r1, pc, #40	; (adr r1, 8010820 <__ieee754_atan2+0x160>)
 80107f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107fa:	e782      	b.n	8010702 <__ieee754_atan2+0x42>
 80107fc:	a10c      	add	r1, pc, #48	; (adr r1, 8010830 <__ieee754_atan2+0x170>)
 80107fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010802:	e77e      	b.n	8010702 <__ieee754_atan2+0x42>
 8010804:	2000      	movs	r0, #0
 8010806:	2100      	movs	r1, #0
 8010808:	e77b      	b.n	8010702 <__ieee754_atan2+0x42>
 801080a:	a107      	add	r1, pc, #28	; (adr r1, 8010828 <__ieee754_atan2+0x168>)
 801080c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010810:	e777      	b.n	8010702 <__ieee754_atan2+0x42>
 8010812:	bf00      	nop
 8010814:	f3af 8000 	nop.w
 8010818:	33145c07 	.word	0x33145c07
 801081c:	3ca1a626 	.word	0x3ca1a626
 8010820:	54442d18 	.word	0x54442d18
 8010824:	400921fb 	.word	0x400921fb
 8010828:	54442d18 	.word	0x54442d18
 801082c:	3ff921fb 	.word	0x3ff921fb
 8010830:	54442d18 	.word	0x54442d18
 8010834:	3fe921fb 	.word	0x3fe921fb
 8010838:	08010f70 	.word	0x08010f70
 801083c:	08010f88 	.word	0x08010f88
 8010840:	54442d18 	.word	0x54442d18
 8010844:	c00921fb 	.word	0xc00921fb
 8010848:	54442d18 	.word	0x54442d18
 801084c:	bff921fb 	.word	0xbff921fb
 8010850:	7ff00000 	.word	0x7ff00000

08010854 <__ieee754_sqrt>:
 8010854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010858:	ec55 4b10 	vmov	r4, r5, d0
 801085c:	4e56      	ldr	r6, [pc, #344]	; (80109b8 <__ieee754_sqrt+0x164>)
 801085e:	43ae      	bics	r6, r5
 8010860:	ee10 0a10 	vmov	r0, s0
 8010864:	ee10 3a10 	vmov	r3, s0
 8010868:	4629      	mov	r1, r5
 801086a:	462a      	mov	r2, r5
 801086c:	d110      	bne.n	8010890 <__ieee754_sqrt+0x3c>
 801086e:	ee10 2a10 	vmov	r2, s0
 8010872:	462b      	mov	r3, r5
 8010874:	f7ef fee0 	bl	8000638 <__aeabi_dmul>
 8010878:	4602      	mov	r2, r0
 801087a:	460b      	mov	r3, r1
 801087c:	4620      	mov	r0, r4
 801087e:	4629      	mov	r1, r5
 8010880:	f7ef fd24 	bl	80002cc <__adddf3>
 8010884:	4604      	mov	r4, r0
 8010886:	460d      	mov	r5, r1
 8010888:	ec45 4b10 	vmov	d0, r4, r5
 801088c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010890:	2d00      	cmp	r5, #0
 8010892:	dc10      	bgt.n	80108b6 <__ieee754_sqrt+0x62>
 8010894:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010898:	4330      	orrs	r0, r6
 801089a:	d0f5      	beq.n	8010888 <__ieee754_sqrt+0x34>
 801089c:	b15d      	cbz	r5, 80108b6 <__ieee754_sqrt+0x62>
 801089e:	ee10 2a10 	vmov	r2, s0
 80108a2:	462b      	mov	r3, r5
 80108a4:	ee10 0a10 	vmov	r0, s0
 80108a8:	f7ef fd0e 	bl	80002c8 <__aeabi_dsub>
 80108ac:	4602      	mov	r2, r0
 80108ae:	460b      	mov	r3, r1
 80108b0:	f7ef ffec 	bl	800088c <__aeabi_ddiv>
 80108b4:	e7e6      	b.n	8010884 <__ieee754_sqrt+0x30>
 80108b6:	1509      	asrs	r1, r1, #20
 80108b8:	d076      	beq.n	80109a8 <__ieee754_sqrt+0x154>
 80108ba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80108be:	07ce      	lsls	r6, r1, #31
 80108c0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80108c4:	bf5e      	ittt	pl
 80108c6:	0fda      	lsrpl	r2, r3, #31
 80108c8:	005b      	lslpl	r3, r3, #1
 80108ca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80108ce:	0fda      	lsrs	r2, r3, #31
 80108d0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80108d4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80108d8:	2000      	movs	r0, #0
 80108da:	106d      	asrs	r5, r5, #1
 80108dc:	005b      	lsls	r3, r3, #1
 80108de:	f04f 0e16 	mov.w	lr, #22
 80108e2:	4684      	mov	ip, r0
 80108e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80108e8:	eb0c 0401 	add.w	r4, ip, r1
 80108ec:	4294      	cmp	r4, r2
 80108ee:	bfde      	ittt	le
 80108f0:	1b12      	suble	r2, r2, r4
 80108f2:	eb04 0c01 	addle.w	ip, r4, r1
 80108f6:	1840      	addle	r0, r0, r1
 80108f8:	0052      	lsls	r2, r2, #1
 80108fa:	f1be 0e01 	subs.w	lr, lr, #1
 80108fe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010902:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010906:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801090a:	d1ed      	bne.n	80108e8 <__ieee754_sqrt+0x94>
 801090c:	4671      	mov	r1, lr
 801090e:	2720      	movs	r7, #32
 8010910:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010914:	4562      	cmp	r2, ip
 8010916:	eb04 060e 	add.w	r6, r4, lr
 801091a:	dc02      	bgt.n	8010922 <__ieee754_sqrt+0xce>
 801091c:	d113      	bne.n	8010946 <__ieee754_sqrt+0xf2>
 801091e:	429e      	cmp	r6, r3
 8010920:	d811      	bhi.n	8010946 <__ieee754_sqrt+0xf2>
 8010922:	2e00      	cmp	r6, #0
 8010924:	eb06 0e04 	add.w	lr, r6, r4
 8010928:	da43      	bge.n	80109b2 <__ieee754_sqrt+0x15e>
 801092a:	f1be 0f00 	cmp.w	lr, #0
 801092e:	db40      	blt.n	80109b2 <__ieee754_sqrt+0x15e>
 8010930:	f10c 0801 	add.w	r8, ip, #1
 8010934:	eba2 020c 	sub.w	r2, r2, ip
 8010938:	429e      	cmp	r6, r3
 801093a:	bf88      	it	hi
 801093c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010940:	1b9b      	subs	r3, r3, r6
 8010942:	4421      	add	r1, r4
 8010944:	46c4      	mov	ip, r8
 8010946:	0052      	lsls	r2, r2, #1
 8010948:	3f01      	subs	r7, #1
 801094a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801094e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010952:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010956:	d1dd      	bne.n	8010914 <__ieee754_sqrt+0xc0>
 8010958:	4313      	orrs	r3, r2
 801095a:	d006      	beq.n	801096a <__ieee754_sqrt+0x116>
 801095c:	1c4c      	adds	r4, r1, #1
 801095e:	bf13      	iteet	ne
 8010960:	3101      	addne	r1, #1
 8010962:	3001      	addeq	r0, #1
 8010964:	4639      	moveq	r1, r7
 8010966:	f021 0101 	bicne.w	r1, r1, #1
 801096a:	1043      	asrs	r3, r0, #1
 801096c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010970:	0849      	lsrs	r1, r1, #1
 8010972:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010976:	07c2      	lsls	r2, r0, #31
 8010978:	bf48      	it	mi
 801097a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801097e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8010982:	460c      	mov	r4, r1
 8010984:	463d      	mov	r5, r7
 8010986:	e77f      	b.n	8010888 <__ieee754_sqrt+0x34>
 8010988:	0ada      	lsrs	r2, r3, #11
 801098a:	3815      	subs	r0, #21
 801098c:	055b      	lsls	r3, r3, #21
 801098e:	2a00      	cmp	r2, #0
 8010990:	d0fa      	beq.n	8010988 <__ieee754_sqrt+0x134>
 8010992:	02d7      	lsls	r7, r2, #11
 8010994:	d50a      	bpl.n	80109ac <__ieee754_sqrt+0x158>
 8010996:	f1c1 0420 	rsb	r4, r1, #32
 801099a:	fa23 f404 	lsr.w	r4, r3, r4
 801099e:	1e4d      	subs	r5, r1, #1
 80109a0:	408b      	lsls	r3, r1
 80109a2:	4322      	orrs	r2, r4
 80109a4:	1b41      	subs	r1, r0, r5
 80109a6:	e788      	b.n	80108ba <__ieee754_sqrt+0x66>
 80109a8:	4608      	mov	r0, r1
 80109aa:	e7f0      	b.n	801098e <__ieee754_sqrt+0x13a>
 80109ac:	0052      	lsls	r2, r2, #1
 80109ae:	3101      	adds	r1, #1
 80109b0:	e7ef      	b.n	8010992 <__ieee754_sqrt+0x13e>
 80109b2:	46e0      	mov	r8, ip
 80109b4:	e7be      	b.n	8010934 <__ieee754_sqrt+0xe0>
 80109b6:	bf00      	nop
 80109b8:	7ff00000 	.word	0x7ff00000

080109bc <_init>:
 80109bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109be:	bf00      	nop
 80109c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109c2:	bc08      	pop	{r3}
 80109c4:	469e      	mov	lr, r3
 80109c6:	4770      	bx	lr

080109c8 <_fini>:
 80109c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ca:	bf00      	nop
 80109cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ce:	bc08      	pop	{r3}
 80109d0:	469e      	mov	lr, r3
 80109d2:	4770      	bx	lr
